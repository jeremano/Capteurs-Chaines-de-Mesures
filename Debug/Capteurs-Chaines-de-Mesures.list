
Capteurs-Chaines-de-Mesures.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028cc  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002aac  08002aac  00012aac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ae4  08002ae4  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08002ae4  08002ae4  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ae4  08002ae4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ae4  08002ae4  00012ae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ae8  08002ae8  00012ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002aec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d78  20000010  08002afc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d88  08002afc  00020d88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f2f  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f8f  00000000  00000000  00028f6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a50  00000000  00000000  0002af00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000948  00000000  00000000  0002b950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e0ba  00000000  00000000  0002c298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000abcf  00000000  00000000  0004a352  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b9260  00000000  00000000  00054f21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010e181  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002754  00000000  00000000  0010e1d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000010 	.word	0x20000010
 80001fc:	00000000 	.word	0x00000000
 8000200:	08002a94 	.word	0x08002a94

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000014 	.word	0x20000014
 800021c:	08002a94 	.word	0x08002a94

08000220 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000220:	b5b0      	push	{r4, r5, r7, lr}
 8000222:	b086      	sub	sp, #24
 8000224:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000226:	4b09      	ldr	r3, [pc, #36]	; (800024c <MX_FREERTOS_Init+0x2c>)
 8000228:	1d3c      	adds	r4, r7, #4
 800022a:	461d      	mov	r5, r3
 800022c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800022e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000230:	682b      	ldr	r3, [r5, #0]
 8000232:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000234:	1d3b      	adds	r3, r7, #4
 8000236:	2100      	movs	r1, #0
 8000238:	4618      	mov	r0, r3
 800023a:	f001 fa72 	bl	8001722 <osThreadCreate>
 800023e:	4603      	mov	r3, r0
 8000240:	4a03      	ldr	r2, [pc, #12]	; (8000250 <MX_FREERTOS_Init+0x30>)
 8000242:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000244:	bf00      	nop
 8000246:	3718      	adds	r7, #24
 8000248:	46bd      	mov	sp, r7
 800024a:	bdb0      	pop	{r4, r5, r7, pc}
 800024c:	08002ab8 	.word	0x08002ab8
 8000250:	2000002c 	.word	0x2000002c

08000254 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b082      	sub	sp, #8
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800025c:	2001      	movs	r0, #1
 800025e:	f001 fa87 	bl	8001770 <osDelay>
 8000262:	e7fb      	b.n	800025c <StartDefaultTask+0x8>

08000264 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> LPUART1_TX
     PA3   ------> LPUART1_RX
*/
void MX_GPIO_Init(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b08a      	sub	sp, #40	; 0x28
 8000268:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800026a:	f107 0314 	add.w	r3, r7, #20
 800026e:	2200      	movs	r2, #0
 8000270:	601a      	str	r2, [r3, #0]
 8000272:	605a      	str	r2, [r3, #4]
 8000274:	609a      	str	r2, [r3, #8]
 8000276:	60da      	str	r2, [r3, #12]
 8000278:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800027a:	4b34      	ldr	r3, [pc, #208]	; (800034c <MX_GPIO_Init+0xe8>)
 800027c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800027e:	4a33      	ldr	r2, [pc, #204]	; (800034c <MX_GPIO_Init+0xe8>)
 8000280:	f043 0304 	orr.w	r3, r3, #4
 8000284:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000286:	4b31      	ldr	r3, [pc, #196]	; (800034c <MX_GPIO_Init+0xe8>)
 8000288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800028a:	f003 0304 	and.w	r3, r3, #4
 800028e:	613b      	str	r3, [r7, #16]
 8000290:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000292:	4b2e      	ldr	r3, [pc, #184]	; (800034c <MX_GPIO_Init+0xe8>)
 8000294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000296:	4a2d      	ldr	r2, [pc, #180]	; (800034c <MX_GPIO_Init+0xe8>)
 8000298:	f043 0320 	orr.w	r3, r3, #32
 800029c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800029e:	4b2b      	ldr	r3, [pc, #172]	; (800034c <MX_GPIO_Init+0xe8>)
 80002a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002a2:	f003 0320 	and.w	r3, r3, #32
 80002a6:	60fb      	str	r3, [r7, #12]
 80002a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002aa:	4b28      	ldr	r3, [pc, #160]	; (800034c <MX_GPIO_Init+0xe8>)
 80002ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ae:	4a27      	ldr	r2, [pc, #156]	; (800034c <MX_GPIO_Init+0xe8>)
 80002b0:	f043 0301 	orr.w	r3, r3, #1
 80002b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002b6:	4b25      	ldr	r3, [pc, #148]	; (800034c <MX_GPIO_Init+0xe8>)
 80002b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ba:	f003 0301 	and.w	r3, r3, #1
 80002be:	60bb      	str	r3, [r7, #8]
 80002c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002c2:	4b22      	ldr	r3, [pc, #136]	; (800034c <MX_GPIO_Init+0xe8>)
 80002c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002c6:	4a21      	ldr	r2, [pc, #132]	; (800034c <MX_GPIO_Init+0xe8>)
 80002c8:	f043 0302 	orr.w	r3, r3, #2
 80002cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002ce:	4b1f      	ldr	r3, [pc, #124]	; (800034c <MX_GPIO_Init+0xe8>)
 80002d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002d2:	f003 0302 	and.w	r3, r3, #2
 80002d6:	607b      	str	r3, [r7, #4]
 80002d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80002da:	2200      	movs	r2, #0
 80002dc:	2120      	movs	r1, #32
 80002de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002e2:	f000 fc37 	bl	8000b54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80002e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80002ec:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80002f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002f2:	2300      	movs	r3, #0
 80002f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80002f6:	f107 0314 	add.w	r3, r7, #20
 80002fa:	4619      	mov	r1, r3
 80002fc:	4814      	ldr	r0, [pc, #80]	; (8000350 <MX_GPIO_Init+0xec>)
 80002fe:	f000 faa7 	bl	8000850 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000302:	230c      	movs	r3, #12
 8000304:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000306:	2302      	movs	r3, #2
 8000308:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800030a:	2300      	movs	r3, #0
 800030c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800030e:	2300      	movs	r3, #0
 8000310:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000312:	230c      	movs	r3, #12
 8000314:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000316:	f107 0314 	add.w	r3, r7, #20
 800031a:	4619      	mov	r1, r3
 800031c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000320:	f000 fa96 	bl	8000850 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000324:	2320      	movs	r3, #32
 8000326:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000328:	2301      	movs	r3, #1
 800032a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800032c:	2300      	movs	r3, #0
 800032e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000330:	2300      	movs	r3, #0
 8000332:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000334:	f107 0314 	add.w	r3, r7, #20
 8000338:	4619      	mov	r1, r3
 800033a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800033e:	f000 fa87 	bl	8000850 <HAL_GPIO_Init>

}
 8000342:	bf00      	nop
 8000344:	3728      	adds	r7, #40	; 0x28
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	40021000 	.word	0x40021000
 8000350:	48000800 	.word	0x48000800

08000354 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000358:	f000 f903 	bl	8000562 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800035c:	f000 f826 	bl	80003ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000360:	f7ff ff80 	bl	8000264 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  	HAL_GPIO_WritePin(GPIOG,GPIO_PIN_13,GPIO_PIN_SET);
 8000364:	2201      	movs	r2, #1
 8000366:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800036a:	480f      	ldr	r0, [pc, #60]	; (80003a8 <main+0x54>)
 800036c:	f000 fbf2 	bl	8000b54 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOG,GPIO_PIN_14,GPIO_PIN_SET);
 8000370:	2201      	movs	r2, #1
 8000372:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000376:	480c      	ldr	r0, [pc, #48]	; (80003a8 <main+0x54>)
 8000378:	f000 fbec 	bl	8000b54 <HAL_GPIO_WritePin>
    HAL_Delay(1000);
 800037c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000380:	f000 f960 	bl	8000644 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOG,GPIO_PIN_13,GPIO_PIN_RESET);
 8000384:	2200      	movs	r2, #0
 8000386:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800038a:	4807      	ldr	r0, [pc, #28]	; (80003a8 <main+0x54>)
 800038c:	f000 fbe2 	bl	8000b54 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOG,GPIO_PIN_14,GPIO_PIN_RESET);
 8000390:	2200      	movs	r2, #0
 8000392:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000396:	4804      	ldr	r0, [pc, #16]	; (80003a8 <main+0x54>)
 8000398:	f000 fbdc 	bl	8000b54 <HAL_GPIO_WritePin>
    BSP_LCD_Clear(LCD_COLOR_WHITE);
    */
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800039c:	f7ff ff40 	bl	8000220 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80003a0:	f001 f9b8 	bl	8001714 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003a4:	e7fe      	b.n	80003a4 <main+0x50>
 80003a6:	bf00      	nop
 80003a8:	48001800 	.word	0x48001800

080003ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b094      	sub	sp, #80	; 0x50
 80003b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003b2:	f107 0318 	add.w	r3, r7, #24
 80003b6:	2238      	movs	r2, #56	; 0x38
 80003b8:	2100      	movs	r1, #0
 80003ba:	4618      	mov	r0, r3
 80003bc:	f002 fb62 	bl	8002a84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003c0:	1d3b      	adds	r3, r7, #4
 80003c2:	2200      	movs	r2, #0
 80003c4:	601a      	str	r2, [r3, #0]
 80003c6:	605a      	str	r2, [r3, #4]
 80003c8:	609a      	str	r2, [r3, #8]
 80003ca:	60da      	str	r2, [r3, #12]
 80003cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80003ce:	2000      	movs	r0, #0
 80003d0:	f000 fbd8 	bl	8000b84 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003d4:	2302      	movs	r3, #2
 80003d6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003de:	2340      	movs	r3, #64	; 0x40
 80003e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003e2:	2302      	movs	r3, #2
 80003e4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003e6:	2302      	movs	r3, #2
 80003e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80003ea:	2304      	movs	r3, #4
 80003ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80003ee:	2355      	movs	r3, #85	; 0x55
 80003f0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80003f2:	2302      	movs	r3, #2
 80003f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80003f6:	2302      	movs	r3, #2
 80003f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80003fa:	2302      	movs	r3, #2
 80003fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003fe:	f107 0318 	add.w	r3, r7, #24
 8000402:	4618      	mov	r0, r3
 8000404:	f000 fc72 	bl	8000cec <HAL_RCC_OscConfig>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d001      	beq.n	8000412 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800040e:	f000 f818 	bl	8000442 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000412:	230f      	movs	r3, #15
 8000414:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000416:	2303      	movs	r3, #3
 8000418:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800041a:	2300      	movs	r3, #0
 800041c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800041e:	2300      	movs	r3, #0
 8000420:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000422:	2300      	movs	r3, #0
 8000424:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000426:	1d3b      	adds	r3, r7, #4
 8000428:	2104      	movs	r1, #4
 800042a:	4618      	mov	r0, r3
 800042c:	f000 ff76 	bl	800131c <HAL_RCC_ClockConfig>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000436:	f000 f804 	bl	8000442 <Error_Handler>
  }
}
 800043a:	bf00      	nop
 800043c:	3750      	adds	r7, #80	; 0x50
 800043e:	46bd      	mov	sp, r7
 8000440:	bd80      	pop	{r7, pc}

08000442 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000442:	b480      	push	{r7}
 8000444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000446:	bf00      	nop
 8000448:	46bd      	mov	sp, r7
 800044a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044e:	4770      	bx	lr

08000450 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000450:	b580      	push	{r7, lr}
 8000452:	b082      	sub	sp, #8
 8000454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000456:	4b12      	ldr	r3, [pc, #72]	; (80004a0 <HAL_MspInit+0x50>)
 8000458:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800045a:	4a11      	ldr	r2, [pc, #68]	; (80004a0 <HAL_MspInit+0x50>)
 800045c:	f043 0301 	orr.w	r3, r3, #1
 8000460:	6613      	str	r3, [r2, #96]	; 0x60
 8000462:	4b0f      	ldr	r3, [pc, #60]	; (80004a0 <HAL_MspInit+0x50>)
 8000464:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000466:	f003 0301 	and.w	r3, r3, #1
 800046a:	607b      	str	r3, [r7, #4]
 800046c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800046e:	4b0c      	ldr	r3, [pc, #48]	; (80004a0 <HAL_MspInit+0x50>)
 8000470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000472:	4a0b      	ldr	r2, [pc, #44]	; (80004a0 <HAL_MspInit+0x50>)
 8000474:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000478:	6593      	str	r3, [r2, #88]	; 0x58
 800047a:	4b09      	ldr	r3, [pc, #36]	; (80004a0 <HAL_MspInit+0x50>)
 800047c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800047e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000482:	603b      	str	r3, [r7, #0]
 8000484:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000486:	2200      	movs	r2, #0
 8000488:	210f      	movs	r1, #15
 800048a:	f06f 0001 	mvn.w	r0, #1
 800048e:	f000 f9b8 	bl	8000802 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000492:	f000 fc1b 	bl	8000ccc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000496:	bf00      	nop
 8000498:	3708      	adds	r7, #8
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	40021000 	.word	0x40021000

080004a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004a4:	b480      	push	{r7}
 80004a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004a8:	e7fe      	b.n	80004a8 <NMI_Handler+0x4>

080004aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004aa:	b480      	push	{r7}
 80004ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004ae:	e7fe      	b.n	80004ae <HardFault_Handler+0x4>

080004b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004b4:	e7fe      	b.n	80004b4 <MemManage_Handler+0x4>

080004b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004b6:	b480      	push	{r7}
 80004b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004ba:	e7fe      	b.n	80004ba <BusFault_Handler+0x4>

080004bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004bc:	b480      	push	{r7}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004c0:	e7fe      	b.n	80004c0 <UsageFault_Handler+0x4>

080004c2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004c2:	b480      	push	{r7}
 80004c4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004c6:	bf00      	nop
 80004c8:	46bd      	mov	sp, r7
 80004ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ce:	4770      	bx	lr

080004d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004d4:	f000 f898 	bl	8000608 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80004d8:	f001 fe34 	bl	8002144 <xTaskGetSchedulerState>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b01      	cmp	r3, #1
 80004e0:	d001      	beq.n	80004e6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80004e2:	f002 f871 	bl	80025c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004e6:	bf00      	nop
 80004e8:	bd80      	pop	{r7, pc}
	...

080004ec <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80004f0:	4b06      	ldr	r3, [pc, #24]	; (800050c <SystemInit+0x20>)
 80004f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004f6:	4a05      	ldr	r2, [pc, #20]	; (800050c <SystemInit+0x20>)
 80004f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000500:	bf00      	nop
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	e000ed00 	.word	0xe000ed00

08000510 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000510:	480d      	ldr	r0, [pc, #52]	; (8000548 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000512:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000514:	480d      	ldr	r0, [pc, #52]	; (800054c <LoopForever+0x6>)
  ldr r1, =_edata
 8000516:	490e      	ldr	r1, [pc, #56]	; (8000550 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000518:	4a0e      	ldr	r2, [pc, #56]	; (8000554 <LoopForever+0xe>)
  movs r3, #0
 800051a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800051c:	e002      	b.n	8000524 <LoopCopyDataInit>

0800051e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800051e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000520:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000522:	3304      	adds	r3, #4

08000524 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000524:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000526:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000528:	d3f9      	bcc.n	800051e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800052a:	4a0b      	ldr	r2, [pc, #44]	; (8000558 <LoopForever+0x12>)
  ldr r4, =_ebss
 800052c:	4c0b      	ldr	r4, [pc, #44]	; (800055c <LoopForever+0x16>)
  movs r3, #0
 800052e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000530:	e001      	b.n	8000536 <LoopFillZerobss>

08000532 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000532:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000534:	3204      	adds	r2, #4

08000536 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000536:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000538:	d3fb      	bcc.n	8000532 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800053a:	f7ff ffd7 	bl	80004ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800053e:	f002 fa7d 	bl	8002a3c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000542:	f7ff ff07 	bl	8000354 <main>

08000546 <LoopForever>:

LoopForever:
    b LoopForever
 8000546:	e7fe      	b.n	8000546 <LoopForever>
  ldr   r0, =_estack
 8000548:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800054c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000550:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000554:	08002aec 	.word	0x08002aec
  ldr r2, =_sbss
 8000558:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800055c:	20000d88 	.word	0x20000d88

08000560 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000560:	e7fe      	b.n	8000560 <ADC1_2_IRQHandler>

08000562 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000562:	b580      	push	{r7, lr}
 8000564:	b082      	sub	sp, #8
 8000566:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000568:	2300      	movs	r3, #0
 800056a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800056c:	2003      	movs	r0, #3
 800056e:	f000 f93d 	bl	80007ec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000572:	200f      	movs	r0, #15
 8000574:	f000 f80e 	bl	8000594 <HAL_InitTick>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d002      	beq.n	8000584 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800057e:	2301      	movs	r3, #1
 8000580:	71fb      	strb	r3, [r7, #7]
 8000582:	e001      	b.n	8000588 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000584:	f7ff ff64 	bl	8000450 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000588:	79fb      	ldrb	r3, [r7, #7]

}
 800058a:	4618      	mov	r0, r3
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
	...

08000594 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800059c:	2300      	movs	r3, #0
 800059e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80005a0:	4b16      	ldr	r3, [pc, #88]	; (80005fc <HAL_InitTick+0x68>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d022      	beq.n	80005ee <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80005a8:	4b15      	ldr	r3, [pc, #84]	; (8000600 <HAL_InitTick+0x6c>)
 80005aa:	681a      	ldr	r2, [r3, #0]
 80005ac:	4b13      	ldr	r3, [pc, #76]	; (80005fc <HAL_InitTick+0x68>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80005b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80005bc:	4618      	mov	r0, r3
 80005be:	f000 f93a 	bl	8000836 <HAL_SYSTICK_Config>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d10f      	bne.n	80005e8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	2b0f      	cmp	r3, #15
 80005cc:	d809      	bhi.n	80005e2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005ce:	2200      	movs	r2, #0
 80005d0:	6879      	ldr	r1, [r7, #4]
 80005d2:	f04f 30ff 	mov.w	r0, #4294967295
 80005d6:	f000 f914 	bl	8000802 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005da:	4a0a      	ldr	r2, [pc, #40]	; (8000604 <HAL_InitTick+0x70>)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	6013      	str	r3, [r2, #0]
 80005e0:	e007      	b.n	80005f2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80005e2:	2301      	movs	r3, #1
 80005e4:	73fb      	strb	r3, [r7, #15]
 80005e6:	e004      	b.n	80005f2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80005e8:	2301      	movs	r3, #1
 80005ea:	73fb      	strb	r3, [r7, #15]
 80005ec:	e001      	b.n	80005f2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80005ee:	2301      	movs	r3, #1
 80005f0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3710      	adds	r7, #16
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000008 	.word	0x20000008
 8000600:	20000000 	.word	0x20000000
 8000604:	20000004 	.word	0x20000004

08000608 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800060c:	4b05      	ldr	r3, [pc, #20]	; (8000624 <HAL_IncTick+0x1c>)
 800060e:	681a      	ldr	r2, [r3, #0]
 8000610:	4b05      	ldr	r3, [pc, #20]	; (8000628 <HAL_IncTick+0x20>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4413      	add	r3, r2
 8000616:	4a03      	ldr	r2, [pc, #12]	; (8000624 <HAL_IncTick+0x1c>)
 8000618:	6013      	str	r3, [r2, #0]
}
 800061a:	bf00      	nop
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr
 8000624:	20000030 	.word	0x20000030
 8000628:	20000008 	.word	0x20000008

0800062c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  return uwTick;
 8000630:	4b03      	ldr	r3, [pc, #12]	; (8000640 <HAL_GetTick+0x14>)
 8000632:	681b      	ldr	r3, [r3, #0]
}
 8000634:	4618      	mov	r0, r3
 8000636:	46bd      	mov	sp, r7
 8000638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063c:	4770      	bx	lr
 800063e:	bf00      	nop
 8000640:	20000030 	.word	0x20000030

08000644 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b084      	sub	sp, #16
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800064c:	f7ff ffee 	bl	800062c <HAL_GetTick>
 8000650:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	f1b3 3fff 	cmp.w	r3, #4294967295
 800065c:	d004      	beq.n	8000668 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800065e:	4b09      	ldr	r3, [pc, #36]	; (8000684 <HAL_Delay+0x40>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	68fa      	ldr	r2, [r7, #12]
 8000664:	4413      	add	r3, r2
 8000666:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000668:	bf00      	nop
 800066a:	f7ff ffdf 	bl	800062c <HAL_GetTick>
 800066e:	4602      	mov	r2, r0
 8000670:	68bb      	ldr	r3, [r7, #8]
 8000672:	1ad3      	subs	r3, r2, r3
 8000674:	68fa      	ldr	r2, [r7, #12]
 8000676:	429a      	cmp	r2, r3
 8000678:	d8f7      	bhi.n	800066a <HAL_Delay+0x26>
  {
  }
}
 800067a:	bf00      	nop
 800067c:	bf00      	nop
 800067e:	3710      	adds	r7, #16
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20000008 	.word	0x20000008

08000688 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000688:	b480      	push	{r7}
 800068a:	b085      	sub	sp, #20
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	f003 0307 	and.w	r3, r3, #7
 8000696:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000698:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <__NVIC_SetPriorityGrouping+0x44>)
 800069a:	68db      	ldr	r3, [r3, #12]
 800069c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800069e:	68ba      	ldr	r2, [r7, #8]
 80006a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006a4:	4013      	ands	r3, r2
 80006a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006ac:	68bb      	ldr	r3, [r7, #8]
 80006ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006ba:	4a04      	ldr	r2, [pc, #16]	; (80006cc <__NVIC_SetPriorityGrouping+0x44>)
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	60d3      	str	r3, [r2, #12]
}
 80006c0:	bf00      	nop
 80006c2:	3714      	adds	r7, #20
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr
 80006cc:	e000ed00 	.word	0xe000ed00

080006d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006d4:	4b04      	ldr	r3, [pc, #16]	; (80006e8 <__NVIC_GetPriorityGrouping+0x18>)
 80006d6:	68db      	ldr	r3, [r3, #12]
 80006d8:	0a1b      	lsrs	r3, r3, #8
 80006da:	f003 0307 	and.w	r3, r3, #7
}
 80006de:	4618      	mov	r0, r3
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr
 80006e8:	e000ed00 	.word	0xe000ed00

080006ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b083      	sub	sp, #12
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	4603      	mov	r3, r0
 80006f4:	6039      	str	r1, [r7, #0]
 80006f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	db0a      	blt.n	8000716 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000700:	683b      	ldr	r3, [r7, #0]
 8000702:	b2da      	uxtb	r2, r3
 8000704:	490c      	ldr	r1, [pc, #48]	; (8000738 <__NVIC_SetPriority+0x4c>)
 8000706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070a:	0112      	lsls	r2, r2, #4
 800070c:	b2d2      	uxtb	r2, r2
 800070e:	440b      	add	r3, r1
 8000710:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000714:	e00a      	b.n	800072c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	b2da      	uxtb	r2, r3
 800071a:	4908      	ldr	r1, [pc, #32]	; (800073c <__NVIC_SetPriority+0x50>)
 800071c:	79fb      	ldrb	r3, [r7, #7]
 800071e:	f003 030f 	and.w	r3, r3, #15
 8000722:	3b04      	subs	r3, #4
 8000724:	0112      	lsls	r2, r2, #4
 8000726:	b2d2      	uxtb	r2, r2
 8000728:	440b      	add	r3, r1
 800072a:	761a      	strb	r2, [r3, #24]
}
 800072c:	bf00      	nop
 800072e:	370c      	adds	r7, #12
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr
 8000738:	e000e100 	.word	0xe000e100
 800073c:	e000ed00 	.word	0xe000ed00

08000740 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000740:	b480      	push	{r7}
 8000742:	b089      	sub	sp, #36	; 0x24
 8000744:	af00      	add	r7, sp, #0
 8000746:	60f8      	str	r0, [r7, #12]
 8000748:	60b9      	str	r1, [r7, #8]
 800074a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	f003 0307 	and.w	r3, r3, #7
 8000752:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000754:	69fb      	ldr	r3, [r7, #28]
 8000756:	f1c3 0307 	rsb	r3, r3, #7
 800075a:	2b04      	cmp	r3, #4
 800075c:	bf28      	it	cs
 800075e:	2304      	movcs	r3, #4
 8000760:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000762:	69fb      	ldr	r3, [r7, #28]
 8000764:	3304      	adds	r3, #4
 8000766:	2b06      	cmp	r3, #6
 8000768:	d902      	bls.n	8000770 <NVIC_EncodePriority+0x30>
 800076a:	69fb      	ldr	r3, [r7, #28]
 800076c:	3b03      	subs	r3, #3
 800076e:	e000      	b.n	8000772 <NVIC_EncodePriority+0x32>
 8000770:	2300      	movs	r3, #0
 8000772:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000774:	f04f 32ff 	mov.w	r2, #4294967295
 8000778:	69bb      	ldr	r3, [r7, #24]
 800077a:	fa02 f303 	lsl.w	r3, r2, r3
 800077e:	43da      	mvns	r2, r3
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	401a      	ands	r2, r3
 8000784:	697b      	ldr	r3, [r7, #20]
 8000786:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000788:	f04f 31ff 	mov.w	r1, #4294967295
 800078c:	697b      	ldr	r3, [r7, #20]
 800078e:	fa01 f303 	lsl.w	r3, r1, r3
 8000792:	43d9      	mvns	r1, r3
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000798:	4313      	orrs	r3, r2
         );
}
 800079a:	4618      	mov	r0, r3
 800079c:	3724      	adds	r7, #36	; 0x24
 800079e:	46bd      	mov	sp, r7
 80007a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a4:	4770      	bx	lr
	...

080007a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	3b01      	subs	r3, #1
 80007b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007b8:	d301      	bcc.n	80007be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007ba:	2301      	movs	r3, #1
 80007bc:	e00f      	b.n	80007de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007be:	4a0a      	ldr	r2, [pc, #40]	; (80007e8 <SysTick_Config+0x40>)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	3b01      	subs	r3, #1
 80007c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007c6:	210f      	movs	r1, #15
 80007c8:	f04f 30ff 	mov.w	r0, #4294967295
 80007cc:	f7ff ff8e 	bl	80006ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007d0:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <SysTick_Config+0x40>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007d6:	4b04      	ldr	r3, [pc, #16]	; (80007e8 <SysTick_Config+0x40>)
 80007d8:	2207      	movs	r2, #7
 80007da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007dc:	2300      	movs	r3, #0
}
 80007de:	4618      	mov	r0, r3
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	e000e010 	.word	0xe000e010

080007ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f7ff ff47 	bl	8000688 <__NVIC_SetPriorityGrouping>
}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}

08000802 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000802:	b580      	push	{r7, lr}
 8000804:	b086      	sub	sp, #24
 8000806:	af00      	add	r7, sp, #0
 8000808:	4603      	mov	r3, r0
 800080a:	60b9      	str	r1, [r7, #8]
 800080c:	607a      	str	r2, [r7, #4]
 800080e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000810:	f7ff ff5e 	bl	80006d0 <__NVIC_GetPriorityGrouping>
 8000814:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000816:	687a      	ldr	r2, [r7, #4]
 8000818:	68b9      	ldr	r1, [r7, #8]
 800081a:	6978      	ldr	r0, [r7, #20]
 800081c:	f7ff ff90 	bl	8000740 <NVIC_EncodePriority>
 8000820:	4602      	mov	r2, r0
 8000822:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000826:	4611      	mov	r1, r2
 8000828:	4618      	mov	r0, r3
 800082a:	f7ff ff5f 	bl	80006ec <__NVIC_SetPriority>
}
 800082e:	bf00      	nop
 8000830:	3718      	adds	r7, #24
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}

08000836 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000836:	b580      	push	{r7, lr}
 8000838:	b082      	sub	sp, #8
 800083a:	af00      	add	r7, sp, #0
 800083c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800083e:	6878      	ldr	r0, [r7, #4]
 8000840:	f7ff ffb2 	bl	80007a8 <SysTick_Config>
 8000844:	4603      	mov	r3, r0
}
 8000846:	4618      	mov	r0, r3
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
	...

08000850 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000850:	b480      	push	{r7}
 8000852:	b087      	sub	sp, #28
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800085a:	2300      	movs	r3, #0
 800085c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800085e:	e15a      	b.n	8000b16 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	681a      	ldr	r2, [r3, #0]
 8000864:	2101      	movs	r1, #1
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	fa01 f303 	lsl.w	r3, r1, r3
 800086c:	4013      	ands	r3, r2
 800086e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	2b00      	cmp	r3, #0
 8000874:	f000 814c 	beq.w	8000b10 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	685b      	ldr	r3, [r3, #4]
 800087c:	f003 0303 	and.w	r3, r3, #3
 8000880:	2b01      	cmp	r3, #1
 8000882:	d005      	beq.n	8000890 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	685b      	ldr	r3, [r3, #4]
 8000888:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800088c:	2b02      	cmp	r3, #2
 800088e:	d130      	bne.n	80008f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	689b      	ldr	r3, [r3, #8]
 8000894:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000896:	697b      	ldr	r3, [r7, #20]
 8000898:	005b      	lsls	r3, r3, #1
 800089a:	2203      	movs	r2, #3
 800089c:	fa02 f303 	lsl.w	r3, r2, r3
 80008a0:	43db      	mvns	r3, r3
 80008a2:	693a      	ldr	r2, [r7, #16]
 80008a4:	4013      	ands	r3, r2
 80008a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	68da      	ldr	r2, [r3, #12]
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	005b      	lsls	r3, r3, #1
 80008b0:	fa02 f303 	lsl.w	r3, r2, r3
 80008b4:	693a      	ldr	r2, [r7, #16]
 80008b6:	4313      	orrs	r3, r2
 80008b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	693a      	ldr	r2, [r7, #16]
 80008be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80008c6:	2201      	movs	r2, #1
 80008c8:	697b      	ldr	r3, [r7, #20]
 80008ca:	fa02 f303 	lsl.w	r3, r2, r3
 80008ce:	43db      	mvns	r3, r3
 80008d0:	693a      	ldr	r2, [r7, #16]
 80008d2:	4013      	ands	r3, r2
 80008d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	091b      	lsrs	r3, r3, #4
 80008dc:	f003 0201 	and.w	r2, r3, #1
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	fa02 f303 	lsl.w	r3, r2, r3
 80008e6:	693a      	ldr	r2, [r7, #16]
 80008e8:	4313      	orrs	r3, r2
 80008ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	693a      	ldr	r2, [r7, #16]
 80008f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	f003 0303 	and.w	r3, r3, #3
 80008fa:	2b03      	cmp	r3, #3
 80008fc:	d017      	beq.n	800092e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	68db      	ldr	r3, [r3, #12]
 8000902:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	005b      	lsls	r3, r3, #1
 8000908:	2203      	movs	r2, #3
 800090a:	fa02 f303 	lsl.w	r3, r2, r3
 800090e:	43db      	mvns	r3, r3
 8000910:	693a      	ldr	r2, [r7, #16]
 8000912:	4013      	ands	r3, r2
 8000914:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000916:	683b      	ldr	r3, [r7, #0]
 8000918:	689a      	ldr	r2, [r3, #8]
 800091a:	697b      	ldr	r3, [r7, #20]
 800091c:	005b      	lsls	r3, r3, #1
 800091e:	fa02 f303 	lsl.w	r3, r2, r3
 8000922:	693a      	ldr	r2, [r7, #16]
 8000924:	4313      	orrs	r3, r2
 8000926:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	693a      	ldr	r2, [r7, #16]
 800092c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	685b      	ldr	r3, [r3, #4]
 8000932:	f003 0303 	and.w	r3, r3, #3
 8000936:	2b02      	cmp	r3, #2
 8000938:	d123      	bne.n	8000982 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	08da      	lsrs	r2, r3, #3
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	3208      	adds	r2, #8
 8000942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000946:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	f003 0307 	and.w	r3, r3, #7
 800094e:	009b      	lsls	r3, r3, #2
 8000950:	220f      	movs	r2, #15
 8000952:	fa02 f303 	lsl.w	r3, r2, r3
 8000956:	43db      	mvns	r3, r3
 8000958:	693a      	ldr	r2, [r7, #16]
 800095a:	4013      	ands	r3, r2
 800095c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	691a      	ldr	r2, [r3, #16]
 8000962:	697b      	ldr	r3, [r7, #20]
 8000964:	f003 0307 	and.w	r3, r3, #7
 8000968:	009b      	lsls	r3, r3, #2
 800096a:	fa02 f303 	lsl.w	r3, r2, r3
 800096e:	693a      	ldr	r2, [r7, #16]
 8000970:	4313      	orrs	r3, r2
 8000972:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	08da      	lsrs	r2, r3, #3
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	3208      	adds	r2, #8
 800097c:	6939      	ldr	r1, [r7, #16]
 800097e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	005b      	lsls	r3, r3, #1
 800098c:	2203      	movs	r2, #3
 800098e:	fa02 f303 	lsl.w	r3, r2, r3
 8000992:	43db      	mvns	r3, r3
 8000994:	693a      	ldr	r2, [r7, #16]
 8000996:	4013      	ands	r3, r2
 8000998:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	f003 0203 	and.w	r2, r3, #3
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	005b      	lsls	r3, r3, #1
 80009a6:	fa02 f303 	lsl.w	r3, r2, r3
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	4313      	orrs	r3, r2
 80009ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	693a      	ldr	r2, [r7, #16]
 80009b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	685b      	ldr	r3, [r3, #4]
 80009ba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80009be:	2b00      	cmp	r3, #0
 80009c0:	f000 80a6 	beq.w	8000b10 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c4:	4b5b      	ldr	r3, [pc, #364]	; (8000b34 <HAL_GPIO_Init+0x2e4>)
 80009c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009c8:	4a5a      	ldr	r2, [pc, #360]	; (8000b34 <HAL_GPIO_Init+0x2e4>)
 80009ca:	f043 0301 	orr.w	r3, r3, #1
 80009ce:	6613      	str	r3, [r2, #96]	; 0x60
 80009d0:	4b58      	ldr	r3, [pc, #352]	; (8000b34 <HAL_GPIO_Init+0x2e4>)
 80009d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009d4:	f003 0301 	and.w	r3, r3, #1
 80009d8:	60bb      	str	r3, [r7, #8]
 80009da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009dc:	4a56      	ldr	r2, [pc, #344]	; (8000b38 <HAL_GPIO_Init+0x2e8>)
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	089b      	lsrs	r3, r3, #2
 80009e2:	3302      	adds	r3, #2
 80009e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	f003 0303 	and.w	r3, r3, #3
 80009f0:	009b      	lsls	r3, r3, #2
 80009f2:	220f      	movs	r2, #15
 80009f4:	fa02 f303 	lsl.w	r3, r2, r3
 80009f8:	43db      	mvns	r3, r3
 80009fa:	693a      	ldr	r2, [r7, #16]
 80009fc:	4013      	ands	r3, r2
 80009fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a06:	d01f      	beq.n	8000a48 <HAL_GPIO_Init+0x1f8>
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	4a4c      	ldr	r2, [pc, #304]	; (8000b3c <HAL_GPIO_Init+0x2ec>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d019      	beq.n	8000a44 <HAL_GPIO_Init+0x1f4>
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	4a4b      	ldr	r2, [pc, #300]	; (8000b40 <HAL_GPIO_Init+0x2f0>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d013      	beq.n	8000a40 <HAL_GPIO_Init+0x1f0>
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	4a4a      	ldr	r2, [pc, #296]	; (8000b44 <HAL_GPIO_Init+0x2f4>)
 8000a1c:	4293      	cmp	r3, r2
 8000a1e:	d00d      	beq.n	8000a3c <HAL_GPIO_Init+0x1ec>
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4a49      	ldr	r2, [pc, #292]	; (8000b48 <HAL_GPIO_Init+0x2f8>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d007      	beq.n	8000a38 <HAL_GPIO_Init+0x1e8>
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	4a48      	ldr	r2, [pc, #288]	; (8000b4c <HAL_GPIO_Init+0x2fc>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d101      	bne.n	8000a34 <HAL_GPIO_Init+0x1e4>
 8000a30:	2305      	movs	r3, #5
 8000a32:	e00a      	b.n	8000a4a <HAL_GPIO_Init+0x1fa>
 8000a34:	2306      	movs	r3, #6
 8000a36:	e008      	b.n	8000a4a <HAL_GPIO_Init+0x1fa>
 8000a38:	2304      	movs	r3, #4
 8000a3a:	e006      	b.n	8000a4a <HAL_GPIO_Init+0x1fa>
 8000a3c:	2303      	movs	r3, #3
 8000a3e:	e004      	b.n	8000a4a <HAL_GPIO_Init+0x1fa>
 8000a40:	2302      	movs	r3, #2
 8000a42:	e002      	b.n	8000a4a <HAL_GPIO_Init+0x1fa>
 8000a44:	2301      	movs	r3, #1
 8000a46:	e000      	b.n	8000a4a <HAL_GPIO_Init+0x1fa>
 8000a48:	2300      	movs	r3, #0
 8000a4a:	697a      	ldr	r2, [r7, #20]
 8000a4c:	f002 0203 	and.w	r2, r2, #3
 8000a50:	0092      	lsls	r2, r2, #2
 8000a52:	4093      	lsls	r3, r2
 8000a54:	693a      	ldr	r2, [r7, #16]
 8000a56:	4313      	orrs	r3, r2
 8000a58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a5a:	4937      	ldr	r1, [pc, #220]	; (8000b38 <HAL_GPIO_Init+0x2e8>)
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	089b      	lsrs	r3, r3, #2
 8000a60:	3302      	adds	r3, #2
 8000a62:	693a      	ldr	r2, [r7, #16]
 8000a64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a68:	4b39      	ldr	r3, [pc, #228]	; (8000b50 <HAL_GPIO_Init+0x300>)
 8000a6a:	689b      	ldr	r3, [r3, #8]
 8000a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	43db      	mvns	r3, r3
 8000a72:	693a      	ldr	r2, [r7, #16]
 8000a74:	4013      	ands	r3, r2
 8000a76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d003      	beq.n	8000a8c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000a84:	693a      	ldr	r2, [r7, #16]
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000a8c:	4a30      	ldr	r2, [pc, #192]	; (8000b50 <HAL_GPIO_Init+0x300>)
 8000a8e:	693b      	ldr	r3, [r7, #16]
 8000a90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000a92:	4b2f      	ldr	r3, [pc, #188]	; (8000b50 <HAL_GPIO_Init+0x300>)
 8000a94:	68db      	ldr	r3, [r3, #12]
 8000a96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	43db      	mvns	r3, r3
 8000a9c:	693a      	ldr	r2, [r7, #16]
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d003      	beq.n	8000ab6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000aae:	693a      	ldr	r2, [r7, #16]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ab6:	4a26      	ldr	r2, [pc, #152]	; (8000b50 <HAL_GPIO_Init+0x300>)
 8000ab8:	693b      	ldr	r3, [r7, #16]
 8000aba:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000abc:	4b24      	ldr	r3, [pc, #144]	; (8000b50 <HAL_GPIO_Init+0x300>)
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	43db      	mvns	r3, r3
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	4013      	ands	r3, r2
 8000aca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d003      	beq.n	8000ae0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000ad8:	693a      	ldr	r2, [r7, #16]
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	4313      	orrs	r3, r2
 8000ade:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ae0:	4a1b      	ldr	r2, [pc, #108]	; (8000b50 <HAL_GPIO_Init+0x300>)
 8000ae2:	693b      	ldr	r3, [r7, #16]
 8000ae4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000ae6:	4b1a      	ldr	r3, [pc, #104]	; (8000b50 <HAL_GPIO_Init+0x300>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	43db      	mvns	r3, r3
 8000af0:	693a      	ldr	r2, [r7, #16]
 8000af2:	4013      	ands	r3, r2
 8000af4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	685b      	ldr	r3, [r3, #4]
 8000afa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d003      	beq.n	8000b0a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000b02:	693a      	ldr	r2, [r7, #16]
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	4313      	orrs	r3, r2
 8000b08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b0a:	4a11      	ldr	r2, [pc, #68]	; (8000b50 <HAL_GPIO_Init+0x300>)
 8000b0c:	693b      	ldr	r3, [r7, #16]
 8000b0e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	3301      	adds	r3, #1
 8000b14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	681a      	ldr	r2, [r3, #0]
 8000b1a:	697b      	ldr	r3, [r7, #20]
 8000b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	f47f ae9d 	bne.w	8000860 <HAL_GPIO_Init+0x10>
  }
}
 8000b26:	bf00      	nop
 8000b28:	bf00      	nop
 8000b2a:	371c      	adds	r7, #28
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	40021000 	.word	0x40021000
 8000b38:	40010000 	.word	0x40010000
 8000b3c:	48000400 	.word	0x48000400
 8000b40:	48000800 	.word	0x48000800
 8000b44:	48000c00 	.word	0x48000c00
 8000b48:	48001000 	.word	0x48001000
 8000b4c:	48001400 	.word	0x48001400
 8000b50:	40010400 	.word	0x40010400

08000b54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	460b      	mov	r3, r1
 8000b5e:	807b      	strh	r3, [r7, #2]
 8000b60:	4613      	mov	r3, r2
 8000b62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b64:	787b      	ldrb	r3, [r7, #1]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d003      	beq.n	8000b72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b6a:	887a      	ldrh	r2, [r7, #2]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b70:	e002      	b.n	8000b78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b72:	887a      	ldrh	r2, [r7, #2]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b78:	bf00      	nop
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d141      	bne.n	8000c16 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000b92:	4b4b      	ldr	r3, [pc, #300]	; (8000cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000b9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b9e:	d131      	bne.n	8000c04 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000ba0:	4b47      	ldr	r3, [pc, #284]	; (8000cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ba2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000ba6:	4a46      	ldr	r2, [pc, #280]	; (8000cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ba8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000bac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bb0:	4b43      	ldr	r3, [pc, #268]	; (8000cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000bb8:	4a41      	ldr	r2, [pc, #260]	; (8000cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000bba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bbe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000bc0:	4b40      	ldr	r3, [pc, #256]	; (8000cc4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2232      	movs	r2, #50	; 0x32
 8000bc6:	fb02 f303 	mul.w	r3, r2, r3
 8000bca:	4a3f      	ldr	r2, [pc, #252]	; (8000cc8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000bcc:	fba2 2303 	umull	r2, r3, r2, r3
 8000bd0:	0c9b      	lsrs	r3, r3, #18
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000bd6:	e002      	b.n	8000bde <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	3b01      	subs	r3, #1
 8000bdc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000bde:	4b38      	ldr	r3, [pc, #224]	; (8000cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000be0:	695b      	ldr	r3, [r3, #20]
 8000be2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000be6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bea:	d102      	bne.n	8000bf2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d1f2      	bne.n	8000bd8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000bf2:	4b33      	ldr	r3, [pc, #204]	; (8000cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000bf4:	695b      	ldr	r3, [r3, #20]
 8000bf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bfe:	d158      	bne.n	8000cb2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000c00:	2303      	movs	r3, #3
 8000c02:	e057      	b.n	8000cb4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000c04:	4b2e      	ldr	r3, [pc, #184]	; (8000cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000c0a:	4a2d      	ldr	r2, [pc, #180]	; (8000cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c10:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000c14:	e04d      	b.n	8000cb2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c1c:	d141      	bne.n	8000ca2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c1e:	4b28      	ldr	r3, [pc, #160]	; (8000cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c2a:	d131      	bne.n	8000c90 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000c2c:	4b24      	ldr	r3, [pc, #144]	; (8000cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000c32:	4a23      	ldr	r2, [pc, #140]	; (8000cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c38:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c3c:	4b20      	ldr	r3, [pc, #128]	; (8000cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c44:	4a1e      	ldr	r2, [pc, #120]	; (8000cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c46:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c4a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000c4c:	4b1d      	ldr	r3, [pc, #116]	; (8000cc4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	2232      	movs	r2, #50	; 0x32
 8000c52:	fb02 f303 	mul.w	r3, r2, r3
 8000c56:	4a1c      	ldr	r2, [pc, #112]	; (8000cc8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000c58:	fba2 2303 	umull	r2, r3, r2, r3
 8000c5c:	0c9b      	lsrs	r3, r3, #18
 8000c5e:	3301      	adds	r3, #1
 8000c60:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c62:	e002      	b.n	8000c6a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	3b01      	subs	r3, #1
 8000c68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c6a:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c6c:	695b      	ldr	r3, [r3, #20]
 8000c6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c76:	d102      	bne.n	8000c7e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d1f2      	bne.n	8000c64 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c7e:	4b10      	ldr	r3, [pc, #64]	; (8000cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c80:	695b      	ldr	r3, [r3, #20]
 8000c82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c8a:	d112      	bne.n	8000cb2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000c8c:	2303      	movs	r3, #3
 8000c8e:	e011      	b.n	8000cb4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000c90:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000c96:	4a0a      	ldr	r2, [pc, #40]	; (8000cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c9c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000ca0:	e007      	b.n	8000cb2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ca2:	4b07      	ldr	r3, [pc, #28]	; (8000cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000caa:	4a05      	ldr	r2, [pc, #20]	; (8000cc0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000cac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cb0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8000cb2:	2300      	movs	r3, #0
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3714      	adds	r7, #20
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	40007000 	.word	0x40007000
 8000cc4:	20000000 	.word	0x20000000
 8000cc8:	431bde83 	.word	0x431bde83

08000ccc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000cd0:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000cd2:	689b      	ldr	r3, [r3, #8]
 8000cd4:	4a04      	ldr	r2, [pc, #16]	; (8000ce8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000cd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cda:	6093      	str	r3, [r2, #8]
}
 8000cdc:	bf00      	nop
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	40007000 	.word	0x40007000

08000cec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b088      	sub	sp, #32
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d101      	bne.n	8000cfe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	e306      	b.n	800130c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d075      	beq.n	8000df6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000d0a:	4b97      	ldr	r3, [pc, #604]	; (8000f68 <HAL_RCC_OscConfig+0x27c>)
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	f003 030c 	and.w	r3, r3, #12
 8000d12:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000d14:	4b94      	ldr	r3, [pc, #592]	; (8000f68 <HAL_RCC_OscConfig+0x27c>)
 8000d16:	68db      	ldr	r3, [r3, #12]
 8000d18:	f003 0303 	and.w	r3, r3, #3
 8000d1c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8000d1e:	69bb      	ldr	r3, [r7, #24]
 8000d20:	2b0c      	cmp	r3, #12
 8000d22:	d102      	bne.n	8000d2a <HAL_RCC_OscConfig+0x3e>
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	2b03      	cmp	r3, #3
 8000d28:	d002      	beq.n	8000d30 <HAL_RCC_OscConfig+0x44>
 8000d2a:	69bb      	ldr	r3, [r7, #24]
 8000d2c:	2b08      	cmp	r3, #8
 8000d2e:	d10b      	bne.n	8000d48 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d30:	4b8d      	ldr	r3, [pc, #564]	; (8000f68 <HAL_RCC_OscConfig+0x27c>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d05b      	beq.n	8000df4 <HAL_RCC_OscConfig+0x108>
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d157      	bne.n	8000df4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000d44:	2301      	movs	r3, #1
 8000d46:	e2e1      	b.n	800130c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d50:	d106      	bne.n	8000d60 <HAL_RCC_OscConfig+0x74>
 8000d52:	4b85      	ldr	r3, [pc, #532]	; (8000f68 <HAL_RCC_OscConfig+0x27c>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a84      	ldr	r2, [pc, #528]	; (8000f68 <HAL_RCC_OscConfig+0x27c>)
 8000d58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d5c:	6013      	str	r3, [r2, #0]
 8000d5e:	e01d      	b.n	8000d9c <HAL_RCC_OscConfig+0xb0>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d68:	d10c      	bne.n	8000d84 <HAL_RCC_OscConfig+0x98>
 8000d6a:	4b7f      	ldr	r3, [pc, #508]	; (8000f68 <HAL_RCC_OscConfig+0x27c>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	4a7e      	ldr	r2, [pc, #504]	; (8000f68 <HAL_RCC_OscConfig+0x27c>)
 8000d70:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d74:	6013      	str	r3, [r2, #0]
 8000d76:	4b7c      	ldr	r3, [pc, #496]	; (8000f68 <HAL_RCC_OscConfig+0x27c>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a7b      	ldr	r2, [pc, #492]	; (8000f68 <HAL_RCC_OscConfig+0x27c>)
 8000d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d80:	6013      	str	r3, [r2, #0]
 8000d82:	e00b      	b.n	8000d9c <HAL_RCC_OscConfig+0xb0>
 8000d84:	4b78      	ldr	r3, [pc, #480]	; (8000f68 <HAL_RCC_OscConfig+0x27c>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a77      	ldr	r2, [pc, #476]	; (8000f68 <HAL_RCC_OscConfig+0x27c>)
 8000d8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d8e:	6013      	str	r3, [r2, #0]
 8000d90:	4b75      	ldr	r3, [pc, #468]	; (8000f68 <HAL_RCC_OscConfig+0x27c>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a74      	ldr	r2, [pc, #464]	; (8000f68 <HAL_RCC_OscConfig+0x27c>)
 8000d96:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d9a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d013      	beq.n	8000dcc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000da4:	f7ff fc42 	bl	800062c <HAL_GetTick>
 8000da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000daa:	e008      	b.n	8000dbe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dac:	f7ff fc3e 	bl	800062c <HAL_GetTick>
 8000db0:	4602      	mov	r2, r0
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	2b64      	cmp	r3, #100	; 0x64
 8000db8:	d901      	bls.n	8000dbe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	e2a6      	b.n	800130c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000dbe:	4b6a      	ldr	r3, [pc, #424]	; (8000f68 <HAL_RCC_OscConfig+0x27c>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d0f0      	beq.n	8000dac <HAL_RCC_OscConfig+0xc0>
 8000dca:	e014      	b.n	8000df6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dcc:	f7ff fc2e 	bl	800062c <HAL_GetTick>
 8000dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000dd2:	e008      	b.n	8000de6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dd4:	f7ff fc2a 	bl	800062c <HAL_GetTick>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	693b      	ldr	r3, [r7, #16]
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	2b64      	cmp	r3, #100	; 0x64
 8000de0:	d901      	bls.n	8000de6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000de2:	2303      	movs	r3, #3
 8000de4:	e292      	b.n	800130c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000de6:	4b60      	ldr	r3, [pc, #384]	; (8000f68 <HAL_RCC_OscConfig+0x27c>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d1f0      	bne.n	8000dd4 <HAL_RCC_OscConfig+0xe8>
 8000df2:	e000      	b.n	8000df6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000df4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f003 0302 	and.w	r3, r3, #2
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d075      	beq.n	8000eee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e02:	4b59      	ldr	r3, [pc, #356]	; (8000f68 <HAL_RCC_OscConfig+0x27c>)
 8000e04:	689b      	ldr	r3, [r3, #8]
 8000e06:	f003 030c 	and.w	r3, r3, #12
 8000e0a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e0c:	4b56      	ldr	r3, [pc, #344]	; (8000f68 <HAL_RCC_OscConfig+0x27c>)
 8000e0e:	68db      	ldr	r3, [r3, #12]
 8000e10:	f003 0303 	and.w	r3, r3, #3
 8000e14:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8000e16:	69bb      	ldr	r3, [r7, #24]
 8000e18:	2b0c      	cmp	r3, #12
 8000e1a:	d102      	bne.n	8000e22 <HAL_RCC_OscConfig+0x136>
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	2b02      	cmp	r3, #2
 8000e20:	d002      	beq.n	8000e28 <HAL_RCC_OscConfig+0x13c>
 8000e22:	69bb      	ldr	r3, [r7, #24]
 8000e24:	2b04      	cmp	r3, #4
 8000e26:	d11f      	bne.n	8000e68 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000e28:	4b4f      	ldr	r3, [pc, #316]	; (8000f68 <HAL_RCC_OscConfig+0x27c>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d005      	beq.n	8000e40 <HAL_RCC_OscConfig+0x154>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	68db      	ldr	r3, [r3, #12]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d101      	bne.n	8000e40 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8000e3c:	2301      	movs	r3, #1
 8000e3e:	e265      	b.n	800130c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e40:	4b49      	ldr	r3, [pc, #292]	; (8000f68 <HAL_RCC_OscConfig+0x27c>)
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	691b      	ldr	r3, [r3, #16]
 8000e4c:	061b      	lsls	r3, r3, #24
 8000e4e:	4946      	ldr	r1, [pc, #280]	; (8000f68 <HAL_RCC_OscConfig+0x27c>)
 8000e50:	4313      	orrs	r3, r2
 8000e52:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000e54:	4b45      	ldr	r3, [pc, #276]	; (8000f6c <HAL_RCC_OscConfig+0x280>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff fb9b 	bl	8000594 <HAL_InitTick>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d043      	beq.n	8000eec <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8000e64:	2301      	movs	r3, #1
 8000e66:	e251      	b.n	800130c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d023      	beq.n	8000eb8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e70:	4b3d      	ldr	r3, [pc, #244]	; (8000f68 <HAL_RCC_OscConfig+0x27c>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a3c      	ldr	r2, [pc, #240]	; (8000f68 <HAL_RCC_OscConfig+0x27c>)
 8000e76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e7c:	f7ff fbd6 	bl	800062c <HAL_GetTick>
 8000e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000e82:	e008      	b.n	8000e96 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e84:	f7ff fbd2 	bl	800062c <HAL_GetTick>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	d901      	bls.n	8000e96 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8000e92:	2303      	movs	r3, #3
 8000e94:	e23a      	b.n	800130c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000e96:	4b34      	ldr	r3, [pc, #208]	; (8000f68 <HAL_RCC_OscConfig+0x27c>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d0f0      	beq.n	8000e84 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ea2:	4b31      	ldr	r3, [pc, #196]	; (8000f68 <HAL_RCC_OscConfig+0x27c>)
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	691b      	ldr	r3, [r3, #16]
 8000eae:	061b      	lsls	r3, r3, #24
 8000eb0:	492d      	ldr	r1, [pc, #180]	; (8000f68 <HAL_RCC_OscConfig+0x27c>)
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	604b      	str	r3, [r1, #4]
 8000eb6:	e01a      	b.n	8000eee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000eb8:	4b2b      	ldr	r3, [pc, #172]	; (8000f68 <HAL_RCC_OscConfig+0x27c>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a2a      	ldr	r2, [pc, #168]	; (8000f68 <HAL_RCC_OscConfig+0x27c>)
 8000ebe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ec2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ec4:	f7ff fbb2 	bl	800062c <HAL_GetTick>
 8000ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000eca:	e008      	b.n	8000ede <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ecc:	f7ff fbae 	bl	800062c <HAL_GetTick>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	693b      	ldr	r3, [r7, #16]
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	2b02      	cmp	r3, #2
 8000ed8:	d901      	bls.n	8000ede <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8000eda:	2303      	movs	r3, #3
 8000edc:	e216      	b.n	800130c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000ede:	4b22      	ldr	r3, [pc, #136]	; (8000f68 <HAL_RCC_OscConfig+0x27c>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d1f0      	bne.n	8000ecc <HAL_RCC_OscConfig+0x1e0>
 8000eea:	e000      	b.n	8000eee <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000eec:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f003 0308 	and.w	r3, r3, #8
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d041      	beq.n	8000f7e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	695b      	ldr	r3, [r3, #20]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d01c      	beq.n	8000f3c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f02:	4b19      	ldr	r3, [pc, #100]	; (8000f68 <HAL_RCC_OscConfig+0x27c>)
 8000f04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f08:	4a17      	ldr	r2, [pc, #92]	; (8000f68 <HAL_RCC_OscConfig+0x27c>)
 8000f0a:	f043 0301 	orr.w	r3, r3, #1
 8000f0e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f12:	f7ff fb8b 	bl	800062c <HAL_GetTick>
 8000f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f18:	e008      	b.n	8000f2c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f1a:	f7ff fb87 	bl	800062c <HAL_GetTick>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	1ad3      	subs	r3, r2, r3
 8000f24:	2b02      	cmp	r3, #2
 8000f26:	d901      	bls.n	8000f2c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000f28:	2303      	movs	r3, #3
 8000f2a:	e1ef      	b.n	800130c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f2c:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <HAL_RCC_OscConfig+0x27c>)
 8000f2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f32:	f003 0302 	and.w	r3, r3, #2
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d0ef      	beq.n	8000f1a <HAL_RCC_OscConfig+0x22e>
 8000f3a:	e020      	b.n	8000f7e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f3c:	4b0a      	ldr	r3, [pc, #40]	; (8000f68 <HAL_RCC_OscConfig+0x27c>)
 8000f3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f42:	4a09      	ldr	r2, [pc, #36]	; (8000f68 <HAL_RCC_OscConfig+0x27c>)
 8000f44:	f023 0301 	bic.w	r3, r3, #1
 8000f48:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f4c:	f7ff fb6e 	bl	800062c <HAL_GetTick>
 8000f50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000f52:	e00d      	b.n	8000f70 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f54:	f7ff fb6a 	bl	800062c <HAL_GetTick>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	2b02      	cmp	r3, #2
 8000f60:	d906      	bls.n	8000f70 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8000f62:	2303      	movs	r3, #3
 8000f64:	e1d2      	b.n	800130c <HAL_RCC_OscConfig+0x620>
 8000f66:	bf00      	nop
 8000f68:	40021000 	.word	0x40021000
 8000f6c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000f70:	4b8c      	ldr	r3, [pc, #560]	; (80011a4 <HAL_RCC_OscConfig+0x4b8>)
 8000f72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f76:	f003 0302 	and.w	r3, r3, #2
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d1ea      	bne.n	8000f54 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	f003 0304 	and.w	r3, r3, #4
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	f000 80a6 	beq.w	80010d8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8000f90:	4b84      	ldr	r3, [pc, #528]	; (80011a4 <HAL_RCC_OscConfig+0x4b8>)
 8000f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d101      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x2b4>
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	e000      	b.n	8000fa2 <HAL_RCC_OscConfig+0x2b6>
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d00d      	beq.n	8000fc2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fa6:	4b7f      	ldr	r3, [pc, #508]	; (80011a4 <HAL_RCC_OscConfig+0x4b8>)
 8000fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000faa:	4a7e      	ldr	r2, [pc, #504]	; (80011a4 <HAL_RCC_OscConfig+0x4b8>)
 8000fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fb0:	6593      	str	r3, [r2, #88]	; 0x58
 8000fb2:	4b7c      	ldr	r3, [pc, #496]	; (80011a4 <HAL_RCC_OscConfig+0x4b8>)
 8000fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000fc2:	4b79      	ldr	r3, [pc, #484]	; (80011a8 <HAL_RCC_OscConfig+0x4bc>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d118      	bne.n	8001000 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000fce:	4b76      	ldr	r3, [pc, #472]	; (80011a8 <HAL_RCC_OscConfig+0x4bc>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a75      	ldr	r2, [pc, #468]	; (80011a8 <HAL_RCC_OscConfig+0x4bc>)
 8000fd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fda:	f7ff fb27 	bl	800062c <HAL_GetTick>
 8000fde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000fe0:	e008      	b.n	8000ff4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fe2:	f7ff fb23 	bl	800062c <HAL_GetTick>
 8000fe6:	4602      	mov	r2, r0
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	1ad3      	subs	r3, r2, r3
 8000fec:	2b02      	cmp	r3, #2
 8000fee:	d901      	bls.n	8000ff4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8000ff0:	2303      	movs	r3, #3
 8000ff2:	e18b      	b.n	800130c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000ff4:	4b6c      	ldr	r3, [pc, #432]	; (80011a8 <HAL_RCC_OscConfig+0x4bc>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d0f0      	beq.n	8000fe2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	2b01      	cmp	r3, #1
 8001006:	d108      	bne.n	800101a <HAL_RCC_OscConfig+0x32e>
 8001008:	4b66      	ldr	r3, [pc, #408]	; (80011a4 <HAL_RCC_OscConfig+0x4b8>)
 800100a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800100e:	4a65      	ldr	r2, [pc, #404]	; (80011a4 <HAL_RCC_OscConfig+0x4b8>)
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001018:	e024      	b.n	8001064 <HAL_RCC_OscConfig+0x378>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	2b05      	cmp	r3, #5
 8001020:	d110      	bne.n	8001044 <HAL_RCC_OscConfig+0x358>
 8001022:	4b60      	ldr	r3, [pc, #384]	; (80011a4 <HAL_RCC_OscConfig+0x4b8>)
 8001024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001028:	4a5e      	ldr	r2, [pc, #376]	; (80011a4 <HAL_RCC_OscConfig+0x4b8>)
 800102a:	f043 0304 	orr.w	r3, r3, #4
 800102e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001032:	4b5c      	ldr	r3, [pc, #368]	; (80011a4 <HAL_RCC_OscConfig+0x4b8>)
 8001034:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001038:	4a5a      	ldr	r2, [pc, #360]	; (80011a4 <HAL_RCC_OscConfig+0x4b8>)
 800103a:	f043 0301 	orr.w	r3, r3, #1
 800103e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001042:	e00f      	b.n	8001064 <HAL_RCC_OscConfig+0x378>
 8001044:	4b57      	ldr	r3, [pc, #348]	; (80011a4 <HAL_RCC_OscConfig+0x4b8>)
 8001046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800104a:	4a56      	ldr	r2, [pc, #344]	; (80011a4 <HAL_RCC_OscConfig+0x4b8>)
 800104c:	f023 0301 	bic.w	r3, r3, #1
 8001050:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001054:	4b53      	ldr	r3, [pc, #332]	; (80011a4 <HAL_RCC_OscConfig+0x4b8>)
 8001056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800105a:	4a52      	ldr	r2, [pc, #328]	; (80011a4 <HAL_RCC_OscConfig+0x4b8>)
 800105c:	f023 0304 	bic.w	r3, r3, #4
 8001060:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d016      	beq.n	800109a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800106c:	f7ff fade 	bl	800062c <HAL_GetTick>
 8001070:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001072:	e00a      	b.n	800108a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001074:	f7ff fada 	bl	800062c <HAL_GetTick>
 8001078:	4602      	mov	r2, r0
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001082:	4293      	cmp	r3, r2
 8001084:	d901      	bls.n	800108a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001086:	2303      	movs	r3, #3
 8001088:	e140      	b.n	800130c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800108a:	4b46      	ldr	r3, [pc, #280]	; (80011a4 <HAL_RCC_OscConfig+0x4b8>)
 800108c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001090:	f003 0302 	and.w	r3, r3, #2
 8001094:	2b00      	cmp	r3, #0
 8001096:	d0ed      	beq.n	8001074 <HAL_RCC_OscConfig+0x388>
 8001098:	e015      	b.n	80010c6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800109a:	f7ff fac7 	bl	800062c <HAL_GetTick>
 800109e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80010a0:	e00a      	b.n	80010b8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010a2:	f7ff fac3 	bl	800062c <HAL_GetTick>
 80010a6:	4602      	mov	r2, r0
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	1ad3      	subs	r3, r2, r3
 80010ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d901      	bls.n	80010b8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80010b4:	2303      	movs	r3, #3
 80010b6:	e129      	b.n	800130c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80010b8:	4b3a      	ldr	r3, [pc, #232]	; (80011a4 <HAL_RCC_OscConfig+0x4b8>)
 80010ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010be:	f003 0302 	and.w	r3, r3, #2
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d1ed      	bne.n	80010a2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80010c6:	7ffb      	ldrb	r3, [r7, #31]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d105      	bne.n	80010d8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010cc:	4b35      	ldr	r3, [pc, #212]	; (80011a4 <HAL_RCC_OscConfig+0x4b8>)
 80010ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010d0:	4a34      	ldr	r2, [pc, #208]	; (80011a4 <HAL_RCC_OscConfig+0x4b8>)
 80010d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010d6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f003 0320 	and.w	r3, r3, #32
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d03c      	beq.n	800115e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	699b      	ldr	r3, [r3, #24]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d01c      	beq.n	8001126 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80010ec:	4b2d      	ldr	r3, [pc, #180]	; (80011a4 <HAL_RCC_OscConfig+0x4b8>)
 80010ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80010f2:	4a2c      	ldr	r2, [pc, #176]	; (80011a4 <HAL_RCC_OscConfig+0x4b8>)
 80010f4:	f043 0301 	orr.w	r3, r3, #1
 80010f8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010fc:	f7ff fa96 	bl	800062c <HAL_GetTick>
 8001100:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001102:	e008      	b.n	8001116 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001104:	f7ff fa92 	bl	800062c <HAL_GetTick>
 8001108:	4602      	mov	r2, r0
 800110a:	693b      	ldr	r3, [r7, #16]
 800110c:	1ad3      	subs	r3, r2, r3
 800110e:	2b02      	cmp	r3, #2
 8001110:	d901      	bls.n	8001116 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001112:	2303      	movs	r3, #3
 8001114:	e0fa      	b.n	800130c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001116:	4b23      	ldr	r3, [pc, #140]	; (80011a4 <HAL_RCC_OscConfig+0x4b8>)
 8001118:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800111c:	f003 0302 	and.w	r3, r3, #2
 8001120:	2b00      	cmp	r3, #0
 8001122:	d0ef      	beq.n	8001104 <HAL_RCC_OscConfig+0x418>
 8001124:	e01b      	b.n	800115e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001126:	4b1f      	ldr	r3, [pc, #124]	; (80011a4 <HAL_RCC_OscConfig+0x4b8>)
 8001128:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800112c:	4a1d      	ldr	r2, [pc, #116]	; (80011a4 <HAL_RCC_OscConfig+0x4b8>)
 800112e:	f023 0301 	bic.w	r3, r3, #1
 8001132:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001136:	f7ff fa79 	bl	800062c <HAL_GetTick>
 800113a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800113c:	e008      	b.n	8001150 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800113e:	f7ff fa75 	bl	800062c <HAL_GetTick>
 8001142:	4602      	mov	r2, r0
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	1ad3      	subs	r3, r2, r3
 8001148:	2b02      	cmp	r3, #2
 800114a:	d901      	bls.n	8001150 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800114c:	2303      	movs	r3, #3
 800114e:	e0dd      	b.n	800130c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001150:	4b14      	ldr	r3, [pc, #80]	; (80011a4 <HAL_RCC_OscConfig+0x4b8>)
 8001152:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001156:	f003 0302 	and.w	r3, r3, #2
 800115a:	2b00      	cmp	r3, #0
 800115c:	d1ef      	bne.n	800113e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	69db      	ldr	r3, [r3, #28]
 8001162:	2b00      	cmp	r3, #0
 8001164:	f000 80d1 	beq.w	800130a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001168:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <HAL_RCC_OscConfig+0x4b8>)
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	f003 030c 	and.w	r3, r3, #12
 8001170:	2b0c      	cmp	r3, #12
 8001172:	f000 808b 	beq.w	800128c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	69db      	ldr	r3, [r3, #28]
 800117a:	2b02      	cmp	r3, #2
 800117c:	d15e      	bne.n	800123c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800117e:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <HAL_RCC_OscConfig+0x4b8>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a08      	ldr	r2, [pc, #32]	; (80011a4 <HAL_RCC_OscConfig+0x4b8>)
 8001184:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001188:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800118a:	f7ff fa4f 	bl	800062c <HAL_GetTick>
 800118e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001190:	e00c      	b.n	80011ac <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001192:	f7ff fa4b 	bl	800062c <HAL_GetTick>
 8001196:	4602      	mov	r2, r0
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	2b02      	cmp	r3, #2
 800119e:	d905      	bls.n	80011ac <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80011a0:	2303      	movs	r3, #3
 80011a2:	e0b3      	b.n	800130c <HAL_RCC_OscConfig+0x620>
 80011a4:	40021000 	.word	0x40021000
 80011a8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011ac:	4b59      	ldr	r3, [pc, #356]	; (8001314 <HAL_RCC_OscConfig+0x628>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d1ec      	bne.n	8001192 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011b8:	4b56      	ldr	r3, [pc, #344]	; (8001314 <HAL_RCC_OscConfig+0x628>)
 80011ba:	68da      	ldr	r2, [r3, #12]
 80011bc:	4b56      	ldr	r3, [pc, #344]	; (8001318 <HAL_RCC_OscConfig+0x62c>)
 80011be:	4013      	ands	r3, r2
 80011c0:	687a      	ldr	r2, [r7, #4]
 80011c2:	6a11      	ldr	r1, [r2, #32]
 80011c4:	687a      	ldr	r2, [r7, #4]
 80011c6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80011c8:	3a01      	subs	r2, #1
 80011ca:	0112      	lsls	r2, r2, #4
 80011cc:	4311      	orrs	r1, r2
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80011d2:	0212      	lsls	r2, r2, #8
 80011d4:	4311      	orrs	r1, r2
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80011da:	0852      	lsrs	r2, r2, #1
 80011dc:	3a01      	subs	r2, #1
 80011de:	0552      	lsls	r2, r2, #21
 80011e0:	4311      	orrs	r1, r2
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80011e6:	0852      	lsrs	r2, r2, #1
 80011e8:	3a01      	subs	r2, #1
 80011ea:	0652      	lsls	r2, r2, #25
 80011ec:	4311      	orrs	r1, r2
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80011f2:	06d2      	lsls	r2, r2, #27
 80011f4:	430a      	orrs	r2, r1
 80011f6:	4947      	ldr	r1, [pc, #284]	; (8001314 <HAL_RCC_OscConfig+0x628>)
 80011f8:	4313      	orrs	r3, r2
 80011fa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011fc:	4b45      	ldr	r3, [pc, #276]	; (8001314 <HAL_RCC_OscConfig+0x628>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a44      	ldr	r2, [pc, #272]	; (8001314 <HAL_RCC_OscConfig+0x628>)
 8001202:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001206:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001208:	4b42      	ldr	r3, [pc, #264]	; (8001314 <HAL_RCC_OscConfig+0x628>)
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	4a41      	ldr	r2, [pc, #260]	; (8001314 <HAL_RCC_OscConfig+0x628>)
 800120e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001212:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001214:	f7ff fa0a 	bl	800062c <HAL_GetTick>
 8001218:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800121a:	e008      	b.n	800122e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800121c:	f7ff fa06 	bl	800062c <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	2b02      	cmp	r3, #2
 8001228:	d901      	bls.n	800122e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	e06e      	b.n	800130c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800122e:	4b39      	ldr	r3, [pc, #228]	; (8001314 <HAL_RCC_OscConfig+0x628>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d0f0      	beq.n	800121c <HAL_RCC_OscConfig+0x530>
 800123a:	e066      	b.n	800130a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800123c:	4b35      	ldr	r3, [pc, #212]	; (8001314 <HAL_RCC_OscConfig+0x628>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a34      	ldr	r2, [pc, #208]	; (8001314 <HAL_RCC_OscConfig+0x628>)
 8001242:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001246:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001248:	4b32      	ldr	r3, [pc, #200]	; (8001314 <HAL_RCC_OscConfig+0x628>)
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	4a31      	ldr	r2, [pc, #196]	; (8001314 <HAL_RCC_OscConfig+0x628>)
 800124e:	f023 0303 	bic.w	r3, r3, #3
 8001252:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001254:	4b2f      	ldr	r3, [pc, #188]	; (8001314 <HAL_RCC_OscConfig+0x628>)
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	4a2e      	ldr	r2, [pc, #184]	; (8001314 <HAL_RCC_OscConfig+0x628>)
 800125a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800125e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001262:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001264:	f7ff f9e2 	bl	800062c <HAL_GetTick>
 8001268:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800126a:	e008      	b.n	800127e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800126c:	f7ff f9de 	bl	800062c <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b02      	cmp	r3, #2
 8001278:	d901      	bls.n	800127e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e046      	b.n	800130c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800127e:	4b25      	ldr	r3, [pc, #148]	; (8001314 <HAL_RCC_OscConfig+0x628>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001286:	2b00      	cmp	r3, #0
 8001288:	d1f0      	bne.n	800126c <HAL_RCC_OscConfig+0x580>
 800128a:	e03e      	b.n	800130a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	69db      	ldr	r3, [r3, #28]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d101      	bne.n	8001298 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e039      	b.n	800130c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001298:	4b1e      	ldr	r3, [pc, #120]	; (8001314 <HAL_RCC_OscConfig+0x628>)
 800129a:	68db      	ldr	r3, [r3, #12]
 800129c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	f003 0203 	and.w	r2, r3, #3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6a1b      	ldr	r3, [r3, #32]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d12c      	bne.n	8001306 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b6:	3b01      	subs	r3, #1
 80012b8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d123      	bne.n	8001306 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d11b      	bne.n	8001306 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80012da:	429a      	cmp	r2, r3
 80012dc:	d113      	bne.n	8001306 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e8:	085b      	lsrs	r3, r3, #1
 80012ea:	3b01      	subs	r3, #1
 80012ec:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80012ee:	429a      	cmp	r2, r3
 80012f0:	d109      	bne.n	8001306 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012fc:	085b      	lsrs	r3, r3, #1
 80012fe:	3b01      	subs	r3, #1
 8001300:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001302:	429a      	cmp	r2, r3
 8001304:	d001      	beq.n	800130a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e000      	b.n	800130c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800130a:	2300      	movs	r3, #0
}
 800130c:	4618      	mov	r0, r3
 800130e:	3720      	adds	r7, #32
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	40021000 	.word	0x40021000
 8001318:	019f800c 	.word	0x019f800c

0800131c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b086      	sub	sp, #24
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001326:	2300      	movs	r3, #0
 8001328:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d101      	bne.n	8001334 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e11e      	b.n	8001572 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001334:	4b91      	ldr	r3, [pc, #580]	; (800157c <HAL_RCC_ClockConfig+0x260>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 030f 	and.w	r3, r3, #15
 800133c:	683a      	ldr	r2, [r7, #0]
 800133e:	429a      	cmp	r2, r3
 8001340:	d910      	bls.n	8001364 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001342:	4b8e      	ldr	r3, [pc, #568]	; (800157c <HAL_RCC_ClockConfig+0x260>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f023 020f 	bic.w	r2, r3, #15
 800134a:	498c      	ldr	r1, [pc, #560]	; (800157c <HAL_RCC_ClockConfig+0x260>)
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	4313      	orrs	r3, r2
 8001350:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001352:	4b8a      	ldr	r3, [pc, #552]	; (800157c <HAL_RCC_ClockConfig+0x260>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f003 030f 	and.w	r3, r3, #15
 800135a:	683a      	ldr	r2, [r7, #0]
 800135c:	429a      	cmp	r2, r3
 800135e:	d001      	beq.n	8001364 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	e106      	b.n	8001572 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 0301 	and.w	r3, r3, #1
 800136c:	2b00      	cmp	r3, #0
 800136e:	d073      	beq.n	8001458 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	2b03      	cmp	r3, #3
 8001376:	d129      	bne.n	80013cc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001378:	4b81      	ldr	r3, [pc, #516]	; (8001580 <HAL_RCC_ClockConfig+0x264>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001380:	2b00      	cmp	r3, #0
 8001382:	d101      	bne.n	8001388 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e0f4      	b.n	8001572 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001388:	f000 f966 	bl	8001658 <RCC_GetSysClockFreqFromPLLSource>
 800138c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	4a7c      	ldr	r2, [pc, #496]	; (8001584 <HAL_RCC_ClockConfig+0x268>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d93f      	bls.n	8001416 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001396:	4b7a      	ldr	r3, [pc, #488]	; (8001580 <HAL_RCC_ClockConfig+0x264>)
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d009      	beq.n	80013b6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d033      	beq.n	8001416 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d12f      	bne.n	8001416 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80013b6:	4b72      	ldr	r3, [pc, #456]	; (8001580 <HAL_RCC_ClockConfig+0x264>)
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80013be:	4a70      	ldr	r2, [pc, #448]	; (8001580 <HAL_RCC_ClockConfig+0x264>)
 80013c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013c4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80013c6:	2380      	movs	r3, #128	; 0x80
 80013c8:	617b      	str	r3, [r7, #20]
 80013ca:	e024      	b.n	8001416 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d107      	bne.n	80013e4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013d4:	4b6a      	ldr	r3, [pc, #424]	; (8001580 <HAL_RCC_ClockConfig+0x264>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d109      	bne.n	80013f4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80013e0:	2301      	movs	r3, #1
 80013e2:	e0c6      	b.n	8001572 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013e4:	4b66      	ldr	r3, [pc, #408]	; (8001580 <HAL_RCC_ClockConfig+0x264>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d101      	bne.n	80013f4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e0be      	b.n	8001572 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80013f4:	f000 f8ce 	bl	8001594 <HAL_RCC_GetSysClockFreq>
 80013f8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	4a61      	ldr	r2, [pc, #388]	; (8001584 <HAL_RCC_ClockConfig+0x268>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d909      	bls.n	8001416 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001402:	4b5f      	ldr	r3, [pc, #380]	; (8001580 <HAL_RCC_ClockConfig+0x264>)
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800140a:	4a5d      	ldr	r2, [pc, #372]	; (8001580 <HAL_RCC_ClockConfig+0x264>)
 800140c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001410:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001412:	2380      	movs	r3, #128	; 0x80
 8001414:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001416:	4b5a      	ldr	r3, [pc, #360]	; (8001580 <HAL_RCC_ClockConfig+0x264>)
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	f023 0203 	bic.w	r2, r3, #3
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	4957      	ldr	r1, [pc, #348]	; (8001580 <HAL_RCC_ClockConfig+0x264>)
 8001424:	4313      	orrs	r3, r2
 8001426:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001428:	f7ff f900 	bl	800062c <HAL_GetTick>
 800142c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800142e:	e00a      	b.n	8001446 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001430:	f7ff f8fc 	bl	800062c <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	f241 3288 	movw	r2, #5000	; 0x1388
 800143e:	4293      	cmp	r3, r2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e095      	b.n	8001572 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001446:	4b4e      	ldr	r3, [pc, #312]	; (8001580 <HAL_RCC_ClockConfig+0x264>)
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f003 020c 	and.w	r2, r3, #12
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	429a      	cmp	r2, r3
 8001456:	d1eb      	bne.n	8001430 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f003 0302 	and.w	r3, r3, #2
 8001460:	2b00      	cmp	r3, #0
 8001462:	d023      	beq.n	80014ac <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0304 	and.w	r3, r3, #4
 800146c:	2b00      	cmp	r3, #0
 800146e:	d005      	beq.n	800147c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001470:	4b43      	ldr	r3, [pc, #268]	; (8001580 <HAL_RCC_ClockConfig+0x264>)
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	4a42      	ldr	r2, [pc, #264]	; (8001580 <HAL_RCC_ClockConfig+0x264>)
 8001476:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800147a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0308 	and.w	r3, r3, #8
 8001484:	2b00      	cmp	r3, #0
 8001486:	d007      	beq.n	8001498 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001488:	4b3d      	ldr	r3, [pc, #244]	; (8001580 <HAL_RCC_ClockConfig+0x264>)
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001490:	4a3b      	ldr	r2, [pc, #236]	; (8001580 <HAL_RCC_ClockConfig+0x264>)
 8001492:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001496:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001498:	4b39      	ldr	r3, [pc, #228]	; (8001580 <HAL_RCC_ClockConfig+0x264>)
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	4936      	ldr	r1, [pc, #216]	; (8001580 <HAL_RCC_ClockConfig+0x264>)
 80014a6:	4313      	orrs	r3, r2
 80014a8:	608b      	str	r3, [r1, #8]
 80014aa:	e008      	b.n	80014be <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	2b80      	cmp	r3, #128	; 0x80
 80014b0:	d105      	bne.n	80014be <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80014b2:	4b33      	ldr	r3, [pc, #204]	; (8001580 <HAL_RCC_ClockConfig+0x264>)
 80014b4:	689b      	ldr	r3, [r3, #8]
 80014b6:	4a32      	ldr	r2, [pc, #200]	; (8001580 <HAL_RCC_ClockConfig+0x264>)
 80014b8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80014bc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014be:	4b2f      	ldr	r3, [pc, #188]	; (800157c <HAL_RCC_ClockConfig+0x260>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 030f 	and.w	r3, r3, #15
 80014c6:	683a      	ldr	r2, [r7, #0]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	d21d      	bcs.n	8001508 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014cc:	4b2b      	ldr	r3, [pc, #172]	; (800157c <HAL_RCC_ClockConfig+0x260>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f023 020f 	bic.w	r2, r3, #15
 80014d4:	4929      	ldr	r1, [pc, #164]	; (800157c <HAL_RCC_ClockConfig+0x260>)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	4313      	orrs	r3, r2
 80014da:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80014dc:	f7ff f8a6 	bl	800062c <HAL_GetTick>
 80014e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014e2:	e00a      	b.n	80014fa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014e4:	f7ff f8a2 	bl	800062c <HAL_GetTick>
 80014e8:	4602      	mov	r2, r0
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80014f2:	4293      	cmp	r3, r2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e03b      	b.n	8001572 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014fa:	4b20      	ldr	r3, [pc, #128]	; (800157c <HAL_RCC_ClockConfig+0x260>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f003 030f 	and.w	r3, r3, #15
 8001502:	683a      	ldr	r2, [r7, #0]
 8001504:	429a      	cmp	r2, r3
 8001506:	d1ed      	bne.n	80014e4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0304 	and.w	r3, r3, #4
 8001510:	2b00      	cmp	r3, #0
 8001512:	d008      	beq.n	8001526 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001514:	4b1a      	ldr	r3, [pc, #104]	; (8001580 <HAL_RCC_ClockConfig+0x264>)
 8001516:	689b      	ldr	r3, [r3, #8]
 8001518:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	4917      	ldr	r1, [pc, #92]	; (8001580 <HAL_RCC_ClockConfig+0x264>)
 8001522:	4313      	orrs	r3, r2
 8001524:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0308 	and.w	r3, r3, #8
 800152e:	2b00      	cmp	r3, #0
 8001530:	d009      	beq.n	8001546 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001532:	4b13      	ldr	r3, [pc, #76]	; (8001580 <HAL_RCC_ClockConfig+0x264>)
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	691b      	ldr	r3, [r3, #16]
 800153e:	00db      	lsls	r3, r3, #3
 8001540:	490f      	ldr	r1, [pc, #60]	; (8001580 <HAL_RCC_ClockConfig+0x264>)
 8001542:	4313      	orrs	r3, r2
 8001544:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001546:	f000 f825 	bl	8001594 <HAL_RCC_GetSysClockFreq>
 800154a:	4602      	mov	r2, r0
 800154c:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <HAL_RCC_ClockConfig+0x264>)
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	091b      	lsrs	r3, r3, #4
 8001552:	f003 030f 	and.w	r3, r3, #15
 8001556:	490c      	ldr	r1, [pc, #48]	; (8001588 <HAL_RCC_ClockConfig+0x26c>)
 8001558:	5ccb      	ldrb	r3, [r1, r3]
 800155a:	f003 031f 	and.w	r3, r3, #31
 800155e:	fa22 f303 	lsr.w	r3, r2, r3
 8001562:	4a0a      	ldr	r2, [pc, #40]	; (800158c <HAL_RCC_ClockConfig+0x270>)
 8001564:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001566:	4b0a      	ldr	r3, [pc, #40]	; (8001590 <HAL_RCC_ClockConfig+0x274>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff f812 	bl	8000594 <HAL_InitTick>
 8001570:	4603      	mov	r3, r0
}
 8001572:	4618      	mov	r0, r3
 8001574:	3718      	adds	r7, #24
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40022000 	.word	0x40022000
 8001580:	40021000 	.word	0x40021000
 8001584:	04c4b400 	.word	0x04c4b400
 8001588:	08002ad4 	.word	0x08002ad4
 800158c:	20000000 	.word	0x20000000
 8001590:	20000004 	.word	0x20000004

08001594 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001594:	b480      	push	{r7}
 8001596:	b087      	sub	sp, #28
 8001598:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800159a:	4b2c      	ldr	r3, [pc, #176]	; (800164c <HAL_RCC_GetSysClockFreq+0xb8>)
 800159c:	689b      	ldr	r3, [r3, #8]
 800159e:	f003 030c 	and.w	r3, r3, #12
 80015a2:	2b04      	cmp	r3, #4
 80015a4:	d102      	bne.n	80015ac <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80015a6:	4b2a      	ldr	r3, [pc, #168]	; (8001650 <HAL_RCC_GetSysClockFreq+0xbc>)
 80015a8:	613b      	str	r3, [r7, #16]
 80015aa:	e047      	b.n	800163c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80015ac:	4b27      	ldr	r3, [pc, #156]	; (800164c <HAL_RCC_GetSysClockFreq+0xb8>)
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	f003 030c 	and.w	r3, r3, #12
 80015b4:	2b08      	cmp	r3, #8
 80015b6:	d102      	bne.n	80015be <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80015b8:	4b26      	ldr	r3, [pc, #152]	; (8001654 <HAL_RCC_GetSysClockFreq+0xc0>)
 80015ba:	613b      	str	r3, [r7, #16]
 80015bc:	e03e      	b.n	800163c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80015be:	4b23      	ldr	r3, [pc, #140]	; (800164c <HAL_RCC_GetSysClockFreq+0xb8>)
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f003 030c 	and.w	r3, r3, #12
 80015c6:	2b0c      	cmp	r3, #12
 80015c8:	d136      	bne.n	8001638 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80015ca:	4b20      	ldr	r3, [pc, #128]	; (800164c <HAL_RCC_GetSysClockFreq+0xb8>)
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	f003 0303 	and.w	r3, r3, #3
 80015d2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80015d4:	4b1d      	ldr	r3, [pc, #116]	; (800164c <HAL_RCC_GetSysClockFreq+0xb8>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	091b      	lsrs	r3, r3, #4
 80015da:	f003 030f 	and.w	r3, r3, #15
 80015de:	3301      	adds	r3, #1
 80015e0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	2b03      	cmp	r3, #3
 80015e6:	d10c      	bne.n	8001602 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80015e8:	4a1a      	ldr	r2, [pc, #104]	; (8001654 <HAL_RCC_GetSysClockFreq+0xc0>)
 80015ea:	68bb      	ldr	r3, [r7, #8]
 80015ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80015f0:	4a16      	ldr	r2, [pc, #88]	; (800164c <HAL_RCC_GetSysClockFreq+0xb8>)
 80015f2:	68d2      	ldr	r2, [r2, #12]
 80015f4:	0a12      	lsrs	r2, r2, #8
 80015f6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80015fa:	fb02 f303 	mul.w	r3, r2, r3
 80015fe:	617b      	str	r3, [r7, #20]
      break;
 8001600:	e00c      	b.n	800161c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001602:	4a13      	ldr	r2, [pc, #76]	; (8001650 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	fbb2 f3f3 	udiv	r3, r2, r3
 800160a:	4a10      	ldr	r2, [pc, #64]	; (800164c <HAL_RCC_GetSysClockFreq+0xb8>)
 800160c:	68d2      	ldr	r2, [r2, #12]
 800160e:	0a12      	lsrs	r2, r2, #8
 8001610:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001614:	fb02 f303 	mul.w	r3, r2, r3
 8001618:	617b      	str	r3, [r7, #20]
      break;
 800161a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800161c:	4b0b      	ldr	r3, [pc, #44]	; (800164c <HAL_RCC_GetSysClockFreq+0xb8>)
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	0e5b      	lsrs	r3, r3, #25
 8001622:	f003 0303 	and.w	r3, r3, #3
 8001626:	3301      	adds	r3, #1
 8001628:	005b      	lsls	r3, r3, #1
 800162a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800162c:	697a      	ldr	r2, [r7, #20]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	fbb2 f3f3 	udiv	r3, r2, r3
 8001634:	613b      	str	r3, [r7, #16]
 8001636:	e001      	b.n	800163c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001638:	2300      	movs	r3, #0
 800163a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800163c:	693b      	ldr	r3, [r7, #16]
}
 800163e:	4618      	mov	r0, r3
 8001640:	371c      	adds	r7, #28
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr
 800164a:	bf00      	nop
 800164c:	40021000 	.word	0x40021000
 8001650:	00f42400 	.word	0x00f42400
 8001654:	016e3600 	.word	0x016e3600

08001658 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001658:	b480      	push	{r7}
 800165a:	b087      	sub	sp, #28
 800165c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800165e:	4b1e      	ldr	r3, [pc, #120]	; (80016d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	f003 0303 	and.w	r3, r3, #3
 8001666:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001668:	4b1b      	ldr	r3, [pc, #108]	; (80016d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	091b      	lsrs	r3, r3, #4
 800166e:	f003 030f 	and.w	r3, r3, #15
 8001672:	3301      	adds	r3, #1
 8001674:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	2b03      	cmp	r3, #3
 800167a:	d10c      	bne.n	8001696 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800167c:	4a17      	ldr	r2, [pc, #92]	; (80016dc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	fbb2 f3f3 	udiv	r3, r2, r3
 8001684:	4a14      	ldr	r2, [pc, #80]	; (80016d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001686:	68d2      	ldr	r2, [r2, #12]
 8001688:	0a12      	lsrs	r2, r2, #8
 800168a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800168e:	fb02 f303 	mul.w	r3, r2, r3
 8001692:	617b      	str	r3, [r7, #20]
    break;
 8001694:	e00c      	b.n	80016b0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001696:	4a12      	ldr	r2, [pc, #72]	; (80016e0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	fbb2 f3f3 	udiv	r3, r2, r3
 800169e:	4a0e      	ldr	r2, [pc, #56]	; (80016d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80016a0:	68d2      	ldr	r2, [r2, #12]
 80016a2:	0a12      	lsrs	r2, r2, #8
 80016a4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80016a8:	fb02 f303 	mul.w	r3, r2, r3
 80016ac:	617b      	str	r3, [r7, #20]
    break;
 80016ae:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80016b0:	4b09      	ldr	r3, [pc, #36]	; (80016d8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	0e5b      	lsrs	r3, r3, #25
 80016b6:	f003 0303 	and.w	r3, r3, #3
 80016ba:	3301      	adds	r3, #1
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80016c0:	697a      	ldr	r2, [r7, #20]
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80016c8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80016ca:	687b      	ldr	r3, [r7, #4]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	371c      	adds	r7, #28
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	40021000 	.word	0x40021000
 80016dc:	016e3600 	.word	0x016e3600
 80016e0:	00f42400 	.word	0x00f42400

080016e4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	4603      	mov	r3, r0
 80016ec:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80016f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016f6:	2b84      	cmp	r3, #132	; 0x84
 80016f8:	d005      	beq.n	8001706 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80016fa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	4413      	add	r3, r2
 8001702:	3303      	adds	r3, #3
 8001704:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8001706:	68fb      	ldr	r3, [r7, #12]
}
 8001708:	4618      	mov	r0, r3
 800170a:	3714      	adds	r7, #20
 800170c:	46bd      	mov	sp, r7
 800170e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001712:	4770      	bx	lr

08001714 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001718:	f000 fa58 	bl	8001bcc <vTaskStartScheduler>
  
  return osOK;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	bd80      	pop	{r7, pc}

08001722 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001722:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001724:	b087      	sub	sp, #28
 8001726:	af02      	add	r7, sp, #8
 8001728:	6078      	str	r0, [r7, #4]
 800172a:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685c      	ldr	r4, [r3, #4]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001738:	b29e      	uxth	r6, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff ffcf 	bl	80016e4 <makeFreeRtosPriority>
 8001746:	4602      	mov	r2, r0
 8001748:	f107 030c 	add.w	r3, r7, #12
 800174c:	9301      	str	r3, [sp, #4]
 800174e:	9200      	str	r2, [sp, #0]
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	4632      	mov	r2, r6
 8001754:	4629      	mov	r1, r5
 8001756:	4620      	mov	r0, r4
 8001758:	f000 f8d2 	bl	8001900 <xTaskCreate>
 800175c:	4603      	mov	r3, r0
 800175e:	2b01      	cmp	r3, #1
 8001760:	d001      	beq.n	8001766 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8001762:	2300      	movs	r3, #0
 8001764:	e000      	b.n	8001768 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8001766:	68fb      	ldr	r3, [r7, #12]
}
 8001768:	4618      	mov	r0, r3
 800176a:	3714      	adds	r7, #20
 800176c:	46bd      	mov	sp, r7
 800176e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001770 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <osDelay+0x16>
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	e000      	b.n	8001788 <osDelay+0x18>
 8001786:	2301      	movs	r3, #1
 8001788:	4618      	mov	r0, r3
 800178a:	f000 f9eb 	bl	8001b64 <vTaskDelay>
  
  return osOK;
 800178e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001790:	4618      	mov	r0, r3
 8001792:	3710      	adds	r7, #16
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}

08001798 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f103 0208 	add.w	r2, r3, #8
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f04f 32ff 	mov.w	r2, #4294967295
 80017b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	f103 0208 	add.w	r2, r3, #8
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f103 0208 	add.w	r2, r3, #8
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2200      	movs	r2, #0
 80017e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80017e6:	bf00      	nop
 80017e8:	370c      	adds	r7, #12
 80017ea:	46bd      	mov	sp, r7
 80017ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f0:	4770      	bx	lr

080017f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80017f2:	b480      	push	{r7}
 80017f4:	b085      	sub	sp, #20
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
 80017fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	68fa      	ldr	r2, [r7, #12]
 8001806:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	689a      	ldr	r2, [r3, #8]
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	683a      	ldr	r2, [r7, #0]
 800181c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	1c5a      	adds	r2, r3, #1
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	601a      	str	r2, [r3, #0]
}
 800182e:	bf00      	nop
 8001830:	3714      	adds	r7, #20
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr

0800183a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800183a:	b480      	push	{r7}
 800183c:	b085      	sub	sp, #20
 800183e:	af00      	add	r7, sp, #0
 8001840:	6078      	str	r0, [r7, #4]
 8001842:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001850:	d103      	bne.n	800185a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	691b      	ldr	r3, [r3, #16]
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	e00c      	b.n	8001874 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	3308      	adds	r3, #8
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	e002      	b.n	8001868 <vListInsert+0x2e>
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	68ba      	ldr	r2, [r7, #8]
 8001870:	429a      	cmp	r2, r3
 8001872:	d2f6      	bcs.n	8001862 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	685a      	ldr	r2, [r3, #4]
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	683a      	ldr	r2, [r7, #0]
 8001882:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	68fa      	ldr	r2, [r7, #12]
 8001888:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	1c5a      	adds	r2, r3, #1
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	601a      	str	r2, [r3, #0]
}
 80018a0:	bf00      	nop
 80018a2:	3714      	adds	r7, #20
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	691b      	ldr	r3, [r3, #16]
 80018b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	6892      	ldr	r2, [r2, #8]
 80018c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	687a      	ldr	r2, [r7, #4]
 80018ca:	6852      	ldr	r2, [r2, #4]
 80018cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d103      	bne.n	80018e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689a      	ldr	r2, [r3, #8]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2200      	movs	r2, #0
 80018e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	1e5a      	subs	r2, r3, #1
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3714      	adds	r7, #20
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001900:	b580      	push	{r7, lr}
 8001902:	b08c      	sub	sp, #48	; 0x30
 8001904:	af04      	add	r7, sp, #16
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	603b      	str	r3, [r7, #0]
 800190c:	4613      	mov	r3, r2
 800190e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001910:	88fb      	ldrh	r3, [r7, #6]
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	4618      	mov	r0, r3
 8001916:	f000 fea7 	bl	8002668 <pvPortMalloc>
 800191a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d00e      	beq.n	8001940 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001922:	2054      	movs	r0, #84	; 0x54
 8001924:	f000 fea0 	bl	8002668 <pvPortMalloc>
 8001928:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d003      	beq.n	8001938 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	697a      	ldr	r2, [r7, #20]
 8001934:	631a      	str	r2, [r3, #48]	; 0x30
 8001936:	e005      	b.n	8001944 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001938:	6978      	ldr	r0, [r7, #20]
 800193a:	f000 ff61 	bl	8002800 <vPortFree>
 800193e:	e001      	b.n	8001944 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001940:	2300      	movs	r3, #0
 8001942:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d013      	beq.n	8001972 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800194a:	88fa      	ldrh	r2, [r7, #6]
 800194c:	2300      	movs	r3, #0
 800194e:	9303      	str	r3, [sp, #12]
 8001950:	69fb      	ldr	r3, [r7, #28]
 8001952:	9302      	str	r3, [sp, #8]
 8001954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001956:	9301      	str	r3, [sp, #4]
 8001958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800195a:	9300      	str	r3, [sp, #0]
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	68b9      	ldr	r1, [r7, #8]
 8001960:	68f8      	ldr	r0, [r7, #12]
 8001962:	f000 f80e 	bl	8001982 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001966:	69f8      	ldr	r0, [r7, #28]
 8001968:	f000 f892 	bl	8001a90 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800196c:	2301      	movs	r3, #1
 800196e:	61bb      	str	r3, [r7, #24]
 8001970:	e002      	b.n	8001978 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001972:	f04f 33ff 	mov.w	r3, #4294967295
 8001976:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001978:	69bb      	ldr	r3, [r7, #24]
	}
 800197a:	4618      	mov	r0, r3
 800197c:	3720      	adds	r7, #32
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b088      	sub	sp, #32
 8001986:	af00      	add	r7, sp, #0
 8001988:	60f8      	str	r0, [r7, #12]
 800198a:	60b9      	str	r1, [r7, #8]
 800198c:	607a      	str	r2, [r7, #4]
 800198e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001992:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800199a:	3b01      	subs	r3, #1
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	4413      	add	r3, r2
 80019a0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	f023 0307 	bic.w	r3, r3, #7
 80019a8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	f003 0307 	and.w	r3, r3, #7
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d00a      	beq.n	80019ca <prvInitialiseNewTask+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80019b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019b8:	f383 8811 	msr	BASEPRI, r3
 80019bc:	f3bf 8f6f 	isb	sy
 80019c0:	f3bf 8f4f 	dsb	sy
 80019c4:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80019c6:	bf00      	nop
 80019c8:	e7fe      	b.n	80019c8 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d01f      	beq.n	8001a10 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80019d0:	2300      	movs	r3, #0
 80019d2:	61fb      	str	r3, [r7, #28]
 80019d4:	e012      	b.n	80019fc <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80019d6:	68ba      	ldr	r2, [r7, #8]
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	4413      	add	r3, r2
 80019dc:	7819      	ldrb	r1, [r3, #0]
 80019de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	4413      	add	r3, r2
 80019e4:	3334      	adds	r3, #52	; 0x34
 80019e6:	460a      	mov	r2, r1
 80019e8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80019ea:	68ba      	ldr	r2, [r7, #8]
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	4413      	add	r3, r2
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d006      	beq.n	8001a04 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	3301      	adds	r3, #1
 80019fa:	61fb      	str	r3, [r7, #28]
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	2b0f      	cmp	r3, #15
 8001a00:	d9e9      	bls.n	80019d6 <prvInitialiseNewTask+0x54>
 8001a02:	e000      	b.n	8001a06 <prvInitialiseNewTask+0x84>
			{
				break;
 8001a04:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a0e:	e003      	b.n	8001a18 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a12:	2200      	movs	r2, #0
 8001a14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a1a:	2b06      	cmp	r3, #6
 8001a1c:	d901      	bls.n	8001a22 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001a1e:	2306      	movs	r3, #6
 8001a20:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a26:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a2c:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a30:	2200      	movs	r2, #0
 8001a32:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a36:	3304      	adds	r3, #4
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff fecd 	bl	80017d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a40:	3318      	adds	r3, #24
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff fec8 	bl	80017d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a4c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a50:	f1c3 0207 	rsb	r2, r3, #7
 8001a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a56:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a5c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a60:	2200      	movs	r2, #0
 8001a62:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a66:	2200      	movs	r2, #0
 8001a68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001a6c:	683a      	ldr	r2, [r7, #0]
 8001a6e:	68f9      	ldr	r1, [r7, #12]
 8001a70:	69b8      	ldr	r0, [r7, #24]
 8001a72:	f000 fbeb 	bl	800224c <pxPortInitialiseStack>
 8001a76:	4602      	mov	r2, r0
 8001a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a7a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8001a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d002      	beq.n	8001a88 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a86:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001a88:	bf00      	nop
 8001a8a:	3720      	adds	r7, #32
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}

08001a90 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001a98:	f000 fd04 	bl	80024a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001a9c:	4b2a      	ldr	r3, [pc, #168]	; (8001b48 <prvAddNewTaskToReadyList+0xb8>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	3301      	adds	r3, #1
 8001aa2:	4a29      	ldr	r2, [pc, #164]	; (8001b48 <prvAddNewTaskToReadyList+0xb8>)
 8001aa4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001aa6:	4b29      	ldr	r3, [pc, #164]	; (8001b4c <prvAddNewTaskToReadyList+0xbc>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d109      	bne.n	8001ac2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001aae:	4a27      	ldr	r2, [pc, #156]	; (8001b4c <prvAddNewTaskToReadyList+0xbc>)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001ab4:	4b24      	ldr	r3, [pc, #144]	; (8001b48 <prvAddNewTaskToReadyList+0xb8>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d110      	bne.n	8001ade <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001abc:	f000 faa4 	bl	8002008 <prvInitialiseTaskLists>
 8001ac0:	e00d      	b.n	8001ade <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001ac2:	4b23      	ldr	r3, [pc, #140]	; (8001b50 <prvAddNewTaskToReadyList+0xc0>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d109      	bne.n	8001ade <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001aca:	4b20      	ldr	r3, [pc, #128]	; (8001b4c <prvAddNewTaskToReadyList+0xbc>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d802      	bhi.n	8001ade <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001ad8:	4a1c      	ldr	r2, [pc, #112]	; (8001b4c <prvAddNewTaskToReadyList+0xbc>)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001ade:	4b1d      	ldr	r3, [pc, #116]	; (8001b54 <prvAddNewTaskToReadyList+0xc4>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	4a1b      	ldr	r2, [pc, #108]	; (8001b54 <prvAddNewTaskToReadyList+0xc4>)
 8001ae6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aec:	2201      	movs	r2, #1
 8001aee:	409a      	lsls	r2, r3
 8001af0:	4b19      	ldr	r3, [pc, #100]	; (8001b58 <prvAddNewTaskToReadyList+0xc8>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	4a18      	ldr	r2, [pc, #96]	; (8001b58 <prvAddNewTaskToReadyList+0xc8>)
 8001af8:	6013      	str	r3, [r2, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001afe:	4613      	mov	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	4413      	add	r3, r2
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	4a15      	ldr	r2, [pc, #84]	; (8001b5c <prvAddNewTaskToReadyList+0xcc>)
 8001b08:	441a      	add	r2, r3
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	3304      	adds	r3, #4
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4610      	mov	r0, r2
 8001b12:	f7ff fe6e 	bl	80017f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001b16:	f000 fcf5 	bl	8002504 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001b1a:	4b0d      	ldr	r3, [pc, #52]	; (8001b50 <prvAddNewTaskToReadyList+0xc0>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d00e      	beq.n	8001b40 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001b22:	4b0a      	ldr	r3, [pc, #40]	; (8001b4c <prvAddNewTaskToReadyList+0xbc>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d207      	bcs.n	8001b40 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001b30:	4b0b      	ldr	r3, [pc, #44]	; (8001b60 <prvAddNewTaskToReadyList+0xd0>)
 8001b32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	f3bf 8f4f 	dsb	sy
 8001b3c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001b40:	bf00      	nop
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	20000134 	.word	0x20000134
 8001b4c:	20000034 	.word	0x20000034
 8001b50:	20000140 	.word	0x20000140
 8001b54:	20000150 	.word	0x20000150
 8001b58:	2000013c 	.word	0x2000013c
 8001b5c:	20000038 	.word	0x20000038
 8001b60:	e000ed04 	.word	0xe000ed04

08001b64 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b084      	sub	sp, #16
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d017      	beq.n	8001ba6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8001b76:	4b13      	ldr	r3, [pc, #76]	; (8001bc4 <vTaskDelay+0x60>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d00a      	beq.n	8001b94 <vTaskDelay+0x30>
	__asm volatile
 8001b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b82:	f383 8811 	msr	BASEPRI, r3
 8001b86:	f3bf 8f6f 	isb	sy
 8001b8a:	f3bf 8f4f 	dsb	sy
 8001b8e:	60bb      	str	r3, [r7, #8]
}
 8001b90:	bf00      	nop
 8001b92:	e7fe      	b.n	8001b92 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8001b94:	f000 f862 	bl	8001c5c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001b98:	2100      	movs	r1, #0
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f000 faf0 	bl	8002180 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001ba0:	f000 f86a 	bl	8001c78 <xTaskResumeAll>
 8001ba4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d107      	bne.n	8001bbc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8001bac:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <vTaskDelay+0x64>)
 8001bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	f3bf 8f4f 	dsb	sy
 8001bb8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001bbc:	bf00      	nop
 8001bbe:	3710      	adds	r7, #16
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	2000015c 	.word	0x2000015c
 8001bc8:	e000ed04 	.word	0xe000ed04

08001bcc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8001bd2:	4b1c      	ldr	r3, [pc, #112]	; (8001c44 <vTaskStartScheduler+0x78>)
 8001bd4:	9301      	str	r3, [sp, #4]
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	9300      	str	r3, [sp, #0]
 8001bda:	2300      	movs	r3, #0
 8001bdc:	2280      	movs	r2, #128	; 0x80
 8001bde:	491a      	ldr	r1, [pc, #104]	; (8001c48 <vTaskStartScheduler+0x7c>)
 8001be0:	481a      	ldr	r0, [pc, #104]	; (8001c4c <vTaskStartScheduler+0x80>)
 8001be2:	f7ff fe8d 	bl	8001900 <xTaskCreate>
 8001be6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d116      	bne.n	8001c1c <vTaskStartScheduler+0x50>
	__asm volatile
 8001bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bf2:	f383 8811 	msr	BASEPRI, r3
 8001bf6:	f3bf 8f6f 	isb	sy
 8001bfa:	f3bf 8f4f 	dsb	sy
 8001bfe:	60bb      	str	r3, [r7, #8]
}
 8001c00:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001c02:	4b13      	ldr	r3, [pc, #76]	; (8001c50 <vTaskStartScheduler+0x84>)
 8001c04:	f04f 32ff 	mov.w	r2, #4294967295
 8001c08:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001c0a:	4b12      	ldr	r3, [pc, #72]	; (8001c54 <vTaskStartScheduler+0x88>)
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001c10:	4b11      	ldr	r3, [pc, #68]	; (8001c58 <vTaskStartScheduler+0x8c>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001c16:	f000 fba3 	bl	8002360 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001c1a:	e00e      	b.n	8001c3a <vTaskStartScheduler+0x6e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c22:	d10a      	bne.n	8001c3a <vTaskStartScheduler+0x6e>
	__asm volatile
 8001c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c28:	f383 8811 	msr	BASEPRI, r3
 8001c2c:	f3bf 8f6f 	isb	sy
 8001c30:	f3bf 8f4f 	dsb	sy
 8001c34:	607b      	str	r3, [r7, #4]
}
 8001c36:	bf00      	nop
 8001c38:	e7fe      	b.n	8001c38 <vTaskStartScheduler+0x6c>
}
 8001c3a:	bf00      	nop
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	20000158 	.word	0x20000158
 8001c48:	08002acc 	.word	0x08002acc
 8001c4c:	08001fd9 	.word	0x08001fd9
 8001c50:	20000154 	.word	0x20000154
 8001c54:	20000140 	.word	0x20000140
 8001c58:	20000138 	.word	0x20000138

08001c5c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8001c60:	4b04      	ldr	r3, [pc, #16]	; (8001c74 <vTaskSuspendAll+0x18>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	3301      	adds	r3, #1
 8001c66:	4a03      	ldr	r2, [pc, #12]	; (8001c74 <vTaskSuspendAll+0x18>)
 8001c68:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8001c6a:	bf00      	nop
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	2000015c 	.word	0x2000015c

08001c78 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001c82:	2300      	movs	r3, #0
 8001c84:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001c86:	4b41      	ldr	r3, [pc, #260]	; (8001d8c <xTaskResumeAll+0x114>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d10a      	bne.n	8001ca4 <xTaskResumeAll+0x2c>
	__asm volatile
 8001c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c92:	f383 8811 	msr	BASEPRI, r3
 8001c96:	f3bf 8f6f 	isb	sy
 8001c9a:	f3bf 8f4f 	dsb	sy
 8001c9e:	603b      	str	r3, [r7, #0]
}
 8001ca0:	bf00      	nop
 8001ca2:	e7fe      	b.n	8001ca2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001ca4:	f000 fbfe 	bl	80024a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001ca8:	4b38      	ldr	r3, [pc, #224]	; (8001d8c <xTaskResumeAll+0x114>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	3b01      	subs	r3, #1
 8001cae:	4a37      	ldr	r2, [pc, #220]	; (8001d8c <xTaskResumeAll+0x114>)
 8001cb0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001cb2:	4b36      	ldr	r3, [pc, #216]	; (8001d8c <xTaskResumeAll+0x114>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d161      	bne.n	8001d7e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001cba:	4b35      	ldr	r3, [pc, #212]	; (8001d90 <xTaskResumeAll+0x118>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d05d      	beq.n	8001d7e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001cc2:	e02e      	b.n	8001d22 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001cc4:	4b33      	ldr	r3, [pc, #204]	; (8001d94 <xTaskResumeAll+0x11c>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	68db      	ldr	r3, [r3, #12]
 8001cca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	3318      	adds	r3, #24
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff fdeb 	bl	80018ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	3304      	adds	r3, #4
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff fde6 	bl	80018ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	409a      	lsls	r2, r3
 8001ce8:	4b2b      	ldr	r3, [pc, #172]	; (8001d98 <xTaskResumeAll+0x120>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	4a2a      	ldr	r2, [pc, #168]	; (8001d98 <xTaskResumeAll+0x120>)
 8001cf0:	6013      	str	r3, [r2, #0]
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cf6:	4613      	mov	r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	4413      	add	r3, r2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	4a27      	ldr	r2, [pc, #156]	; (8001d9c <xTaskResumeAll+0x124>)
 8001d00:	441a      	add	r2, r3
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	3304      	adds	r3, #4
 8001d06:	4619      	mov	r1, r3
 8001d08:	4610      	mov	r0, r2
 8001d0a:	f7ff fd72 	bl	80017f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d12:	4b23      	ldr	r3, [pc, #140]	; (8001da0 <xTaskResumeAll+0x128>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d18:	429a      	cmp	r2, r3
 8001d1a:	d302      	bcc.n	8001d22 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8001d1c:	4b21      	ldr	r3, [pc, #132]	; (8001da4 <xTaskResumeAll+0x12c>)
 8001d1e:	2201      	movs	r2, #1
 8001d20:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001d22:	4b1c      	ldr	r3, [pc, #112]	; (8001d94 <xTaskResumeAll+0x11c>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d1cc      	bne.n	8001cc4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001d30:	f000 f9e8 	bl	8002104 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001d34:	4b1c      	ldr	r3, [pc, #112]	; (8001da8 <xTaskResumeAll+0x130>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d010      	beq.n	8001d62 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001d40:	f000 f836 	bl	8001db0 <xTaskIncrementTick>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d002      	beq.n	8001d50 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8001d4a:	4b16      	ldr	r3, [pc, #88]	; (8001da4 <xTaskResumeAll+0x12c>)
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	3b01      	subs	r3, #1
 8001d54:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d1f1      	bne.n	8001d40 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8001d5c:	4b12      	ldr	r3, [pc, #72]	; (8001da8 <xTaskResumeAll+0x130>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001d62:	4b10      	ldr	r3, [pc, #64]	; (8001da4 <xTaskResumeAll+0x12c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d009      	beq.n	8001d7e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001d6e:	4b0f      	ldr	r3, [pc, #60]	; (8001dac <xTaskResumeAll+0x134>)
 8001d70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	f3bf 8f4f 	dsb	sy
 8001d7a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001d7e:	f000 fbc1 	bl	8002504 <vPortExitCritical>

	return xAlreadyYielded;
 8001d82:	68bb      	ldr	r3, [r7, #8]
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3710      	adds	r7, #16
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	2000015c 	.word	0x2000015c
 8001d90:	20000134 	.word	0x20000134
 8001d94:	200000f4 	.word	0x200000f4
 8001d98:	2000013c 	.word	0x2000013c
 8001d9c:	20000038 	.word	0x20000038
 8001da0:	20000034 	.word	0x20000034
 8001da4:	20000148 	.word	0x20000148
 8001da8:	20000144 	.word	0x20000144
 8001dac:	e000ed04 	.word	0xe000ed04

08001db0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001db6:	2300      	movs	r3, #0
 8001db8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001dba:	4b4e      	ldr	r3, [pc, #312]	; (8001ef4 <xTaskIncrementTick+0x144>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f040 808e 	bne.w	8001ee0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001dc4:	4b4c      	ldr	r3, [pc, #304]	; (8001ef8 <xTaskIncrementTick+0x148>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001dcc:	4a4a      	ldr	r2, [pc, #296]	; (8001ef8 <xTaskIncrementTick+0x148>)
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d120      	bne.n	8001e1a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8001dd8:	4b48      	ldr	r3, [pc, #288]	; (8001efc <xTaskIncrementTick+0x14c>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d00a      	beq.n	8001df8 <xTaskIncrementTick+0x48>
	__asm volatile
 8001de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001de6:	f383 8811 	msr	BASEPRI, r3
 8001dea:	f3bf 8f6f 	isb	sy
 8001dee:	f3bf 8f4f 	dsb	sy
 8001df2:	603b      	str	r3, [r7, #0]
}
 8001df4:	bf00      	nop
 8001df6:	e7fe      	b.n	8001df6 <xTaskIncrementTick+0x46>
 8001df8:	4b40      	ldr	r3, [pc, #256]	; (8001efc <xTaskIncrementTick+0x14c>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	60fb      	str	r3, [r7, #12]
 8001dfe:	4b40      	ldr	r3, [pc, #256]	; (8001f00 <xTaskIncrementTick+0x150>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a3e      	ldr	r2, [pc, #248]	; (8001efc <xTaskIncrementTick+0x14c>)
 8001e04:	6013      	str	r3, [r2, #0]
 8001e06:	4a3e      	ldr	r2, [pc, #248]	; (8001f00 <xTaskIncrementTick+0x150>)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	6013      	str	r3, [r2, #0]
 8001e0c:	4b3d      	ldr	r3, [pc, #244]	; (8001f04 <xTaskIncrementTick+0x154>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	3301      	adds	r3, #1
 8001e12:	4a3c      	ldr	r2, [pc, #240]	; (8001f04 <xTaskIncrementTick+0x154>)
 8001e14:	6013      	str	r3, [r2, #0]
 8001e16:	f000 f975 	bl	8002104 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001e1a:	4b3b      	ldr	r3, [pc, #236]	; (8001f08 <xTaskIncrementTick+0x158>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d348      	bcc.n	8001eb6 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001e24:	4b35      	ldr	r3, [pc, #212]	; (8001efc <xTaskIncrementTick+0x14c>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d104      	bne.n	8001e38 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e2e:	4b36      	ldr	r3, [pc, #216]	; (8001f08 <xTaskIncrementTick+0x158>)
 8001e30:	f04f 32ff 	mov.w	r2, #4294967295
 8001e34:	601a      	str	r2, [r3, #0]
					break;
 8001e36:	e03e      	b.n	8001eb6 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001e38:	4b30      	ldr	r3, [pc, #192]	; (8001efc <xTaskIncrementTick+0x14c>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d203      	bcs.n	8001e58 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001e50:	4a2d      	ldr	r2, [pc, #180]	; (8001f08 <xTaskIncrementTick+0x158>)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001e56:	e02e      	b.n	8001eb6 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	3304      	adds	r3, #4
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7ff fd25 	bl	80018ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001e62:	68bb      	ldr	r3, [r7, #8]
 8001e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d004      	beq.n	8001e74 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	3318      	adds	r3, #24
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7ff fd1c 	bl	80018ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e78:	2201      	movs	r2, #1
 8001e7a:	409a      	lsls	r2, r3
 8001e7c:	4b23      	ldr	r3, [pc, #140]	; (8001f0c <xTaskIncrementTick+0x15c>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	4a22      	ldr	r2, [pc, #136]	; (8001f0c <xTaskIncrementTick+0x15c>)
 8001e84:	6013      	str	r3, [r2, #0]
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	4413      	add	r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	4a1f      	ldr	r2, [pc, #124]	; (8001f10 <xTaskIncrementTick+0x160>)
 8001e94:	441a      	add	r2, r3
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	3304      	adds	r3, #4
 8001e9a:	4619      	mov	r1, r3
 8001e9c:	4610      	mov	r0, r2
 8001e9e:	f7ff fca8 	bl	80017f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ea6:	4b1b      	ldr	r3, [pc, #108]	; (8001f14 <xTaskIncrementTick+0x164>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d3b9      	bcc.n	8001e24 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001eb4:	e7b6      	b.n	8001e24 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001eb6:	4b17      	ldr	r3, [pc, #92]	; (8001f14 <xTaskIncrementTick+0x164>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ebc:	4914      	ldr	r1, [pc, #80]	; (8001f10 <xTaskIncrementTick+0x160>)
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	4413      	add	r3, r2
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	440b      	add	r3, r1
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d901      	bls.n	8001ed2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8001ed2:	4b11      	ldr	r3, [pc, #68]	; (8001f18 <xTaskIncrementTick+0x168>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d007      	beq.n	8001eea <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8001eda:	2301      	movs	r3, #1
 8001edc:	617b      	str	r3, [r7, #20]
 8001ede:	e004      	b.n	8001eea <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8001ee0:	4b0e      	ldr	r3, [pc, #56]	; (8001f1c <xTaskIncrementTick+0x16c>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	4a0d      	ldr	r2, [pc, #52]	; (8001f1c <xTaskIncrementTick+0x16c>)
 8001ee8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8001eea:	697b      	ldr	r3, [r7, #20]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3718      	adds	r7, #24
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	2000015c 	.word	0x2000015c
 8001ef8:	20000138 	.word	0x20000138
 8001efc:	200000ec 	.word	0x200000ec
 8001f00:	200000f0 	.word	0x200000f0
 8001f04:	2000014c 	.word	0x2000014c
 8001f08:	20000154 	.word	0x20000154
 8001f0c:	2000013c 	.word	0x2000013c
 8001f10:	20000038 	.word	0x20000038
 8001f14:	20000034 	.word	0x20000034
 8001f18:	20000148 	.word	0x20000148
 8001f1c:	20000144 	.word	0x20000144

08001f20 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001f20:	b480      	push	{r7}
 8001f22:	b087      	sub	sp, #28
 8001f24:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001f26:	4b27      	ldr	r3, [pc, #156]	; (8001fc4 <vTaskSwitchContext+0xa4>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001f2e:	4b26      	ldr	r3, [pc, #152]	; (8001fc8 <vTaskSwitchContext+0xa8>)
 8001f30:	2201      	movs	r2, #1
 8001f32:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001f34:	e03f      	b.n	8001fb6 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8001f36:	4b24      	ldr	r3, [pc, #144]	; (8001fc8 <vTaskSwitchContext+0xa8>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001f3c:	4b23      	ldr	r3, [pc, #140]	; (8001fcc <vTaskSwitchContext+0xac>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	fab3 f383 	clz	r3, r3
 8001f48:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8001f4a:	7afb      	ldrb	r3, [r7, #11]
 8001f4c:	f1c3 031f 	rsb	r3, r3, #31
 8001f50:	617b      	str	r3, [r7, #20]
 8001f52:	491f      	ldr	r1, [pc, #124]	; (8001fd0 <vTaskSwitchContext+0xb0>)
 8001f54:	697a      	ldr	r2, [r7, #20]
 8001f56:	4613      	mov	r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4413      	add	r3, r2
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	440b      	add	r3, r1
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d10a      	bne.n	8001f7c <vTaskSwitchContext+0x5c>
	__asm volatile
 8001f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f6a:	f383 8811 	msr	BASEPRI, r3
 8001f6e:	f3bf 8f6f 	isb	sy
 8001f72:	f3bf 8f4f 	dsb	sy
 8001f76:	607b      	str	r3, [r7, #4]
}
 8001f78:	bf00      	nop
 8001f7a:	e7fe      	b.n	8001f7a <vTaskSwitchContext+0x5a>
 8001f7c:	697a      	ldr	r2, [r7, #20]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	4413      	add	r3, r2
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	4a12      	ldr	r2, [pc, #72]	; (8001fd0 <vTaskSwitchContext+0xb0>)
 8001f88:	4413      	add	r3, r2
 8001f8a:	613b      	str	r3, [r7, #16]
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	685a      	ldr	r2, [r3, #4]
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	605a      	str	r2, [r3, #4]
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	685a      	ldr	r2, [r3, #4]
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	3308      	adds	r3, #8
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d104      	bne.n	8001fac <vTaskSwitchContext+0x8c>
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	685a      	ldr	r2, [r3, #4]
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	605a      	str	r2, [r3, #4]
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	4a08      	ldr	r2, [pc, #32]	; (8001fd4 <vTaskSwitchContext+0xb4>)
 8001fb4:	6013      	str	r3, [r2, #0]
}
 8001fb6:	bf00      	nop
 8001fb8:	371c      	adds	r7, #28
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	2000015c 	.word	0x2000015c
 8001fc8:	20000148 	.word	0x20000148
 8001fcc:	2000013c 	.word	0x2000013c
 8001fd0:	20000038 	.word	0x20000038
 8001fd4:	20000034 	.word	0x20000034

08001fd8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b082      	sub	sp, #8
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001fe0:	f000 f852 	bl	8002088 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001fe4:	4b06      	ldr	r3, [pc, #24]	; (8002000 <prvIdleTask+0x28>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d9f9      	bls.n	8001fe0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8001fec:	4b05      	ldr	r3, [pc, #20]	; (8002004 <prvIdleTask+0x2c>)
 8001fee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ff2:	601a      	str	r2, [r3, #0]
 8001ff4:	f3bf 8f4f 	dsb	sy
 8001ff8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8001ffc:	e7f0      	b.n	8001fe0 <prvIdleTask+0x8>
 8001ffe:	bf00      	nop
 8002000:	20000038 	.word	0x20000038
 8002004:	e000ed04 	.word	0xe000ed04

08002008 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b082      	sub	sp, #8
 800200c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800200e:	2300      	movs	r3, #0
 8002010:	607b      	str	r3, [r7, #4]
 8002012:	e00c      	b.n	800202e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	4613      	mov	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	4413      	add	r3, r2
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	4a12      	ldr	r2, [pc, #72]	; (8002068 <prvInitialiseTaskLists+0x60>)
 8002020:	4413      	add	r3, r2
 8002022:	4618      	mov	r0, r3
 8002024:	f7ff fbb8 	bl	8001798 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3301      	adds	r3, #1
 800202c:	607b      	str	r3, [r7, #4]
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2b06      	cmp	r3, #6
 8002032:	d9ef      	bls.n	8002014 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002034:	480d      	ldr	r0, [pc, #52]	; (800206c <prvInitialiseTaskLists+0x64>)
 8002036:	f7ff fbaf 	bl	8001798 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800203a:	480d      	ldr	r0, [pc, #52]	; (8002070 <prvInitialiseTaskLists+0x68>)
 800203c:	f7ff fbac 	bl	8001798 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002040:	480c      	ldr	r0, [pc, #48]	; (8002074 <prvInitialiseTaskLists+0x6c>)
 8002042:	f7ff fba9 	bl	8001798 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002046:	480c      	ldr	r0, [pc, #48]	; (8002078 <prvInitialiseTaskLists+0x70>)
 8002048:	f7ff fba6 	bl	8001798 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800204c:	480b      	ldr	r0, [pc, #44]	; (800207c <prvInitialiseTaskLists+0x74>)
 800204e:	f7ff fba3 	bl	8001798 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002052:	4b0b      	ldr	r3, [pc, #44]	; (8002080 <prvInitialiseTaskLists+0x78>)
 8002054:	4a05      	ldr	r2, [pc, #20]	; (800206c <prvInitialiseTaskLists+0x64>)
 8002056:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002058:	4b0a      	ldr	r3, [pc, #40]	; (8002084 <prvInitialiseTaskLists+0x7c>)
 800205a:	4a05      	ldr	r2, [pc, #20]	; (8002070 <prvInitialiseTaskLists+0x68>)
 800205c:	601a      	str	r2, [r3, #0]
}
 800205e:	bf00      	nop
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	20000038 	.word	0x20000038
 800206c:	200000c4 	.word	0x200000c4
 8002070:	200000d8 	.word	0x200000d8
 8002074:	200000f4 	.word	0x200000f4
 8002078:	20000108 	.word	0x20000108
 800207c:	20000120 	.word	0x20000120
 8002080:	200000ec 	.word	0x200000ec
 8002084:	200000f0 	.word	0x200000f0

08002088 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800208e:	e019      	b.n	80020c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002090:	f000 fa08 	bl	80024a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002094:	4b10      	ldr	r3, [pc, #64]	; (80020d8 <prvCheckTasksWaitingTermination+0x50>)
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	68db      	ldr	r3, [r3, #12]
 800209a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	3304      	adds	r3, #4
 80020a0:	4618      	mov	r0, r3
 80020a2:	f7ff fc03 	bl	80018ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 80020a6:	4b0d      	ldr	r3, [pc, #52]	; (80020dc <prvCheckTasksWaitingTermination+0x54>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	3b01      	subs	r3, #1
 80020ac:	4a0b      	ldr	r2, [pc, #44]	; (80020dc <prvCheckTasksWaitingTermination+0x54>)
 80020ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80020b0:	4b0b      	ldr	r3, [pc, #44]	; (80020e0 <prvCheckTasksWaitingTermination+0x58>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	3b01      	subs	r3, #1
 80020b6:	4a0a      	ldr	r2, [pc, #40]	; (80020e0 <prvCheckTasksWaitingTermination+0x58>)
 80020b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80020ba:	f000 fa23 	bl	8002504 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f000 f810 	bl	80020e4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80020c4:	4b06      	ldr	r3, [pc, #24]	; (80020e0 <prvCheckTasksWaitingTermination+0x58>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d1e1      	bne.n	8002090 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80020cc:	bf00      	nop
 80020ce:	bf00      	nop
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	20000108 	.word	0x20000108
 80020dc:	20000134 	.word	0x20000134
 80020e0:	2000011c 	.word	0x2000011c

080020e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b082      	sub	sp, #8
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f0:	4618      	mov	r0, r3
 80020f2:	f000 fb85 	bl	8002800 <vPortFree>
			vPortFree( pxTCB );
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 fb82 	bl	8002800 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80020fc:	bf00      	nop
 80020fe:	3708      	adds	r7, #8
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800210a:	4b0c      	ldr	r3, [pc, #48]	; (800213c <prvResetNextTaskUnblockTime+0x38>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d104      	bne.n	800211e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002114:	4b0a      	ldr	r3, [pc, #40]	; (8002140 <prvResetNextTaskUnblockTime+0x3c>)
 8002116:	f04f 32ff 	mov.w	r2, #4294967295
 800211a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800211c:	e008      	b.n	8002130 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800211e:	4b07      	ldr	r3, [pc, #28]	; (800213c <prvResetNextTaskUnblockTime+0x38>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	4a04      	ldr	r2, [pc, #16]	; (8002140 <prvResetNextTaskUnblockTime+0x3c>)
 800212e:	6013      	str	r3, [r2, #0]
}
 8002130:	bf00      	nop
 8002132:	370c      	adds	r7, #12
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	200000ec 	.word	0x200000ec
 8002140:	20000154 	.word	0x20000154

08002144 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800214a:	4b0b      	ldr	r3, [pc, #44]	; (8002178 <xTaskGetSchedulerState+0x34>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d102      	bne.n	8002158 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002152:	2301      	movs	r3, #1
 8002154:	607b      	str	r3, [r7, #4]
 8002156:	e008      	b.n	800216a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002158:	4b08      	ldr	r3, [pc, #32]	; (800217c <xTaskGetSchedulerState+0x38>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d102      	bne.n	8002166 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002160:	2302      	movs	r3, #2
 8002162:	607b      	str	r3, [r7, #4]
 8002164:	e001      	b.n	800216a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8002166:	2300      	movs	r3, #0
 8002168:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800216a:	687b      	ldr	r3, [r7, #4]
	}
 800216c:	4618      	mov	r0, r3
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	20000140 	.word	0x20000140
 800217c:	2000015c 	.word	0x2000015c

08002180 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
 8002188:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800218a:	4b29      	ldr	r3, [pc, #164]	; (8002230 <prvAddCurrentTaskToDelayedList+0xb0>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002190:	4b28      	ldr	r3, [pc, #160]	; (8002234 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	3304      	adds	r3, #4
 8002196:	4618      	mov	r0, r3
 8002198:	f7ff fb88 	bl	80018ac <uxListRemove>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d10b      	bne.n	80021ba <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80021a2:	4b24      	ldr	r3, [pc, #144]	; (8002234 <prvAddCurrentTaskToDelayedList+0xb4>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a8:	2201      	movs	r2, #1
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	43da      	mvns	r2, r3
 80021b0:	4b21      	ldr	r3, [pc, #132]	; (8002238 <prvAddCurrentTaskToDelayedList+0xb8>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4013      	ands	r3, r2
 80021b6:	4a20      	ldr	r2, [pc, #128]	; (8002238 <prvAddCurrentTaskToDelayedList+0xb8>)
 80021b8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021c0:	d10a      	bne.n	80021d8 <prvAddCurrentTaskToDelayedList+0x58>
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d007      	beq.n	80021d8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80021c8:	4b1a      	ldr	r3, [pc, #104]	; (8002234 <prvAddCurrentTaskToDelayedList+0xb4>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	3304      	adds	r3, #4
 80021ce:	4619      	mov	r1, r3
 80021d0:	481a      	ldr	r0, [pc, #104]	; (800223c <prvAddCurrentTaskToDelayedList+0xbc>)
 80021d2:	f7ff fb0e 	bl	80017f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80021d6:	e026      	b.n	8002226 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4413      	add	r3, r2
 80021de:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80021e0:	4b14      	ldr	r3, [pc, #80]	; (8002234 <prvAddCurrentTaskToDelayedList+0xb4>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	68ba      	ldr	r2, [r7, #8]
 80021e6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80021e8:	68ba      	ldr	r2, [r7, #8]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d209      	bcs.n	8002204 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80021f0:	4b13      	ldr	r3, [pc, #76]	; (8002240 <prvAddCurrentTaskToDelayedList+0xc0>)
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	4b0f      	ldr	r3, [pc, #60]	; (8002234 <prvAddCurrentTaskToDelayedList+0xb4>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	3304      	adds	r3, #4
 80021fa:	4619      	mov	r1, r3
 80021fc:	4610      	mov	r0, r2
 80021fe:	f7ff fb1c 	bl	800183a <vListInsert>
}
 8002202:	e010      	b.n	8002226 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002204:	4b0f      	ldr	r3, [pc, #60]	; (8002244 <prvAddCurrentTaskToDelayedList+0xc4>)
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	4b0a      	ldr	r3, [pc, #40]	; (8002234 <prvAddCurrentTaskToDelayedList+0xb4>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	3304      	adds	r3, #4
 800220e:	4619      	mov	r1, r3
 8002210:	4610      	mov	r0, r2
 8002212:	f7ff fb12 	bl	800183a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8002216:	4b0c      	ldr	r3, [pc, #48]	; (8002248 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68ba      	ldr	r2, [r7, #8]
 800221c:	429a      	cmp	r2, r3
 800221e:	d202      	bcs.n	8002226 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002220:	4a09      	ldr	r2, [pc, #36]	; (8002248 <prvAddCurrentTaskToDelayedList+0xc8>)
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	6013      	str	r3, [r2, #0]
}
 8002226:	bf00      	nop
 8002228:	3710      	adds	r7, #16
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	20000138 	.word	0x20000138
 8002234:	20000034 	.word	0x20000034
 8002238:	2000013c 	.word	0x2000013c
 800223c:	20000120 	.word	0x20000120
 8002240:	200000f0 	.word	0x200000f0
 8002244:	200000ec 	.word	0x200000ec
 8002248:	20000154 	.word	0x20000154

0800224c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800224c:	b480      	push	{r7}
 800224e:	b085      	sub	sp, #20
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	3b04      	subs	r3, #4
 800225c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002264:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	3b04      	subs	r3, #4
 800226a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	f023 0201 	bic.w	r2, r3, #1
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	3b04      	subs	r3, #4
 800227a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800227c:	4a0c      	ldr	r2, [pc, #48]	; (80022b0 <pxPortInitialiseStack+0x64>)
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	3b14      	subs	r3, #20
 8002286:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	3b04      	subs	r3, #4
 8002292:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f06f 0202 	mvn.w	r2, #2
 800229a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	3b20      	subs	r3, #32
 80022a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80022a2:	68fb      	ldr	r3, [r7, #12]
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3714      	adds	r7, #20
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	080022b5 	.word	0x080022b5

080022b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80022b4:	b480      	push	{r7}
 80022b6:	b085      	sub	sp, #20
 80022b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80022ba:	2300      	movs	r3, #0
 80022bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80022be:	4b12      	ldr	r3, [pc, #72]	; (8002308 <prvTaskExitError+0x54>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c6:	d00a      	beq.n	80022de <prvTaskExitError+0x2a>
	__asm volatile
 80022c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022cc:	f383 8811 	msr	BASEPRI, r3
 80022d0:	f3bf 8f6f 	isb	sy
 80022d4:	f3bf 8f4f 	dsb	sy
 80022d8:	60fb      	str	r3, [r7, #12]
}
 80022da:	bf00      	nop
 80022dc:	e7fe      	b.n	80022dc <prvTaskExitError+0x28>
	__asm volatile
 80022de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022e2:	f383 8811 	msr	BASEPRI, r3
 80022e6:	f3bf 8f6f 	isb	sy
 80022ea:	f3bf 8f4f 	dsb	sy
 80022ee:	60bb      	str	r3, [r7, #8]
}
 80022f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80022f2:	bf00      	nop
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d0fc      	beq.n	80022f4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80022fa:	bf00      	nop
 80022fc:	bf00      	nop
 80022fe:	3714      	adds	r7, #20
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr
 8002308:	2000000c 	.word	0x2000000c
 800230c:	00000000 	.word	0x00000000

08002310 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002310:	4b07      	ldr	r3, [pc, #28]	; (8002330 <pxCurrentTCBConst2>)
 8002312:	6819      	ldr	r1, [r3, #0]
 8002314:	6808      	ldr	r0, [r1, #0]
 8002316:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800231a:	f380 8809 	msr	PSP, r0
 800231e:	f3bf 8f6f 	isb	sy
 8002322:	f04f 0000 	mov.w	r0, #0
 8002326:	f380 8811 	msr	BASEPRI, r0
 800232a:	4770      	bx	lr
 800232c:	f3af 8000 	nop.w

08002330 <pxCurrentTCBConst2>:
 8002330:	20000034 	.word	0x20000034
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002334:	bf00      	nop
 8002336:	bf00      	nop

08002338 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002338:	4808      	ldr	r0, [pc, #32]	; (800235c <prvPortStartFirstTask+0x24>)
 800233a:	6800      	ldr	r0, [r0, #0]
 800233c:	6800      	ldr	r0, [r0, #0]
 800233e:	f380 8808 	msr	MSP, r0
 8002342:	f04f 0000 	mov.w	r0, #0
 8002346:	f380 8814 	msr	CONTROL, r0
 800234a:	b662      	cpsie	i
 800234c:	b661      	cpsie	f
 800234e:	f3bf 8f4f 	dsb	sy
 8002352:	f3bf 8f6f 	isb	sy
 8002356:	df00      	svc	0
 8002358:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800235a:	bf00      	nop
 800235c:	e000ed08 	.word	0xe000ed08

08002360 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b086      	sub	sp, #24
 8002364:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002366:	4b46      	ldr	r3, [pc, #280]	; (8002480 <xPortStartScheduler+0x120>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a46      	ldr	r2, [pc, #280]	; (8002484 <xPortStartScheduler+0x124>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d10a      	bne.n	8002386 <xPortStartScheduler+0x26>
	__asm volatile
 8002370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002374:	f383 8811 	msr	BASEPRI, r3
 8002378:	f3bf 8f6f 	isb	sy
 800237c:	f3bf 8f4f 	dsb	sy
 8002380:	613b      	str	r3, [r7, #16]
}
 8002382:	bf00      	nop
 8002384:	e7fe      	b.n	8002384 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002386:	4b3e      	ldr	r3, [pc, #248]	; (8002480 <xPortStartScheduler+0x120>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a3f      	ldr	r2, [pc, #252]	; (8002488 <xPortStartScheduler+0x128>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d10a      	bne.n	80023a6 <xPortStartScheduler+0x46>
	__asm volatile
 8002390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002394:	f383 8811 	msr	BASEPRI, r3
 8002398:	f3bf 8f6f 	isb	sy
 800239c:	f3bf 8f4f 	dsb	sy
 80023a0:	60fb      	str	r3, [r7, #12]
}
 80023a2:	bf00      	nop
 80023a4:	e7fe      	b.n	80023a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80023a6:	4b39      	ldr	r3, [pc, #228]	; (800248c <xPortStartScheduler+0x12c>)
 80023a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	b2db      	uxtb	r3, r3
 80023b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	22ff      	movs	r2, #255	; 0xff
 80023b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80023c0:	78fb      	ldrb	r3, [r7, #3]
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80023c8:	b2da      	uxtb	r2, r3
 80023ca:	4b31      	ldr	r3, [pc, #196]	; (8002490 <xPortStartScheduler+0x130>)
 80023cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80023ce:	4b31      	ldr	r3, [pc, #196]	; (8002494 <xPortStartScheduler+0x134>)
 80023d0:	2207      	movs	r2, #7
 80023d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80023d4:	e009      	b.n	80023ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80023d6:	4b2f      	ldr	r3, [pc, #188]	; (8002494 <xPortStartScheduler+0x134>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	3b01      	subs	r3, #1
 80023dc:	4a2d      	ldr	r2, [pc, #180]	; (8002494 <xPortStartScheduler+0x134>)
 80023de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80023e0:	78fb      	ldrb	r3, [r7, #3]
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80023ea:	78fb      	ldrb	r3, [r7, #3]
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023f2:	2b80      	cmp	r3, #128	; 0x80
 80023f4:	d0ef      	beq.n	80023d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80023f6:	4b27      	ldr	r3, [pc, #156]	; (8002494 <xPortStartScheduler+0x134>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f1c3 0307 	rsb	r3, r3, #7
 80023fe:	2b04      	cmp	r3, #4
 8002400:	d00a      	beq.n	8002418 <xPortStartScheduler+0xb8>
	__asm volatile
 8002402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002406:	f383 8811 	msr	BASEPRI, r3
 800240a:	f3bf 8f6f 	isb	sy
 800240e:	f3bf 8f4f 	dsb	sy
 8002412:	60bb      	str	r3, [r7, #8]
}
 8002414:	bf00      	nop
 8002416:	e7fe      	b.n	8002416 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002418:	4b1e      	ldr	r3, [pc, #120]	; (8002494 <xPortStartScheduler+0x134>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	021b      	lsls	r3, r3, #8
 800241e:	4a1d      	ldr	r2, [pc, #116]	; (8002494 <xPortStartScheduler+0x134>)
 8002420:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002422:	4b1c      	ldr	r3, [pc, #112]	; (8002494 <xPortStartScheduler+0x134>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800242a:	4a1a      	ldr	r2, [pc, #104]	; (8002494 <xPortStartScheduler+0x134>)
 800242c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	b2da      	uxtb	r2, r3
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002436:	4b18      	ldr	r3, [pc, #96]	; (8002498 <xPortStartScheduler+0x138>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a17      	ldr	r2, [pc, #92]	; (8002498 <xPortStartScheduler+0x138>)
 800243c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002440:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002442:	4b15      	ldr	r3, [pc, #84]	; (8002498 <xPortStartScheduler+0x138>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a14      	ldr	r2, [pc, #80]	; (8002498 <xPortStartScheduler+0x138>)
 8002448:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800244c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800244e:	f000 f8dd 	bl	800260c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002452:	4b12      	ldr	r3, [pc, #72]	; (800249c <xPortStartScheduler+0x13c>)
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002458:	f000 f8fc 	bl	8002654 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800245c:	4b10      	ldr	r3, [pc, #64]	; (80024a0 <xPortStartScheduler+0x140>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a0f      	ldr	r2, [pc, #60]	; (80024a0 <xPortStartScheduler+0x140>)
 8002462:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002466:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002468:	f7ff ff66 	bl	8002338 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800246c:	f7ff fd58 	bl	8001f20 <vTaskSwitchContext>
	prvTaskExitError();
 8002470:	f7ff ff20 	bl	80022b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3718      	adds	r7, #24
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	e000ed00 	.word	0xe000ed00
 8002484:	410fc271 	.word	0x410fc271
 8002488:	410fc270 	.word	0x410fc270
 800248c:	e000e400 	.word	0xe000e400
 8002490:	20000160 	.word	0x20000160
 8002494:	20000164 	.word	0x20000164
 8002498:	e000ed20 	.word	0xe000ed20
 800249c:	2000000c 	.word	0x2000000c
 80024a0:	e000ef34 	.word	0xe000ef34

080024a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
	__asm volatile
 80024aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024ae:	f383 8811 	msr	BASEPRI, r3
 80024b2:	f3bf 8f6f 	isb	sy
 80024b6:	f3bf 8f4f 	dsb	sy
 80024ba:	607b      	str	r3, [r7, #4]
}
 80024bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80024be:	4b0f      	ldr	r3, [pc, #60]	; (80024fc <vPortEnterCritical+0x58>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	3301      	adds	r3, #1
 80024c4:	4a0d      	ldr	r2, [pc, #52]	; (80024fc <vPortEnterCritical+0x58>)
 80024c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80024c8:	4b0c      	ldr	r3, [pc, #48]	; (80024fc <vPortEnterCritical+0x58>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d10f      	bne.n	80024f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80024d0:	4b0b      	ldr	r3, [pc, #44]	; (8002500 <vPortEnterCritical+0x5c>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d00a      	beq.n	80024f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80024da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024de:	f383 8811 	msr	BASEPRI, r3
 80024e2:	f3bf 8f6f 	isb	sy
 80024e6:	f3bf 8f4f 	dsb	sy
 80024ea:	603b      	str	r3, [r7, #0]
}
 80024ec:	bf00      	nop
 80024ee:	e7fe      	b.n	80024ee <vPortEnterCritical+0x4a>
	}
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr
 80024fc:	2000000c 	.word	0x2000000c
 8002500:	e000ed04 	.word	0xe000ed04

08002504 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800250a:	4b12      	ldr	r3, [pc, #72]	; (8002554 <vPortExitCritical+0x50>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d10a      	bne.n	8002528 <vPortExitCritical+0x24>
	__asm volatile
 8002512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002516:	f383 8811 	msr	BASEPRI, r3
 800251a:	f3bf 8f6f 	isb	sy
 800251e:	f3bf 8f4f 	dsb	sy
 8002522:	607b      	str	r3, [r7, #4]
}
 8002524:	bf00      	nop
 8002526:	e7fe      	b.n	8002526 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002528:	4b0a      	ldr	r3, [pc, #40]	; (8002554 <vPortExitCritical+0x50>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	3b01      	subs	r3, #1
 800252e:	4a09      	ldr	r2, [pc, #36]	; (8002554 <vPortExitCritical+0x50>)
 8002530:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002532:	4b08      	ldr	r3, [pc, #32]	; (8002554 <vPortExitCritical+0x50>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d105      	bne.n	8002546 <vPortExitCritical+0x42>
 800253a:	2300      	movs	r3, #0
 800253c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002544:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002546:	bf00      	nop
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	2000000c 	.word	0x2000000c
	...

08002560 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002560:	f3ef 8009 	mrs	r0, PSP
 8002564:	f3bf 8f6f 	isb	sy
 8002568:	4b15      	ldr	r3, [pc, #84]	; (80025c0 <pxCurrentTCBConst>)
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	f01e 0f10 	tst.w	lr, #16
 8002570:	bf08      	it	eq
 8002572:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002576:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800257a:	6010      	str	r0, [r2, #0]
 800257c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002580:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002584:	f380 8811 	msr	BASEPRI, r0
 8002588:	f3bf 8f4f 	dsb	sy
 800258c:	f3bf 8f6f 	isb	sy
 8002590:	f7ff fcc6 	bl	8001f20 <vTaskSwitchContext>
 8002594:	f04f 0000 	mov.w	r0, #0
 8002598:	f380 8811 	msr	BASEPRI, r0
 800259c:	bc09      	pop	{r0, r3}
 800259e:	6819      	ldr	r1, [r3, #0]
 80025a0:	6808      	ldr	r0, [r1, #0]
 80025a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025a6:	f01e 0f10 	tst.w	lr, #16
 80025aa:	bf08      	it	eq
 80025ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80025b0:	f380 8809 	msr	PSP, r0
 80025b4:	f3bf 8f6f 	isb	sy
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	f3af 8000 	nop.w

080025c0 <pxCurrentTCBConst>:
 80025c0:	20000034 	.word	0x20000034
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80025c4:	bf00      	nop
 80025c6:	bf00      	nop

080025c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
	__asm volatile
 80025ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025d2:	f383 8811 	msr	BASEPRI, r3
 80025d6:	f3bf 8f6f 	isb	sy
 80025da:	f3bf 8f4f 	dsb	sy
 80025de:	607b      	str	r3, [r7, #4]
}
 80025e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80025e2:	f7ff fbe5 	bl	8001db0 <xTaskIncrementTick>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d003      	beq.n	80025f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80025ec:	4b06      	ldr	r3, [pc, #24]	; (8002608 <xPortSysTickHandler+0x40>)
 80025ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025f2:	601a      	str	r2, [r3, #0]
 80025f4:	2300      	movs	r3, #0
 80025f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	f383 8811 	msr	BASEPRI, r3
}
 80025fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002600:	bf00      	nop
 8002602:	3708      	adds	r7, #8
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	e000ed04 	.word	0xe000ed04

0800260c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002610:	4b0b      	ldr	r3, [pc, #44]	; (8002640 <vPortSetupTimerInterrupt+0x34>)
 8002612:	2200      	movs	r2, #0
 8002614:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002616:	4b0b      	ldr	r3, [pc, #44]	; (8002644 <vPortSetupTimerInterrupt+0x38>)
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800261c:	4b0a      	ldr	r3, [pc, #40]	; (8002648 <vPortSetupTimerInterrupt+0x3c>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a0a      	ldr	r2, [pc, #40]	; (800264c <vPortSetupTimerInterrupt+0x40>)
 8002622:	fba2 2303 	umull	r2, r3, r2, r3
 8002626:	099b      	lsrs	r3, r3, #6
 8002628:	4a09      	ldr	r2, [pc, #36]	; (8002650 <vPortSetupTimerInterrupt+0x44>)
 800262a:	3b01      	subs	r3, #1
 800262c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800262e:	4b04      	ldr	r3, [pc, #16]	; (8002640 <vPortSetupTimerInterrupt+0x34>)
 8002630:	2207      	movs	r2, #7
 8002632:	601a      	str	r2, [r3, #0]
}
 8002634:	bf00      	nop
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	e000e010 	.word	0xe000e010
 8002644:	e000e018 	.word	0xe000e018
 8002648:	20000000 	.word	0x20000000
 800264c:	10624dd3 	.word	0x10624dd3
 8002650:	e000e014 	.word	0xe000e014

08002654 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002654:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002664 <vPortEnableVFP+0x10>
 8002658:	6801      	ldr	r1, [r0, #0]
 800265a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800265e:	6001      	str	r1, [r0, #0]
 8002660:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8002662:	bf00      	nop
 8002664:	e000ed88 	.word	0xe000ed88

08002668 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b08a      	sub	sp, #40	; 0x28
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002670:	2300      	movs	r3, #0
 8002672:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002674:	f7ff faf2 	bl	8001c5c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002678:	4b5b      	ldr	r3, [pc, #364]	; (80027e8 <pvPortMalloc+0x180>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d101      	bne.n	8002684 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002680:	f000 f920 	bl	80028c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002684:	4b59      	ldr	r3, [pc, #356]	; (80027ec <pvPortMalloc+0x184>)
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4013      	ands	r3, r2
 800268c:	2b00      	cmp	r3, #0
 800268e:	f040 8093 	bne.w	80027b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d01d      	beq.n	80026d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8002698:	2208      	movs	r2, #8
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4413      	add	r3, r2
 800269e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	f003 0307 	and.w	r3, r3, #7
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d014      	beq.n	80026d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f023 0307 	bic.w	r3, r3, #7
 80026b0:	3308      	adds	r3, #8
 80026b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f003 0307 	and.w	r3, r3, #7
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d00a      	beq.n	80026d4 <pvPortMalloc+0x6c>
	__asm volatile
 80026be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026c2:	f383 8811 	msr	BASEPRI, r3
 80026c6:	f3bf 8f6f 	isb	sy
 80026ca:	f3bf 8f4f 	dsb	sy
 80026ce:	617b      	str	r3, [r7, #20]
}
 80026d0:	bf00      	nop
 80026d2:	e7fe      	b.n	80026d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d06e      	beq.n	80027b8 <pvPortMalloc+0x150>
 80026da:	4b45      	ldr	r3, [pc, #276]	; (80027f0 <pvPortMalloc+0x188>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d869      	bhi.n	80027b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80026e4:	4b43      	ldr	r3, [pc, #268]	; (80027f4 <pvPortMalloc+0x18c>)
 80026e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80026e8:	4b42      	ldr	r3, [pc, #264]	; (80027f4 <pvPortMalloc+0x18c>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80026ee:	e004      	b.n	80026fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80026f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80026f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80026fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	429a      	cmp	r2, r3
 8002702:	d903      	bls.n	800270c <pvPortMalloc+0xa4>
 8002704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1f1      	bne.n	80026f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800270c:	4b36      	ldr	r3, [pc, #216]	; (80027e8 <pvPortMalloc+0x180>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002712:	429a      	cmp	r2, r3
 8002714:	d050      	beq.n	80027b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002716:	6a3b      	ldr	r3, [r7, #32]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2208      	movs	r2, #8
 800271c:	4413      	add	r3, r2
 800271e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002722:	681a      	ldr	r2, [r3, #0]
 8002724:	6a3b      	ldr	r3, [r7, #32]
 8002726:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272a:	685a      	ldr	r2, [r3, #4]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	1ad2      	subs	r2, r2, r3
 8002730:	2308      	movs	r3, #8
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	429a      	cmp	r2, r3
 8002736:	d91f      	bls.n	8002778 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4413      	add	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	f003 0307 	and.w	r3, r3, #7
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00a      	beq.n	8002760 <pvPortMalloc+0xf8>
	__asm volatile
 800274a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800274e:	f383 8811 	msr	BASEPRI, r3
 8002752:	f3bf 8f6f 	isb	sy
 8002756:	f3bf 8f4f 	dsb	sy
 800275a:	613b      	str	r3, [r7, #16]
}
 800275c:	bf00      	nop
 800275e:	e7fe      	b.n	800275e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	1ad2      	subs	r2, r2, r3
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800276c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002772:	69b8      	ldr	r0, [r7, #24]
 8002774:	f000 f908 	bl	8002988 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002778:	4b1d      	ldr	r3, [pc, #116]	; (80027f0 <pvPortMalloc+0x188>)
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	4a1b      	ldr	r2, [pc, #108]	; (80027f0 <pvPortMalloc+0x188>)
 8002784:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002786:	4b1a      	ldr	r3, [pc, #104]	; (80027f0 <pvPortMalloc+0x188>)
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	4b1b      	ldr	r3, [pc, #108]	; (80027f8 <pvPortMalloc+0x190>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	429a      	cmp	r2, r3
 8002790:	d203      	bcs.n	800279a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002792:	4b17      	ldr	r3, [pc, #92]	; (80027f0 <pvPortMalloc+0x188>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a18      	ldr	r2, [pc, #96]	; (80027f8 <pvPortMalloc+0x190>)
 8002798:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800279a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800279c:	685a      	ldr	r2, [r3, #4]
 800279e:	4b13      	ldr	r3, [pc, #76]	; (80027ec <pvPortMalloc+0x184>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	431a      	orrs	r2, r3
 80027a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80027a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027aa:	2200      	movs	r2, #0
 80027ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80027ae:	4b13      	ldr	r3, [pc, #76]	; (80027fc <pvPortMalloc+0x194>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	3301      	adds	r3, #1
 80027b4:	4a11      	ldr	r2, [pc, #68]	; (80027fc <pvPortMalloc+0x194>)
 80027b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80027b8:	f7ff fa5e 	bl	8001c78 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	f003 0307 	and.w	r3, r3, #7
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d00a      	beq.n	80027dc <pvPortMalloc+0x174>
	__asm volatile
 80027c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ca:	f383 8811 	msr	BASEPRI, r3
 80027ce:	f3bf 8f6f 	isb	sy
 80027d2:	f3bf 8f4f 	dsb	sy
 80027d6:	60fb      	str	r3, [r7, #12]
}
 80027d8:	bf00      	nop
 80027da:	e7fe      	b.n	80027da <pvPortMalloc+0x172>
	return pvReturn;
 80027dc:	69fb      	ldr	r3, [r7, #28]
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3728      	adds	r7, #40	; 0x28
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	20000d70 	.word	0x20000d70
 80027ec:	20000d84 	.word	0x20000d84
 80027f0:	20000d74 	.word	0x20000d74
 80027f4:	20000d68 	.word	0x20000d68
 80027f8:	20000d78 	.word	0x20000d78
 80027fc:	20000d7c 	.word	0x20000d7c

08002800 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b086      	sub	sp, #24
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d04d      	beq.n	80028ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002812:	2308      	movs	r3, #8
 8002814:	425b      	negs	r3, r3
 8002816:	697a      	ldr	r2, [r7, #20]
 8002818:	4413      	add	r3, r2
 800281a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	4b24      	ldr	r3, [pc, #144]	; (80028b8 <vPortFree+0xb8>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4013      	ands	r3, r2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d10a      	bne.n	8002844 <vPortFree+0x44>
	__asm volatile
 800282e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002832:	f383 8811 	msr	BASEPRI, r3
 8002836:	f3bf 8f6f 	isb	sy
 800283a:	f3bf 8f4f 	dsb	sy
 800283e:	60fb      	str	r3, [r7, #12]
}
 8002840:	bf00      	nop
 8002842:	e7fe      	b.n	8002842 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d00a      	beq.n	8002862 <vPortFree+0x62>
	__asm volatile
 800284c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002850:	f383 8811 	msr	BASEPRI, r3
 8002854:	f3bf 8f6f 	isb	sy
 8002858:	f3bf 8f4f 	dsb	sy
 800285c:	60bb      	str	r3, [r7, #8]
}
 800285e:	bf00      	nop
 8002860:	e7fe      	b.n	8002860 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	685a      	ldr	r2, [r3, #4]
 8002866:	4b14      	ldr	r3, [pc, #80]	; (80028b8 <vPortFree+0xb8>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4013      	ands	r3, r2
 800286c:	2b00      	cmp	r3, #0
 800286e:	d01e      	beq.n	80028ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d11a      	bne.n	80028ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	685a      	ldr	r2, [r3, #4]
 800287c:	4b0e      	ldr	r3, [pc, #56]	; (80028b8 <vPortFree+0xb8>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	43db      	mvns	r3, r3
 8002882:	401a      	ands	r2, r3
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002888:	f7ff f9e8 	bl	8001c5c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	685a      	ldr	r2, [r3, #4]
 8002890:	4b0a      	ldr	r3, [pc, #40]	; (80028bc <vPortFree+0xbc>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4413      	add	r3, r2
 8002896:	4a09      	ldr	r2, [pc, #36]	; (80028bc <vPortFree+0xbc>)
 8002898:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800289a:	6938      	ldr	r0, [r7, #16]
 800289c:	f000 f874 	bl	8002988 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80028a0:	4b07      	ldr	r3, [pc, #28]	; (80028c0 <vPortFree+0xc0>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	3301      	adds	r3, #1
 80028a6:	4a06      	ldr	r2, [pc, #24]	; (80028c0 <vPortFree+0xc0>)
 80028a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80028aa:	f7ff f9e5 	bl	8001c78 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80028ae:	bf00      	nop
 80028b0:	3718      	adds	r7, #24
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bd80      	pop	{r7, pc}
 80028b6:	bf00      	nop
 80028b8:	20000d84 	.word	0x20000d84
 80028bc:	20000d74 	.word	0x20000d74
 80028c0:	20000d80 	.word	0x20000d80

080028c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80028c4:	b480      	push	{r7}
 80028c6:	b085      	sub	sp, #20
 80028c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80028ca:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80028ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80028d0:	4b27      	ldr	r3, [pc, #156]	; (8002970 <prvHeapInit+0xac>)
 80028d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	f003 0307 	and.w	r3, r3, #7
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d00c      	beq.n	80028f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	3307      	adds	r3, #7
 80028e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	f023 0307 	bic.w	r3, r3, #7
 80028ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80028ec:	68ba      	ldr	r2, [r7, #8]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	4a1f      	ldr	r2, [pc, #124]	; (8002970 <prvHeapInit+0xac>)
 80028f4:	4413      	add	r3, r2
 80028f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80028fc:	4a1d      	ldr	r2, [pc, #116]	; (8002974 <prvHeapInit+0xb0>)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002902:	4b1c      	ldr	r3, [pc, #112]	; (8002974 <prvHeapInit+0xb0>)
 8002904:	2200      	movs	r2, #0
 8002906:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	68ba      	ldr	r2, [r7, #8]
 800290c:	4413      	add	r3, r2
 800290e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002910:	2208      	movs	r2, #8
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	1a9b      	subs	r3, r3, r2
 8002916:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f023 0307 	bic.w	r3, r3, #7
 800291e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	4a15      	ldr	r2, [pc, #84]	; (8002978 <prvHeapInit+0xb4>)
 8002924:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002926:	4b14      	ldr	r3, [pc, #80]	; (8002978 <prvHeapInit+0xb4>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2200      	movs	r2, #0
 800292c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800292e:	4b12      	ldr	r3, [pc, #72]	; (8002978 <prvHeapInit+0xb4>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	2200      	movs	r2, #0
 8002934:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	1ad2      	subs	r2, r2, r3
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002944:	4b0c      	ldr	r3, [pc, #48]	; (8002978 <prvHeapInit+0xb4>)
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	4a0a      	ldr	r2, [pc, #40]	; (800297c <prvHeapInit+0xb8>)
 8002952:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	4a09      	ldr	r2, [pc, #36]	; (8002980 <prvHeapInit+0xbc>)
 800295a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800295c:	4b09      	ldr	r3, [pc, #36]	; (8002984 <prvHeapInit+0xc0>)
 800295e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002962:	601a      	str	r2, [r3, #0]
}
 8002964:	bf00      	nop
 8002966:	3714      	adds	r7, #20
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr
 8002970:	20000168 	.word	0x20000168
 8002974:	20000d68 	.word	0x20000d68
 8002978:	20000d70 	.word	0x20000d70
 800297c:	20000d78 	.word	0x20000d78
 8002980:	20000d74 	.word	0x20000d74
 8002984:	20000d84 	.word	0x20000d84

08002988 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002988:	b480      	push	{r7}
 800298a:	b085      	sub	sp, #20
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002990:	4b28      	ldr	r3, [pc, #160]	; (8002a34 <prvInsertBlockIntoFreeList+0xac>)
 8002992:	60fb      	str	r3, [r7, #12]
 8002994:	e002      	b.n	800299c <prvInsertBlockIntoFreeList+0x14>
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	429a      	cmp	r2, r3
 80029a4:	d8f7      	bhi.n	8002996 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	68ba      	ldr	r2, [r7, #8]
 80029b0:	4413      	add	r3, r2
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d108      	bne.n	80029ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	441a      	add	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	68ba      	ldr	r2, [r7, #8]
 80029d4:	441a      	add	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	429a      	cmp	r2, r3
 80029dc:	d118      	bne.n	8002a10 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	4b15      	ldr	r3, [pc, #84]	; (8002a38 <prvInsertBlockIntoFreeList+0xb0>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d00d      	beq.n	8002a06 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685a      	ldr	r2, [r3, #4]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	685b      	ldr	r3, [r3, #4]
 80029f4:	441a      	add	r2, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	601a      	str	r2, [r3, #0]
 8002a04:	e008      	b.n	8002a18 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002a06:	4b0c      	ldr	r3, [pc, #48]	; (8002a38 <prvInsertBlockIntoFreeList+0xb0>)
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	601a      	str	r2, [r3, #0]
 8002a0e:	e003      	b.n	8002a18 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002a18:	68fa      	ldr	r2, [r7, #12]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d002      	beq.n	8002a26 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002a26:	bf00      	nop
 8002a28:	3714      	adds	r7, #20
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	20000d68 	.word	0x20000d68
 8002a38:	20000d70 	.word	0x20000d70

08002a3c <__libc_init_array>:
 8002a3c:	b570      	push	{r4, r5, r6, lr}
 8002a3e:	4d0d      	ldr	r5, [pc, #52]	; (8002a74 <__libc_init_array+0x38>)
 8002a40:	4c0d      	ldr	r4, [pc, #52]	; (8002a78 <__libc_init_array+0x3c>)
 8002a42:	1b64      	subs	r4, r4, r5
 8002a44:	10a4      	asrs	r4, r4, #2
 8002a46:	2600      	movs	r6, #0
 8002a48:	42a6      	cmp	r6, r4
 8002a4a:	d109      	bne.n	8002a60 <__libc_init_array+0x24>
 8002a4c:	4d0b      	ldr	r5, [pc, #44]	; (8002a7c <__libc_init_array+0x40>)
 8002a4e:	4c0c      	ldr	r4, [pc, #48]	; (8002a80 <__libc_init_array+0x44>)
 8002a50:	f000 f820 	bl	8002a94 <_init>
 8002a54:	1b64      	subs	r4, r4, r5
 8002a56:	10a4      	asrs	r4, r4, #2
 8002a58:	2600      	movs	r6, #0
 8002a5a:	42a6      	cmp	r6, r4
 8002a5c:	d105      	bne.n	8002a6a <__libc_init_array+0x2e>
 8002a5e:	bd70      	pop	{r4, r5, r6, pc}
 8002a60:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a64:	4798      	blx	r3
 8002a66:	3601      	adds	r6, #1
 8002a68:	e7ee      	b.n	8002a48 <__libc_init_array+0xc>
 8002a6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a6e:	4798      	blx	r3
 8002a70:	3601      	adds	r6, #1
 8002a72:	e7f2      	b.n	8002a5a <__libc_init_array+0x1e>
 8002a74:	08002ae4 	.word	0x08002ae4
 8002a78:	08002ae4 	.word	0x08002ae4
 8002a7c:	08002ae4 	.word	0x08002ae4
 8002a80:	08002ae8 	.word	0x08002ae8

08002a84 <memset>:
 8002a84:	4402      	add	r2, r0
 8002a86:	4603      	mov	r3, r0
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d100      	bne.n	8002a8e <memset+0xa>
 8002a8c:	4770      	bx	lr
 8002a8e:	f803 1b01 	strb.w	r1, [r3], #1
 8002a92:	e7f9      	b.n	8002a88 <memset+0x4>

08002a94 <_init>:
 8002a94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a96:	bf00      	nop
 8002a98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a9a:	bc08      	pop	{r3}
 8002a9c:	469e      	mov	lr, r3
 8002a9e:	4770      	bx	lr

08002aa0 <_fini>:
 8002aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aa2:	bf00      	nop
 8002aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aa6:	bc08      	pop	{r3}
 8002aa8:	469e      	mov	lr, r3
 8002aaa:	4770      	bx	lr
