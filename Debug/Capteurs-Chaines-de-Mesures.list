
Capteurs-Chaines-de-Mesures.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006050  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  08006230  08006230  00016230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006448  08006448  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006448  08006448  00016448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006450  08006450  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006450  08006450  00016450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006454  08006454  00016454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006458  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e68  20000074  080064cc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000edc  080064cc  00020edc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000151e7  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000328f  00000000  00000000  0003528b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f0  00000000  00000000  00038520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001088  00000000  00000000  00039710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f897  00000000  00000000  0003a798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016524  00000000  00000000  0005a02f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c415c  00000000  00000000  00070553  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001346af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000507c  00000000  00000000  00134700  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000074 	.word	0x20000074
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006218 	.word	0x08006218

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000078 	.word	0x20000078
 800021c:	08006218 	.word	0x08006218

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005c4:	b5b0      	push	{r4, r5, r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005ca:	4b09      	ldr	r3, [pc, #36]	; (80005f0 <MX_FREERTOS_Init+0x2c>)
 80005cc:	1d3c      	adds	r4, r7, #4
 80005ce:	461d      	mov	r5, r3
 80005d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d4:	682b      	ldr	r3, [r5, #0]
 80005d6:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005d8:	1d3b      	adds	r3, r7, #4
 80005da:	2100      	movs	r1, #0
 80005dc:	4618      	mov	r0, r3
 80005de:	f003 fc5a 	bl	8003e96 <osThreadCreate>
 80005e2:	4603      	mov	r3, r0
 80005e4:	4a03      	ldr	r2, [pc, #12]	; (80005f4 <MX_FREERTOS_Init+0x30>)
 80005e6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80005e8:	bf00      	nop
 80005ea:	3718      	adds	r7, #24
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bdb0      	pop	{r4, r5, r7, pc}
 80005f0:	0800623c 	.word	0x0800623c
 80005f4:	20000090 	.word	0x20000090

080005f8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000600:	2001      	movs	r0, #1
 8000602:	f003 fc6f 	bl	8003ee4 <osDelay>
 8000606:	e7fb      	b.n	8000600 <StartDefaultTask+0x8>

08000608 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA3   ------> LPUART1_RX
*/
void MX_GPIO_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b08a      	sub	sp, #40	; 0x28
 800060c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060e:	f107 0314 	add.w	r3, r7, #20
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
 800061c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800061e:	4b34      	ldr	r3, [pc, #208]	; (80006f0 <MX_GPIO_Init+0xe8>)
 8000620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000622:	4a33      	ldr	r2, [pc, #204]	; (80006f0 <MX_GPIO_Init+0xe8>)
 8000624:	f043 0304 	orr.w	r3, r3, #4
 8000628:	64d3      	str	r3, [r2, #76]	; 0x4c
 800062a:	4b31      	ldr	r3, [pc, #196]	; (80006f0 <MX_GPIO_Init+0xe8>)
 800062c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800062e:	f003 0304 	and.w	r3, r3, #4
 8000632:	613b      	str	r3, [r7, #16]
 8000634:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000636:	4b2e      	ldr	r3, [pc, #184]	; (80006f0 <MX_GPIO_Init+0xe8>)
 8000638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800063a:	4a2d      	ldr	r2, [pc, #180]	; (80006f0 <MX_GPIO_Init+0xe8>)
 800063c:	f043 0320 	orr.w	r3, r3, #32
 8000640:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000642:	4b2b      	ldr	r3, [pc, #172]	; (80006f0 <MX_GPIO_Init+0xe8>)
 8000644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000646:	f003 0320 	and.w	r3, r3, #32
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064e:	4b28      	ldr	r3, [pc, #160]	; (80006f0 <MX_GPIO_Init+0xe8>)
 8000650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000652:	4a27      	ldr	r2, [pc, #156]	; (80006f0 <MX_GPIO_Init+0xe8>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	64d3      	str	r3, [r2, #76]	; 0x4c
 800065a:	4b25      	ldr	r3, [pc, #148]	; (80006f0 <MX_GPIO_Init+0xe8>)
 800065c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065e:	f003 0301 	and.w	r3, r3, #1
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000666:	4b22      	ldr	r3, [pc, #136]	; (80006f0 <MX_GPIO_Init+0xe8>)
 8000668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066a:	4a21      	ldr	r2, [pc, #132]	; (80006f0 <MX_GPIO_Init+0xe8>)
 800066c:	f043 0302 	orr.w	r3, r3, #2
 8000670:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000672:	4b1f      	ldr	r3, [pc, #124]	; (80006f0 <MX_GPIO_Init+0xe8>)
 8000674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000676:	f003 0302 	and.w	r3, r3, #2
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800067e:	2200      	movs	r2, #0
 8000680:	2120      	movs	r1, #32
 8000682:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000686:	f000 fefb 	bl	8001480 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800068a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800068e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000690:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000694:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	2300      	movs	r3, #0
 8000698:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800069a:	f107 0314 	add.w	r3, r7, #20
 800069e:	4619      	mov	r1, r3
 80006a0:	4814      	ldr	r0, [pc, #80]	; (80006f4 <MX_GPIO_Init+0xec>)
 80006a2:	f000 fd6b 	bl	800117c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LPUART1_RX_Pin;
 80006a6:	2308      	movs	r3, #8
 80006a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006aa:	2302      	movs	r3, #2
 80006ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b2:	2300      	movs	r3, #0
 80006b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80006b6:	230c      	movs	r3, #12
 80006b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LPUART1_RX_GPIO_Port, &GPIO_InitStruct);
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	4619      	mov	r1, r3
 80006c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c4:	f000 fd5a 	bl	800117c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006c8:	2320      	movs	r3, #32
 80006ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006cc:	2301      	movs	r3, #1
 80006ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d4:	2300      	movs	r3, #0
 80006d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006d8:	f107 0314 	add.w	r3, r7, #20
 80006dc:	4619      	mov	r1, r3
 80006de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e2:	f000 fd4b 	bl	800117c <HAL_GPIO_Init>

}
 80006e6:	bf00      	nop
 80006e8:	3728      	adds	r7, #40	; 0x28
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40021000 	.word	0x40021000
 80006f4:	48000800 	.word	0x48000800

080006f8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006fc:	4b1b      	ldr	r3, [pc, #108]	; (800076c <MX_I2C1_Init+0x74>)
 80006fe:	4a1c      	ldr	r2, [pc, #112]	; (8000770 <MX_I2C1_Init+0x78>)
 8000700:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 8000702:	4b1a      	ldr	r3, [pc, #104]	; (800076c <MX_I2C1_Init+0x74>)
 8000704:	4a1b      	ldr	r2, [pc, #108]	; (8000774 <MX_I2C1_Init+0x7c>)
 8000706:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000708:	4b18      	ldr	r3, [pc, #96]	; (800076c <MX_I2C1_Init+0x74>)
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800070e:	4b17      	ldr	r3, [pc, #92]	; (800076c <MX_I2C1_Init+0x74>)
 8000710:	2201      	movs	r2, #1
 8000712:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000714:	4b15      	ldr	r3, [pc, #84]	; (800076c <MX_I2C1_Init+0x74>)
 8000716:	2200      	movs	r2, #0
 8000718:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800071a:	4b14      	ldr	r3, [pc, #80]	; (800076c <MX_I2C1_Init+0x74>)
 800071c:	2200      	movs	r2, #0
 800071e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000720:	4b12      	ldr	r3, [pc, #72]	; (800076c <MX_I2C1_Init+0x74>)
 8000722:	2200      	movs	r2, #0
 8000724:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000726:	4b11      	ldr	r3, [pc, #68]	; (800076c <MX_I2C1_Init+0x74>)
 8000728:	2200      	movs	r2, #0
 800072a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800072c:	4b0f      	ldr	r3, [pc, #60]	; (800076c <MX_I2C1_Init+0x74>)
 800072e:	2200      	movs	r2, #0
 8000730:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000732:	480e      	ldr	r0, [pc, #56]	; (800076c <MX_I2C1_Init+0x74>)
 8000734:	f000 febc 	bl	80014b0 <HAL_I2C_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800073e:	f000 f9bd 	bl	8000abc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000742:	2100      	movs	r1, #0
 8000744:	4809      	ldr	r0, [pc, #36]	; (800076c <MX_I2C1_Init+0x74>)
 8000746:	f001 fcad 	bl	80020a4 <HAL_I2CEx_ConfigAnalogFilter>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000750:	f000 f9b4 	bl	8000abc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000754:	2100      	movs	r1, #0
 8000756:	4805      	ldr	r0, [pc, #20]	; (800076c <MX_I2C1_Init+0x74>)
 8000758:	f001 fcef 	bl	800213a <HAL_I2CEx_ConfigDigitalFilter>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000762:	f000 f9ab 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000094 	.word	0x20000094
 8000770:	40005400 	.word	0x40005400
 8000774:	30a0a7fb 	.word	0x30a0a7fb

08000778 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b09a      	sub	sp, #104	; 0x68
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000780:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
 800078e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000790:	f107 0310 	add.w	r3, r7, #16
 8000794:	2244      	movs	r2, #68	; 0x44
 8000796:	2100      	movs	r1, #0
 8000798:	4618      	mov	r0, r3
 800079a:	f004 fd31 	bl	8005200 <memset>
  if(i2cHandle->Instance==I2C1)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4a1f      	ldr	r2, [pc, #124]	; (8000820 <HAL_I2C_MspInit+0xa8>)
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d136      	bne.n	8000816 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80007a8:	2340      	movs	r3, #64	; 0x40
 80007aa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007b0:	f107 0310 	add.w	r3, r7, #16
 80007b4:	4618      	mov	r0, r3
 80007b6:	f002 faf5 	bl	8002da4 <HAL_RCCEx_PeriphCLKConfig>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80007c0:	f000 f97c 	bl	8000abc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c4:	4b17      	ldr	r3, [pc, #92]	; (8000824 <HAL_I2C_MspInit+0xac>)
 80007c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c8:	4a16      	ldr	r2, [pc, #88]	; (8000824 <HAL_I2C_MspInit+0xac>)
 80007ca:	f043 0302 	orr.w	r3, r3, #2
 80007ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007d0:	4b14      	ldr	r3, [pc, #80]	; (8000824 <HAL_I2C_MspInit+0xac>)
 80007d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d4:	f003 0302 	and.w	r3, r3, #2
 80007d8:	60fb      	str	r3, [r7, #12]
 80007da:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007dc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007e0:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007e2:	2312      	movs	r3, #18
 80007e4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ea:	2300      	movs	r3, #0
 80007ec:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007ee:	2304      	movs	r3, #4
 80007f0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80007f6:	4619      	mov	r1, r3
 80007f8:	480b      	ldr	r0, [pc, #44]	; (8000828 <HAL_I2C_MspInit+0xb0>)
 80007fa:	f000 fcbf 	bl	800117c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007fe:	4b09      	ldr	r3, [pc, #36]	; (8000824 <HAL_I2C_MspInit+0xac>)
 8000800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000802:	4a08      	ldr	r2, [pc, #32]	; (8000824 <HAL_I2C_MspInit+0xac>)
 8000804:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000808:	6593      	str	r3, [r2, #88]	; 0x58
 800080a:	4b06      	ldr	r3, [pc, #24]	; (8000824 <HAL_I2C_MspInit+0xac>)
 800080c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800080e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000816:	bf00      	nop
 8000818:	3768      	adds	r7, #104	; 0x68
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40005400 	.word	0x40005400
 8000824:	40021000 	.word	0x40021000
 8000828:	48000400 	.word	0x48000400

0800082c <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000834:	1d39      	adds	r1, r7, #4
 8000836:	f04f 33ff 	mov.w	r3, #4294967295
 800083a:	2201      	movs	r2, #1
 800083c:	4803      	ldr	r0, [pc, #12]	; (800084c <__io_putchar+0x20>)
 800083e:	f002 fcf1 	bl	8003224 <HAL_UART_Transmit>
return ch;
 8000842:	687b      	ldr	r3, [r7, #4]
}
 8000844:	4618      	mov	r0, r3
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	200000e4 	.word	0x200000e4

08000850 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b090      	sub	sp, #64	; 0x40
 8000854:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000856:	f000 fb1a 	bl	8000e8e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800085a:	f000 f8e3 	bl	8000a24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800085e:	f7ff fed3 	bl	8000608 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000862:	f7ff ff49 	bl	80006f8 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000866:	f000 fa45 	bl	8000cf4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 800086a:	2201      	movs	r2, #1
 800086c:	2120      	movs	r1, #32
 800086e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000872:	f000 fe05 	bl	8001480 <HAL_GPIO_WritePin>
    HAL_Delay(2000);
 8000876:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800087a:	f000 fb79 	bl	8000f70 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);
 800087e:	2200      	movs	r2, #0
 8000880:	2120      	movs	r1, #32
 8000882:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000886:	f000 fdfb 	bl	8001480 <HAL_GPIO_WritePin>
    BSP_LCD_DisplayStringAt(0, LINE(5), (uint8_t *)mess,CENTER_MODE);
    HAL_Delay(1000);
    BSP_LCD_Clear(LCD_COLOR_WHITE);
    */
    // Go through all possible i2c addresses
	printf("\r\n");
 800088a:	485a      	ldr	r0, [pc, #360]	; (80009f4 <main+0x1a4>)
 800088c:	f004 fd46 	bl	800531c <puts>
	printf("\r\n");
 8000890:	4858      	ldr	r0, [pc, #352]	; (80009f4 <main+0x1a4>)
 8000892:	f004 fd43 	bl	800531c <puts>
    printf("-- Test des adresses disponibles --\r\n");
 8000896:	4858      	ldr	r0, [pc, #352]	; (80009f8 <main+0x1a8>)
 8000898:	f004 fd40 	bl	800531c <puts>
    	for (uint8_t i = 0; i < 128; i++) {
 800089c:	2300      	movs	r3, #0
 800089e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80008a2:	e029      	b.n	80008f8 <main+0xa8>
    	  if (HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 3, 5) == HAL_OK) {
 80008a4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80008a8:	b29b      	uxth	r3, r3
 80008aa:	005b      	lsls	r3, r3, #1
 80008ac:	b299      	uxth	r1, r3
 80008ae:	2305      	movs	r3, #5
 80008b0:	2203      	movs	r2, #3
 80008b2:	4852      	ldr	r0, [pc, #328]	; (80009fc <main+0x1ac>)
 80008b4:	f001 f876 	bl	80019a4 <HAL_I2C_IsDeviceReady>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d106      	bne.n	80008cc <main+0x7c>
    		  printf("%2x ", i);
 80008be:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80008c2:	4619      	mov	r1, r3
 80008c4:	484e      	ldr	r0, [pc, #312]	; (8000a00 <main+0x1b0>)
 80008c6:	f004 fca3 	bl	8005210 <iprintf>
 80008ca:	e002      	b.n	80008d2 <main+0x82>
    	  } else {
    		  printf("-- ");
 80008cc:	484d      	ldr	r0, [pc, #308]	; (8000a04 <main+0x1b4>)
 80008ce:	f004 fc9f 	bl	8005210 <iprintf>
    	  }
    	  if (i > 0 && (i + 1) % 16 == 0) printf("\n\r");
 80008d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d009      	beq.n	80008ee <main+0x9e>
 80008da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80008de:	3301      	adds	r3, #1
 80008e0:	f003 030f 	and.w	r3, r3, #15
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d102      	bne.n	80008ee <main+0x9e>
 80008e8:	4847      	ldr	r0, [pc, #284]	; (8000a08 <main+0x1b8>)
 80008ea:	f004 fc91 	bl	8005210 <iprintf>
    	for (uint8_t i = 0; i < 128; i++) {
 80008ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80008f2:	3301      	adds	r3, #1
 80008f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80008f8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	dad1      	bge.n	80008a4 <main+0x54>
      }

      printf("\n\r");
 8000900:	4841      	ldr	r0, [pc, #260]	; (8000a08 <main+0x1b8>)
 8000902:	f004 fc85 	bl	8005210 <iprintf>

      printf("-- Test de l'identite du capteur MPU-9250 --\r\n");
 8000906:	4841      	ldr	r0, [pc, #260]	; (8000a0c <main+0x1bc>)
 8000908:	f004 fd08 	bl	800531c <puts>
      uint8_t data[48];
      data[0]=0x75;
 800090c:	2375      	movs	r3, #117	; 0x75
 800090e:	713b      	strb	r3, [r7, #4]
      printf("Registre d'identification : %x\r\n",data[0]);
 8000910:	793b      	ldrb	r3, [r7, #4]
 8000912:	4619      	mov	r1, r3
 8000914:	483e      	ldr	r0, [pc, #248]	; (8000a10 <main+0x1c0>)
 8000916:	f004 fc7b 	bl	8005210 <iprintf>
      if(HAL_I2C_Master_Transmit(&hi2c1,AdressMPU, data, 1, HAL_MAX_DELAY) != HAL_OK){
 800091a:	1d3a      	adds	r2, r7, #4
 800091c:	f04f 33ff 	mov.w	r3, #4294967295
 8000920:	9300      	str	r3, [sp, #0]
 8000922:	2301      	movs	r3, #1
 8000924:	21d0      	movs	r1, #208	; 0xd0
 8000926:	4835      	ldr	r0, [pc, #212]	; (80009fc <main+0x1ac>)
 8000928:	f000 fe52 	bl	80015d0 <HAL_I2C_Master_Transmit>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <main+0xe6>
    	  Error_Handler();
 8000932:	f000 f8c3 	bl	8000abc <Error_Handler>
      }
      if(HAL_I2C_Master_Receive(&hi2c1,AdressMPU, data, 1, HAL_MAX_DELAY) != HAL_OK){
 8000936:	1d3a      	adds	r2, r7, #4
 8000938:	f04f 33ff 	mov.w	r3, #4294967295
 800093c:	9300      	str	r3, [sp, #0]
 800093e:	2301      	movs	r3, #1
 8000940:	21d0      	movs	r1, #208	; 0xd0
 8000942:	482e      	ldr	r0, [pc, #184]	; (80009fc <main+0x1ac>)
 8000944:	f000 ff38 	bl	80017b8 <HAL_I2C_Master_Receive>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <main+0x102>
    	  Error_Handler();
 800094e:	f000 f8b5 	bl	8000abc <Error_Handler>
      }
      printf("Valeur recu : %x\r\n",data[0]);
 8000952:	793b      	ldrb	r3, [r7, #4]
 8000954:	4619      	mov	r1, r3
 8000956:	482f      	ldr	r0, [pc, #188]	; (8000a14 <main+0x1c4>)
 8000958:	f004 fc5a 	bl	8005210 <iprintf>
      if (data[0]!=0x71){
 800095c:	793b      	ldrb	r3, [r7, #4]
 800095e:	2b71      	cmp	r3, #113	; 0x71
 8000960:	d005      	beq.n	800096e <main+0x11e>
    	  printf("Error !\r\n");
 8000962:	482d      	ldr	r0, [pc, #180]	; (8000a18 <main+0x1c8>)
 8000964:	f004 fcda 	bl	800531c <puts>
    	  Error_Handler();
 8000968:	f000 f8a8 	bl	8000abc <Error_Handler>
 800096c:	e002      	b.n	8000974 <main+0x124>
      }
      else{
    	  printf("Ok !\r\n");
 800096e:	482b      	ldr	r0, [pc, #172]	; (8000a1c <main+0x1cc>)
 8000970:	f004 fcd4 	bl	800531c <puts>
      }
	  printf("\r\n");
 8000974:	481f      	ldr	r0, [pc, #124]	; (80009f4 <main+0x1a4>)
 8000976:	f004 fcd1 	bl	800531c <puts>
      printf("-- Test de l'identite du capteur BPM-280 --\r\n");
 800097a:	4829      	ldr	r0, [pc, #164]	; (8000a20 <main+0x1d0>)
 800097c:	f004 fcce 	bl	800531c <puts>
      data[0]=0xd0;
 8000980:	23d0      	movs	r3, #208	; 0xd0
 8000982:	713b      	strb	r3, [r7, #4]
      printf("Registre d'identification : %x\r\n",data[0]);
 8000984:	793b      	ldrb	r3, [r7, #4]
 8000986:	4619      	mov	r1, r3
 8000988:	4821      	ldr	r0, [pc, #132]	; (8000a10 <main+0x1c0>)
 800098a:	f004 fc41 	bl	8005210 <iprintf>
      if(HAL_I2C_Master_Transmit(&hi2c1,AdressBMP, data, 1, HAL_MAX_DELAY) != HAL_OK){
 800098e:	1d3a      	adds	r2, r7, #4
 8000990:	f04f 33ff 	mov.w	r3, #4294967295
 8000994:	9300      	str	r3, [sp, #0]
 8000996:	2301      	movs	r3, #1
 8000998:	21ee      	movs	r1, #238	; 0xee
 800099a:	4818      	ldr	r0, [pc, #96]	; (80009fc <main+0x1ac>)
 800099c:	f000 fe18 	bl	80015d0 <HAL_I2C_Master_Transmit>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <main+0x15a>
    	  Error_Handler();
 80009a6:	f000 f889 	bl	8000abc <Error_Handler>
      }
      if(HAL_I2C_Master_Receive(&hi2c1,AdressBMP, data, 1, HAL_MAX_DELAY) != HAL_OK){
 80009aa:	1d3a      	adds	r2, r7, #4
 80009ac:	f04f 33ff 	mov.w	r3, #4294967295
 80009b0:	9300      	str	r3, [sp, #0]
 80009b2:	2301      	movs	r3, #1
 80009b4:	21ee      	movs	r1, #238	; 0xee
 80009b6:	4811      	ldr	r0, [pc, #68]	; (80009fc <main+0x1ac>)
 80009b8:	f000 fefe 	bl	80017b8 <HAL_I2C_Master_Receive>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <main+0x176>
    	  Error_Handler();
 80009c2:	f000 f87b 	bl	8000abc <Error_Handler>
      }
      printf("Valeur recu : %x\r\n",data[0]);
 80009c6:	793b      	ldrb	r3, [r7, #4]
 80009c8:	4619      	mov	r1, r3
 80009ca:	4812      	ldr	r0, [pc, #72]	; (8000a14 <main+0x1c4>)
 80009cc:	f004 fc20 	bl	8005210 <iprintf>
      if (data[0]!=0x58){
 80009d0:	793b      	ldrb	r3, [r7, #4]
 80009d2:	2b58      	cmp	r3, #88	; 0x58
 80009d4:	d005      	beq.n	80009e2 <main+0x192>
    	  printf("Error !\r\n");
 80009d6:	4810      	ldr	r0, [pc, #64]	; (8000a18 <main+0x1c8>)
 80009d8:	f004 fca0 	bl	800531c <puts>
    	  Error_Handler();
 80009dc:	f000 f86e 	bl	8000abc <Error_Handler>
 80009e0:	e002      	b.n	80009e8 <main+0x198>
      }
      else{
    	  printf("Ok !\r\n");
 80009e2:	480e      	ldr	r0, [pc, #56]	; (8000a1c <main+0x1cc>)
 80009e4:	f004 fc9a 	bl	800531c <puts>
      }
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80009e8:	f7ff fdec 	bl	80005c4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80009ec:	f003 fa4c 	bl	8003e88 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <main+0x1a0>
 80009f2:	bf00      	nop
 80009f4:	08006250 	.word	0x08006250
 80009f8:	08006254 	.word	0x08006254
 80009fc:	20000094 	.word	0x20000094
 8000a00:	0800627c 	.word	0x0800627c
 8000a04:	08006284 	.word	0x08006284
 8000a08:	08006288 	.word	0x08006288
 8000a0c:	0800628c 	.word	0x0800628c
 8000a10:	080062bc 	.word	0x080062bc
 8000a14:	080062e0 	.word	0x080062e0
 8000a18:	080062f4 	.word	0x080062f4
 8000a1c:	08006300 	.word	0x08006300
 8000a20:	08006308 	.word	0x08006308

08000a24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b094      	sub	sp, #80	; 0x50
 8000a28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a2a:	f107 0318 	add.w	r3, r7, #24
 8000a2e:	2238      	movs	r2, #56	; 0x38
 8000a30:	2100      	movs	r1, #0
 8000a32:	4618      	mov	r0, r3
 8000a34:	f004 fbe4 	bl	8005200 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a38:	1d3b      	adds	r3, r7, #4
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	609a      	str	r2, [r3, #8]
 8000a42:	60da      	str	r2, [r3, #12]
 8000a44:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000a46:	2000      	movs	r0, #0
 8000a48:	f001 fbc4 	bl	80021d4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a56:	2340      	movs	r3, #64	; 0x40
 8000a58:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a5a:	2302      	movs	r3, #2
 8000a5c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a5e:	2302      	movs	r3, #2
 8000a60:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000a62:	2304      	movs	r3, #4
 8000a64:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000a66:	2355      	movs	r3, #85	; 0x55
 8000a68:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a72:	2302      	movs	r3, #2
 8000a74:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a76:	f107 0318 	add.w	r3, r7, #24
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f001 fc5e 	bl	800233c <HAL_RCC_OscConfig>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000a86:	f000 f819 	bl	8000abc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a8a:	230f      	movs	r3, #15
 8000a8c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a8e:	2303      	movs	r3, #3
 8000a90:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a92:	2300      	movs	r3, #0
 8000a94:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a96:	2300      	movs	r3, #0
 8000a98:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a9e:	1d3b      	adds	r3, r7, #4
 8000aa0:	2104      	movs	r1, #4
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f001 ff62 	bl	800296c <HAL_RCC_ClockConfig>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000aae:	f000 f805 	bl	8000abc <Error_Handler>
  }
}
 8000ab2:	bf00      	nop
 8000ab4:	3750      	adds	r7, #80	; 0x50
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
	...

08000abc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	printf("Une erreur est survenue ! Arret du programme\r\n");
 8000ac0:	480a      	ldr	r0, [pc, #40]	; (8000aec <Error_Handler+0x30>)
 8000ac2:	f004 fc2b 	bl	800531c <puts>
	while(1){
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	2120      	movs	r1, #32
 8000aca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ace:	f000 fcd7 	bl	8001480 <HAL_GPIO_WritePin>
	    HAL_Delay(200);
 8000ad2:	20c8      	movs	r0, #200	; 0xc8
 8000ad4:	f000 fa4c 	bl	8000f70 <HAL_Delay>
	    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2120      	movs	r1, #32
 8000adc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae0:	f000 fcce 	bl	8001480 <HAL_GPIO_WritePin>
	    HAL_Delay(200);
 8000ae4:	20c8      	movs	r0, #200	; 0xc8
 8000ae6:	f000 fa43 	bl	8000f70 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 8000aea:	e7ec      	b.n	8000ac6 <Error_Handler+0xa>
 8000aec:	08006338 	.word	0x08006338

08000af0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af6:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <HAL_MspInit+0x50>)
 8000af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000afa:	4a11      	ldr	r2, [pc, #68]	; (8000b40 <HAL_MspInit+0x50>)
 8000afc:	f043 0301 	orr.w	r3, r3, #1
 8000b00:	6613      	str	r3, [r2, #96]	; 0x60
 8000b02:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <HAL_MspInit+0x50>)
 8000b04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b06:	f003 0301 	and.w	r3, r3, #1
 8000b0a:	607b      	str	r3, [r7, #4]
 8000b0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0e:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <HAL_MspInit+0x50>)
 8000b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b12:	4a0b      	ldr	r2, [pc, #44]	; (8000b40 <HAL_MspInit+0x50>)
 8000b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b18:	6593      	str	r3, [r2, #88]	; 0x58
 8000b1a:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <HAL_MspInit+0x50>)
 8000b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b22:	603b      	str	r3, [r7, #0]
 8000b24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b26:	2200      	movs	r2, #0
 8000b28:	210f      	movs	r1, #15
 8000b2a:	f06f 0001 	mvn.w	r0, #1
 8000b2e:	f000 fafe 	bl	800112e <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b32:	f001 fbf3 	bl	800231c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	40021000 	.word	0x40021000

08000b44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <NMI_Handler+0x4>

08000b4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b4e:	e7fe      	b.n	8000b4e <HardFault_Handler+0x4>

08000b50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <MemManage_Handler+0x4>

08000b56 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b5a:	e7fe      	b.n	8000b5a <BusFault_Handler+0x4>

08000b5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <UsageFault_Handler+0x4>

08000b62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b74:	f000 f9de 	bl	8000f34 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000b78:	f003 fe9e 	bl	80048b8 <xTaskGetSchedulerState>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b01      	cmp	r3, #1
 8000b80:	d001      	beq.n	8000b86 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000b82:	f004 f8d9 	bl	8004d38 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}

08000b8a <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b086      	sub	sp, #24
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	60f8      	str	r0, [r7, #12]
 8000b92:	60b9      	str	r1, [r7, #8]
 8000b94:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b96:	2300      	movs	r3, #0
 8000b98:	617b      	str	r3, [r7, #20]
 8000b9a:	e00a      	b.n	8000bb2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b9c:	f3af 8000 	nop.w
 8000ba0:	4601      	mov	r1, r0
 8000ba2:	68bb      	ldr	r3, [r7, #8]
 8000ba4:	1c5a      	adds	r2, r3, #1
 8000ba6:	60ba      	str	r2, [r7, #8]
 8000ba8:	b2ca      	uxtb	r2, r1
 8000baa:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	3301      	adds	r3, #1
 8000bb0:	617b      	str	r3, [r7, #20]
 8000bb2:	697a      	ldr	r2, [r7, #20]
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	dbf0      	blt.n	8000b9c <_read+0x12>
	}

return len;
 8000bba:	687b      	ldr	r3, [r7, #4]
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3718      	adds	r7, #24
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}

08000bc4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b086      	sub	sp, #24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	617b      	str	r3, [r7, #20]
 8000bd4:	e009      	b.n	8000bea <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000bd6:	68bb      	ldr	r3, [r7, #8]
 8000bd8:	1c5a      	adds	r2, r3, #1
 8000bda:	60ba      	str	r2, [r7, #8]
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff fe24 	bl	800082c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	3301      	adds	r3, #1
 8000be8:	617b      	str	r3, [r7, #20]
 8000bea:	697a      	ldr	r2, [r7, #20]
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	dbf1      	blt.n	8000bd6 <_write+0x12>
	}
	return len;
 8000bf2:	687b      	ldr	r3, [r7, #4]
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	3718      	adds	r7, #24
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <_close>:

int _close(int file)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
	return -1;
 8000c04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	370c      	adds	r7, #12
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c24:	605a      	str	r2, [r3, #4]
	return 0;
 8000c26:	2300      	movs	r3, #0
}
 8000c28:	4618      	mov	r0, r3
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <_isatty>:

int _isatty(int file)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
	return 1;
 8000c3c:	2301      	movs	r3, #1
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr

08000c4a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	b085      	sub	sp, #20
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	60f8      	str	r0, [r7, #12]
 8000c52:	60b9      	str	r1, [r7, #8]
 8000c54:	607a      	str	r2, [r7, #4]
	return 0;
 8000c56:	2300      	movs	r3, #0
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3714      	adds	r7, #20
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b086      	sub	sp, #24
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c6c:	4a14      	ldr	r2, [pc, #80]	; (8000cc0 <_sbrk+0x5c>)
 8000c6e:	4b15      	ldr	r3, [pc, #84]	; (8000cc4 <_sbrk+0x60>)
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c78:	4b13      	ldr	r3, [pc, #76]	; (8000cc8 <_sbrk+0x64>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d102      	bne.n	8000c86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c80:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <_sbrk+0x64>)
 8000c82:	4a12      	ldr	r2, [pc, #72]	; (8000ccc <_sbrk+0x68>)
 8000c84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c86:	4b10      	ldr	r3, [pc, #64]	; (8000cc8 <_sbrk+0x64>)
 8000c88:	681a      	ldr	r2, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	693a      	ldr	r2, [r7, #16]
 8000c90:	429a      	cmp	r2, r3
 8000c92:	d207      	bcs.n	8000ca4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c94:	f004 fa8a 	bl	80051ac <__errno>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	220c      	movs	r2, #12
 8000c9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ca2:	e009      	b.n	8000cb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ca4:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <_sbrk+0x64>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000caa:	4b07      	ldr	r3, [pc, #28]	; (8000cc8 <_sbrk+0x64>)
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	4a05      	ldr	r2, [pc, #20]	; (8000cc8 <_sbrk+0x64>)
 8000cb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cb6:	68fb      	ldr	r3, [r7, #12]
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3718      	adds	r7, #24
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	20008000 	.word	0x20008000
 8000cc4:	00000400 	.word	0x00000400
 8000cc8:	200000e0 	.word	0x200000e0
 8000ccc:	20000ee0 	.word	0x20000ee0

08000cd0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000cd4:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <SystemInit+0x20>)
 8000cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cda:	4a05      	ldr	r2, [pc, #20]	; (8000cf0 <SystemInit+0x20>)
 8000cdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ce0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ce4:	bf00      	nop
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	e000ed00 	.word	0xe000ed00

08000cf4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cf8:	4b22      	ldr	r3, [pc, #136]	; (8000d84 <MX_USART2_UART_Init+0x90>)
 8000cfa:	4a23      	ldr	r2, [pc, #140]	; (8000d88 <MX_USART2_UART_Init+0x94>)
 8000cfc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cfe:	4b21      	ldr	r3, [pc, #132]	; (8000d84 <MX_USART2_UART_Init+0x90>)
 8000d00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d06:	4b1f      	ldr	r3, [pc, #124]	; (8000d84 <MX_USART2_UART_Init+0x90>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d0c:	4b1d      	ldr	r3, [pc, #116]	; (8000d84 <MX_USART2_UART_Init+0x90>)
 8000d0e:	2200      	movs	r2, #0
 8000d10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d12:	4b1c      	ldr	r3, [pc, #112]	; (8000d84 <MX_USART2_UART_Init+0x90>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d18:	4b1a      	ldr	r3, [pc, #104]	; (8000d84 <MX_USART2_UART_Init+0x90>)
 8000d1a:	220c      	movs	r2, #12
 8000d1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d1e:	4b19      	ldr	r3, [pc, #100]	; (8000d84 <MX_USART2_UART_Init+0x90>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d24:	4b17      	ldr	r3, [pc, #92]	; (8000d84 <MX_USART2_UART_Init+0x90>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d2a:	4b16      	ldr	r3, [pc, #88]	; (8000d84 <MX_USART2_UART_Init+0x90>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d30:	4b14      	ldr	r3, [pc, #80]	; (8000d84 <MX_USART2_UART_Init+0x90>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d36:	4b13      	ldr	r3, [pc, #76]	; (8000d84 <MX_USART2_UART_Init+0x90>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d3c:	4811      	ldr	r0, [pc, #68]	; (8000d84 <MX_USART2_UART_Init+0x90>)
 8000d3e:	f002 fa21 	bl	8003184 <HAL_UART_Init>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000d48:	f7ff feb8 	bl	8000abc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d4c:	2100      	movs	r1, #0
 8000d4e:	480d      	ldr	r0, [pc, #52]	; (8000d84 <MX_USART2_UART_Init+0x90>)
 8000d50:	f002 ffb8 	bl	8003cc4 <HAL_UARTEx_SetTxFifoThreshold>
 8000d54:	4603      	mov	r3, r0
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000d5a:	f7ff feaf 	bl	8000abc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d5e:	2100      	movs	r1, #0
 8000d60:	4808      	ldr	r0, [pc, #32]	; (8000d84 <MX_USART2_UART_Init+0x90>)
 8000d62:	f002 ffed 	bl	8003d40 <HAL_UARTEx_SetRxFifoThreshold>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000d6c:	f7ff fea6 	bl	8000abc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000d70:	4804      	ldr	r0, [pc, #16]	; (8000d84 <MX_USART2_UART_Init+0x90>)
 8000d72:	f002 ff6e 	bl	8003c52 <HAL_UARTEx_DisableFifoMode>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000d7c:	f7ff fe9e 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d80:	bf00      	nop
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	200000e4 	.word	0x200000e4
 8000d88:	40004400 	.word	0x40004400

08000d8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b09a      	sub	sp, #104	; 0x68
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 8000d9c:	605a      	str	r2, [r3, #4]
 8000d9e:	609a      	str	r2, [r3, #8]
 8000da0:	60da      	str	r2, [r3, #12]
 8000da2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000da4:	f107 0310 	add.w	r3, r7, #16
 8000da8:	2244      	movs	r2, #68	; 0x44
 8000daa:	2100      	movs	r1, #0
 8000dac:	4618      	mov	r0, r3
 8000dae:	f004 fa27 	bl	8005200 <memset>
  if(uartHandle->Instance==USART2)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	4a1f      	ldr	r2, [pc, #124]	; (8000e34 <HAL_UART_MspInit+0xa8>)
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d137      	bne.n	8000e2c <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000dbc:	2302      	movs	r3, #2
 8000dbe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000dc4:	f107 0310 	add.w	r3, r7, #16
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f001 ffeb 	bl	8002da4 <HAL_RCCEx_PeriphCLKConfig>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000dd4:	f7ff fe72 	bl	8000abc <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dd8:	4b17      	ldr	r3, [pc, #92]	; (8000e38 <HAL_UART_MspInit+0xac>)
 8000dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ddc:	4a16      	ldr	r2, [pc, #88]	; (8000e38 <HAL_UART_MspInit+0xac>)
 8000dde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de2:	6593      	str	r3, [r2, #88]	; 0x58
 8000de4:	4b14      	ldr	r3, [pc, #80]	; (8000e38 <HAL_UART_MspInit+0xac>)
 8000de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000de8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dec:	60fb      	str	r3, [r7, #12]
 8000dee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df0:	4b11      	ldr	r3, [pc, #68]	; (8000e38 <HAL_UART_MspInit+0xac>)
 8000df2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df4:	4a10      	ldr	r2, [pc, #64]	; (8000e38 <HAL_UART_MspInit+0xac>)
 8000df6:	f043 0301 	orr.w	r3, r3, #1
 8000dfa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dfc:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <HAL_UART_MspInit+0xac>)
 8000dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e00:	f003 0301 	and.w	r3, r3, #1
 8000e04:	60bb      	str	r3, [r7, #8]
 8000e06:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8000e08:	f248 0304 	movw	r3, #32772	; 0x8004
 8000e0c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e16:	2300      	movs	r3, #0
 8000e18:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e1a:	2307      	movs	r3, #7
 8000e1c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e22:	4619      	mov	r1, r3
 8000e24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e28:	f000 f9a8 	bl	800117c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e2c:	bf00      	nop
 8000e2e:	3768      	adds	r7, #104	; 0x68
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40004400 	.word	0x40004400
 8000e38:	40021000 	.word	0x40021000

08000e3c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e3c:	480d      	ldr	r0, [pc, #52]	; (8000e74 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e3e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e40:	480d      	ldr	r0, [pc, #52]	; (8000e78 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e42:	490e      	ldr	r1, [pc, #56]	; (8000e7c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e44:	4a0e      	ldr	r2, [pc, #56]	; (8000e80 <LoopForever+0xe>)
  movs r3, #0
 8000e46:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000e48:	e002      	b.n	8000e50 <LoopCopyDataInit>

08000e4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e4e:	3304      	adds	r3, #4

08000e50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e54:	d3f9      	bcc.n	8000e4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e56:	4a0b      	ldr	r2, [pc, #44]	; (8000e84 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e58:	4c0b      	ldr	r4, [pc, #44]	; (8000e88 <LoopForever+0x16>)
  movs r3, #0
 8000e5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e5c:	e001      	b.n	8000e62 <LoopFillZerobss>

08000e5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e60:	3204      	adds	r2, #4

08000e62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e64:	d3fb      	bcc.n	8000e5e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e66:	f7ff ff33 	bl	8000cd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e6a:	f004 f9a5 	bl	80051b8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e6e:	f7ff fcef 	bl	8000850 <main>

08000e72 <LoopForever>:

LoopForever:
    b LoopForever
 8000e72:	e7fe      	b.n	8000e72 <LoopForever>
  ldr   r0, =_estack
 8000e74:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000e78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e7c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000e80:	08006458 	.word	0x08006458
  ldr r2, =_sbss
 8000e84:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000e88:	20000edc 	.word	0x20000edc

08000e8c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e8c:	e7fe      	b.n	8000e8c <ADC1_2_IRQHandler>

08000e8e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b082      	sub	sp, #8
 8000e92:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e94:	2300      	movs	r3, #0
 8000e96:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e98:	2003      	movs	r0, #3
 8000e9a:	f000 f93d 	bl	8001118 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e9e:	200f      	movs	r0, #15
 8000ea0:	f000 f80e 	bl	8000ec0 <HAL_InitTick>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d002      	beq.n	8000eb0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	71fb      	strb	r3, [r7, #7]
 8000eae:	e001      	b.n	8000eb4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000eb0:	f7ff fe1e 	bl	8000af0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000eb4:	79fb      	ldrb	r3, [r7, #7]

}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
	...

08000ec0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000ecc:	4b16      	ldr	r3, [pc, #88]	; (8000f28 <HAL_InitTick+0x68>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d022      	beq.n	8000f1a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000ed4:	4b15      	ldr	r3, [pc, #84]	; (8000f2c <HAL_InitTick+0x6c>)
 8000ed6:	681a      	ldr	r2, [r3, #0]
 8000ed8:	4b13      	ldr	r3, [pc, #76]	; (8000f28 <HAL_InitTick+0x68>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000ee0:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f000 f93a 	bl	8001162 <HAL_SYSTICK_Config>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d10f      	bne.n	8000f14 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2b0f      	cmp	r3, #15
 8000ef8:	d809      	bhi.n	8000f0e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000efa:	2200      	movs	r2, #0
 8000efc:	6879      	ldr	r1, [r7, #4]
 8000efe:	f04f 30ff 	mov.w	r0, #4294967295
 8000f02:	f000 f914 	bl	800112e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f06:	4a0a      	ldr	r2, [pc, #40]	; (8000f30 <HAL_InitTick+0x70>)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6013      	str	r3, [r2, #0]
 8000f0c:	e007      	b.n	8000f1e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	73fb      	strb	r3, [r7, #15]
 8000f12:	e004      	b.n	8000f1e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000f14:	2301      	movs	r3, #1
 8000f16:	73fb      	strb	r3, [r7, #15]
 8000f18:	e001      	b.n	8000f1e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3710      	adds	r7, #16
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	20000008 	.word	0x20000008
 8000f2c:	20000000 	.word	0x20000000
 8000f30:	20000004 	.word	0x20000004

08000f34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f38:	4b05      	ldr	r3, [pc, #20]	; (8000f50 <HAL_IncTick+0x1c>)
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	4b05      	ldr	r3, [pc, #20]	; (8000f54 <HAL_IncTick+0x20>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4413      	add	r3, r2
 8000f42:	4a03      	ldr	r2, [pc, #12]	; (8000f50 <HAL_IncTick+0x1c>)
 8000f44:	6013      	str	r3, [r2, #0]
}
 8000f46:	bf00      	nop
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr
 8000f50:	20000174 	.word	0x20000174
 8000f54:	20000008 	.word	0x20000008

08000f58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f5c:	4b03      	ldr	r3, [pc, #12]	; (8000f6c <HAL_GetTick+0x14>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	20000174 	.word	0x20000174

08000f70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b084      	sub	sp, #16
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f78:	f7ff ffee 	bl	8000f58 <HAL_GetTick>
 8000f7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f88:	d004      	beq.n	8000f94 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f8a:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <HAL_Delay+0x40>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	68fa      	ldr	r2, [r7, #12]
 8000f90:	4413      	add	r3, r2
 8000f92:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f94:	bf00      	nop
 8000f96:	f7ff ffdf 	bl	8000f58 <HAL_GetTick>
 8000f9a:	4602      	mov	r2, r0
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	1ad3      	subs	r3, r2, r3
 8000fa0:	68fa      	ldr	r2, [r7, #12]
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	d8f7      	bhi.n	8000f96 <HAL_Delay+0x26>
  {
  }
}
 8000fa6:	bf00      	nop
 8000fa8:	bf00      	nop
 8000faa:	3710      	adds	r7, #16
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20000008 	.word	0x20000008

08000fb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b085      	sub	sp, #20
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f003 0307 	and.w	r3, r3, #7
 8000fc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fc4:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fc6:	68db      	ldr	r3, [r3, #12]
 8000fc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fca:	68ba      	ldr	r2, [r7, #8]
 8000fcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fe0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fe4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fe6:	4a04      	ldr	r2, [pc, #16]	; (8000ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	60d3      	str	r3, [r2, #12]
}
 8000fec:	bf00      	nop
 8000fee:	3714      	adds	r7, #20
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001000:	4b04      	ldr	r3, [pc, #16]	; (8001014 <__NVIC_GetPriorityGrouping+0x18>)
 8001002:	68db      	ldr	r3, [r3, #12]
 8001004:	0a1b      	lsrs	r3, r3, #8
 8001006:	f003 0307 	and.w	r3, r3, #7
}
 800100a:	4618      	mov	r0, r3
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	6039      	str	r1, [r7, #0]
 8001022:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001024:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001028:	2b00      	cmp	r3, #0
 800102a:	db0a      	blt.n	8001042 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	b2da      	uxtb	r2, r3
 8001030:	490c      	ldr	r1, [pc, #48]	; (8001064 <__NVIC_SetPriority+0x4c>)
 8001032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001036:	0112      	lsls	r2, r2, #4
 8001038:	b2d2      	uxtb	r2, r2
 800103a:	440b      	add	r3, r1
 800103c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001040:	e00a      	b.n	8001058 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	b2da      	uxtb	r2, r3
 8001046:	4908      	ldr	r1, [pc, #32]	; (8001068 <__NVIC_SetPriority+0x50>)
 8001048:	79fb      	ldrb	r3, [r7, #7]
 800104a:	f003 030f 	and.w	r3, r3, #15
 800104e:	3b04      	subs	r3, #4
 8001050:	0112      	lsls	r2, r2, #4
 8001052:	b2d2      	uxtb	r2, r2
 8001054:	440b      	add	r3, r1
 8001056:	761a      	strb	r2, [r3, #24]
}
 8001058:	bf00      	nop
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	e000e100 	.word	0xe000e100
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800106c:	b480      	push	{r7}
 800106e:	b089      	sub	sp, #36	; 0x24
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	f003 0307 	and.w	r3, r3, #7
 800107e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	f1c3 0307 	rsb	r3, r3, #7
 8001086:	2b04      	cmp	r3, #4
 8001088:	bf28      	it	cs
 800108a:	2304      	movcs	r3, #4
 800108c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	3304      	adds	r3, #4
 8001092:	2b06      	cmp	r3, #6
 8001094:	d902      	bls.n	800109c <NVIC_EncodePriority+0x30>
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	3b03      	subs	r3, #3
 800109a:	e000      	b.n	800109e <NVIC_EncodePriority+0x32>
 800109c:	2300      	movs	r3, #0
 800109e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a0:	f04f 32ff 	mov.w	r2, #4294967295
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	43da      	mvns	r2, r3
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	401a      	ands	r2, r3
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010b4:	f04f 31ff 	mov.w	r1, #4294967295
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	fa01 f303 	lsl.w	r3, r1, r3
 80010be:	43d9      	mvns	r1, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010c4:	4313      	orrs	r3, r2
         );
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3724      	adds	r7, #36	; 0x24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
	...

080010d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3b01      	subs	r3, #1
 80010e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010e4:	d301      	bcc.n	80010ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010e6:	2301      	movs	r3, #1
 80010e8:	e00f      	b.n	800110a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ea:	4a0a      	ldr	r2, [pc, #40]	; (8001114 <SysTick_Config+0x40>)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	3b01      	subs	r3, #1
 80010f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010f2:	210f      	movs	r1, #15
 80010f4:	f04f 30ff 	mov.w	r0, #4294967295
 80010f8:	f7ff ff8e 	bl	8001018 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010fc:	4b05      	ldr	r3, [pc, #20]	; (8001114 <SysTick_Config+0x40>)
 80010fe:	2200      	movs	r2, #0
 8001100:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001102:	4b04      	ldr	r3, [pc, #16]	; (8001114 <SysTick_Config+0x40>)
 8001104:	2207      	movs	r2, #7
 8001106:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001108:	2300      	movs	r3, #0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	e000e010 	.word	0xe000e010

08001118 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001120:	6878      	ldr	r0, [r7, #4]
 8001122:	f7ff ff47 	bl	8000fb4 <__NVIC_SetPriorityGrouping>
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b086      	sub	sp, #24
 8001132:	af00      	add	r7, sp, #0
 8001134:	4603      	mov	r3, r0
 8001136:	60b9      	str	r1, [r7, #8]
 8001138:	607a      	str	r2, [r7, #4]
 800113a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800113c:	f7ff ff5e 	bl	8000ffc <__NVIC_GetPriorityGrouping>
 8001140:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001142:	687a      	ldr	r2, [r7, #4]
 8001144:	68b9      	ldr	r1, [r7, #8]
 8001146:	6978      	ldr	r0, [r7, #20]
 8001148:	f7ff ff90 	bl	800106c <NVIC_EncodePriority>
 800114c:	4602      	mov	r2, r0
 800114e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001152:	4611      	mov	r1, r2
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff ff5f 	bl	8001018 <__NVIC_SetPriority>
}
 800115a:	bf00      	nop
 800115c:	3718      	adds	r7, #24
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}

08001162 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001162:	b580      	push	{r7, lr}
 8001164:	b082      	sub	sp, #8
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f7ff ffb2 	bl	80010d4 <SysTick_Config>
 8001170:	4603      	mov	r3, r0
}
 8001172:	4618      	mov	r0, r3
 8001174:	3708      	adds	r7, #8
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
	...

0800117c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800117c:	b480      	push	{r7}
 800117e:	b087      	sub	sp, #28
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001186:	2300      	movs	r3, #0
 8001188:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800118a:	e15a      	b.n	8001442 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	2101      	movs	r1, #1
 8001192:	697b      	ldr	r3, [r7, #20]
 8001194:	fa01 f303 	lsl.w	r3, r1, r3
 8001198:	4013      	ands	r3, r2
 800119a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	f000 814c 	beq.w	800143c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	f003 0303 	and.w	r3, r3, #3
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d005      	beq.n	80011bc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	d130      	bne.n	800121e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	2203      	movs	r2, #3
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	43db      	mvns	r3, r3
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	4013      	ands	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	68da      	ldr	r2, [r3, #12]
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	005b      	lsls	r3, r3, #1
 80011dc:	fa02 f303 	lsl.w	r3, r2, r3
 80011e0:	693a      	ldr	r2, [r7, #16]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011f2:	2201      	movs	r2, #1
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43db      	mvns	r3, r3
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	4013      	ands	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	091b      	lsrs	r3, r3, #4
 8001208:	f003 0201 	and.w	r2, r3, #1
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	4313      	orrs	r3, r2
 8001216:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685b      	ldr	r3, [r3, #4]
 8001222:	f003 0303 	and.w	r3, r3, #3
 8001226:	2b03      	cmp	r3, #3
 8001228:	d017      	beq.n	800125a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	68db      	ldr	r3, [r3, #12]
 800122e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	2203      	movs	r2, #3
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	43db      	mvns	r3, r3
 800123c:	693a      	ldr	r2, [r7, #16]
 800123e:	4013      	ands	r3, r2
 8001240:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	689a      	ldr	r2, [r3, #8]
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	005b      	lsls	r3, r3, #1
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	4313      	orrs	r3, r2
 8001252:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	f003 0303 	and.w	r3, r3, #3
 8001262:	2b02      	cmp	r3, #2
 8001264:	d123      	bne.n	80012ae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	08da      	lsrs	r2, r3, #3
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	3208      	adds	r2, #8
 800126e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001272:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	f003 0307 	and.w	r3, r3, #7
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	220f      	movs	r2, #15
 800127e:	fa02 f303 	lsl.w	r3, r2, r3
 8001282:	43db      	mvns	r3, r3
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	4013      	ands	r3, r2
 8001288:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	691a      	ldr	r2, [r3, #16]
 800128e:	697b      	ldr	r3, [r7, #20]
 8001290:	f003 0307 	and.w	r3, r3, #7
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	693a      	ldr	r2, [r7, #16]
 800129c:	4313      	orrs	r3, r2
 800129e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	08da      	lsrs	r2, r3, #3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	3208      	adds	r2, #8
 80012a8:	6939      	ldr	r1, [r7, #16]
 80012aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	2203      	movs	r2, #3
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	43db      	mvns	r3, r3
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	4013      	ands	r3, r2
 80012c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f003 0203 	and.w	r2, r3, #3
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	4313      	orrs	r3, r2
 80012da:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	f000 80a6 	beq.w	800143c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f0:	4b5b      	ldr	r3, [pc, #364]	; (8001460 <HAL_GPIO_Init+0x2e4>)
 80012f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012f4:	4a5a      	ldr	r2, [pc, #360]	; (8001460 <HAL_GPIO_Init+0x2e4>)
 80012f6:	f043 0301 	orr.w	r3, r3, #1
 80012fa:	6613      	str	r3, [r2, #96]	; 0x60
 80012fc:	4b58      	ldr	r3, [pc, #352]	; (8001460 <HAL_GPIO_Init+0x2e4>)
 80012fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001300:	f003 0301 	and.w	r3, r3, #1
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001308:	4a56      	ldr	r2, [pc, #344]	; (8001464 <HAL_GPIO_Init+0x2e8>)
 800130a:	697b      	ldr	r3, [r7, #20]
 800130c:	089b      	lsrs	r3, r3, #2
 800130e:	3302      	adds	r3, #2
 8001310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001314:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	f003 0303 	and.w	r3, r3, #3
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	220f      	movs	r2, #15
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	43db      	mvns	r3, r3
 8001326:	693a      	ldr	r2, [r7, #16]
 8001328:	4013      	ands	r3, r2
 800132a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001332:	d01f      	beq.n	8001374 <HAL_GPIO_Init+0x1f8>
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	4a4c      	ldr	r2, [pc, #304]	; (8001468 <HAL_GPIO_Init+0x2ec>)
 8001338:	4293      	cmp	r3, r2
 800133a:	d019      	beq.n	8001370 <HAL_GPIO_Init+0x1f4>
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	4a4b      	ldr	r2, [pc, #300]	; (800146c <HAL_GPIO_Init+0x2f0>)
 8001340:	4293      	cmp	r3, r2
 8001342:	d013      	beq.n	800136c <HAL_GPIO_Init+0x1f0>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	4a4a      	ldr	r2, [pc, #296]	; (8001470 <HAL_GPIO_Init+0x2f4>)
 8001348:	4293      	cmp	r3, r2
 800134a:	d00d      	beq.n	8001368 <HAL_GPIO_Init+0x1ec>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4a49      	ldr	r2, [pc, #292]	; (8001474 <HAL_GPIO_Init+0x2f8>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d007      	beq.n	8001364 <HAL_GPIO_Init+0x1e8>
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	4a48      	ldr	r2, [pc, #288]	; (8001478 <HAL_GPIO_Init+0x2fc>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d101      	bne.n	8001360 <HAL_GPIO_Init+0x1e4>
 800135c:	2305      	movs	r3, #5
 800135e:	e00a      	b.n	8001376 <HAL_GPIO_Init+0x1fa>
 8001360:	2306      	movs	r3, #6
 8001362:	e008      	b.n	8001376 <HAL_GPIO_Init+0x1fa>
 8001364:	2304      	movs	r3, #4
 8001366:	e006      	b.n	8001376 <HAL_GPIO_Init+0x1fa>
 8001368:	2303      	movs	r3, #3
 800136a:	e004      	b.n	8001376 <HAL_GPIO_Init+0x1fa>
 800136c:	2302      	movs	r3, #2
 800136e:	e002      	b.n	8001376 <HAL_GPIO_Init+0x1fa>
 8001370:	2301      	movs	r3, #1
 8001372:	e000      	b.n	8001376 <HAL_GPIO_Init+0x1fa>
 8001374:	2300      	movs	r3, #0
 8001376:	697a      	ldr	r2, [r7, #20]
 8001378:	f002 0203 	and.w	r2, r2, #3
 800137c:	0092      	lsls	r2, r2, #2
 800137e:	4093      	lsls	r3, r2
 8001380:	693a      	ldr	r2, [r7, #16]
 8001382:	4313      	orrs	r3, r2
 8001384:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001386:	4937      	ldr	r1, [pc, #220]	; (8001464 <HAL_GPIO_Init+0x2e8>)
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	089b      	lsrs	r3, r3, #2
 800138c:	3302      	adds	r3, #2
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001394:	4b39      	ldr	r3, [pc, #228]	; (800147c <HAL_GPIO_Init+0x300>)
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	43db      	mvns	r3, r3
 800139e:	693a      	ldr	r2, [r7, #16]
 80013a0:	4013      	ands	r3, r2
 80013a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d003      	beq.n	80013b8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013b8:	4a30      	ldr	r2, [pc, #192]	; (800147c <HAL_GPIO_Init+0x300>)
 80013ba:	693b      	ldr	r3, [r7, #16]
 80013bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013be:	4b2f      	ldr	r3, [pc, #188]	; (800147c <HAL_GPIO_Init+0x300>)
 80013c0:	68db      	ldr	r3, [r3, #12]
 80013c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	43db      	mvns	r3, r3
 80013c8:	693a      	ldr	r2, [r7, #16]
 80013ca:	4013      	ands	r3, r2
 80013cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d003      	beq.n	80013e2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	4313      	orrs	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013e2:	4a26      	ldr	r2, [pc, #152]	; (800147c <HAL_GPIO_Init+0x300>)
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80013e8:	4b24      	ldr	r3, [pc, #144]	; (800147c <HAL_GPIO_Init+0x300>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	43db      	mvns	r3, r3
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	4013      	ands	r3, r2
 80013f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001400:	2b00      	cmp	r3, #0
 8001402:	d003      	beq.n	800140c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	4313      	orrs	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800140c:	4a1b      	ldr	r2, [pc, #108]	; (800147c <HAL_GPIO_Init+0x300>)
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001412:	4b1a      	ldr	r3, [pc, #104]	; (800147c <HAL_GPIO_Init+0x300>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	43db      	mvns	r3, r3
 800141c:	693a      	ldr	r2, [r7, #16]
 800141e:	4013      	ands	r3, r2
 8001420:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	685b      	ldr	r3, [r3, #4]
 8001426:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800142a:	2b00      	cmp	r3, #0
 800142c:	d003      	beq.n	8001436 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800142e:	693a      	ldr	r2, [r7, #16]
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	4313      	orrs	r3, r2
 8001434:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001436:	4a11      	ldr	r2, [pc, #68]	; (800147c <HAL_GPIO_Init+0x300>)
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	3301      	adds	r3, #1
 8001440:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	fa22 f303 	lsr.w	r3, r2, r3
 800144c:	2b00      	cmp	r3, #0
 800144e:	f47f ae9d 	bne.w	800118c <HAL_GPIO_Init+0x10>
  }
}
 8001452:	bf00      	nop
 8001454:	bf00      	nop
 8001456:	371c      	adds	r7, #28
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	40021000 	.word	0x40021000
 8001464:	40010000 	.word	0x40010000
 8001468:	48000400 	.word	0x48000400
 800146c:	48000800 	.word	0x48000800
 8001470:	48000c00 	.word	0x48000c00
 8001474:	48001000 	.word	0x48001000
 8001478:	48001400 	.word	0x48001400
 800147c:	40010400 	.word	0x40010400

08001480 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	460b      	mov	r3, r1
 800148a:	807b      	strh	r3, [r7, #2]
 800148c:	4613      	mov	r3, r2
 800148e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001490:	787b      	ldrb	r3, [r7, #1]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d003      	beq.n	800149e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001496:	887a      	ldrh	r2, [r7, #2]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800149c:	e002      	b.n	80014a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800149e:	887a      	ldrh	r2, [r7, #2]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d101      	bne.n	80014c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e081      	b.n	80015c6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014c8:	b2db      	uxtb	r3, r3
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d106      	bne.n	80014dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	2200      	movs	r2, #0
 80014d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f7ff f94e 	bl	8000778 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2224      	movs	r2, #36	; 0x24
 80014e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f022 0201 	bic.w	r2, r2, #1
 80014f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685a      	ldr	r2, [r3, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001500:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	689a      	ldr	r2, [r3, #8]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001510:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d107      	bne.n	800152a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	689a      	ldr	r2, [r3, #8]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	e006      	b.n	8001538 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	689a      	ldr	r2, [r3, #8]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001536:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	2b02      	cmp	r3, #2
 800153e:	d104      	bne.n	800154a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001548:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	687a      	ldr	r2, [r7, #4]
 8001552:	6812      	ldr	r2, [r2, #0]
 8001554:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001558:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800155c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	68da      	ldr	r2, [r3, #12]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800156c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	691a      	ldr	r2, [r3, #16]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	695b      	ldr	r3, [r3, #20]
 8001576:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	699b      	ldr	r3, [r3, #24]
 800157e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	430a      	orrs	r2, r1
 8001586:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	69d9      	ldr	r1, [r3, #28]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a1a      	ldr	r2, [r3, #32]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	430a      	orrs	r2, r1
 8001596:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f042 0201 	orr.w	r2, r2, #1
 80015a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2200      	movs	r2, #0
 80015ac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2220      	movs	r2, #32
 80015b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2200      	movs	r2, #0
 80015c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
	...

080015d0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b088      	sub	sp, #32
 80015d4:	af02      	add	r7, sp, #8
 80015d6:	60f8      	str	r0, [r7, #12]
 80015d8:	607a      	str	r2, [r7, #4]
 80015da:	461a      	mov	r2, r3
 80015dc:	460b      	mov	r3, r1
 80015de:	817b      	strh	r3, [r7, #10]
 80015e0:	4613      	mov	r3, r2
 80015e2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	2b20      	cmp	r3, #32
 80015ee:	f040 80da 	bne.w	80017a6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d101      	bne.n	8001600 <HAL_I2C_Master_Transmit+0x30>
 80015fc:	2302      	movs	r3, #2
 80015fe:	e0d3      	b.n	80017a8 <HAL_I2C_Master_Transmit+0x1d8>
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	2201      	movs	r2, #1
 8001604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001608:	f7ff fca6 	bl	8000f58 <HAL_GetTick>
 800160c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800160e:	697b      	ldr	r3, [r7, #20]
 8001610:	9300      	str	r3, [sp, #0]
 8001612:	2319      	movs	r3, #25
 8001614:	2201      	movs	r2, #1
 8001616:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800161a:	68f8      	ldr	r0, [r7, #12]
 800161c:	f000 faed 	bl	8001bfa <I2C_WaitOnFlagUntilTimeout>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e0be      	b.n	80017a8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2221      	movs	r2, #33	; 0x21
 800162e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	2210      	movs	r2, #16
 8001636:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	2200      	movs	r2, #0
 800163e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	893a      	ldrh	r2, [r7, #8]
 800164a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2200      	movs	r2, #0
 8001650:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001656:	b29b      	uxth	r3, r3
 8001658:	2bff      	cmp	r3, #255	; 0xff
 800165a:	d90e      	bls.n	800167a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	22ff      	movs	r2, #255	; 0xff
 8001660:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001666:	b2da      	uxtb	r2, r3
 8001668:	8979      	ldrh	r1, [r7, #10]
 800166a:	4b51      	ldr	r3, [pc, #324]	; (80017b0 <HAL_I2C_Master_Transmit+0x1e0>)
 800166c:	9300      	str	r3, [sp, #0]
 800166e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001672:	68f8      	ldr	r0, [r7, #12]
 8001674:	f000 fce4 	bl	8002040 <I2C_TransferConfig>
 8001678:	e06c      	b.n	8001754 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800167e:	b29a      	uxth	r2, r3
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001688:	b2da      	uxtb	r2, r3
 800168a:	8979      	ldrh	r1, [r7, #10]
 800168c:	4b48      	ldr	r3, [pc, #288]	; (80017b0 <HAL_I2C_Master_Transmit+0x1e0>)
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001694:	68f8      	ldr	r0, [r7, #12]
 8001696:	f000 fcd3 	bl	8002040 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800169a:	e05b      	b.n	8001754 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800169c:	697a      	ldr	r2, [r7, #20]
 800169e:	6a39      	ldr	r1, [r7, #32]
 80016a0:	68f8      	ldr	r0, [r7, #12]
 80016a2:	f000 faea 	bl	8001c7a <I2C_WaitOnTXISFlagUntilTimeout>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e07b      	b.n	80017a8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b4:	781a      	ldrb	r2, [r3, #0]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c0:	1c5a      	adds	r2, r3, #1
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016ca:	b29b      	uxth	r3, r3
 80016cc:	3b01      	subs	r3, #1
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016d8:	3b01      	subs	r3, #1
 80016da:	b29a      	uxth	r2, r3
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d034      	beq.n	8001754 <HAL_I2C_Master_Transmit+0x184>
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d130      	bne.n	8001754 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	9300      	str	r3, [sp, #0]
 80016f6:	6a3b      	ldr	r3, [r7, #32]
 80016f8:	2200      	movs	r2, #0
 80016fa:	2180      	movs	r1, #128	; 0x80
 80016fc:	68f8      	ldr	r0, [r7, #12]
 80016fe:	f000 fa7c 	bl	8001bfa <I2C_WaitOnFlagUntilTimeout>
 8001702:	4603      	mov	r3, r0
 8001704:	2b00      	cmp	r3, #0
 8001706:	d001      	beq.n	800170c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e04d      	b.n	80017a8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001710:	b29b      	uxth	r3, r3
 8001712:	2bff      	cmp	r3, #255	; 0xff
 8001714:	d90e      	bls.n	8001734 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	22ff      	movs	r2, #255	; 0xff
 800171a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001720:	b2da      	uxtb	r2, r3
 8001722:	8979      	ldrh	r1, [r7, #10]
 8001724:	2300      	movs	r3, #0
 8001726:	9300      	str	r3, [sp, #0]
 8001728:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800172c:	68f8      	ldr	r0, [r7, #12]
 800172e:	f000 fc87 	bl	8002040 <I2C_TransferConfig>
 8001732:	e00f      	b.n	8001754 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001738:	b29a      	uxth	r2, r3
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001742:	b2da      	uxtb	r2, r3
 8001744:	8979      	ldrh	r1, [r7, #10]
 8001746:	2300      	movs	r3, #0
 8001748:	9300      	str	r3, [sp, #0]
 800174a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800174e:	68f8      	ldr	r0, [r7, #12]
 8001750:	f000 fc76 	bl	8002040 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001758:	b29b      	uxth	r3, r3
 800175a:	2b00      	cmp	r3, #0
 800175c:	d19e      	bne.n	800169c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800175e:	697a      	ldr	r2, [r7, #20]
 8001760:	6a39      	ldr	r1, [r7, #32]
 8001762:	68f8      	ldr	r0, [r7, #12]
 8001764:	f000 fac9 	bl	8001cfa <I2C_WaitOnSTOPFlagUntilTimeout>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e01a      	b.n	80017a8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2220      	movs	r2, #32
 8001778:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	6859      	ldr	r1, [r3, #4]
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	4b0b      	ldr	r3, [pc, #44]	; (80017b4 <HAL_I2C_Master_Transmit+0x1e4>)
 8001786:	400b      	ands	r3, r1
 8001788:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	2220      	movs	r2, #32
 800178e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	2200      	movs	r2, #0
 8001796:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	2200      	movs	r2, #0
 800179e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80017a2:	2300      	movs	r3, #0
 80017a4:	e000      	b.n	80017a8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80017a6:	2302      	movs	r3, #2
  }
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3718      	adds	r7, #24
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	80002000 	.word	0x80002000
 80017b4:	fe00e800 	.word	0xfe00e800

080017b8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b088      	sub	sp, #32
 80017bc:	af02      	add	r7, sp, #8
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	607a      	str	r2, [r7, #4]
 80017c2:	461a      	mov	r2, r3
 80017c4:	460b      	mov	r3, r1
 80017c6:	817b      	strh	r3, [r7, #10]
 80017c8:	4613      	mov	r3, r2
 80017ca:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	2b20      	cmp	r3, #32
 80017d6:	f040 80db 	bne.w	8001990 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d101      	bne.n	80017e8 <HAL_I2C_Master_Receive+0x30>
 80017e4:	2302      	movs	r3, #2
 80017e6:	e0d4      	b.n	8001992 <HAL_I2C_Master_Receive+0x1da>
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	2201      	movs	r2, #1
 80017ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80017f0:	f7ff fbb2 	bl	8000f58 <HAL_GetTick>
 80017f4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	9300      	str	r3, [sp, #0]
 80017fa:	2319      	movs	r3, #25
 80017fc:	2201      	movs	r2, #1
 80017fe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001802:	68f8      	ldr	r0, [r7, #12]
 8001804:	f000 f9f9 	bl	8001bfa <I2C_WaitOnFlagUntilTimeout>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e0bf      	b.n	8001992 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	2222      	movs	r2, #34	; 0x22
 8001816:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	2210      	movs	r2, #16
 800181e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2200      	movs	r2, #0
 8001826:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	893a      	ldrh	r2, [r7, #8]
 8001832:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2200      	movs	r2, #0
 8001838:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800183e:	b29b      	uxth	r3, r3
 8001840:	2bff      	cmp	r3, #255	; 0xff
 8001842:	d90e      	bls.n	8001862 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	22ff      	movs	r2, #255	; 0xff
 8001848:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800184e:	b2da      	uxtb	r2, r3
 8001850:	8979      	ldrh	r1, [r7, #10]
 8001852:	4b52      	ldr	r3, [pc, #328]	; (800199c <HAL_I2C_Master_Receive+0x1e4>)
 8001854:	9300      	str	r3, [sp, #0]
 8001856:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800185a:	68f8      	ldr	r0, [r7, #12]
 800185c:	f000 fbf0 	bl	8002040 <I2C_TransferConfig>
 8001860:	e06d      	b.n	800193e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001866:	b29a      	uxth	r2, r3
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001870:	b2da      	uxtb	r2, r3
 8001872:	8979      	ldrh	r1, [r7, #10]
 8001874:	4b49      	ldr	r3, [pc, #292]	; (800199c <HAL_I2C_Master_Receive+0x1e4>)
 8001876:	9300      	str	r3, [sp, #0]
 8001878:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800187c:	68f8      	ldr	r0, [r7, #12]
 800187e:	f000 fbdf 	bl	8002040 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8001882:	e05c      	b.n	800193e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001884:	697a      	ldr	r2, [r7, #20]
 8001886:	6a39      	ldr	r1, [r7, #32]
 8001888:	68f8      	ldr	r0, [r7, #12]
 800188a:	f000 fa73 	bl	8001d74 <I2C_WaitOnRXNEFlagUntilTimeout>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e07c      	b.n	8001992 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a2:	b2d2      	uxtb	r2, r2
 80018a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018aa:	1c5a      	adds	r2, r3, #1
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018b4:	3b01      	subs	r3, #1
 80018b6:	b29a      	uxth	r2, r3
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	3b01      	subs	r3, #1
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ce:	b29b      	uxth	r3, r3
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d034      	beq.n	800193e <HAL_I2C_Master_Receive+0x186>
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d130      	bne.n	800193e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	9300      	str	r3, [sp, #0]
 80018e0:	6a3b      	ldr	r3, [r7, #32]
 80018e2:	2200      	movs	r2, #0
 80018e4:	2180      	movs	r1, #128	; 0x80
 80018e6:	68f8      	ldr	r0, [r7, #12]
 80018e8:	f000 f987 	bl	8001bfa <I2C_WaitOnFlagUntilTimeout>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e04d      	b.n	8001992 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	2bff      	cmp	r3, #255	; 0xff
 80018fe:	d90e      	bls.n	800191e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	22ff      	movs	r2, #255	; 0xff
 8001904:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800190a:	b2da      	uxtb	r2, r3
 800190c:	8979      	ldrh	r1, [r7, #10]
 800190e:	2300      	movs	r3, #0
 8001910:	9300      	str	r3, [sp, #0]
 8001912:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001916:	68f8      	ldr	r0, [r7, #12]
 8001918:	f000 fb92 	bl	8002040 <I2C_TransferConfig>
 800191c:	e00f      	b.n	800193e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001922:	b29a      	uxth	r2, r3
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800192c:	b2da      	uxtb	r2, r3
 800192e:	8979      	ldrh	r1, [r7, #10]
 8001930:	2300      	movs	r3, #0
 8001932:	9300      	str	r3, [sp, #0]
 8001934:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001938:	68f8      	ldr	r0, [r7, #12]
 800193a:	f000 fb81 	bl	8002040 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001942:	b29b      	uxth	r3, r3
 8001944:	2b00      	cmp	r3, #0
 8001946:	d19d      	bne.n	8001884 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001948:	697a      	ldr	r2, [r7, #20]
 800194a:	6a39      	ldr	r1, [r7, #32]
 800194c:	68f8      	ldr	r0, [r7, #12]
 800194e:	f000 f9d4 	bl	8001cfa <I2C_WaitOnSTOPFlagUntilTimeout>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e01a      	b.n	8001992 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2220      	movs	r2, #32
 8001962:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	6859      	ldr	r1, [r3, #4]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	4b0c      	ldr	r3, [pc, #48]	; (80019a0 <HAL_I2C_Master_Receive+0x1e8>)
 8001970:	400b      	ands	r3, r1
 8001972:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2220      	movs	r2, #32
 8001978:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	2200      	movs	r2, #0
 8001980:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2200      	movs	r2, #0
 8001988:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800198c:	2300      	movs	r3, #0
 800198e:	e000      	b.n	8001992 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8001990:	2302      	movs	r3, #2
  }
}
 8001992:	4618      	mov	r0, r3
 8001994:	3718      	adds	r7, #24
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	80002400 	.word	0x80002400
 80019a0:	fe00e800 	.word	0xfe00e800

080019a4 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b08a      	sub	sp, #40	; 0x28
 80019a8:	af02      	add	r7, sp, #8
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	607a      	str	r2, [r7, #4]
 80019ae:	603b      	str	r3, [r7, #0]
 80019b0:	460b      	mov	r3, r1
 80019b2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	2b20      	cmp	r3, #32
 80019c2:	f040 80f1 	bne.w	8001ba8 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019d4:	d101      	bne.n	80019da <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80019d6:	2302      	movs	r3, #2
 80019d8:	e0e7      	b.n	8001baa <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d101      	bne.n	80019e8 <HAL_I2C_IsDeviceReady+0x44>
 80019e4:	2302      	movs	r3, #2
 80019e6:	e0e0      	b.n	8001baa <HAL_I2C_IsDeviceReady+0x206>
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2201      	movs	r2, #1
 80019ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2224      	movs	r2, #36	; 0x24
 80019f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	2200      	movs	r2, #0
 80019fc:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d107      	bne.n	8001a16 <HAL_I2C_IsDeviceReady+0x72>
 8001a06:	897b      	ldrh	r3, [r7, #10]
 8001a08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a0c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a10:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a14:	e004      	b.n	8001a20 <HAL_I2C_IsDeviceReady+0x7c>
 8001a16:	897b      	ldrh	r3, [r7, #10]
 8001a18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a1c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8001a20:	68fa      	ldr	r2, [r7, #12]
 8001a22:	6812      	ldr	r2, [r2, #0]
 8001a24:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001a26:	f7ff fa97 	bl	8000f58 <HAL_GetTick>
 8001a2a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	699b      	ldr	r3, [r3, #24]
 8001a32:	f003 0320 	and.w	r3, r3, #32
 8001a36:	2b20      	cmp	r3, #32
 8001a38:	bf0c      	ite	eq
 8001a3a:	2301      	moveq	r3, #1
 8001a3c:	2300      	movne	r3, #0
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	f003 0310 	and.w	r3, r3, #16
 8001a4c:	2b10      	cmp	r3, #16
 8001a4e:	bf0c      	ite	eq
 8001a50:	2301      	moveq	r3, #1
 8001a52:	2300      	movne	r3, #0
 8001a54:	b2db      	uxtb	r3, r3
 8001a56:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001a58:	e034      	b.n	8001ac4 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a60:	d01a      	beq.n	8001a98 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001a62:	f7ff fa79 	bl	8000f58 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	683a      	ldr	r2, [r7, #0]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d302      	bcc.n	8001a78 <HAL_I2C_IsDeviceReady+0xd4>
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d10f      	bne.n	8001a98 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2220      	movs	r2, #32
 8001a7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a84:	f043 0220 	orr.w	r2, r3, #32
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e088      	b.n	8001baa <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	699b      	ldr	r3, [r3, #24]
 8001a9e:	f003 0320 	and.w	r3, r3, #32
 8001aa2:	2b20      	cmp	r3, #32
 8001aa4:	bf0c      	ite	eq
 8001aa6:	2301      	moveq	r3, #1
 8001aa8:	2300      	movne	r3, #0
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	f003 0310 	and.w	r3, r3, #16
 8001ab8:	2b10      	cmp	r3, #16
 8001aba:	bf0c      	ite	eq
 8001abc:	2301      	moveq	r3, #1
 8001abe:	2300      	movne	r3, #0
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001ac4:	7ffb      	ldrb	r3, [r7, #31]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d102      	bne.n	8001ad0 <HAL_I2C_IsDeviceReady+0x12c>
 8001aca:	7fbb      	ldrb	r3, [r7, #30]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d0c4      	beq.n	8001a5a <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	699b      	ldr	r3, [r3, #24]
 8001ad6:	f003 0310 	and.w	r3, r3, #16
 8001ada:	2b10      	cmp	r3, #16
 8001adc:	d01a      	beq.n	8001b14 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	9300      	str	r3, [sp, #0]
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	2120      	movs	r1, #32
 8001ae8:	68f8      	ldr	r0, [r7, #12]
 8001aea:	f000 f886 	bl	8001bfa <I2C_WaitOnFlagUntilTimeout>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e058      	b.n	8001baa <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2220      	movs	r2, #32
 8001afe:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2220      	movs	r2, #32
 8001b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8001b10:	2300      	movs	r3, #0
 8001b12:	e04a      	b.n	8001baa <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	9300      	str	r3, [sp, #0]
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	2120      	movs	r1, #32
 8001b1e:	68f8      	ldr	r0, [r7, #12]
 8001b20:	f000 f86b 	bl	8001bfa <I2C_WaitOnFlagUntilTimeout>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e03d      	b.n	8001baa <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	2210      	movs	r2, #16
 8001b34:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	2220      	movs	r2, #32
 8001b3c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	429a      	cmp	r2, r3
 8001b44:	d118      	bne.n	8001b78 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b54:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	9300      	str	r3, [sp, #0]
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	2120      	movs	r1, #32
 8001b60:	68f8      	ldr	r0, [r7, #12]
 8001b62:	f000 f84a 	bl	8001bfa <I2C_WaitOnFlagUntilTimeout>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e01c      	b.n	8001baa <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2220      	movs	r2, #32
 8001b76:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	429a      	cmp	r2, r3
 8001b84:	f63f af3b 	bhi.w	80019fe <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2220      	movs	r2, #32
 8001b8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b94:	f043 0220 	orr.w	r2, r3, #32
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e000      	b.n	8001baa <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8001ba8:	2302      	movs	r3, #2
  }
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3720      	adds	r7, #32
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	b083      	sub	sp, #12
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	f003 0302 	and.w	r3, r3, #2
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d103      	bne.n	8001bd0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	699b      	ldr	r3, [r3, #24]
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d007      	beq.n	8001bee <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	699a      	ldr	r2, [r3, #24]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f042 0201 	orr.w	r2, r2, #1
 8001bec:	619a      	str	r2, [r3, #24]
  }
}
 8001bee:	bf00      	nop
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b084      	sub	sp, #16
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	60f8      	str	r0, [r7, #12]
 8001c02:	60b9      	str	r1, [r7, #8]
 8001c04:	603b      	str	r3, [r7, #0]
 8001c06:	4613      	mov	r3, r2
 8001c08:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c0a:	e022      	b.n	8001c52 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c12:	d01e      	beq.n	8001c52 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c14:	f7ff f9a0 	bl	8000f58 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d302      	bcc.n	8001c2a <I2C_WaitOnFlagUntilTimeout+0x30>
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d113      	bne.n	8001c52 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2e:	f043 0220 	orr.w	r2, r3, #32
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2220      	movs	r2, #32
 8001c3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	2200      	movs	r2, #0
 8001c42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e00f      	b.n	8001c72 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	699a      	ldr	r2, [r3, #24]
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	68ba      	ldr	r2, [r7, #8]
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	bf0c      	ite	eq
 8001c62:	2301      	moveq	r3, #1
 8001c64:	2300      	movne	r3, #0
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	461a      	mov	r2, r3
 8001c6a:	79fb      	ldrb	r3, [r7, #7]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d0cd      	beq.n	8001c0c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001c7a:	b580      	push	{r7, lr}
 8001c7c:	b084      	sub	sp, #16
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	60f8      	str	r0, [r7, #12]
 8001c82:	60b9      	str	r1, [r7, #8]
 8001c84:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001c86:	e02c      	b.n	8001ce2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	68b9      	ldr	r1, [r7, #8]
 8001c8c:	68f8      	ldr	r0, [r7, #12]
 8001c8e:	f000 f8eb 	bl	8001e68 <I2C_IsErrorOccurred>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e02a      	b.n	8001cf2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ca2:	d01e      	beq.n	8001ce2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ca4:	f7ff f958 	bl	8000f58 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	68ba      	ldr	r2, [r7, #8]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d302      	bcc.n	8001cba <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d113      	bne.n	8001ce2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cbe:	f043 0220 	orr.w	r2, r3, #32
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2220      	movs	r2, #32
 8001cca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e007      	b.n	8001cf2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	699b      	ldr	r3, [r3, #24]
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d1cb      	bne.n	8001c88 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b084      	sub	sp, #16
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	60f8      	str	r0, [r7, #12]
 8001d02:	60b9      	str	r1, [r7, #8]
 8001d04:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d06:	e028      	b.n	8001d5a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d08:	687a      	ldr	r2, [r7, #4]
 8001d0a:	68b9      	ldr	r1, [r7, #8]
 8001d0c:	68f8      	ldr	r0, [r7, #12]
 8001d0e:	f000 f8ab 	bl	8001e68 <I2C_IsErrorOccurred>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e026      	b.n	8001d6a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d1c:	f7ff f91c 	bl	8000f58 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	68ba      	ldr	r2, [r7, #8]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d302      	bcc.n	8001d32 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d113      	bne.n	8001d5a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d36:	f043 0220 	orr.w	r2, r3, #32
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2220      	movs	r2, #32
 8001d42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e007      	b.n	8001d6a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	f003 0320 	and.w	r3, r3, #32
 8001d64:	2b20      	cmp	r3, #32
 8001d66:	d1cf      	bne.n	8001d08 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
	...

08001d74 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b084      	sub	sp, #16
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	60b9      	str	r1, [r7, #8]
 8001d7e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001d80:	e064      	b.n	8001e4c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	68b9      	ldr	r1, [r7, #8]
 8001d86:	68f8      	ldr	r0, [r7, #12]
 8001d88:	f000 f86e 	bl	8001e68 <I2C_IsErrorOccurred>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e062      	b.n	8001e5c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	699b      	ldr	r3, [r3, #24]
 8001d9c:	f003 0320 	and.w	r3, r3, #32
 8001da0:	2b20      	cmp	r3, #32
 8001da2:	d138      	bne.n	8001e16 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	f003 0304 	and.w	r3, r3, #4
 8001dae:	2b04      	cmp	r3, #4
 8001db0:	d105      	bne.n	8001dbe <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	e04e      	b.n	8001e5c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	699b      	ldr	r3, [r3, #24]
 8001dc4:	f003 0310 	and.w	r3, r3, #16
 8001dc8:	2b10      	cmp	r3, #16
 8001dca:	d107      	bne.n	8001ddc <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2210      	movs	r2, #16
 8001dd2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2204      	movs	r2, #4
 8001dd8:	645a      	str	r2, [r3, #68]	; 0x44
 8001dda:	e002      	b.n	8001de2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	2200      	movs	r2, #0
 8001de0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	2220      	movs	r2, #32
 8001de8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	6859      	ldr	r1, [r3, #4]
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	4b1b      	ldr	r3, [pc, #108]	; (8001e64 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8001df6:	400b      	ands	r3, r1
 8001df8:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2220      	movs	r2, #32
 8001dfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e022      	b.n	8001e5c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e16:	f7ff f89f 	bl	8000f58 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	68ba      	ldr	r2, [r7, #8]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d302      	bcc.n	8001e2c <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d10f      	bne.n	8001e4c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e30:	f043 0220 	orr.w	r2, r3, #32
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2220      	movs	r2, #32
 8001e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	2200      	movs	r2, #0
 8001e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e007      	b.n	8001e5c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	699b      	ldr	r3, [r3, #24]
 8001e52:	f003 0304 	and.w	r3, r3, #4
 8001e56:	2b04      	cmp	r3, #4
 8001e58:	d193      	bne.n	8001d82 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001e5a:	2300      	movs	r3, #0
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3710      	adds	r7, #16
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	fe00e800 	.word	0xfe00e800

08001e68 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b08a      	sub	sp, #40	; 0x28
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e74:	2300      	movs	r3, #0
 8001e76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8001e82:	2300      	movs	r3, #0
 8001e84:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	f003 0310 	and.w	r3, r3, #16
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d075      	beq.n	8001f80 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2210      	movs	r2, #16
 8001e9a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001e9c:	e056      	b.n	8001f4c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001e9e:	68bb      	ldr	r3, [r7, #8]
 8001ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ea4:	d052      	beq.n	8001f4c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001ea6:	f7ff f857 	bl	8000f58 <HAL_GetTick>
 8001eaa:	4602      	mov	r2, r0
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	68ba      	ldr	r2, [r7, #8]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d302      	bcc.n	8001ebc <I2C_IsErrorOccurred+0x54>
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d147      	bne.n	8001f4c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ec6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001ece:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001eda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ede:	d12e      	bne.n	8001f3e <I2C_IsErrorOccurred+0xd6>
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ee6:	d02a      	beq.n	8001f3e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8001ee8:	7cfb      	ldrb	r3, [r7, #19]
 8001eea:	2b20      	cmp	r3, #32
 8001eec:	d027      	beq.n	8001f3e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	685a      	ldr	r2, [r3, #4]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001efc:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8001efe:	f7ff f82b 	bl	8000f58 <HAL_GetTick>
 8001f02:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f04:	e01b      	b.n	8001f3e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001f06:	f7ff f827 	bl	8000f58 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b19      	cmp	r3, #25
 8001f12:	d914      	bls.n	8001f3e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f18:	f043 0220 	orr.w	r2, r3, #32
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2220      	movs	r2, #32
 8001f24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2200      	movs	r2, #0
 8001f34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	699b      	ldr	r3, [r3, #24]
 8001f44:	f003 0320 	and.w	r3, r3, #32
 8001f48:	2b20      	cmp	r3, #32
 8001f4a:	d1dc      	bne.n	8001f06 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	f003 0320 	and.w	r3, r3, #32
 8001f56:	2b20      	cmp	r3, #32
 8001f58:	d003      	beq.n	8001f62 <I2C_IsErrorOccurred+0xfa>
 8001f5a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d09d      	beq.n	8001e9e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8001f62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d103      	bne.n	8001f72 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2220      	movs	r2, #32
 8001f70:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8001f72:	6a3b      	ldr	r3, [r7, #32]
 8001f74:	f043 0304 	orr.w	r3, r3, #4
 8001f78:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d00b      	beq.n	8001faa <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8001f92:	6a3b      	ldr	r3, [r7, #32]
 8001f94:	f043 0301 	orr.w	r3, r3, #1
 8001f98:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fa2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d00b      	beq.n	8001fcc <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8001fb4:	6a3b      	ldr	r3, [r7, #32]
 8001fb6:	f043 0308 	orr.w	r3, r3, #8
 8001fba:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fc4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001fcc:	69bb      	ldr	r3, [r7, #24]
 8001fce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d00b      	beq.n	8001fee <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8001fd6:	6a3b      	ldr	r3, [r7, #32]
 8001fd8:	f043 0302 	orr.w	r3, r3, #2
 8001fdc:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001fe6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8001fee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d01c      	beq.n	8002030 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001ff6:	68f8      	ldr	r0, [r7, #12]
 8001ff8:	f7ff fddb 	bl	8001bb2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	6859      	ldr	r1, [r3, #4]
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	4b0d      	ldr	r3, [pc, #52]	; (800203c <I2C_IsErrorOccurred+0x1d4>)
 8002008:	400b      	ands	r3, r1
 800200a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002010:	6a3b      	ldr	r3, [r7, #32]
 8002012:	431a      	orrs	r2, r3
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2220      	movs	r2, #32
 800201c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2200      	movs	r2, #0
 800202c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002030:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002034:	4618      	mov	r0, r3
 8002036:	3728      	adds	r7, #40	; 0x28
 8002038:	46bd      	mov	sp, r7
 800203a:	bd80      	pop	{r7, pc}
 800203c:	fe00e800 	.word	0xfe00e800

08002040 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002040:	b480      	push	{r7}
 8002042:	b087      	sub	sp, #28
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	607b      	str	r3, [r7, #4]
 800204a:	460b      	mov	r3, r1
 800204c:	817b      	strh	r3, [r7, #10]
 800204e:	4613      	mov	r3, r2
 8002050:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002052:	897b      	ldrh	r3, [r7, #10]
 8002054:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002058:	7a7b      	ldrb	r3, [r7, #9]
 800205a:	041b      	lsls	r3, r3, #16
 800205c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002060:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002066:	6a3b      	ldr	r3, [r7, #32]
 8002068:	4313      	orrs	r3, r2
 800206a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800206e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	685a      	ldr	r2, [r3, #4]
 8002076:	6a3b      	ldr	r3, [r7, #32]
 8002078:	0d5b      	lsrs	r3, r3, #21
 800207a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800207e:	4b08      	ldr	r3, [pc, #32]	; (80020a0 <I2C_TransferConfig+0x60>)
 8002080:	430b      	orrs	r3, r1
 8002082:	43db      	mvns	r3, r3
 8002084:	ea02 0103 	and.w	r1, r2, r3
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	697a      	ldr	r2, [r7, #20]
 800208e:	430a      	orrs	r2, r1
 8002090:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002092:	bf00      	nop
 8002094:	371c      	adds	r7, #28
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
 800209e:	bf00      	nop
 80020a0:	03ff63ff 	.word	0x03ff63ff

080020a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	2b20      	cmp	r3, #32
 80020b8:	d138      	bne.n	800212c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d101      	bne.n	80020c8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80020c4:	2302      	movs	r3, #2
 80020c6:	e032      	b.n	800212e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2224      	movs	r2, #36	; 0x24
 80020d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f022 0201 	bic.w	r2, r2, #1
 80020e6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80020f6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	6819      	ldr	r1, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	683a      	ldr	r2, [r7, #0]
 8002104:	430a      	orrs	r2, r1
 8002106:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f042 0201 	orr.w	r2, r2, #1
 8002116:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2220      	movs	r2, #32
 800211c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002128:	2300      	movs	r3, #0
 800212a:	e000      	b.n	800212e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800212c:	2302      	movs	r3, #2
  }
}
 800212e:	4618      	mov	r0, r3
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800213a:	b480      	push	{r7}
 800213c:	b085      	sub	sp, #20
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
 8002142:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800214a:	b2db      	uxtb	r3, r3
 800214c:	2b20      	cmp	r3, #32
 800214e:	d139      	bne.n	80021c4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002156:	2b01      	cmp	r3, #1
 8002158:	d101      	bne.n	800215e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800215a:	2302      	movs	r3, #2
 800215c:	e033      	b.n	80021c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2201      	movs	r2, #1
 8002162:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2224      	movs	r2, #36	; 0x24
 800216a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f022 0201 	bic.w	r2, r2, #1
 800217c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800218c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	021b      	lsls	r3, r3, #8
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	4313      	orrs	r3, r2
 8002196:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f042 0201 	orr.w	r2, r2, #1
 80021ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2220      	movs	r2, #32
 80021b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80021c0:	2300      	movs	r3, #0
 80021c2:	e000      	b.n	80021c6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80021c4:	2302      	movs	r3, #2
  }
}
 80021c6:	4618      	mov	r0, r3
 80021c8:	3714      	adds	r7, #20
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr
	...

080021d4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d141      	bne.n	8002266 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80021e2:	4b4b      	ldr	r3, [pc, #300]	; (8002310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021ee:	d131      	bne.n	8002254 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80021f0:	4b47      	ldr	r3, [pc, #284]	; (8002310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021f6:	4a46      	ldr	r2, [pc, #280]	; (8002310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002200:	4b43      	ldr	r3, [pc, #268]	; (8002310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002208:	4a41      	ldr	r2, [pc, #260]	; (8002310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800220a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800220e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002210:	4b40      	ldr	r3, [pc, #256]	; (8002314 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2232      	movs	r2, #50	; 0x32
 8002216:	fb02 f303 	mul.w	r3, r2, r3
 800221a:	4a3f      	ldr	r2, [pc, #252]	; (8002318 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800221c:	fba2 2303 	umull	r2, r3, r2, r3
 8002220:	0c9b      	lsrs	r3, r3, #18
 8002222:	3301      	adds	r3, #1
 8002224:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002226:	e002      	b.n	800222e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	3b01      	subs	r3, #1
 800222c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800222e:	4b38      	ldr	r3, [pc, #224]	; (8002310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002230:	695b      	ldr	r3, [r3, #20]
 8002232:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002236:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800223a:	d102      	bne.n	8002242 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1f2      	bne.n	8002228 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002242:	4b33      	ldr	r3, [pc, #204]	; (8002310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800224a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800224e:	d158      	bne.n	8002302 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e057      	b.n	8002304 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002254:	4b2e      	ldr	r3, [pc, #184]	; (8002310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002256:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800225a:	4a2d      	ldr	r2, [pc, #180]	; (8002310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800225c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002260:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002264:	e04d      	b.n	8002302 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800226c:	d141      	bne.n	80022f2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800226e:	4b28      	ldr	r3, [pc, #160]	; (8002310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002276:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800227a:	d131      	bne.n	80022e0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800227c:	4b24      	ldr	r3, [pc, #144]	; (8002310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800227e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002282:	4a23      	ldr	r2, [pc, #140]	; (8002310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002284:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002288:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800228c:	4b20      	ldr	r3, [pc, #128]	; (8002310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002294:	4a1e      	ldr	r2, [pc, #120]	; (8002310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002296:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800229a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800229c:	4b1d      	ldr	r3, [pc, #116]	; (8002314 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2232      	movs	r2, #50	; 0x32
 80022a2:	fb02 f303 	mul.w	r3, r2, r3
 80022a6:	4a1c      	ldr	r2, [pc, #112]	; (8002318 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80022a8:	fba2 2303 	umull	r2, r3, r2, r3
 80022ac:	0c9b      	lsrs	r3, r3, #18
 80022ae:	3301      	adds	r3, #1
 80022b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022b2:	e002      	b.n	80022ba <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	3b01      	subs	r3, #1
 80022b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022ba:	4b15      	ldr	r3, [pc, #84]	; (8002310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022c6:	d102      	bne.n	80022ce <HAL_PWREx_ControlVoltageScaling+0xfa>
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1f2      	bne.n	80022b4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022ce:	4b10      	ldr	r3, [pc, #64]	; (8002310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022d0:	695b      	ldr	r3, [r3, #20]
 80022d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022da:	d112      	bne.n	8002302 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e011      	b.n	8002304 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022e0:	4b0b      	ldr	r3, [pc, #44]	; (8002310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022e6:	4a0a      	ldr	r2, [pc, #40]	; (8002310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80022f0:	e007      	b.n	8002302 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80022f2:	4b07      	ldr	r3, [pc, #28]	; (8002310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022fa:	4a05      	ldr	r2, [pc, #20]	; (8002310 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002300:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	3714      	adds	r7, #20
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	40007000 	.word	0x40007000
 8002314:	20000000 	.word	0x20000000
 8002318:	431bde83 	.word	0x431bde83

0800231c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002320:	4b05      	ldr	r3, [pc, #20]	; (8002338 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	4a04      	ldr	r2, [pc, #16]	; (8002338 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002326:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800232a:	6093      	str	r3, [r2, #8]
}
 800232c:	bf00      	nop
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	40007000 	.word	0x40007000

0800233c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b088      	sub	sp, #32
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e306      	b.n	800295c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0301 	and.w	r3, r3, #1
 8002356:	2b00      	cmp	r3, #0
 8002358:	d075      	beq.n	8002446 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800235a:	4b97      	ldr	r3, [pc, #604]	; (80025b8 <HAL_RCC_OscConfig+0x27c>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	f003 030c 	and.w	r3, r3, #12
 8002362:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002364:	4b94      	ldr	r3, [pc, #592]	; (80025b8 <HAL_RCC_OscConfig+0x27c>)
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	f003 0303 	and.w	r3, r3, #3
 800236c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	2b0c      	cmp	r3, #12
 8002372:	d102      	bne.n	800237a <HAL_RCC_OscConfig+0x3e>
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	2b03      	cmp	r3, #3
 8002378:	d002      	beq.n	8002380 <HAL_RCC_OscConfig+0x44>
 800237a:	69bb      	ldr	r3, [r7, #24]
 800237c:	2b08      	cmp	r3, #8
 800237e:	d10b      	bne.n	8002398 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002380:	4b8d      	ldr	r3, [pc, #564]	; (80025b8 <HAL_RCC_OscConfig+0x27c>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d05b      	beq.n	8002444 <HAL_RCC_OscConfig+0x108>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d157      	bne.n	8002444 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e2e1      	b.n	800295c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023a0:	d106      	bne.n	80023b0 <HAL_RCC_OscConfig+0x74>
 80023a2:	4b85      	ldr	r3, [pc, #532]	; (80025b8 <HAL_RCC_OscConfig+0x27c>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a84      	ldr	r2, [pc, #528]	; (80025b8 <HAL_RCC_OscConfig+0x27c>)
 80023a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ac:	6013      	str	r3, [r2, #0]
 80023ae:	e01d      	b.n	80023ec <HAL_RCC_OscConfig+0xb0>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023b8:	d10c      	bne.n	80023d4 <HAL_RCC_OscConfig+0x98>
 80023ba:	4b7f      	ldr	r3, [pc, #508]	; (80025b8 <HAL_RCC_OscConfig+0x27c>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4a7e      	ldr	r2, [pc, #504]	; (80025b8 <HAL_RCC_OscConfig+0x27c>)
 80023c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023c4:	6013      	str	r3, [r2, #0]
 80023c6:	4b7c      	ldr	r3, [pc, #496]	; (80025b8 <HAL_RCC_OscConfig+0x27c>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a7b      	ldr	r2, [pc, #492]	; (80025b8 <HAL_RCC_OscConfig+0x27c>)
 80023cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023d0:	6013      	str	r3, [r2, #0]
 80023d2:	e00b      	b.n	80023ec <HAL_RCC_OscConfig+0xb0>
 80023d4:	4b78      	ldr	r3, [pc, #480]	; (80025b8 <HAL_RCC_OscConfig+0x27c>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a77      	ldr	r2, [pc, #476]	; (80025b8 <HAL_RCC_OscConfig+0x27c>)
 80023da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023de:	6013      	str	r3, [r2, #0]
 80023e0:	4b75      	ldr	r3, [pc, #468]	; (80025b8 <HAL_RCC_OscConfig+0x27c>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a74      	ldr	r2, [pc, #464]	; (80025b8 <HAL_RCC_OscConfig+0x27c>)
 80023e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d013      	beq.n	800241c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f4:	f7fe fdb0 	bl	8000f58 <HAL_GetTick>
 80023f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023fa:	e008      	b.n	800240e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023fc:	f7fe fdac 	bl	8000f58 <HAL_GetTick>
 8002400:	4602      	mov	r2, r0
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	2b64      	cmp	r3, #100	; 0x64
 8002408:	d901      	bls.n	800240e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e2a6      	b.n	800295c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800240e:	4b6a      	ldr	r3, [pc, #424]	; (80025b8 <HAL_RCC_OscConfig+0x27c>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d0f0      	beq.n	80023fc <HAL_RCC_OscConfig+0xc0>
 800241a:	e014      	b.n	8002446 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800241c:	f7fe fd9c 	bl	8000f58 <HAL_GetTick>
 8002420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002422:	e008      	b.n	8002436 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002424:	f7fe fd98 	bl	8000f58 <HAL_GetTick>
 8002428:	4602      	mov	r2, r0
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	2b64      	cmp	r3, #100	; 0x64
 8002430:	d901      	bls.n	8002436 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002432:	2303      	movs	r3, #3
 8002434:	e292      	b.n	800295c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002436:	4b60      	ldr	r3, [pc, #384]	; (80025b8 <HAL_RCC_OscConfig+0x27c>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d1f0      	bne.n	8002424 <HAL_RCC_OscConfig+0xe8>
 8002442:	e000      	b.n	8002446 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002444:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d075      	beq.n	800253e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002452:	4b59      	ldr	r3, [pc, #356]	; (80025b8 <HAL_RCC_OscConfig+0x27c>)
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	f003 030c 	and.w	r3, r3, #12
 800245a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800245c:	4b56      	ldr	r3, [pc, #344]	; (80025b8 <HAL_RCC_OscConfig+0x27c>)
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	f003 0303 	and.w	r3, r3, #3
 8002464:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002466:	69bb      	ldr	r3, [r7, #24]
 8002468:	2b0c      	cmp	r3, #12
 800246a:	d102      	bne.n	8002472 <HAL_RCC_OscConfig+0x136>
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	2b02      	cmp	r3, #2
 8002470:	d002      	beq.n	8002478 <HAL_RCC_OscConfig+0x13c>
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	2b04      	cmp	r3, #4
 8002476:	d11f      	bne.n	80024b8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002478:	4b4f      	ldr	r3, [pc, #316]	; (80025b8 <HAL_RCC_OscConfig+0x27c>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002480:	2b00      	cmp	r3, #0
 8002482:	d005      	beq.n	8002490 <HAL_RCC_OscConfig+0x154>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d101      	bne.n	8002490 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e265      	b.n	800295c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002490:	4b49      	ldr	r3, [pc, #292]	; (80025b8 <HAL_RCC_OscConfig+0x27c>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	061b      	lsls	r3, r3, #24
 800249e:	4946      	ldr	r1, [pc, #280]	; (80025b8 <HAL_RCC_OscConfig+0x27c>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80024a4:	4b45      	ldr	r3, [pc, #276]	; (80025bc <HAL_RCC_OscConfig+0x280>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7fe fd09 	bl	8000ec0 <HAL_InitTick>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d043      	beq.n	800253c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e251      	b.n	800295c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d023      	beq.n	8002508 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024c0:	4b3d      	ldr	r3, [pc, #244]	; (80025b8 <HAL_RCC_OscConfig+0x27c>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a3c      	ldr	r2, [pc, #240]	; (80025b8 <HAL_RCC_OscConfig+0x27c>)
 80024c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024cc:	f7fe fd44 	bl	8000f58 <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024d4:	f7fe fd40 	bl	8000f58 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e23a      	b.n	800295c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024e6:	4b34      	ldr	r3, [pc, #208]	; (80025b8 <HAL_RCC_OscConfig+0x27c>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d0f0      	beq.n	80024d4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024f2:	4b31      	ldr	r3, [pc, #196]	; (80025b8 <HAL_RCC_OscConfig+0x27c>)
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	691b      	ldr	r3, [r3, #16]
 80024fe:	061b      	lsls	r3, r3, #24
 8002500:	492d      	ldr	r1, [pc, #180]	; (80025b8 <HAL_RCC_OscConfig+0x27c>)
 8002502:	4313      	orrs	r3, r2
 8002504:	604b      	str	r3, [r1, #4]
 8002506:	e01a      	b.n	800253e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002508:	4b2b      	ldr	r3, [pc, #172]	; (80025b8 <HAL_RCC_OscConfig+0x27c>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a2a      	ldr	r2, [pc, #168]	; (80025b8 <HAL_RCC_OscConfig+0x27c>)
 800250e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002512:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002514:	f7fe fd20 	bl	8000f58 <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800251c:	f7fe fd1c 	bl	8000f58 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e216      	b.n	800295c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800252e:	4b22      	ldr	r3, [pc, #136]	; (80025b8 <HAL_RCC_OscConfig+0x27c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1f0      	bne.n	800251c <HAL_RCC_OscConfig+0x1e0>
 800253a:	e000      	b.n	800253e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800253c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0308 	and.w	r3, r3, #8
 8002546:	2b00      	cmp	r3, #0
 8002548:	d041      	beq.n	80025ce <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	695b      	ldr	r3, [r3, #20]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d01c      	beq.n	800258c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002552:	4b19      	ldr	r3, [pc, #100]	; (80025b8 <HAL_RCC_OscConfig+0x27c>)
 8002554:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002558:	4a17      	ldr	r2, [pc, #92]	; (80025b8 <HAL_RCC_OscConfig+0x27c>)
 800255a:	f043 0301 	orr.w	r3, r3, #1
 800255e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002562:	f7fe fcf9 	bl	8000f58 <HAL_GetTick>
 8002566:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002568:	e008      	b.n	800257c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800256a:	f7fe fcf5 	bl	8000f58 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e1ef      	b.n	800295c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800257c:	4b0e      	ldr	r3, [pc, #56]	; (80025b8 <HAL_RCC_OscConfig+0x27c>)
 800257e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d0ef      	beq.n	800256a <HAL_RCC_OscConfig+0x22e>
 800258a:	e020      	b.n	80025ce <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800258c:	4b0a      	ldr	r3, [pc, #40]	; (80025b8 <HAL_RCC_OscConfig+0x27c>)
 800258e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002592:	4a09      	ldr	r2, [pc, #36]	; (80025b8 <HAL_RCC_OscConfig+0x27c>)
 8002594:	f023 0301 	bic.w	r3, r3, #1
 8002598:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800259c:	f7fe fcdc 	bl	8000f58 <HAL_GetTick>
 80025a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025a2:	e00d      	b.n	80025c0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025a4:	f7fe fcd8 	bl	8000f58 <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d906      	bls.n	80025c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e1d2      	b.n	800295c <HAL_RCC_OscConfig+0x620>
 80025b6:	bf00      	nop
 80025b8:	40021000 	.word	0x40021000
 80025bc:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025c0:	4b8c      	ldr	r3, [pc, #560]	; (80027f4 <HAL_RCC_OscConfig+0x4b8>)
 80025c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025c6:	f003 0302 	and.w	r3, r3, #2
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1ea      	bne.n	80025a4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0304 	and.w	r3, r3, #4
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	f000 80a6 	beq.w	8002728 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025dc:	2300      	movs	r3, #0
 80025de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80025e0:	4b84      	ldr	r3, [pc, #528]	; (80027f4 <HAL_RCC_OscConfig+0x4b8>)
 80025e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d101      	bne.n	80025f0 <HAL_RCC_OscConfig+0x2b4>
 80025ec:	2301      	movs	r3, #1
 80025ee:	e000      	b.n	80025f2 <HAL_RCC_OscConfig+0x2b6>
 80025f0:	2300      	movs	r3, #0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00d      	beq.n	8002612 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025f6:	4b7f      	ldr	r3, [pc, #508]	; (80027f4 <HAL_RCC_OscConfig+0x4b8>)
 80025f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025fa:	4a7e      	ldr	r2, [pc, #504]	; (80027f4 <HAL_RCC_OscConfig+0x4b8>)
 80025fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002600:	6593      	str	r3, [r2, #88]	; 0x58
 8002602:	4b7c      	ldr	r3, [pc, #496]	; (80027f4 <HAL_RCC_OscConfig+0x4b8>)
 8002604:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800260a:	60fb      	str	r3, [r7, #12]
 800260c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800260e:	2301      	movs	r3, #1
 8002610:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002612:	4b79      	ldr	r3, [pc, #484]	; (80027f8 <HAL_RCC_OscConfig+0x4bc>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261a:	2b00      	cmp	r3, #0
 800261c:	d118      	bne.n	8002650 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800261e:	4b76      	ldr	r3, [pc, #472]	; (80027f8 <HAL_RCC_OscConfig+0x4bc>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a75      	ldr	r2, [pc, #468]	; (80027f8 <HAL_RCC_OscConfig+0x4bc>)
 8002624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002628:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800262a:	f7fe fc95 	bl	8000f58 <HAL_GetTick>
 800262e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002630:	e008      	b.n	8002644 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002632:	f7fe fc91 	bl	8000f58 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e18b      	b.n	800295c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002644:	4b6c      	ldr	r3, [pc, #432]	; (80027f8 <HAL_RCC_OscConfig+0x4bc>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800264c:	2b00      	cmp	r3, #0
 800264e:	d0f0      	beq.n	8002632 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	2b01      	cmp	r3, #1
 8002656:	d108      	bne.n	800266a <HAL_RCC_OscConfig+0x32e>
 8002658:	4b66      	ldr	r3, [pc, #408]	; (80027f4 <HAL_RCC_OscConfig+0x4b8>)
 800265a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800265e:	4a65      	ldr	r2, [pc, #404]	; (80027f4 <HAL_RCC_OscConfig+0x4b8>)
 8002660:	f043 0301 	orr.w	r3, r3, #1
 8002664:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002668:	e024      	b.n	80026b4 <HAL_RCC_OscConfig+0x378>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	2b05      	cmp	r3, #5
 8002670:	d110      	bne.n	8002694 <HAL_RCC_OscConfig+0x358>
 8002672:	4b60      	ldr	r3, [pc, #384]	; (80027f4 <HAL_RCC_OscConfig+0x4b8>)
 8002674:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002678:	4a5e      	ldr	r2, [pc, #376]	; (80027f4 <HAL_RCC_OscConfig+0x4b8>)
 800267a:	f043 0304 	orr.w	r3, r3, #4
 800267e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002682:	4b5c      	ldr	r3, [pc, #368]	; (80027f4 <HAL_RCC_OscConfig+0x4b8>)
 8002684:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002688:	4a5a      	ldr	r2, [pc, #360]	; (80027f4 <HAL_RCC_OscConfig+0x4b8>)
 800268a:	f043 0301 	orr.w	r3, r3, #1
 800268e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002692:	e00f      	b.n	80026b4 <HAL_RCC_OscConfig+0x378>
 8002694:	4b57      	ldr	r3, [pc, #348]	; (80027f4 <HAL_RCC_OscConfig+0x4b8>)
 8002696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800269a:	4a56      	ldr	r2, [pc, #344]	; (80027f4 <HAL_RCC_OscConfig+0x4b8>)
 800269c:	f023 0301 	bic.w	r3, r3, #1
 80026a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026a4:	4b53      	ldr	r3, [pc, #332]	; (80027f4 <HAL_RCC_OscConfig+0x4b8>)
 80026a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026aa:	4a52      	ldr	r2, [pc, #328]	; (80027f4 <HAL_RCC_OscConfig+0x4b8>)
 80026ac:	f023 0304 	bic.w	r3, r3, #4
 80026b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d016      	beq.n	80026ea <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026bc:	f7fe fc4c 	bl	8000f58 <HAL_GetTick>
 80026c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026c2:	e00a      	b.n	80026da <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026c4:	f7fe fc48 	bl	8000f58 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e140      	b.n	800295c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026da:	4b46      	ldr	r3, [pc, #280]	; (80027f4 <HAL_RCC_OscConfig+0x4b8>)
 80026dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d0ed      	beq.n	80026c4 <HAL_RCC_OscConfig+0x388>
 80026e8:	e015      	b.n	8002716 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ea:	f7fe fc35 	bl	8000f58 <HAL_GetTick>
 80026ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026f0:	e00a      	b.n	8002708 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026f2:	f7fe fc31 	bl	8000f58 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002700:	4293      	cmp	r3, r2
 8002702:	d901      	bls.n	8002708 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002704:	2303      	movs	r3, #3
 8002706:	e129      	b.n	800295c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002708:	4b3a      	ldr	r3, [pc, #232]	; (80027f4 <HAL_RCC_OscConfig+0x4b8>)
 800270a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b00      	cmp	r3, #0
 8002714:	d1ed      	bne.n	80026f2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002716:	7ffb      	ldrb	r3, [r7, #31]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d105      	bne.n	8002728 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800271c:	4b35      	ldr	r3, [pc, #212]	; (80027f4 <HAL_RCC_OscConfig+0x4b8>)
 800271e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002720:	4a34      	ldr	r2, [pc, #208]	; (80027f4 <HAL_RCC_OscConfig+0x4b8>)
 8002722:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002726:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0320 	and.w	r3, r3, #32
 8002730:	2b00      	cmp	r3, #0
 8002732:	d03c      	beq.n	80027ae <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	699b      	ldr	r3, [r3, #24]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d01c      	beq.n	8002776 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800273c:	4b2d      	ldr	r3, [pc, #180]	; (80027f4 <HAL_RCC_OscConfig+0x4b8>)
 800273e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002742:	4a2c      	ldr	r2, [pc, #176]	; (80027f4 <HAL_RCC_OscConfig+0x4b8>)
 8002744:	f043 0301 	orr.w	r3, r3, #1
 8002748:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800274c:	f7fe fc04 	bl	8000f58 <HAL_GetTick>
 8002750:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002752:	e008      	b.n	8002766 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002754:	f7fe fc00 	bl	8000f58 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e0fa      	b.n	800295c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002766:	4b23      	ldr	r3, [pc, #140]	; (80027f4 <HAL_RCC_OscConfig+0x4b8>)
 8002768:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d0ef      	beq.n	8002754 <HAL_RCC_OscConfig+0x418>
 8002774:	e01b      	b.n	80027ae <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002776:	4b1f      	ldr	r3, [pc, #124]	; (80027f4 <HAL_RCC_OscConfig+0x4b8>)
 8002778:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800277c:	4a1d      	ldr	r2, [pc, #116]	; (80027f4 <HAL_RCC_OscConfig+0x4b8>)
 800277e:	f023 0301 	bic.w	r3, r3, #1
 8002782:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002786:	f7fe fbe7 	bl	8000f58 <HAL_GetTick>
 800278a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800278c:	e008      	b.n	80027a0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800278e:	f7fe fbe3 	bl	8000f58 <HAL_GetTick>
 8002792:	4602      	mov	r2, r0
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	1ad3      	subs	r3, r2, r3
 8002798:	2b02      	cmp	r3, #2
 800279a:	d901      	bls.n	80027a0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800279c:	2303      	movs	r3, #3
 800279e:	e0dd      	b.n	800295c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80027a0:	4b14      	ldr	r3, [pc, #80]	; (80027f4 <HAL_RCC_OscConfig+0x4b8>)
 80027a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1ef      	bne.n	800278e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	69db      	ldr	r3, [r3, #28]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	f000 80d1 	beq.w	800295a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027b8:	4b0e      	ldr	r3, [pc, #56]	; (80027f4 <HAL_RCC_OscConfig+0x4b8>)
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f003 030c 	and.w	r3, r3, #12
 80027c0:	2b0c      	cmp	r3, #12
 80027c2:	f000 808b 	beq.w	80028dc <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	69db      	ldr	r3, [r3, #28]
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d15e      	bne.n	800288c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ce:	4b09      	ldr	r3, [pc, #36]	; (80027f4 <HAL_RCC_OscConfig+0x4b8>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a08      	ldr	r2, [pc, #32]	; (80027f4 <HAL_RCC_OscConfig+0x4b8>)
 80027d4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027da:	f7fe fbbd 	bl	8000f58 <HAL_GetTick>
 80027de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027e0:	e00c      	b.n	80027fc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027e2:	f7fe fbb9 	bl	8000f58 <HAL_GetTick>
 80027e6:	4602      	mov	r2, r0
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	2b02      	cmp	r3, #2
 80027ee:	d905      	bls.n	80027fc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80027f0:	2303      	movs	r3, #3
 80027f2:	e0b3      	b.n	800295c <HAL_RCC_OscConfig+0x620>
 80027f4:	40021000 	.word	0x40021000
 80027f8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027fc:	4b59      	ldr	r3, [pc, #356]	; (8002964 <HAL_RCC_OscConfig+0x628>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1ec      	bne.n	80027e2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002808:	4b56      	ldr	r3, [pc, #344]	; (8002964 <HAL_RCC_OscConfig+0x628>)
 800280a:	68da      	ldr	r2, [r3, #12]
 800280c:	4b56      	ldr	r3, [pc, #344]	; (8002968 <HAL_RCC_OscConfig+0x62c>)
 800280e:	4013      	ands	r3, r2
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	6a11      	ldr	r1, [r2, #32]
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002818:	3a01      	subs	r2, #1
 800281a:	0112      	lsls	r2, r2, #4
 800281c:	4311      	orrs	r1, r2
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002822:	0212      	lsls	r2, r2, #8
 8002824:	4311      	orrs	r1, r2
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800282a:	0852      	lsrs	r2, r2, #1
 800282c:	3a01      	subs	r2, #1
 800282e:	0552      	lsls	r2, r2, #21
 8002830:	4311      	orrs	r1, r2
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002836:	0852      	lsrs	r2, r2, #1
 8002838:	3a01      	subs	r2, #1
 800283a:	0652      	lsls	r2, r2, #25
 800283c:	4311      	orrs	r1, r2
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002842:	06d2      	lsls	r2, r2, #27
 8002844:	430a      	orrs	r2, r1
 8002846:	4947      	ldr	r1, [pc, #284]	; (8002964 <HAL_RCC_OscConfig+0x628>)
 8002848:	4313      	orrs	r3, r2
 800284a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800284c:	4b45      	ldr	r3, [pc, #276]	; (8002964 <HAL_RCC_OscConfig+0x628>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a44      	ldr	r2, [pc, #272]	; (8002964 <HAL_RCC_OscConfig+0x628>)
 8002852:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002856:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002858:	4b42      	ldr	r3, [pc, #264]	; (8002964 <HAL_RCC_OscConfig+0x628>)
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	4a41      	ldr	r2, [pc, #260]	; (8002964 <HAL_RCC_OscConfig+0x628>)
 800285e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002862:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002864:	f7fe fb78 	bl	8000f58 <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800286c:	f7fe fb74 	bl	8000f58 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e06e      	b.n	800295c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800287e:	4b39      	ldr	r3, [pc, #228]	; (8002964 <HAL_RCC_OscConfig+0x628>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d0f0      	beq.n	800286c <HAL_RCC_OscConfig+0x530>
 800288a:	e066      	b.n	800295a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800288c:	4b35      	ldr	r3, [pc, #212]	; (8002964 <HAL_RCC_OscConfig+0x628>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a34      	ldr	r2, [pc, #208]	; (8002964 <HAL_RCC_OscConfig+0x628>)
 8002892:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002896:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002898:	4b32      	ldr	r3, [pc, #200]	; (8002964 <HAL_RCC_OscConfig+0x628>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	4a31      	ldr	r2, [pc, #196]	; (8002964 <HAL_RCC_OscConfig+0x628>)
 800289e:	f023 0303 	bic.w	r3, r3, #3
 80028a2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80028a4:	4b2f      	ldr	r3, [pc, #188]	; (8002964 <HAL_RCC_OscConfig+0x628>)
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	4a2e      	ldr	r2, [pc, #184]	; (8002964 <HAL_RCC_OscConfig+0x628>)
 80028aa:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80028ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028b2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028b4:	f7fe fb50 	bl	8000f58 <HAL_GetTick>
 80028b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028ba:	e008      	b.n	80028ce <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028bc:	f7fe fb4c 	bl	8000f58 <HAL_GetTick>
 80028c0:	4602      	mov	r2, r0
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	1ad3      	subs	r3, r2, r3
 80028c6:	2b02      	cmp	r3, #2
 80028c8:	d901      	bls.n	80028ce <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80028ca:	2303      	movs	r3, #3
 80028cc:	e046      	b.n	800295c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028ce:	4b25      	ldr	r3, [pc, #148]	; (8002964 <HAL_RCC_OscConfig+0x628>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1f0      	bne.n	80028bc <HAL_RCC_OscConfig+0x580>
 80028da:	e03e      	b.n	800295a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	69db      	ldr	r3, [r3, #28]
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d101      	bne.n	80028e8 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e039      	b.n	800295c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80028e8:	4b1e      	ldr	r3, [pc, #120]	; (8002964 <HAL_RCC_OscConfig+0x628>)
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	f003 0203 	and.w	r2, r3, #3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a1b      	ldr	r3, [r3, #32]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d12c      	bne.n	8002956 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002906:	3b01      	subs	r3, #1
 8002908:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800290a:	429a      	cmp	r2, r3
 800290c:	d123      	bne.n	8002956 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002918:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800291a:	429a      	cmp	r2, r3
 800291c:	d11b      	bne.n	8002956 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002928:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800292a:	429a      	cmp	r2, r3
 800292c:	d113      	bne.n	8002956 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002938:	085b      	lsrs	r3, r3, #1
 800293a:	3b01      	subs	r3, #1
 800293c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800293e:	429a      	cmp	r2, r3
 8002940:	d109      	bne.n	8002956 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800294c:	085b      	lsrs	r3, r3, #1
 800294e:	3b01      	subs	r3, #1
 8002950:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002952:	429a      	cmp	r2, r3
 8002954:	d001      	beq.n	800295a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e000      	b.n	800295c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800295a:	2300      	movs	r3, #0
}
 800295c:	4618      	mov	r0, r3
 800295e:	3720      	adds	r7, #32
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	40021000 	.word	0x40021000
 8002968:	019f800c 	.word	0x019f800c

0800296c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b086      	sub	sp, #24
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
 8002974:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002976:	2300      	movs	r3, #0
 8002978:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d101      	bne.n	8002984 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e11e      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002984:	4b91      	ldr	r3, [pc, #580]	; (8002bcc <HAL_RCC_ClockConfig+0x260>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 030f 	and.w	r3, r3, #15
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	429a      	cmp	r2, r3
 8002990:	d910      	bls.n	80029b4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002992:	4b8e      	ldr	r3, [pc, #568]	; (8002bcc <HAL_RCC_ClockConfig+0x260>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f023 020f 	bic.w	r2, r3, #15
 800299a:	498c      	ldr	r1, [pc, #560]	; (8002bcc <HAL_RCC_ClockConfig+0x260>)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	4313      	orrs	r3, r2
 80029a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029a2:	4b8a      	ldr	r3, [pc, #552]	; (8002bcc <HAL_RCC_ClockConfig+0x260>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 030f 	and.w	r3, r3, #15
 80029aa:	683a      	ldr	r2, [r7, #0]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d001      	beq.n	80029b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e106      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0301 	and.w	r3, r3, #1
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d073      	beq.n	8002aa8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	2b03      	cmp	r3, #3
 80029c6:	d129      	bne.n	8002a1c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029c8:	4b81      	ldr	r3, [pc, #516]	; (8002bd0 <HAL_RCC_ClockConfig+0x264>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d101      	bne.n	80029d8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e0f4      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80029d8:	f000 f99e 	bl	8002d18 <RCC_GetSysClockFreqFromPLLSource>
 80029dc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	4a7c      	ldr	r2, [pc, #496]	; (8002bd4 <HAL_RCC_ClockConfig+0x268>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d93f      	bls.n	8002a66 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80029e6:	4b7a      	ldr	r3, [pc, #488]	; (8002bd0 <HAL_RCC_ClockConfig+0x264>)
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d009      	beq.n	8002a06 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d033      	beq.n	8002a66 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d12f      	bne.n	8002a66 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002a06:	4b72      	ldr	r3, [pc, #456]	; (8002bd0 <HAL_RCC_ClockConfig+0x264>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a0e:	4a70      	ldr	r2, [pc, #448]	; (8002bd0 <HAL_RCC_ClockConfig+0x264>)
 8002a10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a14:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002a16:	2380      	movs	r3, #128	; 0x80
 8002a18:	617b      	str	r3, [r7, #20]
 8002a1a:	e024      	b.n	8002a66 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d107      	bne.n	8002a34 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a24:	4b6a      	ldr	r3, [pc, #424]	; (8002bd0 <HAL_RCC_ClockConfig+0x264>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d109      	bne.n	8002a44 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e0c6      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a34:	4b66      	ldr	r3, [pc, #408]	; (8002bd0 <HAL_RCC_ClockConfig+0x264>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d101      	bne.n	8002a44 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
 8002a42:	e0be      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002a44:	f000 f8ce 	bl	8002be4 <HAL_RCC_GetSysClockFreq>
 8002a48:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	4a61      	ldr	r2, [pc, #388]	; (8002bd4 <HAL_RCC_ClockConfig+0x268>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d909      	bls.n	8002a66 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002a52:	4b5f      	ldr	r3, [pc, #380]	; (8002bd0 <HAL_RCC_ClockConfig+0x264>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a5a:	4a5d      	ldr	r2, [pc, #372]	; (8002bd0 <HAL_RCC_ClockConfig+0x264>)
 8002a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a60:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002a62:	2380      	movs	r3, #128	; 0x80
 8002a64:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a66:	4b5a      	ldr	r3, [pc, #360]	; (8002bd0 <HAL_RCC_ClockConfig+0x264>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f023 0203 	bic.w	r2, r3, #3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	4957      	ldr	r1, [pc, #348]	; (8002bd0 <HAL_RCC_ClockConfig+0x264>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a78:	f7fe fa6e 	bl	8000f58 <HAL_GetTick>
 8002a7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a7e:	e00a      	b.n	8002a96 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a80:	f7fe fa6a 	bl	8000f58 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d901      	bls.n	8002a96 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002a92:	2303      	movs	r3, #3
 8002a94:	e095      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a96:	4b4e      	ldr	r3, [pc, #312]	; (8002bd0 <HAL_RCC_ClockConfig+0x264>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f003 020c 	and.w	r2, r3, #12
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d1eb      	bne.n	8002a80 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0302 	and.w	r3, r3, #2
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d023      	beq.n	8002afc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0304 	and.w	r3, r3, #4
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d005      	beq.n	8002acc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ac0:	4b43      	ldr	r3, [pc, #268]	; (8002bd0 <HAL_RCC_ClockConfig+0x264>)
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	4a42      	ldr	r2, [pc, #264]	; (8002bd0 <HAL_RCC_ClockConfig+0x264>)
 8002ac6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002aca:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0308 	and.w	r3, r3, #8
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d007      	beq.n	8002ae8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002ad8:	4b3d      	ldr	r3, [pc, #244]	; (8002bd0 <HAL_RCC_ClockConfig+0x264>)
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002ae0:	4a3b      	ldr	r2, [pc, #236]	; (8002bd0 <HAL_RCC_ClockConfig+0x264>)
 8002ae2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002ae6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ae8:	4b39      	ldr	r3, [pc, #228]	; (8002bd0 <HAL_RCC_ClockConfig+0x264>)
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	4936      	ldr	r1, [pc, #216]	; (8002bd0 <HAL_RCC_ClockConfig+0x264>)
 8002af6:	4313      	orrs	r3, r2
 8002af8:	608b      	str	r3, [r1, #8]
 8002afa:	e008      	b.n	8002b0e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	2b80      	cmp	r3, #128	; 0x80
 8002b00:	d105      	bne.n	8002b0e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002b02:	4b33      	ldr	r3, [pc, #204]	; (8002bd0 <HAL_RCC_ClockConfig+0x264>)
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	4a32      	ldr	r2, [pc, #200]	; (8002bd0 <HAL_RCC_ClockConfig+0x264>)
 8002b08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b0c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b0e:	4b2f      	ldr	r3, [pc, #188]	; (8002bcc <HAL_RCC_ClockConfig+0x260>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 030f 	and.w	r3, r3, #15
 8002b16:	683a      	ldr	r2, [r7, #0]
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d21d      	bcs.n	8002b58 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b1c:	4b2b      	ldr	r3, [pc, #172]	; (8002bcc <HAL_RCC_ClockConfig+0x260>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f023 020f 	bic.w	r2, r3, #15
 8002b24:	4929      	ldr	r1, [pc, #164]	; (8002bcc <HAL_RCC_ClockConfig+0x260>)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002b2c:	f7fe fa14 	bl	8000f58 <HAL_GetTick>
 8002b30:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b32:	e00a      	b.n	8002b4a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b34:	f7fe fa10 	bl	8000f58 <HAL_GetTick>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	1ad3      	subs	r3, r2, r3
 8002b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e03b      	b.n	8002bc2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b4a:	4b20      	ldr	r3, [pc, #128]	; (8002bcc <HAL_RCC_ClockConfig+0x260>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 030f 	and.w	r3, r3, #15
 8002b52:	683a      	ldr	r2, [r7, #0]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d1ed      	bne.n	8002b34 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0304 	and.w	r3, r3, #4
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d008      	beq.n	8002b76 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b64:	4b1a      	ldr	r3, [pc, #104]	; (8002bd0 <HAL_RCC_ClockConfig+0x264>)
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	4917      	ldr	r1, [pc, #92]	; (8002bd0 <HAL_RCC_ClockConfig+0x264>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0308 	and.w	r3, r3, #8
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d009      	beq.n	8002b96 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b82:	4b13      	ldr	r3, [pc, #76]	; (8002bd0 <HAL_RCC_ClockConfig+0x264>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	490f      	ldr	r1, [pc, #60]	; (8002bd0 <HAL_RCC_ClockConfig+0x264>)
 8002b92:	4313      	orrs	r3, r2
 8002b94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b96:	f000 f825 	bl	8002be4 <HAL_RCC_GetSysClockFreq>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	4b0c      	ldr	r3, [pc, #48]	; (8002bd0 <HAL_RCC_ClockConfig+0x264>)
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	091b      	lsrs	r3, r3, #4
 8002ba2:	f003 030f 	and.w	r3, r3, #15
 8002ba6:	490c      	ldr	r1, [pc, #48]	; (8002bd8 <HAL_RCC_ClockConfig+0x26c>)
 8002ba8:	5ccb      	ldrb	r3, [r1, r3]
 8002baa:	f003 031f 	and.w	r3, r3, #31
 8002bae:	fa22 f303 	lsr.w	r3, r2, r3
 8002bb2:	4a0a      	ldr	r2, [pc, #40]	; (8002bdc <HAL_RCC_ClockConfig+0x270>)
 8002bb4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002bb6:	4b0a      	ldr	r3, [pc, #40]	; (8002be0 <HAL_RCC_ClockConfig+0x274>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f7fe f980 	bl	8000ec0 <HAL_InitTick>
 8002bc0:	4603      	mov	r3, r0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3718      	adds	r7, #24
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	40022000 	.word	0x40022000
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	04c4b400 	.word	0x04c4b400
 8002bd8:	08006370 	.word	0x08006370
 8002bdc:	20000000 	.word	0x20000000
 8002be0:	20000004 	.word	0x20000004

08002be4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b087      	sub	sp, #28
 8002be8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002bea:	4b2c      	ldr	r3, [pc, #176]	; (8002c9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f003 030c 	and.w	r3, r3, #12
 8002bf2:	2b04      	cmp	r3, #4
 8002bf4:	d102      	bne.n	8002bfc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002bf6:	4b2a      	ldr	r3, [pc, #168]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002bf8:	613b      	str	r3, [r7, #16]
 8002bfa:	e047      	b.n	8002c8c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002bfc:	4b27      	ldr	r3, [pc, #156]	; (8002c9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	f003 030c 	and.w	r3, r3, #12
 8002c04:	2b08      	cmp	r3, #8
 8002c06:	d102      	bne.n	8002c0e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c08:	4b26      	ldr	r3, [pc, #152]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c0a:	613b      	str	r3, [r7, #16]
 8002c0c:	e03e      	b.n	8002c8c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002c0e:	4b23      	ldr	r3, [pc, #140]	; (8002c9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f003 030c 	and.w	r3, r3, #12
 8002c16:	2b0c      	cmp	r3, #12
 8002c18:	d136      	bne.n	8002c88 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c1a:	4b20      	ldr	r3, [pc, #128]	; (8002c9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	f003 0303 	and.w	r3, r3, #3
 8002c22:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c24:	4b1d      	ldr	r3, [pc, #116]	; (8002c9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	091b      	lsrs	r3, r3, #4
 8002c2a:	f003 030f 	and.w	r3, r3, #15
 8002c2e:	3301      	adds	r3, #1
 8002c30:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2b03      	cmp	r3, #3
 8002c36:	d10c      	bne.n	8002c52 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c38:	4a1a      	ldr	r2, [pc, #104]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c40:	4a16      	ldr	r2, [pc, #88]	; (8002c9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c42:	68d2      	ldr	r2, [r2, #12]
 8002c44:	0a12      	lsrs	r2, r2, #8
 8002c46:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002c4a:	fb02 f303 	mul.w	r3, r2, r3
 8002c4e:	617b      	str	r3, [r7, #20]
      break;
 8002c50:	e00c      	b.n	8002c6c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c52:	4a13      	ldr	r2, [pc, #76]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c5a:	4a10      	ldr	r2, [pc, #64]	; (8002c9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c5c:	68d2      	ldr	r2, [r2, #12]
 8002c5e:	0a12      	lsrs	r2, r2, #8
 8002c60:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002c64:	fb02 f303 	mul.w	r3, r2, r3
 8002c68:	617b      	str	r3, [r7, #20]
      break;
 8002c6a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c6c:	4b0b      	ldr	r3, [pc, #44]	; (8002c9c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	0e5b      	lsrs	r3, r3, #25
 8002c72:	f003 0303 	and.w	r3, r3, #3
 8002c76:	3301      	adds	r3, #1
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002c7c:	697a      	ldr	r2, [r7, #20]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c84:	613b      	str	r3, [r7, #16]
 8002c86:	e001      	b.n	8002c8c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002c8c:	693b      	ldr	r3, [r7, #16]
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	371c      	adds	r7, #28
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	00f42400 	.word	0x00f42400
 8002ca4:	016e3600 	.word	0x016e3600

08002ca8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cac:	4b03      	ldr	r3, [pc, #12]	; (8002cbc <HAL_RCC_GetHCLKFreq+0x14>)
 8002cae:	681b      	ldr	r3, [r3, #0]
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
 8002cba:	bf00      	nop
 8002cbc:	20000000 	.word	0x20000000

08002cc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002cc4:	f7ff fff0 	bl	8002ca8 <HAL_RCC_GetHCLKFreq>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	4b06      	ldr	r3, [pc, #24]	; (8002ce4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	0a1b      	lsrs	r3, r3, #8
 8002cd0:	f003 0307 	and.w	r3, r3, #7
 8002cd4:	4904      	ldr	r1, [pc, #16]	; (8002ce8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002cd6:	5ccb      	ldrb	r3, [r1, r3]
 8002cd8:	f003 031f 	and.w	r3, r3, #31
 8002cdc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	08006380 	.word	0x08006380

08002cec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002cf0:	f7ff ffda 	bl	8002ca8 <HAL_RCC_GetHCLKFreq>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	4b06      	ldr	r3, [pc, #24]	; (8002d10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	0adb      	lsrs	r3, r3, #11
 8002cfc:	f003 0307 	and.w	r3, r3, #7
 8002d00:	4904      	ldr	r1, [pc, #16]	; (8002d14 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d02:	5ccb      	ldrb	r3, [r1, r3]
 8002d04:	f003 031f 	and.w	r3, r3, #31
 8002d08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	40021000 	.word	0x40021000
 8002d14:	08006380 	.word	0x08006380

08002d18 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b087      	sub	sp, #28
 8002d1c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d1e:	4b1e      	ldr	r3, [pc, #120]	; (8002d98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	f003 0303 	and.w	r3, r3, #3
 8002d26:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d28:	4b1b      	ldr	r3, [pc, #108]	; (8002d98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	091b      	lsrs	r3, r3, #4
 8002d2e:	f003 030f 	and.w	r3, r3, #15
 8002d32:	3301      	adds	r3, #1
 8002d34:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	2b03      	cmp	r3, #3
 8002d3a:	d10c      	bne.n	8002d56 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d3c:	4a17      	ldr	r2, [pc, #92]	; (8002d9c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d44:	4a14      	ldr	r2, [pc, #80]	; (8002d98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d46:	68d2      	ldr	r2, [r2, #12]
 8002d48:	0a12      	lsrs	r2, r2, #8
 8002d4a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002d4e:	fb02 f303 	mul.w	r3, r2, r3
 8002d52:	617b      	str	r3, [r7, #20]
    break;
 8002d54:	e00c      	b.n	8002d70 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d56:	4a12      	ldr	r2, [pc, #72]	; (8002da0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d5e:	4a0e      	ldr	r2, [pc, #56]	; (8002d98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d60:	68d2      	ldr	r2, [r2, #12]
 8002d62:	0a12      	lsrs	r2, r2, #8
 8002d64:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002d68:	fb02 f303 	mul.w	r3, r2, r3
 8002d6c:	617b      	str	r3, [r7, #20]
    break;
 8002d6e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d70:	4b09      	ldr	r3, [pc, #36]	; (8002d98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	0e5b      	lsrs	r3, r3, #25
 8002d76:	f003 0303 	and.w	r3, r3, #3
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	005b      	lsls	r3, r3, #1
 8002d7e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002d80:	697a      	ldr	r2, [r7, #20]
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d88:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002d8a:	687b      	ldr	r3, [r7, #4]
}
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	371c      	adds	r7, #28
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr
 8002d98:	40021000 	.word	0x40021000
 8002d9c:	016e3600 	.word	0x016e3600
 8002da0:	00f42400 	.word	0x00f42400

08002da4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b086      	sub	sp, #24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002dac:	2300      	movs	r3, #0
 8002dae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002db0:	2300      	movs	r3, #0
 8002db2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f000 8098 	beq.w	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dc6:	4b43      	ldr	r3, [pc, #268]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d10d      	bne.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dd2:	4b40      	ldr	r3, [pc, #256]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dd6:	4a3f      	ldr	r2, [pc, #252]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ddc:	6593      	str	r3, [r2, #88]	; 0x58
 8002dde:	4b3d      	ldr	r3, [pc, #244]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de6:	60bb      	str	r3, [r7, #8]
 8002de8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dea:	2301      	movs	r3, #1
 8002dec:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002dee:	4b3a      	ldr	r3, [pc, #232]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a39      	ldr	r2, [pc, #228]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002df4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002df8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002dfa:	f7fe f8ad 	bl	8000f58 <HAL_GetTick>
 8002dfe:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e00:	e009      	b.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e02:	f7fe f8a9 	bl	8000f58 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d902      	bls.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	74fb      	strb	r3, [r7, #19]
        break;
 8002e14:	e005      	b.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e16:	4b30      	ldr	r3, [pc, #192]	; (8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d0ef      	beq.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002e22:	7cfb      	ldrb	r3, [r7, #19]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d159      	bne.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e28:	4b2a      	ldr	r3, [pc, #168]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e32:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d01e      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d019      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e44:	4b23      	ldr	r3, [pc, #140]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e4e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e50:	4b20      	ldr	r3, [pc, #128]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e56:	4a1f      	ldr	r2, [pc, #124]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e60:	4b1c      	ldr	r3, [pc, #112]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e66:	4a1b      	ldr	r2, [pc, #108]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e70:	4a18      	ldr	r2, [pc, #96]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	f003 0301 	and.w	r3, r3, #1
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d016      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e82:	f7fe f869 	bl	8000f58 <HAL_GetTick>
 8002e86:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e88:	e00b      	b.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e8a:	f7fe f865 	bl	8000f58 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d902      	bls.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	74fb      	strb	r3, [r7, #19]
            break;
 8002ea0:	e006      	b.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ea2:	4b0c      	ldr	r3, [pc, #48]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d0ec      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002eb0:	7cfb      	ldrb	r3, [r7, #19]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d10b      	bne.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002eb6:	4b07      	ldr	r3, [pc, #28]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ebc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec4:	4903      	ldr	r1, [pc, #12]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002ecc:	e008      	b.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ece:	7cfb      	ldrb	r3, [r7, #19]
 8002ed0:	74bb      	strb	r3, [r7, #18]
 8002ed2:	e005      	b.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002edc:	7cfb      	ldrb	r3, [r7, #19]
 8002ede:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ee0:	7c7b      	ldrb	r3, [r7, #17]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d105      	bne.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ee6:	4ba6      	ldr	r3, [pc, #664]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eea:	4aa5      	ldr	r2, [pc, #660]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002eec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ef0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0301 	and.w	r3, r3, #1
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00a      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002efe:	4ba0      	ldr	r3, [pc, #640]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f04:	f023 0203 	bic.w	r2, r3, #3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	499c      	ldr	r1, [pc, #624]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d00a      	beq.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f20:	4b97      	ldr	r3, [pc, #604]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f26:	f023 020c 	bic.w	r2, r3, #12
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	4994      	ldr	r1, [pc, #592]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 0304 	and.w	r3, r3, #4
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00a      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f42:	4b8f      	ldr	r3, [pc, #572]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f48:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	498b      	ldr	r1, [pc, #556]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0308 	and.w	r3, r3, #8
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00a      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f64:	4b86      	ldr	r3, [pc, #536]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f6a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	4983      	ldr	r1, [pc, #524]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0320 	and.w	r3, r3, #32
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00a      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f86:	4b7e      	ldr	r3, [pc, #504]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f8c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	695b      	ldr	r3, [r3, #20]
 8002f94:	497a      	ldr	r1, [pc, #488]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d00a      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002fa8:	4b75      	ldr	r3, [pc, #468]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	4972      	ldr	r1, [pc, #456]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00a      	beq.n	8002fe0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002fca:	4b6d      	ldr	r3, [pc, #436]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	69db      	ldr	r3, [r3, #28]
 8002fd8:	4969      	ldr	r1, [pc, #420]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00a      	beq.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002fec:	4b64      	ldr	r3, [pc, #400]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ff2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
 8002ffa:	4961      	ldr	r1, [pc, #388]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00a      	beq.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800300e:	4b5c      	ldr	r3, [pc, #368]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003010:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003014:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301c:	4958      	ldr	r1, [pc, #352]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800301e:	4313      	orrs	r3, r2
 8003020:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800302c:	2b00      	cmp	r3, #0
 800302e:	d015      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003030:	4b53      	ldr	r3, [pc, #332]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003036:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800303e:	4950      	ldr	r1, [pc, #320]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003040:	4313      	orrs	r3, r2
 8003042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800304a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800304e:	d105      	bne.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003050:	4b4b      	ldr	r3, [pc, #300]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	4a4a      	ldr	r2, [pc, #296]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003056:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800305a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003064:	2b00      	cmp	r3, #0
 8003066:	d015      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003068:	4b45      	ldr	r3, [pc, #276]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800306a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800306e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003076:	4942      	ldr	r1, [pc, #264]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003078:	4313      	orrs	r3, r2
 800307a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003082:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003086:	d105      	bne.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003088:	4b3d      	ldr	r3, [pc, #244]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	4a3c      	ldr	r2, [pc, #240]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800308e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003092:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d015      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80030a0:	4b37      	ldr	r3, [pc, #220]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ae:	4934      	ldr	r1, [pc, #208]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80030be:	d105      	bne.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030c0:	4b2f      	ldr	r3, [pc, #188]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	4a2e      	ldr	r2, [pc, #184]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030ca:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d015      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030d8:	4b29      	ldr	r3, [pc, #164]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e6:	4926      	ldr	r1, [pc, #152]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030f6:	d105      	bne.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030f8:	4b21      	ldr	r3, [pc, #132]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030fa:	68db      	ldr	r3, [r3, #12]
 80030fc:	4a20      	ldr	r2, [pc, #128]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003102:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d015      	beq.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003110:	4b1b      	ldr	r3, [pc, #108]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003116:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800311e:	4918      	ldr	r1, [pc, #96]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003120:	4313      	orrs	r3, r2
 8003122:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800312a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800312e:	d105      	bne.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003130:	4b13      	ldr	r3, [pc, #76]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	4a12      	ldr	r2, [pc, #72]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003136:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800313a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d015      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003148:	4b0d      	ldr	r3, [pc, #52]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800314a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800314e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003156:	490a      	ldr	r1, [pc, #40]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003158:	4313      	orrs	r3, r2
 800315a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003162:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003166:	d105      	bne.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003168:	4b05      	ldr	r3, [pc, #20]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	4a04      	ldr	r2, [pc, #16]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800316e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003172:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003174:	7cbb      	ldrb	r3, [r7, #18]
}
 8003176:	4618      	mov	r0, r3
 8003178:	3718      	adds	r7, #24
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	40021000 	.word	0x40021000

08003184 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b082      	sub	sp, #8
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e042      	b.n	800321c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800319c:	2b00      	cmp	r3, #0
 800319e:	d106      	bne.n	80031ae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f7fd fdef 	bl	8000d8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2224      	movs	r2, #36	; 0x24
 80031b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f022 0201 	bic.w	r2, r2, #1
 80031c4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 f8c2 	bl	8003350 <UART_SetConfig>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d101      	bne.n	80031d6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e022      	b.n	800321c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d002      	beq.n	80031e4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 fb82 	bl	80038e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	685a      	ldr	r2, [r3, #4]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	689a      	ldr	r2, [r3, #8]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003202:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f042 0201 	orr.w	r2, r2, #1
 8003212:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f000 fc09 	bl	8003a2c <UART_CheckIdleState>
 800321a:	4603      	mov	r3, r0
}
 800321c:	4618      	mov	r0, r3
 800321e:	3708      	adds	r7, #8
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b08a      	sub	sp, #40	; 0x28
 8003228:	af02      	add	r7, sp, #8
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	603b      	str	r3, [r7, #0]
 8003230:	4613      	mov	r3, r2
 8003232:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800323a:	2b20      	cmp	r3, #32
 800323c:	f040 8083 	bne.w	8003346 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d002      	beq.n	800324c <HAL_UART_Transmit+0x28>
 8003246:	88fb      	ldrh	r3, [r7, #6]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d101      	bne.n	8003250 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e07b      	b.n	8003348 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003256:	2b01      	cmp	r3, #1
 8003258:	d101      	bne.n	800325e <HAL_UART_Transmit+0x3a>
 800325a:	2302      	movs	r3, #2
 800325c:	e074      	b.n	8003348 <HAL_UART_Transmit+0x124>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2221      	movs	r2, #33	; 0x21
 8003272:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003276:	f7fd fe6f 	bl	8000f58 <HAL_GetTick>
 800327a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	88fa      	ldrh	r2, [r7, #6]
 8003280:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	88fa      	ldrh	r2, [r7, #6]
 8003288:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003294:	d108      	bne.n	80032a8 <HAL_UART_Transmit+0x84>
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	691b      	ldr	r3, [r3, #16]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d104      	bne.n	80032a8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800329e:	2300      	movs	r3, #0
 80032a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	61bb      	str	r3, [r7, #24]
 80032a6:	e003      	b.n	80032b0 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032ac:	2300      	movs	r3, #0
 80032ae:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2200      	movs	r2, #0
 80032b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80032b8:	e02c      	b.n	8003314 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	9300      	str	r3, [sp, #0]
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	2200      	movs	r2, #0
 80032c2:	2180      	movs	r1, #128	; 0x80
 80032c4:	68f8      	ldr	r0, [r7, #12]
 80032c6:	f000 fbfc 	bl	8003ac2 <UART_WaitOnFlagUntilTimeout>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d001      	beq.n	80032d4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e039      	b.n	8003348 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d10b      	bne.n	80032f2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	881b      	ldrh	r3, [r3, #0]
 80032de:	461a      	mov	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032e8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	3302      	adds	r3, #2
 80032ee:	61bb      	str	r3, [r7, #24]
 80032f0:	e007      	b.n	8003302 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	781a      	ldrb	r2, [r3, #0]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	3301      	adds	r3, #1
 8003300:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003308:	b29b      	uxth	r3, r3
 800330a:	3b01      	subs	r3, #1
 800330c:	b29a      	uxth	r2, r3
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800331a:	b29b      	uxth	r3, r3
 800331c:	2b00      	cmp	r3, #0
 800331e:	d1cc      	bne.n	80032ba <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	9300      	str	r3, [sp, #0]
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	2200      	movs	r2, #0
 8003328:	2140      	movs	r1, #64	; 0x40
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	f000 fbc9 	bl	8003ac2 <UART_WaitOnFlagUntilTimeout>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d001      	beq.n	800333a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e006      	b.n	8003348 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2220      	movs	r2, #32
 800333e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003342:	2300      	movs	r3, #0
 8003344:	e000      	b.n	8003348 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003346:	2302      	movs	r3, #2
  }
}
 8003348:	4618      	mov	r0, r3
 800334a:	3720      	adds	r7, #32
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003350:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003354:	b08c      	sub	sp, #48	; 0x30
 8003356:	af00      	add	r7, sp, #0
 8003358:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800335a:	2300      	movs	r3, #0
 800335c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	689a      	ldr	r2, [r3, #8]
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	431a      	orrs	r2, r3
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	431a      	orrs	r2, r3
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	69db      	ldr	r3, [r3, #28]
 8003374:	4313      	orrs	r3, r2
 8003376:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	4bab      	ldr	r3, [pc, #684]	; (800362c <UART_SetConfig+0x2dc>)
 8003380:	4013      	ands	r3, r2
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	6812      	ldr	r2, [r2, #0]
 8003386:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003388:	430b      	orrs	r3, r1
 800338a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	68da      	ldr	r2, [r3, #12]
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	430a      	orrs	r2, r1
 80033a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4aa0      	ldr	r2, [pc, #640]	; (8003630 <UART_SetConfig+0x2e0>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d004      	beq.n	80033bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	6a1b      	ldr	r3, [r3, #32]
 80033b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033b8:	4313      	orrs	r3, r2
 80033ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80033c6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80033ca:	697a      	ldr	r2, [r7, #20]
 80033cc:	6812      	ldr	r2, [r2, #0]
 80033ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033d0:	430b      	orrs	r3, r1
 80033d2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033da:	f023 010f 	bic.w	r1, r3, #15
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	430a      	orrs	r2, r1
 80033e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a91      	ldr	r2, [pc, #580]	; (8003634 <UART_SetConfig+0x2e4>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d125      	bne.n	8003440 <UART_SetConfig+0xf0>
 80033f4:	4b90      	ldr	r3, [pc, #576]	; (8003638 <UART_SetConfig+0x2e8>)
 80033f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033fa:	f003 0303 	and.w	r3, r3, #3
 80033fe:	2b03      	cmp	r3, #3
 8003400:	d81a      	bhi.n	8003438 <UART_SetConfig+0xe8>
 8003402:	a201      	add	r2, pc, #4	; (adr r2, 8003408 <UART_SetConfig+0xb8>)
 8003404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003408:	08003419 	.word	0x08003419
 800340c:	08003429 	.word	0x08003429
 8003410:	08003421 	.word	0x08003421
 8003414:	08003431 	.word	0x08003431
 8003418:	2301      	movs	r3, #1
 800341a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800341e:	e0d6      	b.n	80035ce <UART_SetConfig+0x27e>
 8003420:	2302      	movs	r3, #2
 8003422:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003426:	e0d2      	b.n	80035ce <UART_SetConfig+0x27e>
 8003428:	2304      	movs	r3, #4
 800342a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800342e:	e0ce      	b.n	80035ce <UART_SetConfig+0x27e>
 8003430:	2308      	movs	r3, #8
 8003432:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003436:	e0ca      	b.n	80035ce <UART_SetConfig+0x27e>
 8003438:	2310      	movs	r3, #16
 800343a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800343e:	e0c6      	b.n	80035ce <UART_SetConfig+0x27e>
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a7d      	ldr	r2, [pc, #500]	; (800363c <UART_SetConfig+0x2ec>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d138      	bne.n	80034bc <UART_SetConfig+0x16c>
 800344a:	4b7b      	ldr	r3, [pc, #492]	; (8003638 <UART_SetConfig+0x2e8>)
 800344c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003450:	f003 030c 	and.w	r3, r3, #12
 8003454:	2b0c      	cmp	r3, #12
 8003456:	d82d      	bhi.n	80034b4 <UART_SetConfig+0x164>
 8003458:	a201      	add	r2, pc, #4	; (adr r2, 8003460 <UART_SetConfig+0x110>)
 800345a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800345e:	bf00      	nop
 8003460:	08003495 	.word	0x08003495
 8003464:	080034b5 	.word	0x080034b5
 8003468:	080034b5 	.word	0x080034b5
 800346c:	080034b5 	.word	0x080034b5
 8003470:	080034a5 	.word	0x080034a5
 8003474:	080034b5 	.word	0x080034b5
 8003478:	080034b5 	.word	0x080034b5
 800347c:	080034b5 	.word	0x080034b5
 8003480:	0800349d 	.word	0x0800349d
 8003484:	080034b5 	.word	0x080034b5
 8003488:	080034b5 	.word	0x080034b5
 800348c:	080034b5 	.word	0x080034b5
 8003490:	080034ad 	.word	0x080034ad
 8003494:	2300      	movs	r3, #0
 8003496:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800349a:	e098      	b.n	80035ce <UART_SetConfig+0x27e>
 800349c:	2302      	movs	r3, #2
 800349e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034a2:	e094      	b.n	80035ce <UART_SetConfig+0x27e>
 80034a4:	2304      	movs	r3, #4
 80034a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034aa:	e090      	b.n	80035ce <UART_SetConfig+0x27e>
 80034ac:	2308      	movs	r3, #8
 80034ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034b2:	e08c      	b.n	80035ce <UART_SetConfig+0x27e>
 80034b4:	2310      	movs	r3, #16
 80034b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034ba:	e088      	b.n	80035ce <UART_SetConfig+0x27e>
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a5f      	ldr	r2, [pc, #380]	; (8003640 <UART_SetConfig+0x2f0>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d125      	bne.n	8003512 <UART_SetConfig+0x1c2>
 80034c6:	4b5c      	ldr	r3, [pc, #368]	; (8003638 <UART_SetConfig+0x2e8>)
 80034c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034cc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80034d0:	2b30      	cmp	r3, #48	; 0x30
 80034d2:	d016      	beq.n	8003502 <UART_SetConfig+0x1b2>
 80034d4:	2b30      	cmp	r3, #48	; 0x30
 80034d6:	d818      	bhi.n	800350a <UART_SetConfig+0x1ba>
 80034d8:	2b20      	cmp	r3, #32
 80034da:	d00a      	beq.n	80034f2 <UART_SetConfig+0x1a2>
 80034dc:	2b20      	cmp	r3, #32
 80034de:	d814      	bhi.n	800350a <UART_SetConfig+0x1ba>
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d002      	beq.n	80034ea <UART_SetConfig+0x19a>
 80034e4:	2b10      	cmp	r3, #16
 80034e6:	d008      	beq.n	80034fa <UART_SetConfig+0x1aa>
 80034e8:	e00f      	b.n	800350a <UART_SetConfig+0x1ba>
 80034ea:	2300      	movs	r3, #0
 80034ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034f0:	e06d      	b.n	80035ce <UART_SetConfig+0x27e>
 80034f2:	2302      	movs	r3, #2
 80034f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80034f8:	e069      	b.n	80035ce <UART_SetConfig+0x27e>
 80034fa:	2304      	movs	r3, #4
 80034fc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003500:	e065      	b.n	80035ce <UART_SetConfig+0x27e>
 8003502:	2308      	movs	r3, #8
 8003504:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003508:	e061      	b.n	80035ce <UART_SetConfig+0x27e>
 800350a:	2310      	movs	r3, #16
 800350c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003510:	e05d      	b.n	80035ce <UART_SetConfig+0x27e>
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a4b      	ldr	r2, [pc, #300]	; (8003644 <UART_SetConfig+0x2f4>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d125      	bne.n	8003568 <UART_SetConfig+0x218>
 800351c:	4b46      	ldr	r3, [pc, #280]	; (8003638 <UART_SetConfig+0x2e8>)
 800351e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003522:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003526:	2bc0      	cmp	r3, #192	; 0xc0
 8003528:	d016      	beq.n	8003558 <UART_SetConfig+0x208>
 800352a:	2bc0      	cmp	r3, #192	; 0xc0
 800352c:	d818      	bhi.n	8003560 <UART_SetConfig+0x210>
 800352e:	2b80      	cmp	r3, #128	; 0x80
 8003530:	d00a      	beq.n	8003548 <UART_SetConfig+0x1f8>
 8003532:	2b80      	cmp	r3, #128	; 0x80
 8003534:	d814      	bhi.n	8003560 <UART_SetConfig+0x210>
 8003536:	2b00      	cmp	r3, #0
 8003538:	d002      	beq.n	8003540 <UART_SetConfig+0x1f0>
 800353a:	2b40      	cmp	r3, #64	; 0x40
 800353c:	d008      	beq.n	8003550 <UART_SetConfig+0x200>
 800353e:	e00f      	b.n	8003560 <UART_SetConfig+0x210>
 8003540:	2300      	movs	r3, #0
 8003542:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003546:	e042      	b.n	80035ce <UART_SetConfig+0x27e>
 8003548:	2302      	movs	r3, #2
 800354a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800354e:	e03e      	b.n	80035ce <UART_SetConfig+0x27e>
 8003550:	2304      	movs	r3, #4
 8003552:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003556:	e03a      	b.n	80035ce <UART_SetConfig+0x27e>
 8003558:	2308      	movs	r3, #8
 800355a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800355e:	e036      	b.n	80035ce <UART_SetConfig+0x27e>
 8003560:	2310      	movs	r3, #16
 8003562:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003566:	e032      	b.n	80035ce <UART_SetConfig+0x27e>
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a30      	ldr	r2, [pc, #192]	; (8003630 <UART_SetConfig+0x2e0>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d12a      	bne.n	80035c8 <UART_SetConfig+0x278>
 8003572:	4b31      	ldr	r3, [pc, #196]	; (8003638 <UART_SetConfig+0x2e8>)
 8003574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003578:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800357c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003580:	d01a      	beq.n	80035b8 <UART_SetConfig+0x268>
 8003582:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003586:	d81b      	bhi.n	80035c0 <UART_SetConfig+0x270>
 8003588:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800358c:	d00c      	beq.n	80035a8 <UART_SetConfig+0x258>
 800358e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003592:	d815      	bhi.n	80035c0 <UART_SetConfig+0x270>
 8003594:	2b00      	cmp	r3, #0
 8003596:	d003      	beq.n	80035a0 <UART_SetConfig+0x250>
 8003598:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800359c:	d008      	beq.n	80035b0 <UART_SetConfig+0x260>
 800359e:	e00f      	b.n	80035c0 <UART_SetConfig+0x270>
 80035a0:	2300      	movs	r3, #0
 80035a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035a6:	e012      	b.n	80035ce <UART_SetConfig+0x27e>
 80035a8:	2302      	movs	r3, #2
 80035aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035ae:	e00e      	b.n	80035ce <UART_SetConfig+0x27e>
 80035b0:	2304      	movs	r3, #4
 80035b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035b6:	e00a      	b.n	80035ce <UART_SetConfig+0x27e>
 80035b8:	2308      	movs	r3, #8
 80035ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035be:	e006      	b.n	80035ce <UART_SetConfig+0x27e>
 80035c0:	2310      	movs	r3, #16
 80035c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80035c6:	e002      	b.n	80035ce <UART_SetConfig+0x27e>
 80035c8:	2310      	movs	r3, #16
 80035ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a17      	ldr	r2, [pc, #92]	; (8003630 <UART_SetConfig+0x2e0>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	f040 80a8 	bne.w	800372a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80035da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80035de:	2b08      	cmp	r3, #8
 80035e0:	d834      	bhi.n	800364c <UART_SetConfig+0x2fc>
 80035e2:	a201      	add	r2, pc, #4	; (adr r2, 80035e8 <UART_SetConfig+0x298>)
 80035e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035e8:	0800360d 	.word	0x0800360d
 80035ec:	0800364d 	.word	0x0800364d
 80035f0:	08003615 	.word	0x08003615
 80035f4:	0800364d 	.word	0x0800364d
 80035f8:	0800361b 	.word	0x0800361b
 80035fc:	0800364d 	.word	0x0800364d
 8003600:	0800364d 	.word	0x0800364d
 8003604:	0800364d 	.word	0x0800364d
 8003608:	08003623 	.word	0x08003623
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800360c:	f7ff fb58 	bl	8002cc0 <HAL_RCC_GetPCLK1Freq>
 8003610:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003612:	e021      	b.n	8003658 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003614:	4b0c      	ldr	r3, [pc, #48]	; (8003648 <UART_SetConfig+0x2f8>)
 8003616:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003618:	e01e      	b.n	8003658 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800361a:	f7ff fae3 	bl	8002be4 <HAL_RCC_GetSysClockFreq>
 800361e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003620:	e01a      	b.n	8003658 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003622:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003626:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003628:	e016      	b.n	8003658 <UART_SetConfig+0x308>
 800362a:	bf00      	nop
 800362c:	cfff69f3 	.word	0xcfff69f3
 8003630:	40008000 	.word	0x40008000
 8003634:	40013800 	.word	0x40013800
 8003638:	40021000 	.word	0x40021000
 800363c:	40004400 	.word	0x40004400
 8003640:	40004800 	.word	0x40004800
 8003644:	40004c00 	.word	0x40004c00
 8003648:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800364c:	2300      	movs	r3, #0
 800364e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003656:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800365a:	2b00      	cmp	r3, #0
 800365c:	f000 812a 	beq.w	80038b4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003664:	4a9e      	ldr	r2, [pc, #632]	; (80038e0 <UART_SetConfig+0x590>)
 8003666:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800366a:	461a      	mov	r2, r3
 800366c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003672:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	685a      	ldr	r2, [r3, #4]
 8003678:	4613      	mov	r3, r2
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	4413      	add	r3, r2
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	429a      	cmp	r2, r3
 8003682:	d305      	bcc.n	8003690 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800368a:	69ba      	ldr	r2, [r7, #24]
 800368c:	429a      	cmp	r2, r3
 800368e:	d903      	bls.n	8003698 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003696:	e10d      	b.n	80038b4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369a:	2200      	movs	r2, #0
 800369c:	60bb      	str	r3, [r7, #8]
 800369e:	60fa      	str	r2, [r7, #12]
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a4:	4a8e      	ldr	r2, [pc, #568]	; (80038e0 <UART_SetConfig+0x590>)
 80036a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80036aa:	b29b      	uxth	r3, r3
 80036ac:	2200      	movs	r2, #0
 80036ae:	603b      	str	r3, [r7, #0]
 80036b0:	607a      	str	r2, [r7, #4]
 80036b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80036b6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80036ba:	f7fc fe01 	bl	80002c0 <__aeabi_uldivmod>
 80036be:	4602      	mov	r2, r0
 80036c0:	460b      	mov	r3, r1
 80036c2:	4610      	mov	r0, r2
 80036c4:	4619      	mov	r1, r3
 80036c6:	f04f 0200 	mov.w	r2, #0
 80036ca:	f04f 0300 	mov.w	r3, #0
 80036ce:	020b      	lsls	r3, r1, #8
 80036d0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80036d4:	0202      	lsls	r2, r0, #8
 80036d6:	6979      	ldr	r1, [r7, #20]
 80036d8:	6849      	ldr	r1, [r1, #4]
 80036da:	0849      	lsrs	r1, r1, #1
 80036dc:	2000      	movs	r0, #0
 80036de:	460c      	mov	r4, r1
 80036e0:	4605      	mov	r5, r0
 80036e2:	eb12 0804 	adds.w	r8, r2, r4
 80036e6:	eb43 0905 	adc.w	r9, r3, r5
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	2200      	movs	r2, #0
 80036f0:	469a      	mov	sl, r3
 80036f2:	4693      	mov	fp, r2
 80036f4:	4652      	mov	r2, sl
 80036f6:	465b      	mov	r3, fp
 80036f8:	4640      	mov	r0, r8
 80036fa:	4649      	mov	r1, r9
 80036fc:	f7fc fde0 	bl	80002c0 <__aeabi_uldivmod>
 8003700:	4602      	mov	r2, r0
 8003702:	460b      	mov	r3, r1
 8003704:	4613      	mov	r3, r2
 8003706:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003708:	6a3b      	ldr	r3, [r7, #32]
 800370a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800370e:	d308      	bcc.n	8003722 <UART_SetConfig+0x3d2>
 8003710:	6a3b      	ldr	r3, [r7, #32]
 8003712:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003716:	d204      	bcs.n	8003722 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003718:	697b      	ldr	r3, [r7, #20]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6a3a      	ldr	r2, [r7, #32]
 800371e:	60da      	str	r2, [r3, #12]
 8003720:	e0c8      	b.n	80038b4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003728:	e0c4      	b.n	80038b4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	69db      	ldr	r3, [r3, #28]
 800372e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003732:	d167      	bne.n	8003804 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003734:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003738:	2b08      	cmp	r3, #8
 800373a:	d828      	bhi.n	800378e <UART_SetConfig+0x43e>
 800373c:	a201      	add	r2, pc, #4	; (adr r2, 8003744 <UART_SetConfig+0x3f4>)
 800373e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003742:	bf00      	nop
 8003744:	08003769 	.word	0x08003769
 8003748:	08003771 	.word	0x08003771
 800374c:	08003779 	.word	0x08003779
 8003750:	0800378f 	.word	0x0800378f
 8003754:	0800377f 	.word	0x0800377f
 8003758:	0800378f 	.word	0x0800378f
 800375c:	0800378f 	.word	0x0800378f
 8003760:	0800378f 	.word	0x0800378f
 8003764:	08003787 	.word	0x08003787
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003768:	f7ff faaa 	bl	8002cc0 <HAL_RCC_GetPCLK1Freq>
 800376c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800376e:	e014      	b.n	800379a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003770:	f7ff fabc 	bl	8002cec <HAL_RCC_GetPCLK2Freq>
 8003774:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003776:	e010      	b.n	800379a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003778:	4b5a      	ldr	r3, [pc, #360]	; (80038e4 <UART_SetConfig+0x594>)
 800377a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800377c:	e00d      	b.n	800379a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800377e:	f7ff fa31 	bl	8002be4 <HAL_RCC_GetSysClockFreq>
 8003782:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003784:	e009      	b.n	800379a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003786:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800378a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800378c:	e005      	b.n	800379a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800378e:	2300      	movs	r3, #0
 8003790:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003798:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800379a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800379c:	2b00      	cmp	r3, #0
 800379e:	f000 8089 	beq.w	80038b4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a6:	4a4e      	ldr	r2, [pc, #312]	; (80038e0 <UART_SetConfig+0x590>)
 80037a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037ac:	461a      	mov	r2, r3
 80037ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80037b4:	005a      	lsls	r2, r3, #1
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	085b      	lsrs	r3, r3, #1
 80037bc:	441a      	add	r2, r3
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037c8:	6a3b      	ldr	r3, [r7, #32]
 80037ca:	2b0f      	cmp	r3, #15
 80037cc:	d916      	bls.n	80037fc <UART_SetConfig+0x4ac>
 80037ce:	6a3b      	ldr	r3, [r7, #32]
 80037d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037d4:	d212      	bcs.n	80037fc <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037d6:	6a3b      	ldr	r3, [r7, #32]
 80037d8:	b29b      	uxth	r3, r3
 80037da:	f023 030f 	bic.w	r3, r3, #15
 80037de:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037e0:	6a3b      	ldr	r3, [r7, #32]
 80037e2:	085b      	lsrs	r3, r3, #1
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	f003 0307 	and.w	r3, r3, #7
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	8bfb      	ldrh	r3, [r7, #30]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	8bfa      	ldrh	r2, [r7, #30]
 80037f8:	60da      	str	r2, [r3, #12]
 80037fa:	e05b      	b.n	80038b4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003802:	e057      	b.n	80038b4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003804:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003808:	2b08      	cmp	r3, #8
 800380a:	d828      	bhi.n	800385e <UART_SetConfig+0x50e>
 800380c:	a201      	add	r2, pc, #4	; (adr r2, 8003814 <UART_SetConfig+0x4c4>)
 800380e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003812:	bf00      	nop
 8003814:	08003839 	.word	0x08003839
 8003818:	08003841 	.word	0x08003841
 800381c:	08003849 	.word	0x08003849
 8003820:	0800385f 	.word	0x0800385f
 8003824:	0800384f 	.word	0x0800384f
 8003828:	0800385f 	.word	0x0800385f
 800382c:	0800385f 	.word	0x0800385f
 8003830:	0800385f 	.word	0x0800385f
 8003834:	08003857 	.word	0x08003857
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003838:	f7ff fa42 	bl	8002cc0 <HAL_RCC_GetPCLK1Freq>
 800383c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800383e:	e014      	b.n	800386a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003840:	f7ff fa54 	bl	8002cec <HAL_RCC_GetPCLK2Freq>
 8003844:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003846:	e010      	b.n	800386a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003848:	4b26      	ldr	r3, [pc, #152]	; (80038e4 <UART_SetConfig+0x594>)
 800384a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800384c:	e00d      	b.n	800386a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800384e:	f7ff f9c9 	bl	8002be4 <HAL_RCC_GetSysClockFreq>
 8003852:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003854:	e009      	b.n	800386a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003856:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800385a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800385c:	e005      	b.n	800386a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800385e:	2300      	movs	r3, #0
 8003860:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003868:	bf00      	nop
    }

    if (pclk != 0U)
 800386a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800386c:	2b00      	cmp	r3, #0
 800386e:	d021      	beq.n	80038b4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003874:	4a1a      	ldr	r2, [pc, #104]	; (80038e0 <UART_SetConfig+0x590>)
 8003876:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800387a:	461a      	mov	r2, r3
 800387c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800387e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	085b      	lsrs	r3, r3, #1
 8003888:	441a      	add	r2, r3
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003892:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003894:	6a3b      	ldr	r3, [r7, #32]
 8003896:	2b0f      	cmp	r3, #15
 8003898:	d909      	bls.n	80038ae <UART_SetConfig+0x55e>
 800389a:	6a3b      	ldr	r3, [r7, #32]
 800389c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038a0:	d205      	bcs.n	80038ae <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80038a2:	6a3b      	ldr	r3, [r7, #32]
 80038a4:	b29a      	uxth	r2, r3
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	60da      	str	r2, [r3, #12]
 80038ac:	e002      	b.n	80038b4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80038bc:	697b      	ldr	r3, [r7, #20]
 80038be:	2201      	movs	r2, #1
 80038c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	2200      	movs	r2, #0
 80038c8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	2200      	movs	r2, #0
 80038ce:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80038d0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3730      	adds	r7, #48	; 0x30
 80038d8:	46bd      	mov	sp, r7
 80038da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038de:	bf00      	nop
 80038e0:	08006388 	.word	0x08006388
 80038e4:	00f42400 	.word	0x00f42400

080038e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038f4:	f003 0301 	and.w	r3, r3, #1
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d00a      	beq.n	8003912 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	430a      	orrs	r2, r1
 8003910:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d00a      	beq.n	8003934 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	430a      	orrs	r2, r1
 8003932:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003938:	f003 0304 	and.w	r3, r3, #4
 800393c:	2b00      	cmp	r3, #0
 800393e:	d00a      	beq.n	8003956 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	430a      	orrs	r2, r1
 8003954:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800395a:	f003 0308 	and.w	r3, r3, #8
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00a      	beq.n	8003978 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	430a      	orrs	r2, r1
 8003976:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800397c:	f003 0310 	and.w	r3, r3, #16
 8003980:	2b00      	cmp	r3, #0
 8003982:	d00a      	beq.n	800399a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	430a      	orrs	r2, r1
 8003998:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800399e:	f003 0320 	and.w	r3, r3, #32
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d00a      	beq.n	80039bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	689b      	ldr	r3, [r3, #8]
 80039ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	430a      	orrs	r2, r1
 80039ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d01a      	beq.n	80039fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	430a      	orrs	r2, r1
 80039dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039e6:	d10a      	bne.n	80039fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	430a      	orrs	r2, r1
 80039fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00a      	beq.n	8003a20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	430a      	orrs	r2, r1
 8003a1e:	605a      	str	r2, [r3, #4]
  }
}
 8003a20:	bf00      	nop
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b086      	sub	sp, #24
 8003a30:	af02      	add	r7, sp, #8
 8003a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a3c:	f7fd fa8c 	bl	8000f58 <HAL_GetTick>
 8003a40:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0308 	and.w	r3, r3, #8
 8003a4c:	2b08      	cmp	r3, #8
 8003a4e:	d10e      	bne.n	8003a6e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a54:	9300      	str	r3, [sp, #0]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 f82f 	bl	8003ac2 <UART_WaitOnFlagUntilTimeout>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d001      	beq.n	8003a6e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e025      	b.n	8003aba <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0304 	and.w	r3, r3, #4
 8003a78:	2b04      	cmp	r3, #4
 8003a7a:	d10e      	bne.n	8003a9a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003a80:	9300      	str	r3, [sp, #0]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2200      	movs	r2, #0
 8003a86:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 f819 	bl	8003ac2 <UART_WaitOnFlagUntilTimeout>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d001      	beq.n	8003a9a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e00f      	b.n	8003aba <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2220      	movs	r2, #32
 8003a9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2220      	movs	r2, #32
 8003aa6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	3710      	adds	r7, #16
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bd80      	pop	{r7, pc}

08003ac2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ac2:	b580      	push	{r7, lr}
 8003ac4:	b09c      	sub	sp, #112	; 0x70
 8003ac6:	af00      	add	r7, sp, #0
 8003ac8:	60f8      	str	r0, [r7, #12]
 8003aca:	60b9      	str	r1, [r7, #8]
 8003acc:	603b      	str	r3, [r7, #0]
 8003ace:	4613      	mov	r3, r2
 8003ad0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ad2:	e0a9      	b.n	8003c28 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ad4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ad6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ada:	f000 80a5 	beq.w	8003c28 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ade:	f7fd fa3b 	bl	8000f58 <HAL_GetTick>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	1ad3      	subs	r3, r2, r3
 8003ae8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d302      	bcc.n	8003af4 <UART_WaitOnFlagUntilTimeout+0x32>
 8003aee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d140      	bne.n	8003b76 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003afa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003afc:	e853 3f00 	ldrex	r3, [r3]
 8003b00:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003b02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b04:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b08:	667b      	str	r3, [r7, #100]	; 0x64
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	461a      	mov	r2, r3
 8003b10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b14:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b16:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003b18:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003b1a:	e841 2300 	strex	r3, r2, [r1]
 8003b1e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003b20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1e6      	bne.n	8003af4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	3308      	adds	r3, #8
 8003b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b30:	e853 3f00 	ldrex	r3, [r3]
 8003b34:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b38:	f023 0301 	bic.w	r3, r3, #1
 8003b3c:	663b      	str	r3, [r7, #96]	; 0x60
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	3308      	adds	r3, #8
 8003b44:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003b46:	64ba      	str	r2, [r7, #72]	; 0x48
 8003b48:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b4a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003b4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b4e:	e841 2300 	strex	r3, r2, [r1]
 8003b52:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003b54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d1e5      	bne.n	8003b26 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2220      	movs	r2, #32
 8003b5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2220      	movs	r2, #32
 8003b66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e069      	b.n	8003c4a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0304 	and.w	r3, r3, #4
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d051      	beq.n	8003c28 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	69db      	ldr	r3, [r3, #28]
 8003b8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b92:	d149      	bne.n	8003c28 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b9c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba6:	e853 3f00 	ldrex	r3, [r3]
 8003baa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003bb2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	461a      	mov	r2, r3
 8003bba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bbc:	637b      	str	r3, [r7, #52]	; 0x34
 8003bbe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003bc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003bc4:	e841 2300 	strex	r3, r2, [r1]
 8003bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d1e6      	bne.n	8003b9e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	3308      	adds	r3, #8
 8003bd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	e853 3f00 	ldrex	r3, [r3]
 8003bde:	613b      	str	r3, [r7, #16]
   return(result);
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	f023 0301 	bic.w	r3, r3, #1
 8003be6:	66bb      	str	r3, [r7, #104]	; 0x68
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	3308      	adds	r3, #8
 8003bee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003bf0:	623a      	str	r2, [r7, #32]
 8003bf2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bf4:	69f9      	ldr	r1, [r7, #28]
 8003bf6:	6a3a      	ldr	r2, [r7, #32]
 8003bf8:	e841 2300 	strex	r3, r2, [r1]
 8003bfc:	61bb      	str	r3, [r7, #24]
   return(result);
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d1e5      	bne.n	8003bd0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2220      	movs	r2, #32
 8003c08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2220      	movs	r2, #32
 8003c10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2220      	movs	r2, #32
 8003c18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e010      	b.n	8003c4a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	69da      	ldr	r2, [r3, #28]
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	4013      	ands	r3, r2
 8003c32:	68ba      	ldr	r2, [r7, #8]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	bf0c      	ite	eq
 8003c38:	2301      	moveq	r3, #1
 8003c3a:	2300      	movne	r3, #0
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	461a      	mov	r2, r3
 8003c40:	79fb      	ldrb	r3, [r7, #7]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	f43f af46 	beq.w	8003ad4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c48:	2300      	movs	r3, #0
}
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	3770      	adds	r7, #112	; 0x70
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}

08003c52 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003c52:	b480      	push	{r7}
 8003c54:	b085      	sub	sp, #20
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d101      	bne.n	8003c68 <HAL_UARTEx_DisableFifoMode+0x16>
 8003c64:	2302      	movs	r3, #2
 8003c66:	e027      	b.n	8003cb8 <HAL_UARTEx_DisableFifoMode+0x66>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2224      	movs	r2, #36	; 0x24
 8003c74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f022 0201 	bic.w	r2, r2, #1
 8003c8e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003c96:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2220      	movs	r2, #32
 8003caa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003cb6:	2300      	movs	r3, #0
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3714      	adds	r7, #20
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b084      	sub	sp, #16
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
 8003ccc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d101      	bne.n	8003cdc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003cd8:	2302      	movs	r3, #2
 8003cda:	e02d      	b.n	8003d38 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2224      	movs	r2, #36	; 0x24
 8003ce8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f022 0201 	bic.w	r2, r2, #1
 8003d02:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	683a      	ldr	r2, [r7, #0]
 8003d14:	430a      	orrs	r2, r1
 8003d16:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f000 f84f 	bl	8003dbc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2220      	movs	r2, #32
 8003d2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3710      	adds	r7, #16
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d101      	bne.n	8003d58 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003d54:	2302      	movs	r3, #2
 8003d56:	e02d      	b.n	8003db4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2224      	movs	r2, #36	; 0x24
 8003d64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f022 0201 	bic.w	r2, r2, #1
 8003d7e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	683a      	ldr	r2, [r7, #0]
 8003d90:	430a      	orrs	r2, r1
 8003d92:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f000 f811 	bl	8003dbc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2220      	movs	r2, #32
 8003da6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2200      	movs	r2, #0
 8003dae:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003db2:	2300      	movs	r3, #0
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	3710      	adds	r7, #16
 8003db8:	46bd      	mov	sp, r7
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d108      	bne.n	8003dde <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003ddc:	e031      	b.n	8003e42 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003dde:	2308      	movs	r3, #8
 8003de0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003de2:	2308      	movs	r3, #8
 8003de4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	0e5b      	lsrs	r3, r3, #25
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	f003 0307 	and.w	r3, r3, #7
 8003df4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	0f5b      	lsrs	r3, r3, #29
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	f003 0307 	and.w	r3, r3, #7
 8003e04:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003e06:	7bbb      	ldrb	r3, [r7, #14]
 8003e08:	7b3a      	ldrb	r2, [r7, #12]
 8003e0a:	4911      	ldr	r1, [pc, #68]	; (8003e50 <UARTEx_SetNbDataToProcess+0x94>)
 8003e0c:	5c8a      	ldrb	r2, [r1, r2]
 8003e0e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003e12:	7b3a      	ldrb	r2, [r7, #12]
 8003e14:	490f      	ldr	r1, [pc, #60]	; (8003e54 <UARTEx_SetNbDataToProcess+0x98>)
 8003e16:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003e18:	fb93 f3f2 	sdiv	r3, r3, r2
 8003e1c:	b29a      	uxth	r2, r3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003e24:	7bfb      	ldrb	r3, [r7, #15]
 8003e26:	7b7a      	ldrb	r2, [r7, #13]
 8003e28:	4909      	ldr	r1, [pc, #36]	; (8003e50 <UARTEx_SetNbDataToProcess+0x94>)
 8003e2a:	5c8a      	ldrb	r2, [r1, r2]
 8003e2c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003e30:	7b7a      	ldrb	r2, [r7, #13]
 8003e32:	4908      	ldr	r1, [pc, #32]	; (8003e54 <UARTEx_SetNbDataToProcess+0x98>)
 8003e34:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003e36:	fb93 f3f2 	sdiv	r3, r3, r2
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003e42:	bf00      	nop
 8003e44:	3714      	adds	r7, #20
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	080063a0 	.word	0x080063a0
 8003e54:	080063a8 	.word	0x080063a8

08003e58 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	4603      	mov	r3, r0
 8003e60:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003e62:	2300      	movs	r3, #0
 8003e64:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003e66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003e6a:	2b84      	cmp	r3, #132	; 0x84
 8003e6c:	d005      	beq.n	8003e7a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003e6e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	4413      	add	r3, r2
 8003e76:	3303      	adds	r3, #3
 8003e78:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3714      	adds	r7, #20
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003e8c:	f000 fa58 	bl	8004340 <vTaskStartScheduler>
  
  return osOK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	bd80      	pop	{r7, pc}

08003e96 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003e96:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e98:	b087      	sub	sp, #28
 8003e9a:	af02      	add	r7, sp, #8
 8003e9c:	6078      	str	r0, [r7, #4]
 8003e9e:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685c      	ldr	r4, [r3, #4]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003eac:	b29e      	uxth	r6, r3
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f7ff ffcf 	bl	8003e58 <makeFreeRtosPriority>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	f107 030c 	add.w	r3, r7, #12
 8003ec0:	9301      	str	r3, [sp, #4]
 8003ec2:	9200      	str	r2, [sp, #0]
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	4632      	mov	r2, r6
 8003ec8:	4629      	mov	r1, r5
 8003eca:	4620      	mov	r0, r4
 8003ecc:	f000 f8d2 	bl	8004074 <xTaskCreate>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d001      	beq.n	8003eda <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	e000      	b.n	8003edc <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8003eda:	68fb      	ldr	r3, [r7, #12]
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3714      	adds	r7, #20
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ee4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d001      	beq.n	8003efa <osDelay+0x16>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	e000      	b.n	8003efc <osDelay+0x18>
 8003efa:	2301      	movs	r3, #1
 8003efc:	4618      	mov	r0, r3
 8003efe:	f000 f9eb 	bl	80042d8 <vTaskDelay>
  
  return osOK;
 8003f02:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3710      	adds	r7, #16
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}

08003f0c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f103 0208 	add.w	r2, r3, #8
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f04f 32ff 	mov.w	r2, #4294967295
 8003f24:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f103 0208 	add.w	r2, r3, #8
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	f103 0208 	add.w	r2, r3, #8
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003f40:	bf00      	nop
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003f5a:	bf00      	nop
 8003f5c:	370c      	adds	r7, #12
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr

08003f66 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f66:	b480      	push	{r7}
 8003f68:	b085      	sub	sp, #20
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
 8003f6e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	689a      	ldr	r2, [r3, #8]
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	683a      	ldr	r2, [r7, #0]
 8003f8a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	683a      	ldr	r2, [r7, #0]
 8003f90:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	1c5a      	adds	r2, r3, #1
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	601a      	str	r2, [r3, #0]
}
 8003fa2:	bf00      	nop
 8003fa4:	3714      	adds	r7, #20
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr

08003fae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003fae:	b480      	push	{r7}
 8003fb0:	b085      	sub	sp, #20
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
 8003fb6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fc4:	d103      	bne.n	8003fce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	60fb      	str	r3, [r7, #12]
 8003fcc:	e00c      	b.n	8003fe8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	3308      	adds	r3, #8
 8003fd2:	60fb      	str	r3, [r7, #12]
 8003fd4:	e002      	b.n	8003fdc <vListInsert+0x2e>
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	60fb      	str	r3, [r7, #12]
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68ba      	ldr	r2, [r7, #8]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d2f6      	bcs.n	8003fd6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	685a      	ldr	r2, [r3, #4]
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	683a      	ldr	r2, [r7, #0]
 8003ff6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	68fa      	ldr	r2, [r7, #12]
 8003ffc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	683a      	ldr	r2, [r7, #0]
 8004002:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	1c5a      	adds	r2, r3, #1
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	601a      	str	r2, [r3, #0]
}
 8004014:	bf00      	nop
 8004016:	3714      	adds	r7, #20
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004020:	b480      	push	{r7}
 8004022:	b085      	sub	sp, #20
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	6892      	ldr	r2, [r2, #8]
 8004036:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	687a      	ldr	r2, [r7, #4]
 800403e:	6852      	ldr	r2, [r2, #4]
 8004040:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	429a      	cmp	r2, r3
 800404a:	d103      	bne.n	8004054 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	689a      	ldr	r2, [r3, #8]
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	1e5a      	subs	r2, r3, #1
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
}
 8004068:	4618      	mov	r0, r3
 800406a:	3714      	adds	r7, #20
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004074:	b580      	push	{r7, lr}
 8004076:	b08c      	sub	sp, #48	; 0x30
 8004078:	af04      	add	r7, sp, #16
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	603b      	str	r3, [r7, #0]
 8004080:	4613      	mov	r3, r2
 8004082:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004084:	88fb      	ldrh	r3, [r7, #6]
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	4618      	mov	r0, r3
 800408a:	f000 fea5 	bl	8004dd8 <pvPortMalloc>
 800408e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00e      	beq.n	80040b4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004096:	2054      	movs	r0, #84	; 0x54
 8004098:	f000 fe9e 	bl	8004dd8 <pvPortMalloc>
 800409c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d003      	beq.n	80040ac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	697a      	ldr	r2, [r7, #20]
 80040a8:	631a      	str	r2, [r3, #48]	; 0x30
 80040aa:	e005      	b.n	80040b8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80040ac:	6978      	ldr	r0, [r7, #20]
 80040ae:	f000 ff5f 	bl	8004f70 <vPortFree>
 80040b2:	e001      	b.n	80040b8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80040b4:	2300      	movs	r3, #0
 80040b6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d013      	beq.n	80040e6 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80040be:	88fa      	ldrh	r2, [r7, #6]
 80040c0:	2300      	movs	r3, #0
 80040c2:	9303      	str	r3, [sp, #12]
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	9302      	str	r3, [sp, #8]
 80040c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ca:	9301      	str	r3, [sp, #4]
 80040cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ce:	9300      	str	r3, [sp, #0]
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	68b9      	ldr	r1, [r7, #8]
 80040d4:	68f8      	ldr	r0, [r7, #12]
 80040d6:	f000 f80e 	bl	80040f6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80040da:	69f8      	ldr	r0, [r7, #28]
 80040dc:	f000 f892 	bl	8004204 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80040e0:	2301      	movs	r3, #1
 80040e2:	61bb      	str	r3, [r7, #24]
 80040e4:	e002      	b.n	80040ec <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80040e6:	f04f 33ff 	mov.w	r3, #4294967295
 80040ea:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80040ec:	69bb      	ldr	r3, [r7, #24]
	}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3720      	adds	r7, #32
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b088      	sub	sp, #32
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	60f8      	str	r0, [r7, #12]
 80040fe:	60b9      	str	r1, [r7, #8]
 8004100:	607a      	str	r2, [r7, #4]
 8004102:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004106:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800410e:	3b01      	subs	r3, #1
 8004110:	009b      	lsls	r3, r3, #2
 8004112:	4413      	add	r3, r2
 8004114:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004116:	69bb      	ldr	r3, [r7, #24]
 8004118:	f023 0307 	bic.w	r3, r3, #7
 800411c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800411e:	69bb      	ldr	r3, [r7, #24]
 8004120:	f003 0307 	and.w	r3, r3, #7
 8004124:	2b00      	cmp	r3, #0
 8004126:	d00a      	beq.n	800413e <prvInitialiseNewTask+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800412c:	f383 8811 	msr	BASEPRI, r3
 8004130:	f3bf 8f6f 	isb	sy
 8004134:	f3bf 8f4f 	dsb	sy
 8004138:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800413a:	bf00      	nop
 800413c:	e7fe      	b.n	800413c <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d01f      	beq.n	8004184 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004144:	2300      	movs	r3, #0
 8004146:	61fb      	str	r3, [r7, #28]
 8004148:	e012      	b.n	8004170 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800414a:	68ba      	ldr	r2, [r7, #8]
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	4413      	add	r3, r2
 8004150:	7819      	ldrb	r1, [r3, #0]
 8004152:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004154:	69fb      	ldr	r3, [r7, #28]
 8004156:	4413      	add	r3, r2
 8004158:	3334      	adds	r3, #52	; 0x34
 800415a:	460a      	mov	r2, r1
 800415c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800415e:	68ba      	ldr	r2, [r7, #8]
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	4413      	add	r3, r2
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d006      	beq.n	8004178 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800416a:	69fb      	ldr	r3, [r7, #28]
 800416c:	3301      	adds	r3, #1
 800416e:	61fb      	str	r3, [r7, #28]
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	2b0f      	cmp	r3, #15
 8004174:	d9e9      	bls.n	800414a <prvInitialiseNewTask+0x54>
 8004176:	e000      	b.n	800417a <prvInitialiseNewTask+0x84>
			{
				break;
 8004178:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800417a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800417c:	2200      	movs	r2, #0
 800417e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004182:	e003      	b.n	800418c <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004186:	2200      	movs	r2, #0
 8004188:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800418c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800418e:	2b06      	cmp	r3, #6
 8004190:	d901      	bls.n	8004196 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004192:	2306      	movs	r3, #6
 8004194:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004198:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800419a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800419c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800419e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80041a0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80041a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041a4:	2200      	movs	r2, #0
 80041a6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80041a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041aa:	3304      	adds	r3, #4
 80041ac:	4618      	mov	r0, r3
 80041ae:	f7ff fecd 	bl	8003f4c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80041b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041b4:	3318      	adds	r3, #24
 80041b6:	4618      	mov	r0, r3
 80041b8:	f7ff fec8 	bl	8003f4c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80041bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041c0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c4:	f1c3 0207 	rsb	r2, r3, #7
 80041c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ca:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80041cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041d0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80041d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d4:	2200      	movs	r2, #0
 80041d6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80041d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041da:	2200      	movs	r2, #0
 80041dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80041e0:	683a      	ldr	r2, [r7, #0]
 80041e2:	68f9      	ldr	r1, [r7, #12]
 80041e4:	69b8      	ldr	r0, [r7, #24]
 80041e6:	f000 fbeb 	bl	80049c0 <pxPortInitialiseStack>
 80041ea:	4602      	mov	r2, r0
 80041ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041ee:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80041f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d002      	beq.n	80041fc <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80041f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041fa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80041fc:	bf00      	nop
 80041fe:	3720      	adds	r7, #32
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800420c:	f000 fd02 	bl	8004c14 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004210:	4b2a      	ldr	r3, [pc, #168]	; (80042bc <prvAddNewTaskToReadyList+0xb8>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	3301      	adds	r3, #1
 8004216:	4a29      	ldr	r2, [pc, #164]	; (80042bc <prvAddNewTaskToReadyList+0xb8>)
 8004218:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800421a:	4b29      	ldr	r3, [pc, #164]	; (80042c0 <prvAddNewTaskToReadyList+0xbc>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d109      	bne.n	8004236 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004222:	4a27      	ldr	r2, [pc, #156]	; (80042c0 <prvAddNewTaskToReadyList+0xbc>)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004228:	4b24      	ldr	r3, [pc, #144]	; (80042bc <prvAddNewTaskToReadyList+0xb8>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2b01      	cmp	r3, #1
 800422e:	d110      	bne.n	8004252 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004230:	f000 faa4 	bl	800477c <prvInitialiseTaskLists>
 8004234:	e00d      	b.n	8004252 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004236:	4b23      	ldr	r3, [pc, #140]	; (80042c4 <prvAddNewTaskToReadyList+0xc0>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d109      	bne.n	8004252 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800423e:	4b20      	ldr	r3, [pc, #128]	; (80042c0 <prvAddNewTaskToReadyList+0xbc>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004248:	429a      	cmp	r2, r3
 800424a:	d802      	bhi.n	8004252 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800424c:	4a1c      	ldr	r2, [pc, #112]	; (80042c0 <prvAddNewTaskToReadyList+0xbc>)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004252:	4b1d      	ldr	r3, [pc, #116]	; (80042c8 <prvAddNewTaskToReadyList+0xc4>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	3301      	adds	r3, #1
 8004258:	4a1b      	ldr	r2, [pc, #108]	; (80042c8 <prvAddNewTaskToReadyList+0xc4>)
 800425a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004260:	2201      	movs	r2, #1
 8004262:	409a      	lsls	r2, r3
 8004264:	4b19      	ldr	r3, [pc, #100]	; (80042cc <prvAddNewTaskToReadyList+0xc8>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4313      	orrs	r3, r2
 800426a:	4a18      	ldr	r2, [pc, #96]	; (80042cc <prvAddNewTaskToReadyList+0xc8>)
 800426c:	6013      	str	r3, [r2, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004272:	4613      	mov	r3, r2
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	4413      	add	r3, r2
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	4a15      	ldr	r2, [pc, #84]	; (80042d0 <prvAddNewTaskToReadyList+0xcc>)
 800427c:	441a      	add	r2, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	3304      	adds	r3, #4
 8004282:	4619      	mov	r1, r3
 8004284:	4610      	mov	r0, r2
 8004286:	f7ff fe6e 	bl	8003f66 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800428a:	f000 fcf3 	bl	8004c74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800428e:	4b0d      	ldr	r3, [pc, #52]	; (80042c4 <prvAddNewTaskToReadyList+0xc0>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00e      	beq.n	80042b4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004296:	4b0a      	ldr	r3, [pc, #40]	; (80042c0 <prvAddNewTaskToReadyList+0xbc>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d207      	bcs.n	80042b4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80042a4:	4b0b      	ldr	r3, [pc, #44]	; (80042d4 <prvAddNewTaskToReadyList+0xd0>)
 80042a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042aa:	601a      	str	r2, [r3, #0]
 80042ac:	f3bf 8f4f 	dsb	sy
 80042b0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80042b4:	bf00      	nop
 80042b6:	3708      	adds	r7, #8
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	20000278 	.word	0x20000278
 80042c0:	20000178 	.word	0x20000178
 80042c4:	20000284 	.word	0x20000284
 80042c8:	20000294 	.word	0x20000294
 80042cc:	20000280 	.word	0x20000280
 80042d0:	2000017c 	.word	0x2000017c
 80042d4:	e000ed04 	.word	0xe000ed04

080042d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80042e0:	2300      	movs	r3, #0
 80042e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d017      	beq.n	800431a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80042ea:	4b13      	ldr	r3, [pc, #76]	; (8004338 <vTaskDelay+0x60>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00a      	beq.n	8004308 <vTaskDelay+0x30>
	__asm volatile
 80042f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f6:	f383 8811 	msr	BASEPRI, r3
 80042fa:	f3bf 8f6f 	isb	sy
 80042fe:	f3bf 8f4f 	dsb	sy
 8004302:	60bb      	str	r3, [r7, #8]
}
 8004304:	bf00      	nop
 8004306:	e7fe      	b.n	8004306 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004308:	f000 f862 	bl	80043d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800430c:	2100      	movs	r1, #0
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 faf0 	bl	80048f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004314:	f000 f86a 	bl	80043ec <xTaskResumeAll>
 8004318:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d107      	bne.n	8004330 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004320:	4b06      	ldr	r3, [pc, #24]	; (800433c <vTaskDelay+0x64>)
 8004322:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004326:	601a      	str	r2, [r3, #0]
 8004328:	f3bf 8f4f 	dsb	sy
 800432c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004330:	bf00      	nop
 8004332:	3710      	adds	r7, #16
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}
 8004338:	200002a0 	.word	0x200002a0
 800433c:	e000ed04 	.word	0xe000ed04

08004340 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b086      	sub	sp, #24
 8004344:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8004346:	4b1c      	ldr	r3, [pc, #112]	; (80043b8 <vTaskStartScheduler+0x78>)
 8004348:	9301      	str	r3, [sp, #4]
 800434a:	2300      	movs	r3, #0
 800434c:	9300      	str	r3, [sp, #0]
 800434e:	2300      	movs	r3, #0
 8004350:	2280      	movs	r2, #128	; 0x80
 8004352:	491a      	ldr	r1, [pc, #104]	; (80043bc <vTaskStartScheduler+0x7c>)
 8004354:	481a      	ldr	r0, [pc, #104]	; (80043c0 <vTaskStartScheduler+0x80>)
 8004356:	f7ff fe8d 	bl	8004074 <xTaskCreate>
 800435a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2b01      	cmp	r3, #1
 8004360:	d116      	bne.n	8004390 <vTaskStartScheduler+0x50>
	__asm volatile
 8004362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004366:	f383 8811 	msr	BASEPRI, r3
 800436a:	f3bf 8f6f 	isb	sy
 800436e:	f3bf 8f4f 	dsb	sy
 8004372:	60bb      	str	r3, [r7, #8]
}
 8004374:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004376:	4b13      	ldr	r3, [pc, #76]	; (80043c4 <vTaskStartScheduler+0x84>)
 8004378:	f04f 32ff 	mov.w	r2, #4294967295
 800437c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800437e:	4b12      	ldr	r3, [pc, #72]	; (80043c8 <vTaskStartScheduler+0x88>)
 8004380:	2201      	movs	r2, #1
 8004382:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004384:	4b11      	ldr	r3, [pc, #68]	; (80043cc <vTaskStartScheduler+0x8c>)
 8004386:	2200      	movs	r2, #0
 8004388:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800438a:	f000 fba1 	bl	8004ad0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800438e:	e00e      	b.n	80043ae <vTaskStartScheduler+0x6e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004396:	d10a      	bne.n	80043ae <vTaskStartScheduler+0x6e>
	__asm volatile
 8004398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800439c:	f383 8811 	msr	BASEPRI, r3
 80043a0:	f3bf 8f6f 	isb	sy
 80043a4:	f3bf 8f4f 	dsb	sy
 80043a8:	607b      	str	r3, [r7, #4]
}
 80043aa:	bf00      	nop
 80043ac:	e7fe      	b.n	80043ac <vTaskStartScheduler+0x6c>
}
 80043ae:	bf00      	nop
 80043b0:	3710      	adds	r7, #16
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	2000029c 	.word	0x2000029c
 80043bc:	08006368 	.word	0x08006368
 80043c0:	0800474d 	.word	0x0800474d
 80043c4:	20000298 	.word	0x20000298
 80043c8:	20000284 	.word	0x20000284
 80043cc:	2000027c 	.word	0x2000027c

080043d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80043d0:	b480      	push	{r7}
 80043d2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80043d4:	4b04      	ldr	r3, [pc, #16]	; (80043e8 <vTaskSuspendAll+0x18>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	3301      	adds	r3, #1
 80043da:	4a03      	ldr	r2, [pc, #12]	; (80043e8 <vTaskSuspendAll+0x18>)
 80043dc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80043de:	bf00      	nop
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr
 80043e8:	200002a0 	.word	0x200002a0

080043ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80043f2:	2300      	movs	r3, #0
 80043f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80043f6:	2300      	movs	r3, #0
 80043f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80043fa:	4b41      	ldr	r3, [pc, #260]	; (8004500 <xTaskResumeAll+0x114>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d10a      	bne.n	8004418 <xTaskResumeAll+0x2c>
	__asm volatile
 8004402:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004406:	f383 8811 	msr	BASEPRI, r3
 800440a:	f3bf 8f6f 	isb	sy
 800440e:	f3bf 8f4f 	dsb	sy
 8004412:	603b      	str	r3, [r7, #0]
}
 8004414:	bf00      	nop
 8004416:	e7fe      	b.n	8004416 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004418:	f000 fbfc 	bl	8004c14 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800441c:	4b38      	ldr	r3, [pc, #224]	; (8004500 <xTaskResumeAll+0x114>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	3b01      	subs	r3, #1
 8004422:	4a37      	ldr	r2, [pc, #220]	; (8004500 <xTaskResumeAll+0x114>)
 8004424:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004426:	4b36      	ldr	r3, [pc, #216]	; (8004500 <xTaskResumeAll+0x114>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d161      	bne.n	80044f2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800442e:	4b35      	ldr	r3, [pc, #212]	; (8004504 <xTaskResumeAll+0x118>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d05d      	beq.n	80044f2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004436:	e02e      	b.n	8004496 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004438:	4b33      	ldr	r3, [pc, #204]	; (8004508 <xTaskResumeAll+0x11c>)
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	3318      	adds	r3, #24
 8004444:	4618      	mov	r0, r3
 8004446:	f7ff fdeb 	bl	8004020 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	3304      	adds	r3, #4
 800444e:	4618      	mov	r0, r3
 8004450:	f7ff fde6 	bl	8004020 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004458:	2201      	movs	r2, #1
 800445a:	409a      	lsls	r2, r3
 800445c:	4b2b      	ldr	r3, [pc, #172]	; (800450c <xTaskResumeAll+0x120>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	4313      	orrs	r3, r2
 8004462:	4a2a      	ldr	r2, [pc, #168]	; (800450c <xTaskResumeAll+0x120>)
 8004464:	6013      	str	r3, [r2, #0]
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800446a:	4613      	mov	r3, r2
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	4413      	add	r3, r2
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	4a27      	ldr	r2, [pc, #156]	; (8004510 <xTaskResumeAll+0x124>)
 8004474:	441a      	add	r2, r3
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	3304      	adds	r3, #4
 800447a:	4619      	mov	r1, r3
 800447c:	4610      	mov	r0, r2
 800447e:	f7ff fd72 	bl	8003f66 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004486:	4b23      	ldr	r3, [pc, #140]	; (8004514 <xTaskResumeAll+0x128>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800448c:	429a      	cmp	r2, r3
 800448e:	d302      	bcc.n	8004496 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004490:	4b21      	ldr	r3, [pc, #132]	; (8004518 <xTaskResumeAll+0x12c>)
 8004492:	2201      	movs	r2, #1
 8004494:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004496:	4b1c      	ldr	r3, [pc, #112]	; (8004508 <xTaskResumeAll+0x11c>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1cc      	bne.n	8004438 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d001      	beq.n	80044a8 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80044a4:	f000 f9e8 	bl	8004878 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80044a8:	4b1c      	ldr	r3, [pc, #112]	; (800451c <xTaskResumeAll+0x130>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d010      	beq.n	80044d6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80044b4:	f000 f836 	bl	8004524 <xTaskIncrementTick>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d002      	beq.n	80044c4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80044be:	4b16      	ldr	r3, [pc, #88]	; (8004518 <xTaskResumeAll+0x12c>)
 80044c0:	2201      	movs	r2, #1
 80044c2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	3b01      	subs	r3, #1
 80044c8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d1f1      	bne.n	80044b4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80044d0:	4b12      	ldr	r3, [pc, #72]	; (800451c <xTaskResumeAll+0x130>)
 80044d2:	2200      	movs	r2, #0
 80044d4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80044d6:	4b10      	ldr	r3, [pc, #64]	; (8004518 <xTaskResumeAll+0x12c>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d009      	beq.n	80044f2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80044de:	2301      	movs	r3, #1
 80044e0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80044e2:	4b0f      	ldr	r3, [pc, #60]	; (8004520 <xTaskResumeAll+0x134>)
 80044e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044e8:	601a      	str	r2, [r3, #0]
 80044ea:	f3bf 8f4f 	dsb	sy
 80044ee:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80044f2:	f000 fbbf 	bl	8004c74 <vPortExitCritical>

	return xAlreadyYielded;
 80044f6:	68bb      	ldr	r3, [r7, #8]
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3710      	adds	r7, #16
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	200002a0 	.word	0x200002a0
 8004504:	20000278 	.word	0x20000278
 8004508:	20000238 	.word	0x20000238
 800450c:	20000280 	.word	0x20000280
 8004510:	2000017c 	.word	0x2000017c
 8004514:	20000178 	.word	0x20000178
 8004518:	2000028c 	.word	0x2000028c
 800451c:	20000288 	.word	0x20000288
 8004520:	e000ed04 	.word	0xe000ed04

08004524 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b086      	sub	sp, #24
 8004528:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800452a:	2300      	movs	r3, #0
 800452c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800452e:	4b4e      	ldr	r3, [pc, #312]	; (8004668 <xTaskIncrementTick+0x144>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2b00      	cmp	r3, #0
 8004534:	f040 808e 	bne.w	8004654 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004538:	4b4c      	ldr	r3, [pc, #304]	; (800466c <xTaskIncrementTick+0x148>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	3301      	adds	r3, #1
 800453e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004540:	4a4a      	ldr	r2, [pc, #296]	; (800466c <xTaskIncrementTick+0x148>)
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d120      	bne.n	800458e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800454c:	4b48      	ldr	r3, [pc, #288]	; (8004670 <xTaskIncrementTick+0x14c>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00a      	beq.n	800456c <xTaskIncrementTick+0x48>
	__asm volatile
 8004556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800455a:	f383 8811 	msr	BASEPRI, r3
 800455e:	f3bf 8f6f 	isb	sy
 8004562:	f3bf 8f4f 	dsb	sy
 8004566:	603b      	str	r3, [r7, #0]
}
 8004568:	bf00      	nop
 800456a:	e7fe      	b.n	800456a <xTaskIncrementTick+0x46>
 800456c:	4b40      	ldr	r3, [pc, #256]	; (8004670 <xTaskIncrementTick+0x14c>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	60fb      	str	r3, [r7, #12]
 8004572:	4b40      	ldr	r3, [pc, #256]	; (8004674 <xTaskIncrementTick+0x150>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a3e      	ldr	r2, [pc, #248]	; (8004670 <xTaskIncrementTick+0x14c>)
 8004578:	6013      	str	r3, [r2, #0]
 800457a:	4a3e      	ldr	r2, [pc, #248]	; (8004674 <xTaskIncrementTick+0x150>)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6013      	str	r3, [r2, #0]
 8004580:	4b3d      	ldr	r3, [pc, #244]	; (8004678 <xTaskIncrementTick+0x154>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	3301      	adds	r3, #1
 8004586:	4a3c      	ldr	r2, [pc, #240]	; (8004678 <xTaskIncrementTick+0x154>)
 8004588:	6013      	str	r3, [r2, #0]
 800458a:	f000 f975 	bl	8004878 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800458e:	4b3b      	ldr	r3, [pc, #236]	; (800467c <xTaskIncrementTick+0x158>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	693a      	ldr	r2, [r7, #16]
 8004594:	429a      	cmp	r2, r3
 8004596:	d348      	bcc.n	800462a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004598:	4b35      	ldr	r3, [pc, #212]	; (8004670 <xTaskIncrementTick+0x14c>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d104      	bne.n	80045ac <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045a2:	4b36      	ldr	r3, [pc, #216]	; (800467c <xTaskIncrementTick+0x158>)
 80045a4:	f04f 32ff 	mov.w	r2, #4294967295
 80045a8:	601a      	str	r2, [r3, #0]
					break;
 80045aa:	e03e      	b.n	800462a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045ac:	4b30      	ldr	r3, [pc, #192]	; (8004670 <xTaskIncrementTick+0x14c>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68db      	ldr	r3, [r3, #12]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80045bc:	693a      	ldr	r2, [r7, #16]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d203      	bcs.n	80045cc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80045c4:	4a2d      	ldr	r2, [pc, #180]	; (800467c <xTaskIncrementTick+0x158>)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80045ca:	e02e      	b.n	800462a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	3304      	adds	r3, #4
 80045d0:	4618      	mov	r0, r3
 80045d2:	f7ff fd25 	bl	8004020 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d004      	beq.n	80045e8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	3318      	adds	r3, #24
 80045e2:	4618      	mov	r0, r3
 80045e4:	f7ff fd1c 	bl	8004020 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ec:	2201      	movs	r2, #1
 80045ee:	409a      	lsls	r2, r3
 80045f0:	4b23      	ldr	r3, [pc, #140]	; (8004680 <xTaskIncrementTick+0x15c>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	4a22      	ldr	r2, [pc, #136]	; (8004680 <xTaskIncrementTick+0x15c>)
 80045f8:	6013      	str	r3, [r2, #0]
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045fe:	4613      	mov	r3, r2
 8004600:	009b      	lsls	r3, r3, #2
 8004602:	4413      	add	r3, r2
 8004604:	009b      	lsls	r3, r3, #2
 8004606:	4a1f      	ldr	r2, [pc, #124]	; (8004684 <xTaskIncrementTick+0x160>)
 8004608:	441a      	add	r2, r3
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	3304      	adds	r3, #4
 800460e:	4619      	mov	r1, r3
 8004610:	4610      	mov	r0, r2
 8004612:	f7ff fca8 	bl	8003f66 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800461a:	4b1b      	ldr	r3, [pc, #108]	; (8004688 <xTaskIncrementTick+0x164>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004620:	429a      	cmp	r2, r3
 8004622:	d3b9      	bcc.n	8004598 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004624:	2301      	movs	r3, #1
 8004626:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004628:	e7b6      	b.n	8004598 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800462a:	4b17      	ldr	r3, [pc, #92]	; (8004688 <xTaskIncrementTick+0x164>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004630:	4914      	ldr	r1, [pc, #80]	; (8004684 <xTaskIncrementTick+0x160>)
 8004632:	4613      	mov	r3, r2
 8004634:	009b      	lsls	r3, r3, #2
 8004636:	4413      	add	r3, r2
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	440b      	add	r3, r1
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2b01      	cmp	r3, #1
 8004640:	d901      	bls.n	8004646 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004642:	2301      	movs	r3, #1
 8004644:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004646:	4b11      	ldr	r3, [pc, #68]	; (800468c <xTaskIncrementTick+0x168>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d007      	beq.n	800465e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800464e:	2301      	movs	r3, #1
 8004650:	617b      	str	r3, [r7, #20]
 8004652:	e004      	b.n	800465e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004654:	4b0e      	ldr	r3, [pc, #56]	; (8004690 <xTaskIncrementTick+0x16c>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	3301      	adds	r3, #1
 800465a:	4a0d      	ldr	r2, [pc, #52]	; (8004690 <xTaskIncrementTick+0x16c>)
 800465c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800465e:	697b      	ldr	r3, [r7, #20]
}
 8004660:	4618      	mov	r0, r3
 8004662:	3718      	adds	r7, #24
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	200002a0 	.word	0x200002a0
 800466c:	2000027c 	.word	0x2000027c
 8004670:	20000230 	.word	0x20000230
 8004674:	20000234 	.word	0x20000234
 8004678:	20000290 	.word	0x20000290
 800467c:	20000298 	.word	0x20000298
 8004680:	20000280 	.word	0x20000280
 8004684:	2000017c 	.word	0x2000017c
 8004688:	20000178 	.word	0x20000178
 800468c:	2000028c 	.word	0x2000028c
 8004690:	20000288 	.word	0x20000288

08004694 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004694:	b480      	push	{r7}
 8004696:	b087      	sub	sp, #28
 8004698:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800469a:	4b27      	ldr	r3, [pc, #156]	; (8004738 <vTaskSwitchContext+0xa4>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d003      	beq.n	80046aa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80046a2:	4b26      	ldr	r3, [pc, #152]	; (800473c <vTaskSwitchContext+0xa8>)
 80046a4:	2201      	movs	r2, #1
 80046a6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80046a8:	e03f      	b.n	800472a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80046aa:	4b24      	ldr	r3, [pc, #144]	; (800473c <vTaskSwitchContext+0xa8>)
 80046ac:	2200      	movs	r2, #0
 80046ae:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046b0:	4b23      	ldr	r3, [pc, #140]	; (8004740 <vTaskSwitchContext+0xac>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	fab3 f383 	clz	r3, r3
 80046bc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80046be:	7afb      	ldrb	r3, [r7, #11]
 80046c0:	f1c3 031f 	rsb	r3, r3, #31
 80046c4:	617b      	str	r3, [r7, #20]
 80046c6:	491f      	ldr	r1, [pc, #124]	; (8004744 <vTaskSwitchContext+0xb0>)
 80046c8:	697a      	ldr	r2, [r7, #20]
 80046ca:	4613      	mov	r3, r2
 80046cc:	009b      	lsls	r3, r3, #2
 80046ce:	4413      	add	r3, r2
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	440b      	add	r3, r1
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d10a      	bne.n	80046f0 <vTaskSwitchContext+0x5c>
	__asm volatile
 80046da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046de:	f383 8811 	msr	BASEPRI, r3
 80046e2:	f3bf 8f6f 	isb	sy
 80046e6:	f3bf 8f4f 	dsb	sy
 80046ea:	607b      	str	r3, [r7, #4]
}
 80046ec:	bf00      	nop
 80046ee:	e7fe      	b.n	80046ee <vTaskSwitchContext+0x5a>
 80046f0:	697a      	ldr	r2, [r7, #20]
 80046f2:	4613      	mov	r3, r2
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	4413      	add	r3, r2
 80046f8:	009b      	lsls	r3, r3, #2
 80046fa:	4a12      	ldr	r2, [pc, #72]	; (8004744 <vTaskSwitchContext+0xb0>)
 80046fc:	4413      	add	r3, r2
 80046fe:	613b      	str	r3, [r7, #16]
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	685a      	ldr	r2, [r3, #4]
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	605a      	str	r2, [r3, #4]
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	685a      	ldr	r2, [r3, #4]
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	3308      	adds	r3, #8
 8004712:	429a      	cmp	r2, r3
 8004714:	d104      	bne.n	8004720 <vTaskSwitchContext+0x8c>
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	685a      	ldr	r2, [r3, #4]
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	605a      	str	r2, [r3, #4]
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	4a08      	ldr	r2, [pc, #32]	; (8004748 <vTaskSwitchContext+0xb4>)
 8004728:	6013      	str	r3, [r2, #0]
}
 800472a:	bf00      	nop
 800472c:	371c      	adds	r7, #28
 800472e:	46bd      	mov	sp, r7
 8004730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004734:	4770      	bx	lr
 8004736:	bf00      	nop
 8004738:	200002a0 	.word	0x200002a0
 800473c:	2000028c 	.word	0x2000028c
 8004740:	20000280 	.word	0x20000280
 8004744:	2000017c 	.word	0x2000017c
 8004748:	20000178 	.word	0x20000178

0800474c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004754:	f000 f852 	bl	80047fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004758:	4b06      	ldr	r3, [pc, #24]	; (8004774 <prvIdleTask+0x28>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2b01      	cmp	r3, #1
 800475e:	d9f9      	bls.n	8004754 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004760:	4b05      	ldr	r3, [pc, #20]	; (8004778 <prvIdleTask+0x2c>)
 8004762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004766:	601a      	str	r2, [r3, #0]
 8004768:	f3bf 8f4f 	dsb	sy
 800476c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004770:	e7f0      	b.n	8004754 <prvIdleTask+0x8>
 8004772:	bf00      	nop
 8004774:	2000017c 	.word	0x2000017c
 8004778:	e000ed04 	.word	0xe000ed04

0800477c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004782:	2300      	movs	r3, #0
 8004784:	607b      	str	r3, [r7, #4]
 8004786:	e00c      	b.n	80047a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	4613      	mov	r3, r2
 800478c:	009b      	lsls	r3, r3, #2
 800478e:	4413      	add	r3, r2
 8004790:	009b      	lsls	r3, r3, #2
 8004792:	4a12      	ldr	r2, [pc, #72]	; (80047dc <prvInitialiseTaskLists+0x60>)
 8004794:	4413      	add	r3, r2
 8004796:	4618      	mov	r0, r3
 8004798:	f7ff fbb8 	bl	8003f0c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	3301      	adds	r3, #1
 80047a0:	607b      	str	r3, [r7, #4]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2b06      	cmp	r3, #6
 80047a6:	d9ef      	bls.n	8004788 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80047a8:	480d      	ldr	r0, [pc, #52]	; (80047e0 <prvInitialiseTaskLists+0x64>)
 80047aa:	f7ff fbaf 	bl	8003f0c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80047ae:	480d      	ldr	r0, [pc, #52]	; (80047e4 <prvInitialiseTaskLists+0x68>)
 80047b0:	f7ff fbac 	bl	8003f0c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80047b4:	480c      	ldr	r0, [pc, #48]	; (80047e8 <prvInitialiseTaskLists+0x6c>)
 80047b6:	f7ff fba9 	bl	8003f0c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80047ba:	480c      	ldr	r0, [pc, #48]	; (80047ec <prvInitialiseTaskLists+0x70>)
 80047bc:	f7ff fba6 	bl	8003f0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80047c0:	480b      	ldr	r0, [pc, #44]	; (80047f0 <prvInitialiseTaskLists+0x74>)
 80047c2:	f7ff fba3 	bl	8003f0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80047c6:	4b0b      	ldr	r3, [pc, #44]	; (80047f4 <prvInitialiseTaskLists+0x78>)
 80047c8:	4a05      	ldr	r2, [pc, #20]	; (80047e0 <prvInitialiseTaskLists+0x64>)
 80047ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80047cc:	4b0a      	ldr	r3, [pc, #40]	; (80047f8 <prvInitialiseTaskLists+0x7c>)
 80047ce:	4a05      	ldr	r2, [pc, #20]	; (80047e4 <prvInitialiseTaskLists+0x68>)
 80047d0:	601a      	str	r2, [r3, #0]
}
 80047d2:	bf00      	nop
 80047d4:	3708      	adds	r7, #8
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	2000017c 	.word	0x2000017c
 80047e0:	20000208 	.word	0x20000208
 80047e4:	2000021c 	.word	0x2000021c
 80047e8:	20000238 	.word	0x20000238
 80047ec:	2000024c 	.word	0x2000024c
 80047f0:	20000264 	.word	0x20000264
 80047f4:	20000230 	.word	0x20000230
 80047f8:	20000234 	.word	0x20000234

080047fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b082      	sub	sp, #8
 8004800:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004802:	e019      	b.n	8004838 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004804:	f000 fa06 	bl	8004c14 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004808:	4b10      	ldr	r3, [pc, #64]	; (800484c <prvCheckTasksWaitingTermination+0x50>)
 800480a:	68db      	ldr	r3, [r3, #12]
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	3304      	adds	r3, #4
 8004814:	4618      	mov	r0, r3
 8004816:	f7ff fc03 	bl	8004020 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800481a:	4b0d      	ldr	r3, [pc, #52]	; (8004850 <prvCheckTasksWaitingTermination+0x54>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	3b01      	subs	r3, #1
 8004820:	4a0b      	ldr	r2, [pc, #44]	; (8004850 <prvCheckTasksWaitingTermination+0x54>)
 8004822:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004824:	4b0b      	ldr	r3, [pc, #44]	; (8004854 <prvCheckTasksWaitingTermination+0x58>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	3b01      	subs	r3, #1
 800482a:	4a0a      	ldr	r2, [pc, #40]	; (8004854 <prvCheckTasksWaitingTermination+0x58>)
 800482c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800482e:	f000 fa21 	bl	8004c74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 f810 	bl	8004858 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004838:	4b06      	ldr	r3, [pc, #24]	; (8004854 <prvCheckTasksWaitingTermination+0x58>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d1e1      	bne.n	8004804 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004840:	bf00      	nop
 8004842:	bf00      	nop
 8004844:	3708      	adds	r7, #8
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	2000024c 	.word	0x2000024c
 8004850:	20000278 	.word	0x20000278
 8004854:	20000260 	.word	0x20000260

08004858 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004858:	b580      	push	{r7, lr}
 800485a:	b082      	sub	sp, #8
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004864:	4618      	mov	r0, r3
 8004866:	f000 fb83 	bl	8004f70 <vPortFree>
			vPortFree( pxTCB );
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 fb80 	bl	8004f70 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004870:	bf00      	nop
 8004872:	3708      	adds	r7, #8
 8004874:	46bd      	mov	sp, r7
 8004876:	bd80      	pop	{r7, pc}

08004878 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004878:	b480      	push	{r7}
 800487a:	b083      	sub	sp, #12
 800487c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800487e:	4b0c      	ldr	r3, [pc, #48]	; (80048b0 <prvResetNextTaskUnblockTime+0x38>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d104      	bne.n	8004892 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004888:	4b0a      	ldr	r3, [pc, #40]	; (80048b4 <prvResetNextTaskUnblockTime+0x3c>)
 800488a:	f04f 32ff 	mov.w	r2, #4294967295
 800488e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004890:	e008      	b.n	80048a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004892:	4b07      	ldr	r3, [pc, #28]	; (80048b0 <prvResetNextTaskUnblockTime+0x38>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	4a04      	ldr	r2, [pc, #16]	; (80048b4 <prvResetNextTaskUnblockTime+0x3c>)
 80048a2:	6013      	str	r3, [r2, #0]
}
 80048a4:	bf00      	nop
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr
 80048b0:	20000230 	.word	0x20000230
 80048b4:	20000298 	.word	0x20000298

080048b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80048be:	4b0b      	ldr	r3, [pc, #44]	; (80048ec <xTaskGetSchedulerState+0x34>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d102      	bne.n	80048cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80048c6:	2301      	movs	r3, #1
 80048c8:	607b      	str	r3, [r7, #4]
 80048ca:	e008      	b.n	80048de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048cc:	4b08      	ldr	r3, [pc, #32]	; (80048f0 <xTaskGetSchedulerState+0x38>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d102      	bne.n	80048da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80048d4:	2302      	movs	r3, #2
 80048d6:	607b      	str	r3, [r7, #4]
 80048d8:	e001      	b.n	80048de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80048da:	2300      	movs	r3, #0
 80048dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80048de:	687b      	ldr	r3, [r7, #4]
	}
 80048e0:	4618      	mov	r0, r3
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr
 80048ec:	20000284 	.word	0x20000284
 80048f0:	200002a0 	.word	0x200002a0

080048f4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b084      	sub	sp, #16
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
 80048fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80048fe:	4b29      	ldr	r3, [pc, #164]	; (80049a4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004904:	4b28      	ldr	r3, [pc, #160]	; (80049a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	3304      	adds	r3, #4
 800490a:	4618      	mov	r0, r3
 800490c:	f7ff fb88 	bl	8004020 <uxListRemove>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d10b      	bne.n	800492e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004916:	4b24      	ldr	r3, [pc, #144]	; (80049a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491c:	2201      	movs	r2, #1
 800491e:	fa02 f303 	lsl.w	r3, r2, r3
 8004922:	43da      	mvns	r2, r3
 8004924:	4b21      	ldr	r3, [pc, #132]	; (80049ac <prvAddCurrentTaskToDelayedList+0xb8>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4013      	ands	r3, r2
 800492a:	4a20      	ldr	r2, [pc, #128]	; (80049ac <prvAddCurrentTaskToDelayedList+0xb8>)
 800492c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004934:	d10a      	bne.n	800494c <prvAddCurrentTaskToDelayedList+0x58>
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d007      	beq.n	800494c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800493c:	4b1a      	ldr	r3, [pc, #104]	; (80049a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	3304      	adds	r3, #4
 8004942:	4619      	mov	r1, r3
 8004944:	481a      	ldr	r0, [pc, #104]	; (80049b0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004946:	f7ff fb0e 	bl	8003f66 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800494a:	e026      	b.n	800499a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800494c:	68fa      	ldr	r2, [r7, #12]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	4413      	add	r3, r2
 8004952:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004954:	4b14      	ldr	r3, [pc, #80]	; (80049a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68ba      	ldr	r2, [r7, #8]
 800495a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800495c:	68ba      	ldr	r2, [r7, #8]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	429a      	cmp	r2, r3
 8004962:	d209      	bcs.n	8004978 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004964:	4b13      	ldr	r3, [pc, #76]	; (80049b4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004966:	681a      	ldr	r2, [r3, #0]
 8004968:	4b0f      	ldr	r3, [pc, #60]	; (80049a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	3304      	adds	r3, #4
 800496e:	4619      	mov	r1, r3
 8004970:	4610      	mov	r0, r2
 8004972:	f7ff fb1c 	bl	8003fae <vListInsert>
}
 8004976:	e010      	b.n	800499a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004978:	4b0f      	ldr	r3, [pc, #60]	; (80049b8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	4b0a      	ldr	r3, [pc, #40]	; (80049a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	3304      	adds	r3, #4
 8004982:	4619      	mov	r1, r3
 8004984:	4610      	mov	r0, r2
 8004986:	f7ff fb12 	bl	8003fae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800498a:	4b0c      	ldr	r3, [pc, #48]	; (80049bc <prvAddCurrentTaskToDelayedList+0xc8>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68ba      	ldr	r2, [r7, #8]
 8004990:	429a      	cmp	r2, r3
 8004992:	d202      	bcs.n	800499a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004994:	4a09      	ldr	r2, [pc, #36]	; (80049bc <prvAddCurrentTaskToDelayedList+0xc8>)
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	6013      	str	r3, [r2, #0]
}
 800499a:	bf00      	nop
 800499c:	3710      	adds	r7, #16
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	2000027c 	.word	0x2000027c
 80049a8:	20000178 	.word	0x20000178
 80049ac:	20000280 	.word	0x20000280
 80049b0:	20000264 	.word	0x20000264
 80049b4:	20000234 	.word	0x20000234
 80049b8:	20000230 	.word	0x20000230
 80049bc:	20000298 	.word	0x20000298

080049c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80049c0:	b480      	push	{r7}
 80049c2:	b085      	sub	sp, #20
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	3b04      	subs	r3, #4
 80049d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80049d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	3b04      	subs	r3, #4
 80049de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	f023 0201 	bic.w	r2, r3, #1
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	3b04      	subs	r3, #4
 80049ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80049f0:	4a0c      	ldr	r2, [pc, #48]	; (8004a24 <pxPortInitialiseStack+0x64>)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	3b14      	subs	r3, #20
 80049fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	3b04      	subs	r3, #4
 8004a06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f06f 0202 	mvn.w	r2, #2
 8004a0e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	3b20      	subs	r3, #32
 8004a14:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004a16:	68fb      	ldr	r3, [r7, #12]
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3714      	adds	r7, #20
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr
 8004a24:	08004a29 	.word	0x08004a29

08004a28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b085      	sub	sp, #20
 8004a2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004a32:	4b12      	ldr	r3, [pc, #72]	; (8004a7c <prvTaskExitError+0x54>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a3a:	d00a      	beq.n	8004a52 <prvTaskExitError+0x2a>
	__asm volatile
 8004a3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a40:	f383 8811 	msr	BASEPRI, r3
 8004a44:	f3bf 8f6f 	isb	sy
 8004a48:	f3bf 8f4f 	dsb	sy
 8004a4c:	60fb      	str	r3, [r7, #12]
}
 8004a4e:	bf00      	nop
 8004a50:	e7fe      	b.n	8004a50 <prvTaskExitError+0x28>
	__asm volatile
 8004a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a56:	f383 8811 	msr	BASEPRI, r3
 8004a5a:	f3bf 8f6f 	isb	sy
 8004a5e:	f3bf 8f4f 	dsb	sy
 8004a62:	60bb      	str	r3, [r7, #8]
}
 8004a64:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004a66:	bf00      	nop
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d0fc      	beq.n	8004a68 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004a6e:	bf00      	nop
 8004a70:	bf00      	nop
 8004a72:	3714      	adds	r7, #20
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr
 8004a7c:	2000000c 	.word	0x2000000c

08004a80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004a80:	4b07      	ldr	r3, [pc, #28]	; (8004aa0 <pxCurrentTCBConst2>)
 8004a82:	6819      	ldr	r1, [r3, #0]
 8004a84:	6808      	ldr	r0, [r1, #0]
 8004a86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a8a:	f380 8809 	msr	PSP, r0
 8004a8e:	f3bf 8f6f 	isb	sy
 8004a92:	f04f 0000 	mov.w	r0, #0
 8004a96:	f380 8811 	msr	BASEPRI, r0
 8004a9a:	4770      	bx	lr
 8004a9c:	f3af 8000 	nop.w

08004aa0 <pxCurrentTCBConst2>:
 8004aa0:	20000178 	.word	0x20000178
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004aa4:	bf00      	nop
 8004aa6:	bf00      	nop

08004aa8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004aa8:	4808      	ldr	r0, [pc, #32]	; (8004acc <prvPortStartFirstTask+0x24>)
 8004aaa:	6800      	ldr	r0, [r0, #0]
 8004aac:	6800      	ldr	r0, [r0, #0]
 8004aae:	f380 8808 	msr	MSP, r0
 8004ab2:	f04f 0000 	mov.w	r0, #0
 8004ab6:	f380 8814 	msr	CONTROL, r0
 8004aba:	b662      	cpsie	i
 8004abc:	b661      	cpsie	f
 8004abe:	f3bf 8f4f 	dsb	sy
 8004ac2:	f3bf 8f6f 	isb	sy
 8004ac6:	df00      	svc	0
 8004ac8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004aca:	bf00      	nop
 8004acc:	e000ed08 	.word	0xe000ed08

08004ad0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b086      	sub	sp, #24
 8004ad4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004ad6:	4b46      	ldr	r3, [pc, #280]	; (8004bf0 <xPortStartScheduler+0x120>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a46      	ldr	r2, [pc, #280]	; (8004bf4 <xPortStartScheduler+0x124>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d10a      	bne.n	8004af6 <xPortStartScheduler+0x26>
	__asm volatile
 8004ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae4:	f383 8811 	msr	BASEPRI, r3
 8004ae8:	f3bf 8f6f 	isb	sy
 8004aec:	f3bf 8f4f 	dsb	sy
 8004af0:	613b      	str	r3, [r7, #16]
}
 8004af2:	bf00      	nop
 8004af4:	e7fe      	b.n	8004af4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004af6:	4b3e      	ldr	r3, [pc, #248]	; (8004bf0 <xPortStartScheduler+0x120>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a3f      	ldr	r2, [pc, #252]	; (8004bf8 <xPortStartScheduler+0x128>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d10a      	bne.n	8004b16 <xPortStartScheduler+0x46>
	__asm volatile
 8004b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b04:	f383 8811 	msr	BASEPRI, r3
 8004b08:	f3bf 8f6f 	isb	sy
 8004b0c:	f3bf 8f4f 	dsb	sy
 8004b10:	60fb      	str	r3, [r7, #12]
}
 8004b12:	bf00      	nop
 8004b14:	e7fe      	b.n	8004b14 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004b16:	4b39      	ldr	r3, [pc, #228]	; (8004bfc <xPortStartScheduler+0x12c>)
 8004b18:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	b2db      	uxtb	r3, r3
 8004b20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	22ff      	movs	r2, #255	; 0xff
 8004b26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004b30:	78fb      	ldrb	r3, [r7, #3]
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004b38:	b2da      	uxtb	r2, r3
 8004b3a:	4b31      	ldr	r3, [pc, #196]	; (8004c00 <xPortStartScheduler+0x130>)
 8004b3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004b3e:	4b31      	ldr	r3, [pc, #196]	; (8004c04 <xPortStartScheduler+0x134>)
 8004b40:	2207      	movs	r2, #7
 8004b42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b44:	e009      	b.n	8004b5a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004b46:	4b2f      	ldr	r3, [pc, #188]	; (8004c04 <xPortStartScheduler+0x134>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	4a2d      	ldr	r2, [pc, #180]	; (8004c04 <xPortStartScheduler+0x134>)
 8004b4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004b50:	78fb      	ldrb	r3, [r7, #3]
 8004b52:	b2db      	uxtb	r3, r3
 8004b54:	005b      	lsls	r3, r3, #1
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004b5a:	78fb      	ldrb	r3, [r7, #3]
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b62:	2b80      	cmp	r3, #128	; 0x80
 8004b64:	d0ef      	beq.n	8004b46 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004b66:	4b27      	ldr	r3, [pc, #156]	; (8004c04 <xPortStartScheduler+0x134>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f1c3 0307 	rsb	r3, r3, #7
 8004b6e:	2b04      	cmp	r3, #4
 8004b70:	d00a      	beq.n	8004b88 <xPortStartScheduler+0xb8>
	__asm volatile
 8004b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b76:	f383 8811 	msr	BASEPRI, r3
 8004b7a:	f3bf 8f6f 	isb	sy
 8004b7e:	f3bf 8f4f 	dsb	sy
 8004b82:	60bb      	str	r3, [r7, #8]
}
 8004b84:	bf00      	nop
 8004b86:	e7fe      	b.n	8004b86 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004b88:	4b1e      	ldr	r3, [pc, #120]	; (8004c04 <xPortStartScheduler+0x134>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	021b      	lsls	r3, r3, #8
 8004b8e:	4a1d      	ldr	r2, [pc, #116]	; (8004c04 <xPortStartScheduler+0x134>)
 8004b90:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004b92:	4b1c      	ldr	r3, [pc, #112]	; (8004c04 <xPortStartScheduler+0x134>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004b9a:	4a1a      	ldr	r2, [pc, #104]	; (8004c04 <xPortStartScheduler+0x134>)
 8004b9c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	b2da      	uxtb	r2, r3
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004ba6:	4b18      	ldr	r3, [pc, #96]	; (8004c08 <xPortStartScheduler+0x138>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a17      	ldr	r2, [pc, #92]	; (8004c08 <xPortStartScheduler+0x138>)
 8004bac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004bb0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004bb2:	4b15      	ldr	r3, [pc, #84]	; (8004c08 <xPortStartScheduler+0x138>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a14      	ldr	r2, [pc, #80]	; (8004c08 <xPortStartScheduler+0x138>)
 8004bb8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004bbc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004bbe:	f000 f8dd 	bl	8004d7c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004bc2:	4b12      	ldr	r3, [pc, #72]	; (8004c0c <xPortStartScheduler+0x13c>)
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004bc8:	f000 f8fc 	bl	8004dc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004bcc:	4b10      	ldr	r3, [pc, #64]	; (8004c10 <xPortStartScheduler+0x140>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a0f      	ldr	r2, [pc, #60]	; (8004c10 <xPortStartScheduler+0x140>)
 8004bd2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004bd6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004bd8:	f7ff ff66 	bl	8004aa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004bdc:	f7ff fd5a 	bl	8004694 <vTaskSwitchContext>
	prvTaskExitError();
 8004be0:	f7ff ff22 	bl	8004a28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004be4:	2300      	movs	r3, #0
}
 8004be6:	4618      	mov	r0, r3
 8004be8:	3718      	adds	r7, #24
 8004bea:	46bd      	mov	sp, r7
 8004bec:	bd80      	pop	{r7, pc}
 8004bee:	bf00      	nop
 8004bf0:	e000ed00 	.word	0xe000ed00
 8004bf4:	410fc271 	.word	0x410fc271
 8004bf8:	410fc270 	.word	0x410fc270
 8004bfc:	e000e400 	.word	0xe000e400
 8004c00:	200002a4 	.word	0x200002a4
 8004c04:	200002a8 	.word	0x200002a8
 8004c08:	e000ed20 	.word	0xe000ed20
 8004c0c:	2000000c 	.word	0x2000000c
 8004c10:	e000ef34 	.word	0xe000ef34

08004c14 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
	__asm volatile
 8004c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c1e:	f383 8811 	msr	BASEPRI, r3
 8004c22:	f3bf 8f6f 	isb	sy
 8004c26:	f3bf 8f4f 	dsb	sy
 8004c2a:	607b      	str	r3, [r7, #4]
}
 8004c2c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004c2e:	4b0f      	ldr	r3, [pc, #60]	; (8004c6c <vPortEnterCritical+0x58>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	3301      	adds	r3, #1
 8004c34:	4a0d      	ldr	r2, [pc, #52]	; (8004c6c <vPortEnterCritical+0x58>)
 8004c36:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004c38:	4b0c      	ldr	r3, [pc, #48]	; (8004c6c <vPortEnterCritical+0x58>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d10f      	bne.n	8004c60 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004c40:	4b0b      	ldr	r3, [pc, #44]	; (8004c70 <vPortEnterCritical+0x5c>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00a      	beq.n	8004c60 <vPortEnterCritical+0x4c>
	__asm volatile
 8004c4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c4e:	f383 8811 	msr	BASEPRI, r3
 8004c52:	f3bf 8f6f 	isb	sy
 8004c56:	f3bf 8f4f 	dsb	sy
 8004c5a:	603b      	str	r3, [r7, #0]
}
 8004c5c:	bf00      	nop
 8004c5e:	e7fe      	b.n	8004c5e <vPortEnterCritical+0x4a>
	}
}
 8004c60:	bf00      	nop
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr
 8004c6c:	2000000c 	.word	0x2000000c
 8004c70:	e000ed04 	.word	0xe000ed04

08004c74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004c7a:	4b12      	ldr	r3, [pc, #72]	; (8004cc4 <vPortExitCritical+0x50>)
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d10a      	bne.n	8004c98 <vPortExitCritical+0x24>
	__asm volatile
 8004c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c86:	f383 8811 	msr	BASEPRI, r3
 8004c8a:	f3bf 8f6f 	isb	sy
 8004c8e:	f3bf 8f4f 	dsb	sy
 8004c92:	607b      	str	r3, [r7, #4]
}
 8004c94:	bf00      	nop
 8004c96:	e7fe      	b.n	8004c96 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004c98:	4b0a      	ldr	r3, [pc, #40]	; (8004cc4 <vPortExitCritical+0x50>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	3b01      	subs	r3, #1
 8004c9e:	4a09      	ldr	r2, [pc, #36]	; (8004cc4 <vPortExitCritical+0x50>)
 8004ca0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004ca2:	4b08      	ldr	r3, [pc, #32]	; (8004cc4 <vPortExitCritical+0x50>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d105      	bne.n	8004cb6 <vPortExitCritical+0x42>
 8004caa:	2300      	movs	r3, #0
 8004cac:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004cb4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004cb6:	bf00      	nop
 8004cb8:	370c      	adds	r7, #12
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	2000000c 	.word	0x2000000c
	...

08004cd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004cd0:	f3ef 8009 	mrs	r0, PSP
 8004cd4:	f3bf 8f6f 	isb	sy
 8004cd8:	4b15      	ldr	r3, [pc, #84]	; (8004d30 <pxCurrentTCBConst>)
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	f01e 0f10 	tst.w	lr, #16
 8004ce0:	bf08      	it	eq
 8004ce2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004ce6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cea:	6010      	str	r0, [r2, #0]
 8004cec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004cf0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004cf4:	f380 8811 	msr	BASEPRI, r0
 8004cf8:	f3bf 8f4f 	dsb	sy
 8004cfc:	f3bf 8f6f 	isb	sy
 8004d00:	f7ff fcc8 	bl	8004694 <vTaskSwitchContext>
 8004d04:	f04f 0000 	mov.w	r0, #0
 8004d08:	f380 8811 	msr	BASEPRI, r0
 8004d0c:	bc09      	pop	{r0, r3}
 8004d0e:	6819      	ldr	r1, [r3, #0]
 8004d10:	6808      	ldr	r0, [r1, #0]
 8004d12:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d16:	f01e 0f10 	tst.w	lr, #16
 8004d1a:	bf08      	it	eq
 8004d1c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004d20:	f380 8809 	msr	PSP, r0
 8004d24:	f3bf 8f6f 	isb	sy
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	f3af 8000 	nop.w

08004d30 <pxCurrentTCBConst>:
 8004d30:	20000178 	.word	0x20000178
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004d34:	bf00      	nop
 8004d36:	bf00      	nop

08004d38 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b082      	sub	sp, #8
 8004d3c:	af00      	add	r7, sp, #0
	__asm volatile
 8004d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d42:	f383 8811 	msr	BASEPRI, r3
 8004d46:	f3bf 8f6f 	isb	sy
 8004d4a:	f3bf 8f4f 	dsb	sy
 8004d4e:	607b      	str	r3, [r7, #4]
}
 8004d50:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004d52:	f7ff fbe7 	bl	8004524 <xTaskIncrementTick>
 8004d56:	4603      	mov	r3, r0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d003      	beq.n	8004d64 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004d5c:	4b06      	ldr	r3, [pc, #24]	; (8004d78 <xPortSysTickHandler+0x40>)
 8004d5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d62:	601a      	str	r2, [r3, #0]
 8004d64:	2300      	movs	r3, #0
 8004d66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	f383 8811 	msr	BASEPRI, r3
}
 8004d6e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004d70:	bf00      	nop
 8004d72:	3708      	adds	r7, #8
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	e000ed04 	.word	0xe000ed04

08004d7c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004d80:	4b0b      	ldr	r3, [pc, #44]	; (8004db0 <vPortSetupTimerInterrupt+0x34>)
 8004d82:	2200      	movs	r2, #0
 8004d84:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004d86:	4b0b      	ldr	r3, [pc, #44]	; (8004db4 <vPortSetupTimerInterrupt+0x38>)
 8004d88:	2200      	movs	r2, #0
 8004d8a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004d8c:	4b0a      	ldr	r3, [pc, #40]	; (8004db8 <vPortSetupTimerInterrupt+0x3c>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a0a      	ldr	r2, [pc, #40]	; (8004dbc <vPortSetupTimerInterrupt+0x40>)
 8004d92:	fba2 2303 	umull	r2, r3, r2, r3
 8004d96:	099b      	lsrs	r3, r3, #6
 8004d98:	4a09      	ldr	r2, [pc, #36]	; (8004dc0 <vPortSetupTimerInterrupt+0x44>)
 8004d9a:	3b01      	subs	r3, #1
 8004d9c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004d9e:	4b04      	ldr	r3, [pc, #16]	; (8004db0 <vPortSetupTimerInterrupt+0x34>)
 8004da0:	2207      	movs	r2, #7
 8004da2:	601a      	str	r2, [r3, #0]
}
 8004da4:	bf00      	nop
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	e000e010 	.word	0xe000e010
 8004db4:	e000e018 	.word	0xe000e018
 8004db8:	20000000 	.word	0x20000000
 8004dbc:	10624dd3 	.word	0x10624dd3
 8004dc0:	e000e014 	.word	0xe000e014

08004dc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004dc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004dd4 <vPortEnableVFP+0x10>
 8004dc8:	6801      	ldr	r1, [r0, #0]
 8004dca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004dce:	6001      	str	r1, [r0, #0]
 8004dd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004dd2:	bf00      	nop
 8004dd4:	e000ed88 	.word	0xe000ed88

08004dd8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b08a      	sub	sp, #40	; 0x28
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004de0:	2300      	movs	r3, #0
 8004de2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004de4:	f7ff faf4 	bl	80043d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004de8:	4b5b      	ldr	r3, [pc, #364]	; (8004f58 <pvPortMalloc+0x180>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d101      	bne.n	8004df4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004df0:	f000 f920 	bl	8005034 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004df4:	4b59      	ldr	r3, [pc, #356]	; (8004f5c <pvPortMalloc+0x184>)
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	f040 8093 	bne.w	8004f28 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d01d      	beq.n	8004e44 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004e08:	2208      	movs	r2, #8
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	4413      	add	r3, r2
 8004e0e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f003 0307 	and.w	r3, r3, #7
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d014      	beq.n	8004e44 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f023 0307 	bic.w	r3, r3, #7
 8004e20:	3308      	adds	r3, #8
 8004e22:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f003 0307 	and.w	r3, r3, #7
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00a      	beq.n	8004e44 <pvPortMalloc+0x6c>
	__asm volatile
 8004e2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e32:	f383 8811 	msr	BASEPRI, r3
 8004e36:	f3bf 8f6f 	isb	sy
 8004e3a:	f3bf 8f4f 	dsb	sy
 8004e3e:	617b      	str	r3, [r7, #20]
}
 8004e40:	bf00      	nop
 8004e42:	e7fe      	b.n	8004e42 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d06e      	beq.n	8004f28 <pvPortMalloc+0x150>
 8004e4a:	4b45      	ldr	r3, [pc, #276]	; (8004f60 <pvPortMalloc+0x188>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d869      	bhi.n	8004f28 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004e54:	4b43      	ldr	r3, [pc, #268]	; (8004f64 <pvPortMalloc+0x18c>)
 8004e56:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004e58:	4b42      	ldr	r3, [pc, #264]	; (8004f64 <pvPortMalloc+0x18c>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e5e:	e004      	b.n	8004e6a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e62:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d903      	bls.n	8004e7c <pvPortMalloc+0xa4>
 8004e74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d1f1      	bne.n	8004e60 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004e7c:	4b36      	ldr	r3, [pc, #216]	; (8004f58 <pvPortMalloc+0x180>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d050      	beq.n	8004f28 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004e86:	6a3b      	ldr	r3, [r7, #32]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2208      	movs	r2, #8
 8004e8c:	4413      	add	r3, r2
 8004e8e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	6a3b      	ldr	r3, [r7, #32]
 8004e96:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e9a:	685a      	ldr	r2, [r3, #4]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	1ad2      	subs	r2, r2, r3
 8004ea0:	2308      	movs	r3, #8
 8004ea2:	005b      	lsls	r3, r3, #1
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d91f      	bls.n	8004ee8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004ea8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4413      	add	r3, r2
 8004eae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004eb0:	69bb      	ldr	r3, [r7, #24]
 8004eb2:	f003 0307 	and.w	r3, r3, #7
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d00a      	beq.n	8004ed0 <pvPortMalloc+0xf8>
	__asm volatile
 8004eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ebe:	f383 8811 	msr	BASEPRI, r3
 8004ec2:	f3bf 8f6f 	isb	sy
 8004ec6:	f3bf 8f4f 	dsb	sy
 8004eca:	613b      	str	r3, [r7, #16]
}
 8004ecc:	bf00      	nop
 8004ece:	e7fe      	b.n	8004ece <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed2:	685a      	ldr	r2, [r3, #4]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	1ad2      	subs	r2, r2, r3
 8004ed8:	69bb      	ldr	r3, [r7, #24]
 8004eda:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004ee2:	69b8      	ldr	r0, [r7, #24]
 8004ee4:	f000 f908 	bl	80050f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004ee8:	4b1d      	ldr	r3, [pc, #116]	; (8004f60 <pvPortMalloc+0x188>)
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	4a1b      	ldr	r2, [pc, #108]	; (8004f60 <pvPortMalloc+0x188>)
 8004ef4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004ef6:	4b1a      	ldr	r3, [pc, #104]	; (8004f60 <pvPortMalloc+0x188>)
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	4b1b      	ldr	r3, [pc, #108]	; (8004f68 <pvPortMalloc+0x190>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d203      	bcs.n	8004f0a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004f02:	4b17      	ldr	r3, [pc, #92]	; (8004f60 <pvPortMalloc+0x188>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a18      	ldr	r2, [pc, #96]	; (8004f68 <pvPortMalloc+0x190>)
 8004f08:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f0c:	685a      	ldr	r2, [r3, #4]
 8004f0e:	4b13      	ldr	r3, [pc, #76]	; (8004f5c <pvPortMalloc+0x184>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	431a      	orrs	r2, r3
 8004f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f16:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004f1e:	4b13      	ldr	r3, [pc, #76]	; (8004f6c <pvPortMalloc+0x194>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	3301      	adds	r3, #1
 8004f24:	4a11      	ldr	r2, [pc, #68]	; (8004f6c <pvPortMalloc+0x194>)
 8004f26:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004f28:	f7ff fa60 	bl	80043ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	f003 0307 	and.w	r3, r3, #7
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00a      	beq.n	8004f4c <pvPortMalloc+0x174>
	__asm volatile
 8004f36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f3a:	f383 8811 	msr	BASEPRI, r3
 8004f3e:	f3bf 8f6f 	isb	sy
 8004f42:	f3bf 8f4f 	dsb	sy
 8004f46:	60fb      	str	r3, [r7, #12]
}
 8004f48:	bf00      	nop
 8004f4a:	e7fe      	b.n	8004f4a <pvPortMalloc+0x172>
	return pvReturn;
 8004f4c:	69fb      	ldr	r3, [r7, #28]
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3728      	adds	r7, #40	; 0x28
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	20000eb4 	.word	0x20000eb4
 8004f5c:	20000ec8 	.word	0x20000ec8
 8004f60:	20000eb8 	.word	0x20000eb8
 8004f64:	20000eac 	.word	0x20000eac
 8004f68:	20000ebc 	.word	0x20000ebc
 8004f6c:	20000ec0 	.word	0x20000ec0

08004f70 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b086      	sub	sp, #24
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d04d      	beq.n	800501e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004f82:	2308      	movs	r3, #8
 8004f84:	425b      	negs	r3, r3
 8004f86:	697a      	ldr	r2, [r7, #20]
 8004f88:	4413      	add	r3, r2
 8004f8a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	685a      	ldr	r2, [r3, #4]
 8004f94:	4b24      	ldr	r3, [pc, #144]	; (8005028 <vPortFree+0xb8>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4013      	ands	r3, r2
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d10a      	bne.n	8004fb4 <vPortFree+0x44>
	__asm volatile
 8004f9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa2:	f383 8811 	msr	BASEPRI, r3
 8004fa6:	f3bf 8f6f 	isb	sy
 8004faa:	f3bf 8f4f 	dsb	sy
 8004fae:	60fb      	str	r3, [r7, #12]
}
 8004fb0:	bf00      	nop
 8004fb2:	e7fe      	b.n	8004fb2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d00a      	beq.n	8004fd2 <vPortFree+0x62>
	__asm volatile
 8004fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc0:	f383 8811 	msr	BASEPRI, r3
 8004fc4:	f3bf 8f6f 	isb	sy
 8004fc8:	f3bf 8f4f 	dsb	sy
 8004fcc:	60bb      	str	r3, [r7, #8]
}
 8004fce:	bf00      	nop
 8004fd0:	e7fe      	b.n	8004fd0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	685a      	ldr	r2, [r3, #4]
 8004fd6:	4b14      	ldr	r3, [pc, #80]	; (8005028 <vPortFree+0xb8>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4013      	ands	r3, r2
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d01e      	beq.n	800501e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d11a      	bne.n	800501e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	685a      	ldr	r2, [r3, #4]
 8004fec:	4b0e      	ldr	r3, [pc, #56]	; (8005028 <vPortFree+0xb8>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	43db      	mvns	r3, r3
 8004ff2:	401a      	ands	r2, r3
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004ff8:	f7ff f9ea 	bl	80043d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	685a      	ldr	r2, [r3, #4]
 8005000:	4b0a      	ldr	r3, [pc, #40]	; (800502c <vPortFree+0xbc>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4413      	add	r3, r2
 8005006:	4a09      	ldr	r2, [pc, #36]	; (800502c <vPortFree+0xbc>)
 8005008:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800500a:	6938      	ldr	r0, [r7, #16]
 800500c:	f000 f874 	bl	80050f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005010:	4b07      	ldr	r3, [pc, #28]	; (8005030 <vPortFree+0xc0>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	3301      	adds	r3, #1
 8005016:	4a06      	ldr	r2, [pc, #24]	; (8005030 <vPortFree+0xc0>)
 8005018:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800501a:	f7ff f9e7 	bl	80043ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800501e:	bf00      	nop
 8005020:	3718      	adds	r7, #24
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	20000ec8 	.word	0x20000ec8
 800502c:	20000eb8 	.word	0x20000eb8
 8005030:	20000ec4 	.word	0x20000ec4

08005034 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005034:	b480      	push	{r7}
 8005036:	b085      	sub	sp, #20
 8005038:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800503a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800503e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005040:	4b27      	ldr	r3, [pc, #156]	; (80050e0 <prvHeapInit+0xac>)
 8005042:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f003 0307 	and.w	r3, r3, #7
 800504a:	2b00      	cmp	r3, #0
 800504c:	d00c      	beq.n	8005068 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	3307      	adds	r3, #7
 8005052:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f023 0307 	bic.w	r3, r3, #7
 800505a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800505c:	68ba      	ldr	r2, [r7, #8]
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	4a1f      	ldr	r2, [pc, #124]	; (80050e0 <prvHeapInit+0xac>)
 8005064:	4413      	add	r3, r2
 8005066:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800506c:	4a1d      	ldr	r2, [pc, #116]	; (80050e4 <prvHeapInit+0xb0>)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005072:	4b1c      	ldr	r3, [pc, #112]	; (80050e4 <prvHeapInit+0xb0>)
 8005074:	2200      	movs	r2, #0
 8005076:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	68ba      	ldr	r2, [r7, #8]
 800507c:	4413      	add	r3, r2
 800507e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005080:	2208      	movs	r2, #8
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	1a9b      	subs	r3, r3, r2
 8005086:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f023 0307 	bic.w	r3, r3, #7
 800508e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	4a15      	ldr	r2, [pc, #84]	; (80050e8 <prvHeapInit+0xb4>)
 8005094:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005096:	4b14      	ldr	r3, [pc, #80]	; (80050e8 <prvHeapInit+0xb4>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2200      	movs	r2, #0
 800509c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800509e:	4b12      	ldr	r3, [pc, #72]	; (80050e8 <prvHeapInit+0xb4>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2200      	movs	r2, #0
 80050a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	68fa      	ldr	r2, [r7, #12]
 80050ae:	1ad2      	subs	r2, r2, r3
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80050b4:	4b0c      	ldr	r3, [pc, #48]	; (80050e8 <prvHeapInit+0xb4>)
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	4a0a      	ldr	r2, [pc, #40]	; (80050ec <prvHeapInit+0xb8>)
 80050c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	4a09      	ldr	r2, [pc, #36]	; (80050f0 <prvHeapInit+0xbc>)
 80050ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80050cc:	4b09      	ldr	r3, [pc, #36]	; (80050f4 <prvHeapInit+0xc0>)
 80050ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80050d2:	601a      	str	r2, [r3, #0]
}
 80050d4:	bf00      	nop
 80050d6:	3714      	adds	r7, #20
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr
 80050e0:	200002ac 	.word	0x200002ac
 80050e4:	20000eac 	.word	0x20000eac
 80050e8:	20000eb4 	.word	0x20000eb4
 80050ec:	20000ebc 	.word	0x20000ebc
 80050f0:	20000eb8 	.word	0x20000eb8
 80050f4:	20000ec8 	.word	0x20000ec8

080050f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80050f8:	b480      	push	{r7}
 80050fa:	b085      	sub	sp, #20
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005100:	4b28      	ldr	r3, [pc, #160]	; (80051a4 <prvInsertBlockIntoFreeList+0xac>)
 8005102:	60fb      	str	r3, [r7, #12]
 8005104:	e002      	b.n	800510c <prvInsertBlockIntoFreeList+0x14>
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	60fb      	str	r3, [r7, #12]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	687a      	ldr	r2, [r7, #4]
 8005112:	429a      	cmp	r2, r3
 8005114:	d8f7      	bhi.n	8005106 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	68ba      	ldr	r2, [r7, #8]
 8005120:	4413      	add	r3, r2
 8005122:	687a      	ldr	r2, [r7, #4]
 8005124:	429a      	cmp	r2, r3
 8005126:	d108      	bne.n	800513a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	685a      	ldr	r2, [r3, #4]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	441a      	add	r2, r3
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	68ba      	ldr	r2, [r7, #8]
 8005144:	441a      	add	r2, r3
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	429a      	cmp	r2, r3
 800514c:	d118      	bne.n	8005180 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	4b15      	ldr	r3, [pc, #84]	; (80051a8 <prvInsertBlockIntoFreeList+0xb0>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	429a      	cmp	r2, r3
 8005158:	d00d      	beq.n	8005176 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685a      	ldr	r2, [r3, #4]
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	441a      	add	r2, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	601a      	str	r2, [r3, #0]
 8005174:	e008      	b.n	8005188 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005176:	4b0c      	ldr	r3, [pc, #48]	; (80051a8 <prvInsertBlockIntoFreeList+0xb0>)
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	601a      	str	r2, [r3, #0]
 800517e:	e003      	b.n	8005188 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681a      	ldr	r2, [r3, #0]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	429a      	cmp	r2, r3
 800518e:	d002      	beq.n	8005196 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005196:	bf00      	nop
 8005198:	3714      	adds	r7, #20
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	20000eac 	.word	0x20000eac
 80051a8:	20000eb4 	.word	0x20000eb4

080051ac <__errno>:
 80051ac:	4b01      	ldr	r3, [pc, #4]	; (80051b4 <__errno+0x8>)
 80051ae:	6818      	ldr	r0, [r3, #0]
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop
 80051b4:	20000010 	.word	0x20000010

080051b8 <__libc_init_array>:
 80051b8:	b570      	push	{r4, r5, r6, lr}
 80051ba:	4d0d      	ldr	r5, [pc, #52]	; (80051f0 <__libc_init_array+0x38>)
 80051bc:	4c0d      	ldr	r4, [pc, #52]	; (80051f4 <__libc_init_array+0x3c>)
 80051be:	1b64      	subs	r4, r4, r5
 80051c0:	10a4      	asrs	r4, r4, #2
 80051c2:	2600      	movs	r6, #0
 80051c4:	42a6      	cmp	r6, r4
 80051c6:	d109      	bne.n	80051dc <__libc_init_array+0x24>
 80051c8:	4d0b      	ldr	r5, [pc, #44]	; (80051f8 <__libc_init_array+0x40>)
 80051ca:	4c0c      	ldr	r4, [pc, #48]	; (80051fc <__libc_init_array+0x44>)
 80051cc:	f001 f824 	bl	8006218 <_init>
 80051d0:	1b64      	subs	r4, r4, r5
 80051d2:	10a4      	asrs	r4, r4, #2
 80051d4:	2600      	movs	r6, #0
 80051d6:	42a6      	cmp	r6, r4
 80051d8:	d105      	bne.n	80051e6 <__libc_init_array+0x2e>
 80051da:	bd70      	pop	{r4, r5, r6, pc}
 80051dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80051e0:	4798      	blx	r3
 80051e2:	3601      	adds	r6, #1
 80051e4:	e7ee      	b.n	80051c4 <__libc_init_array+0xc>
 80051e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80051ea:	4798      	blx	r3
 80051ec:	3601      	adds	r6, #1
 80051ee:	e7f2      	b.n	80051d6 <__libc_init_array+0x1e>
 80051f0:	08006450 	.word	0x08006450
 80051f4:	08006450 	.word	0x08006450
 80051f8:	08006450 	.word	0x08006450
 80051fc:	08006454 	.word	0x08006454

08005200 <memset>:
 8005200:	4402      	add	r2, r0
 8005202:	4603      	mov	r3, r0
 8005204:	4293      	cmp	r3, r2
 8005206:	d100      	bne.n	800520a <memset+0xa>
 8005208:	4770      	bx	lr
 800520a:	f803 1b01 	strb.w	r1, [r3], #1
 800520e:	e7f9      	b.n	8005204 <memset+0x4>

08005210 <iprintf>:
 8005210:	b40f      	push	{r0, r1, r2, r3}
 8005212:	4b0a      	ldr	r3, [pc, #40]	; (800523c <iprintf+0x2c>)
 8005214:	b513      	push	{r0, r1, r4, lr}
 8005216:	681c      	ldr	r4, [r3, #0]
 8005218:	b124      	cbz	r4, 8005224 <iprintf+0x14>
 800521a:	69a3      	ldr	r3, [r4, #24]
 800521c:	b913      	cbnz	r3, 8005224 <iprintf+0x14>
 800521e:	4620      	mov	r0, r4
 8005220:	f000 fa5e 	bl	80056e0 <__sinit>
 8005224:	ab05      	add	r3, sp, #20
 8005226:	9a04      	ldr	r2, [sp, #16]
 8005228:	68a1      	ldr	r1, [r4, #8]
 800522a:	9301      	str	r3, [sp, #4]
 800522c:	4620      	mov	r0, r4
 800522e:	f000 fc67 	bl	8005b00 <_vfiprintf_r>
 8005232:	b002      	add	sp, #8
 8005234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005238:	b004      	add	sp, #16
 800523a:	4770      	bx	lr
 800523c:	20000010 	.word	0x20000010

08005240 <_puts_r>:
 8005240:	b570      	push	{r4, r5, r6, lr}
 8005242:	460e      	mov	r6, r1
 8005244:	4605      	mov	r5, r0
 8005246:	b118      	cbz	r0, 8005250 <_puts_r+0x10>
 8005248:	6983      	ldr	r3, [r0, #24]
 800524a:	b90b      	cbnz	r3, 8005250 <_puts_r+0x10>
 800524c:	f000 fa48 	bl	80056e0 <__sinit>
 8005250:	69ab      	ldr	r3, [r5, #24]
 8005252:	68ac      	ldr	r4, [r5, #8]
 8005254:	b913      	cbnz	r3, 800525c <_puts_r+0x1c>
 8005256:	4628      	mov	r0, r5
 8005258:	f000 fa42 	bl	80056e0 <__sinit>
 800525c:	4b2c      	ldr	r3, [pc, #176]	; (8005310 <_puts_r+0xd0>)
 800525e:	429c      	cmp	r4, r3
 8005260:	d120      	bne.n	80052a4 <_puts_r+0x64>
 8005262:	686c      	ldr	r4, [r5, #4]
 8005264:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005266:	07db      	lsls	r3, r3, #31
 8005268:	d405      	bmi.n	8005276 <_puts_r+0x36>
 800526a:	89a3      	ldrh	r3, [r4, #12]
 800526c:	0598      	lsls	r0, r3, #22
 800526e:	d402      	bmi.n	8005276 <_puts_r+0x36>
 8005270:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005272:	f000 fad3 	bl	800581c <__retarget_lock_acquire_recursive>
 8005276:	89a3      	ldrh	r3, [r4, #12]
 8005278:	0719      	lsls	r1, r3, #28
 800527a:	d51d      	bpl.n	80052b8 <_puts_r+0x78>
 800527c:	6923      	ldr	r3, [r4, #16]
 800527e:	b1db      	cbz	r3, 80052b8 <_puts_r+0x78>
 8005280:	3e01      	subs	r6, #1
 8005282:	68a3      	ldr	r3, [r4, #8]
 8005284:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005288:	3b01      	subs	r3, #1
 800528a:	60a3      	str	r3, [r4, #8]
 800528c:	bb39      	cbnz	r1, 80052de <_puts_r+0x9e>
 800528e:	2b00      	cmp	r3, #0
 8005290:	da38      	bge.n	8005304 <_puts_r+0xc4>
 8005292:	4622      	mov	r2, r4
 8005294:	210a      	movs	r1, #10
 8005296:	4628      	mov	r0, r5
 8005298:	f000 f848 	bl	800532c <__swbuf_r>
 800529c:	3001      	adds	r0, #1
 800529e:	d011      	beq.n	80052c4 <_puts_r+0x84>
 80052a0:	250a      	movs	r5, #10
 80052a2:	e011      	b.n	80052c8 <_puts_r+0x88>
 80052a4:	4b1b      	ldr	r3, [pc, #108]	; (8005314 <_puts_r+0xd4>)
 80052a6:	429c      	cmp	r4, r3
 80052a8:	d101      	bne.n	80052ae <_puts_r+0x6e>
 80052aa:	68ac      	ldr	r4, [r5, #8]
 80052ac:	e7da      	b.n	8005264 <_puts_r+0x24>
 80052ae:	4b1a      	ldr	r3, [pc, #104]	; (8005318 <_puts_r+0xd8>)
 80052b0:	429c      	cmp	r4, r3
 80052b2:	bf08      	it	eq
 80052b4:	68ec      	ldreq	r4, [r5, #12]
 80052b6:	e7d5      	b.n	8005264 <_puts_r+0x24>
 80052b8:	4621      	mov	r1, r4
 80052ba:	4628      	mov	r0, r5
 80052bc:	f000 f888 	bl	80053d0 <__swsetup_r>
 80052c0:	2800      	cmp	r0, #0
 80052c2:	d0dd      	beq.n	8005280 <_puts_r+0x40>
 80052c4:	f04f 35ff 	mov.w	r5, #4294967295
 80052c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80052ca:	07da      	lsls	r2, r3, #31
 80052cc:	d405      	bmi.n	80052da <_puts_r+0x9a>
 80052ce:	89a3      	ldrh	r3, [r4, #12]
 80052d0:	059b      	lsls	r3, r3, #22
 80052d2:	d402      	bmi.n	80052da <_puts_r+0x9a>
 80052d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80052d6:	f000 faa2 	bl	800581e <__retarget_lock_release_recursive>
 80052da:	4628      	mov	r0, r5
 80052dc:	bd70      	pop	{r4, r5, r6, pc}
 80052de:	2b00      	cmp	r3, #0
 80052e0:	da04      	bge.n	80052ec <_puts_r+0xac>
 80052e2:	69a2      	ldr	r2, [r4, #24]
 80052e4:	429a      	cmp	r2, r3
 80052e6:	dc06      	bgt.n	80052f6 <_puts_r+0xb6>
 80052e8:	290a      	cmp	r1, #10
 80052ea:	d004      	beq.n	80052f6 <_puts_r+0xb6>
 80052ec:	6823      	ldr	r3, [r4, #0]
 80052ee:	1c5a      	adds	r2, r3, #1
 80052f0:	6022      	str	r2, [r4, #0]
 80052f2:	7019      	strb	r1, [r3, #0]
 80052f4:	e7c5      	b.n	8005282 <_puts_r+0x42>
 80052f6:	4622      	mov	r2, r4
 80052f8:	4628      	mov	r0, r5
 80052fa:	f000 f817 	bl	800532c <__swbuf_r>
 80052fe:	3001      	adds	r0, #1
 8005300:	d1bf      	bne.n	8005282 <_puts_r+0x42>
 8005302:	e7df      	b.n	80052c4 <_puts_r+0x84>
 8005304:	6823      	ldr	r3, [r4, #0]
 8005306:	250a      	movs	r5, #10
 8005308:	1c5a      	adds	r2, r3, #1
 800530a:	6022      	str	r2, [r4, #0]
 800530c:	701d      	strb	r5, [r3, #0]
 800530e:	e7db      	b.n	80052c8 <_puts_r+0x88>
 8005310:	080063d4 	.word	0x080063d4
 8005314:	080063f4 	.word	0x080063f4
 8005318:	080063b4 	.word	0x080063b4

0800531c <puts>:
 800531c:	4b02      	ldr	r3, [pc, #8]	; (8005328 <puts+0xc>)
 800531e:	4601      	mov	r1, r0
 8005320:	6818      	ldr	r0, [r3, #0]
 8005322:	f7ff bf8d 	b.w	8005240 <_puts_r>
 8005326:	bf00      	nop
 8005328:	20000010 	.word	0x20000010

0800532c <__swbuf_r>:
 800532c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800532e:	460e      	mov	r6, r1
 8005330:	4614      	mov	r4, r2
 8005332:	4605      	mov	r5, r0
 8005334:	b118      	cbz	r0, 800533e <__swbuf_r+0x12>
 8005336:	6983      	ldr	r3, [r0, #24]
 8005338:	b90b      	cbnz	r3, 800533e <__swbuf_r+0x12>
 800533a:	f000 f9d1 	bl	80056e0 <__sinit>
 800533e:	4b21      	ldr	r3, [pc, #132]	; (80053c4 <__swbuf_r+0x98>)
 8005340:	429c      	cmp	r4, r3
 8005342:	d12b      	bne.n	800539c <__swbuf_r+0x70>
 8005344:	686c      	ldr	r4, [r5, #4]
 8005346:	69a3      	ldr	r3, [r4, #24]
 8005348:	60a3      	str	r3, [r4, #8]
 800534a:	89a3      	ldrh	r3, [r4, #12]
 800534c:	071a      	lsls	r2, r3, #28
 800534e:	d52f      	bpl.n	80053b0 <__swbuf_r+0x84>
 8005350:	6923      	ldr	r3, [r4, #16]
 8005352:	b36b      	cbz	r3, 80053b0 <__swbuf_r+0x84>
 8005354:	6923      	ldr	r3, [r4, #16]
 8005356:	6820      	ldr	r0, [r4, #0]
 8005358:	1ac0      	subs	r0, r0, r3
 800535a:	6963      	ldr	r3, [r4, #20]
 800535c:	b2f6      	uxtb	r6, r6
 800535e:	4283      	cmp	r3, r0
 8005360:	4637      	mov	r7, r6
 8005362:	dc04      	bgt.n	800536e <__swbuf_r+0x42>
 8005364:	4621      	mov	r1, r4
 8005366:	4628      	mov	r0, r5
 8005368:	f000 f926 	bl	80055b8 <_fflush_r>
 800536c:	bb30      	cbnz	r0, 80053bc <__swbuf_r+0x90>
 800536e:	68a3      	ldr	r3, [r4, #8]
 8005370:	3b01      	subs	r3, #1
 8005372:	60a3      	str	r3, [r4, #8]
 8005374:	6823      	ldr	r3, [r4, #0]
 8005376:	1c5a      	adds	r2, r3, #1
 8005378:	6022      	str	r2, [r4, #0]
 800537a:	701e      	strb	r6, [r3, #0]
 800537c:	6963      	ldr	r3, [r4, #20]
 800537e:	3001      	adds	r0, #1
 8005380:	4283      	cmp	r3, r0
 8005382:	d004      	beq.n	800538e <__swbuf_r+0x62>
 8005384:	89a3      	ldrh	r3, [r4, #12]
 8005386:	07db      	lsls	r3, r3, #31
 8005388:	d506      	bpl.n	8005398 <__swbuf_r+0x6c>
 800538a:	2e0a      	cmp	r6, #10
 800538c:	d104      	bne.n	8005398 <__swbuf_r+0x6c>
 800538e:	4621      	mov	r1, r4
 8005390:	4628      	mov	r0, r5
 8005392:	f000 f911 	bl	80055b8 <_fflush_r>
 8005396:	b988      	cbnz	r0, 80053bc <__swbuf_r+0x90>
 8005398:	4638      	mov	r0, r7
 800539a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800539c:	4b0a      	ldr	r3, [pc, #40]	; (80053c8 <__swbuf_r+0x9c>)
 800539e:	429c      	cmp	r4, r3
 80053a0:	d101      	bne.n	80053a6 <__swbuf_r+0x7a>
 80053a2:	68ac      	ldr	r4, [r5, #8]
 80053a4:	e7cf      	b.n	8005346 <__swbuf_r+0x1a>
 80053a6:	4b09      	ldr	r3, [pc, #36]	; (80053cc <__swbuf_r+0xa0>)
 80053a8:	429c      	cmp	r4, r3
 80053aa:	bf08      	it	eq
 80053ac:	68ec      	ldreq	r4, [r5, #12]
 80053ae:	e7ca      	b.n	8005346 <__swbuf_r+0x1a>
 80053b0:	4621      	mov	r1, r4
 80053b2:	4628      	mov	r0, r5
 80053b4:	f000 f80c 	bl	80053d0 <__swsetup_r>
 80053b8:	2800      	cmp	r0, #0
 80053ba:	d0cb      	beq.n	8005354 <__swbuf_r+0x28>
 80053bc:	f04f 37ff 	mov.w	r7, #4294967295
 80053c0:	e7ea      	b.n	8005398 <__swbuf_r+0x6c>
 80053c2:	bf00      	nop
 80053c4:	080063d4 	.word	0x080063d4
 80053c8:	080063f4 	.word	0x080063f4
 80053cc:	080063b4 	.word	0x080063b4

080053d0 <__swsetup_r>:
 80053d0:	4b32      	ldr	r3, [pc, #200]	; (800549c <__swsetup_r+0xcc>)
 80053d2:	b570      	push	{r4, r5, r6, lr}
 80053d4:	681d      	ldr	r5, [r3, #0]
 80053d6:	4606      	mov	r6, r0
 80053d8:	460c      	mov	r4, r1
 80053da:	b125      	cbz	r5, 80053e6 <__swsetup_r+0x16>
 80053dc:	69ab      	ldr	r3, [r5, #24]
 80053de:	b913      	cbnz	r3, 80053e6 <__swsetup_r+0x16>
 80053e0:	4628      	mov	r0, r5
 80053e2:	f000 f97d 	bl	80056e0 <__sinit>
 80053e6:	4b2e      	ldr	r3, [pc, #184]	; (80054a0 <__swsetup_r+0xd0>)
 80053e8:	429c      	cmp	r4, r3
 80053ea:	d10f      	bne.n	800540c <__swsetup_r+0x3c>
 80053ec:	686c      	ldr	r4, [r5, #4]
 80053ee:	89a3      	ldrh	r3, [r4, #12]
 80053f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80053f4:	0719      	lsls	r1, r3, #28
 80053f6:	d42c      	bmi.n	8005452 <__swsetup_r+0x82>
 80053f8:	06dd      	lsls	r5, r3, #27
 80053fa:	d411      	bmi.n	8005420 <__swsetup_r+0x50>
 80053fc:	2309      	movs	r3, #9
 80053fe:	6033      	str	r3, [r6, #0]
 8005400:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005404:	81a3      	strh	r3, [r4, #12]
 8005406:	f04f 30ff 	mov.w	r0, #4294967295
 800540a:	e03e      	b.n	800548a <__swsetup_r+0xba>
 800540c:	4b25      	ldr	r3, [pc, #148]	; (80054a4 <__swsetup_r+0xd4>)
 800540e:	429c      	cmp	r4, r3
 8005410:	d101      	bne.n	8005416 <__swsetup_r+0x46>
 8005412:	68ac      	ldr	r4, [r5, #8]
 8005414:	e7eb      	b.n	80053ee <__swsetup_r+0x1e>
 8005416:	4b24      	ldr	r3, [pc, #144]	; (80054a8 <__swsetup_r+0xd8>)
 8005418:	429c      	cmp	r4, r3
 800541a:	bf08      	it	eq
 800541c:	68ec      	ldreq	r4, [r5, #12]
 800541e:	e7e6      	b.n	80053ee <__swsetup_r+0x1e>
 8005420:	0758      	lsls	r0, r3, #29
 8005422:	d512      	bpl.n	800544a <__swsetup_r+0x7a>
 8005424:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005426:	b141      	cbz	r1, 800543a <__swsetup_r+0x6a>
 8005428:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800542c:	4299      	cmp	r1, r3
 800542e:	d002      	beq.n	8005436 <__swsetup_r+0x66>
 8005430:	4630      	mov	r0, r6
 8005432:	f000 fa5b 	bl	80058ec <_free_r>
 8005436:	2300      	movs	r3, #0
 8005438:	6363      	str	r3, [r4, #52]	; 0x34
 800543a:	89a3      	ldrh	r3, [r4, #12]
 800543c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005440:	81a3      	strh	r3, [r4, #12]
 8005442:	2300      	movs	r3, #0
 8005444:	6063      	str	r3, [r4, #4]
 8005446:	6923      	ldr	r3, [r4, #16]
 8005448:	6023      	str	r3, [r4, #0]
 800544a:	89a3      	ldrh	r3, [r4, #12]
 800544c:	f043 0308 	orr.w	r3, r3, #8
 8005450:	81a3      	strh	r3, [r4, #12]
 8005452:	6923      	ldr	r3, [r4, #16]
 8005454:	b94b      	cbnz	r3, 800546a <__swsetup_r+0x9a>
 8005456:	89a3      	ldrh	r3, [r4, #12]
 8005458:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800545c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005460:	d003      	beq.n	800546a <__swsetup_r+0x9a>
 8005462:	4621      	mov	r1, r4
 8005464:	4630      	mov	r0, r6
 8005466:	f000 fa01 	bl	800586c <__smakebuf_r>
 800546a:	89a0      	ldrh	r0, [r4, #12]
 800546c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005470:	f010 0301 	ands.w	r3, r0, #1
 8005474:	d00a      	beq.n	800548c <__swsetup_r+0xbc>
 8005476:	2300      	movs	r3, #0
 8005478:	60a3      	str	r3, [r4, #8]
 800547a:	6963      	ldr	r3, [r4, #20]
 800547c:	425b      	negs	r3, r3
 800547e:	61a3      	str	r3, [r4, #24]
 8005480:	6923      	ldr	r3, [r4, #16]
 8005482:	b943      	cbnz	r3, 8005496 <__swsetup_r+0xc6>
 8005484:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005488:	d1ba      	bne.n	8005400 <__swsetup_r+0x30>
 800548a:	bd70      	pop	{r4, r5, r6, pc}
 800548c:	0781      	lsls	r1, r0, #30
 800548e:	bf58      	it	pl
 8005490:	6963      	ldrpl	r3, [r4, #20]
 8005492:	60a3      	str	r3, [r4, #8]
 8005494:	e7f4      	b.n	8005480 <__swsetup_r+0xb0>
 8005496:	2000      	movs	r0, #0
 8005498:	e7f7      	b.n	800548a <__swsetup_r+0xba>
 800549a:	bf00      	nop
 800549c:	20000010 	.word	0x20000010
 80054a0:	080063d4 	.word	0x080063d4
 80054a4:	080063f4 	.word	0x080063f4
 80054a8:	080063b4 	.word	0x080063b4

080054ac <__sflush_r>:
 80054ac:	898a      	ldrh	r2, [r1, #12]
 80054ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054b2:	4605      	mov	r5, r0
 80054b4:	0710      	lsls	r0, r2, #28
 80054b6:	460c      	mov	r4, r1
 80054b8:	d458      	bmi.n	800556c <__sflush_r+0xc0>
 80054ba:	684b      	ldr	r3, [r1, #4]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	dc05      	bgt.n	80054cc <__sflush_r+0x20>
 80054c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	dc02      	bgt.n	80054cc <__sflush_r+0x20>
 80054c6:	2000      	movs	r0, #0
 80054c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80054ce:	2e00      	cmp	r6, #0
 80054d0:	d0f9      	beq.n	80054c6 <__sflush_r+0x1a>
 80054d2:	2300      	movs	r3, #0
 80054d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80054d8:	682f      	ldr	r7, [r5, #0]
 80054da:	602b      	str	r3, [r5, #0]
 80054dc:	d032      	beq.n	8005544 <__sflush_r+0x98>
 80054de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80054e0:	89a3      	ldrh	r3, [r4, #12]
 80054e2:	075a      	lsls	r2, r3, #29
 80054e4:	d505      	bpl.n	80054f2 <__sflush_r+0x46>
 80054e6:	6863      	ldr	r3, [r4, #4]
 80054e8:	1ac0      	subs	r0, r0, r3
 80054ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80054ec:	b10b      	cbz	r3, 80054f2 <__sflush_r+0x46>
 80054ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80054f0:	1ac0      	subs	r0, r0, r3
 80054f2:	2300      	movs	r3, #0
 80054f4:	4602      	mov	r2, r0
 80054f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80054f8:	6a21      	ldr	r1, [r4, #32]
 80054fa:	4628      	mov	r0, r5
 80054fc:	47b0      	blx	r6
 80054fe:	1c43      	adds	r3, r0, #1
 8005500:	89a3      	ldrh	r3, [r4, #12]
 8005502:	d106      	bne.n	8005512 <__sflush_r+0x66>
 8005504:	6829      	ldr	r1, [r5, #0]
 8005506:	291d      	cmp	r1, #29
 8005508:	d82c      	bhi.n	8005564 <__sflush_r+0xb8>
 800550a:	4a2a      	ldr	r2, [pc, #168]	; (80055b4 <__sflush_r+0x108>)
 800550c:	40ca      	lsrs	r2, r1
 800550e:	07d6      	lsls	r6, r2, #31
 8005510:	d528      	bpl.n	8005564 <__sflush_r+0xb8>
 8005512:	2200      	movs	r2, #0
 8005514:	6062      	str	r2, [r4, #4]
 8005516:	04d9      	lsls	r1, r3, #19
 8005518:	6922      	ldr	r2, [r4, #16]
 800551a:	6022      	str	r2, [r4, #0]
 800551c:	d504      	bpl.n	8005528 <__sflush_r+0x7c>
 800551e:	1c42      	adds	r2, r0, #1
 8005520:	d101      	bne.n	8005526 <__sflush_r+0x7a>
 8005522:	682b      	ldr	r3, [r5, #0]
 8005524:	b903      	cbnz	r3, 8005528 <__sflush_r+0x7c>
 8005526:	6560      	str	r0, [r4, #84]	; 0x54
 8005528:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800552a:	602f      	str	r7, [r5, #0]
 800552c:	2900      	cmp	r1, #0
 800552e:	d0ca      	beq.n	80054c6 <__sflush_r+0x1a>
 8005530:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005534:	4299      	cmp	r1, r3
 8005536:	d002      	beq.n	800553e <__sflush_r+0x92>
 8005538:	4628      	mov	r0, r5
 800553a:	f000 f9d7 	bl	80058ec <_free_r>
 800553e:	2000      	movs	r0, #0
 8005540:	6360      	str	r0, [r4, #52]	; 0x34
 8005542:	e7c1      	b.n	80054c8 <__sflush_r+0x1c>
 8005544:	6a21      	ldr	r1, [r4, #32]
 8005546:	2301      	movs	r3, #1
 8005548:	4628      	mov	r0, r5
 800554a:	47b0      	blx	r6
 800554c:	1c41      	adds	r1, r0, #1
 800554e:	d1c7      	bne.n	80054e0 <__sflush_r+0x34>
 8005550:	682b      	ldr	r3, [r5, #0]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d0c4      	beq.n	80054e0 <__sflush_r+0x34>
 8005556:	2b1d      	cmp	r3, #29
 8005558:	d001      	beq.n	800555e <__sflush_r+0xb2>
 800555a:	2b16      	cmp	r3, #22
 800555c:	d101      	bne.n	8005562 <__sflush_r+0xb6>
 800555e:	602f      	str	r7, [r5, #0]
 8005560:	e7b1      	b.n	80054c6 <__sflush_r+0x1a>
 8005562:	89a3      	ldrh	r3, [r4, #12]
 8005564:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005568:	81a3      	strh	r3, [r4, #12]
 800556a:	e7ad      	b.n	80054c8 <__sflush_r+0x1c>
 800556c:	690f      	ldr	r7, [r1, #16]
 800556e:	2f00      	cmp	r7, #0
 8005570:	d0a9      	beq.n	80054c6 <__sflush_r+0x1a>
 8005572:	0793      	lsls	r3, r2, #30
 8005574:	680e      	ldr	r6, [r1, #0]
 8005576:	bf08      	it	eq
 8005578:	694b      	ldreq	r3, [r1, #20]
 800557a:	600f      	str	r7, [r1, #0]
 800557c:	bf18      	it	ne
 800557e:	2300      	movne	r3, #0
 8005580:	eba6 0807 	sub.w	r8, r6, r7
 8005584:	608b      	str	r3, [r1, #8]
 8005586:	f1b8 0f00 	cmp.w	r8, #0
 800558a:	dd9c      	ble.n	80054c6 <__sflush_r+0x1a>
 800558c:	6a21      	ldr	r1, [r4, #32]
 800558e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005590:	4643      	mov	r3, r8
 8005592:	463a      	mov	r2, r7
 8005594:	4628      	mov	r0, r5
 8005596:	47b0      	blx	r6
 8005598:	2800      	cmp	r0, #0
 800559a:	dc06      	bgt.n	80055aa <__sflush_r+0xfe>
 800559c:	89a3      	ldrh	r3, [r4, #12]
 800559e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055a2:	81a3      	strh	r3, [r4, #12]
 80055a4:	f04f 30ff 	mov.w	r0, #4294967295
 80055a8:	e78e      	b.n	80054c8 <__sflush_r+0x1c>
 80055aa:	4407      	add	r7, r0
 80055ac:	eba8 0800 	sub.w	r8, r8, r0
 80055b0:	e7e9      	b.n	8005586 <__sflush_r+0xda>
 80055b2:	bf00      	nop
 80055b4:	20400001 	.word	0x20400001

080055b8 <_fflush_r>:
 80055b8:	b538      	push	{r3, r4, r5, lr}
 80055ba:	690b      	ldr	r3, [r1, #16]
 80055bc:	4605      	mov	r5, r0
 80055be:	460c      	mov	r4, r1
 80055c0:	b913      	cbnz	r3, 80055c8 <_fflush_r+0x10>
 80055c2:	2500      	movs	r5, #0
 80055c4:	4628      	mov	r0, r5
 80055c6:	bd38      	pop	{r3, r4, r5, pc}
 80055c8:	b118      	cbz	r0, 80055d2 <_fflush_r+0x1a>
 80055ca:	6983      	ldr	r3, [r0, #24]
 80055cc:	b90b      	cbnz	r3, 80055d2 <_fflush_r+0x1a>
 80055ce:	f000 f887 	bl	80056e0 <__sinit>
 80055d2:	4b14      	ldr	r3, [pc, #80]	; (8005624 <_fflush_r+0x6c>)
 80055d4:	429c      	cmp	r4, r3
 80055d6:	d11b      	bne.n	8005610 <_fflush_r+0x58>
 80055d8:	686c      	ldr	r4, [r5, #4]
 80055da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d0ef      	beq.n	80055c2 <_fflush_r+0xa>
 80055e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80055e4:	07d0      	lsls	r0, r2, #31
 80055e6:	d404      	bmi.n	80055f2 <_fflush_r+0x3a>
 80055e8:	0599      	lsls	r1, r3, #22
 80055ea:	d402      	bmi.n	80055f2 <_fflush_r+0x3a>
 80055ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80055ee:	f000 f915 	bl	800581c <__retarget_lock_acquire_recursive>
 80055f2:	4628      	mov	r0, r5
 80055f4:	4621      	mov	r1, r4
 80055f6:	f7ff ff59 	bl	80054ac <__sflush_r>
 80055fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80055fc:	07da      	lsls	r2, r3, #31
 80055fe:	4605      	mov	r5, r0
 8005600:	d4e0      	bmi.n	80055c4 <_fflush_r+0xc>
 8005602:	89a3      	ldrh	r3, [r4, #12]
 8005604:	059b      	lsls	r3, r3, #22
 8005606:	d4dd      	bmi.n	80055c4 <_fflush_r+0xc>
 8005608:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800560a:	f000 f908 	bl	800581e <__retarget_lock_release_recursive>
 800560e:	e7d9      	b.n	80055c4 <_fflush_r+0xc>
 8005610:	4b05      	ldr	r3, [pc, #20]	; (8005628 <_fflush_r+0x70>)
 8005612:	429c      	cmp	r4, r3
 8005614:	d101      	bne.n	800561a <_fflush_r+0x62>
 8005616:	68ac      	ldr	r4, [r5, #8]
 8005618:	e7df      	b.n	80055da <_fflush_r+0x22>
 800561a:	4b04      	ldr	r3, [pc, #16]	; (800562c <_fflush_r+0x74>)
 800561c:	429c      	cmp	r4, r3
 800561e:	bf08      	it	eq
 8005620:	68ec      	ldreq	r4, [r5, #12]
 8005622:	e7da      	b.n	80055da <_fflush_r+0x22>
 8005624:	080063d4 	.word	0x080063d4
 8005628:	080063f4 	.word	0x080063f4
 800562c:	080063b4 	.word	0x080063b4

08005630 <std>:
 8005630:	2300      	movs	r3, #0
 8005632:	b510      	push	{r4, lr}
 8005634:	4604      	mov	r4, r0
 8005636:	e9c0 3300 	strd	r3, r3, [r0]
 800563a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800563e:	6083      	str	r3, [r0, #8]
 8005640:	8181      	strh	r1, [r0, #12]
 8005642:	6643      	str	r3, [r0, #100]	; 0x64
 8005644:	81c2      	strh	r2, [r0, #14]
 8005646:	6183      	str	r3, [r0, #24]
 8005648:	4619      	mov	r1, r3
 800564a:	2208      	movs	r2, #8
 800564c:	305c      	adds	r0, #92	; 0x5c
 800564e:	f7ff fdd7 	bl	8005200 <memset>
 8005652:	4b05      	ldr	r3, [pc, #20]	; (8005668 <std+0x38>)
 8005654:	6263      	str	r3, [r4, #36]	; 0x24
 8005656:	4b05      	ldr	r3, [pc, #20]	; (800566c <std+0x3c>)
 8005658:	62a3      	str	r3, [r4, #40]	; 0x28
 800565a:	4b05      	ldr	r3, [pc, #20]	; (8005670 <std+0x40>)
 800565c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800565e:	4b05      	ldr	r3, [pc, #20]	; (8005674 <std+0x44>)
 8005660:	6224      	str	r4, [r4, #32]
 8005662:	6323      	str	r3, [r4, #48]	; 0x30
 8005664:	bd10      	pop	{r4, pc}
 8005666:	bf00      	nop
 8005668:	080060a9 	.word	0x080060a9
 800566c:	080060cb 	.word	0x080060cb
 8005670:	08006103 	.word	0x08006103
 8005674:	08006127 	.word	0x08006127

08005678 <_cleanup_r>:
 8005678:	4901      	ldr	r1, [pc, #4]	; (8005680 <_cleanup_r+0x8>)
 800567a:	f000 b8af 	b.w	80057dc <_fwalk_reent>
 800567e:	bf00      	nop
 8005680:	080055b9 	.word	0x080055b9

08005684 <__sfmoreglue>:
 8005684:	b570      	push	{r4, r5, r6, lr}
 8005686:	2268      	movs	r2, #104	; 0x68
 8005688:	1e4d      	subs	r5, r1, #1
 800568a:	4355      	muls	r5, r2
 800568c:	460e      	mov	r6, r1
 800568e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005692:	f000 f997 	bl	80059c4 <_malloc_r>
 8005696:	4604      	mov	r4, r0
 8005698:	b140      	cbz	r0, 80056ac <__sfmoreglue+0x28>
 800569a:	2100      	movs	r1, #0
 800569c:	e9c0 1600 	strd	r1, r6, [r0]
 80056a0:	300c      	adds	r0, #12
 80056a2:	60a0      	str	r0, [r4, #8]
 80056a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80056a8:	f7ff fdaa 	bl	8005200 <memset>
 80056ac:	4620      	mov	r0, r4
 80056ae:	bd70      	pop	{r4, r5, r6, pc}

080056b0 <__sfp_lock_acquire>:
 80056b0:	4801      	ldr	r0, [pc, #4]	; (80056b8 <__sfp_lock_acquire+0x8>)
 80056b2:	f000 b8b3 	b.w	800581c <__retarget_lock_acquire_recursive>
 80056b6:	bf00      	nop
 80056b8:	20000ecd 	.word	0x20000ecd

080056bc <__sfp_lock_release>:
 80056bc:	4801      	ldr	r0, [pc, #4]	; (80056c4 <__sfp_lock_release+0x8>)
 80056be:	f000 b8ae 	b.w	800581e <__retarget_lock_release_recursive>
 80056c2:	bf00      	nop
 80056c4:	20000ecd 	.word	0x20000ecd

080056c8 <__sinit_lock_acquire>:
 80056c8:	4801      	ldr	r0, [pc, #4]	; (80056d0 <__sinit_lock_acquire+0x8>)
 80056ca:	f000 b8a7 	b.w	800581c <__retarget_lock_acquire_recursive>
 80056ce:	bf00      	nop
 80056d0:	20000ece 	.word	0x20000ece

080056d4 <__sinit_lock_release>:
 80056d4:	4801      	ldr	r0, [pc, #4]	; (80056dc <__sinit_lock_release+0x8>)
 80056d6:	f000 b8a2 	b.w	800581e <__retarget_lock_release_recursive>
 80056da:	bf00      	nop
 80056dc:	20000ece 	.word	0x20000ece

080056e0 <__sinit>:
 80056e0:	b510      	push	{r4, lr}
 80056e2:	4604      	mov	r4, r0
 80056e4:	f7ff fff0 	bl	80056c8 <__sinit_lock_acquire>
 80056e8:	69a3      	ldr	r3, [r4, #24]
 80056ea:	b11b      	cbz	r3, 80056f4 <__sinit+0x14>
 80056ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056f0:	f7ff bff0 	b.w	80056d4 <__sinit_lock_release>
 80056f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80056f8:	6523      	str	r3, [r4, #80]	; 0x50
 80056fa:	4b13      	ldr	r3, [pc, #76]	; (8005748 <__sinit+0x68>)
 80056fc:	4a13      	ldr	r2, [pc, #76]	; (800574c <__sinit+0x6c>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	62a2      	str	r2, [r4, #40]	; 0x28
 8005702:	42a3      	cmp	r3, r4
 8005704:	bf04      	itt	eq
 8005706:	2301      	moveq	r3, #1
 8005708:	61a3      	streq	r3, [r4, #24]
 800570a:	4620      	mov	r0, r4
 800570c:	f000 f820 	bl	8005750 <__sfp>
 8005710:	6060      	str	r0, [r4, #4]
 8005712:	4620      	mov	r0, r4
 8005714:	f000 f81c 	bl	8005750 <__sfp>
 8005718:	60a0      	str	r0, [r4, #8]
 800571a:	4620      	mov	r0, r4
 800571c:	f000 f818 	bl	8005750 <__sfp>
 8005720:	2200      	movs	r2, #0
 8005722:	60e0      	str	r0, [r4, #12]
 8005724:	2104      	movs	r1, #4
 8005726:	6860      	ldr	r0, [r4, #4]
 8005728:	f7ff ff82 	bl	8005630 <std>
 800572c:	68a0      	ldr	r0, [r4, #8]
 800572e:	2201      	movs	r2, #1
 8005730:	2109      	movs	r1, #9
 8005732:	f7ff ff7d 	bl	8005630 <std>
 8005736:	68e0      	ldr	r0, [r4, #12]
 8005738:	2202      	movs	r2, #2
 800573a:	2112      	movs	r1, #18
 800573c:	f7ff ff78 	bl	8005630 <std>
 8005740:	2301      	movs	r3, #1
 8005742:	61a3      	str	r3, [r4, #24]
 8005744:	e7d2      	b.n	80056ec <__sinit+0xc>
 8005746:	bf00      	nop
 8005748:	080063b0 	.word	0x080063b0
 800574c:	08005679 	.word	0x08005679

08005750 <__sfp>:
 8005750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005752:	4607      	mov	r7, r0
 8005754:	f7ff ffac 	bl	80056b0 <__sfp_lock_acquire>
 8005758:	4b1e      	ldr	r3, [pc, #120]	; (80057d4 <__sfp+0x84>)
 800575a:	681e      	ldr	r6, [r3, #0]
 800575c:	69b3      	ldr	r3, [r6, #24]
 800575e:	b913      	cbnz	r3, 8005766 <__sfp+0x16>
 8005760:	4630      	mov	r0, r6
 8005762:	f7ff ffbd 	bl	80056e0 <__sinit>
 8005766:	3648      	adds	r6, #72	; 0x48
 8005768:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800576c:	3b01      	subs	r3, #1
 800576e:	d503      	bpl.n	8005778 <__sfp+0x28>
 8005770:	6833      	ldr	r3, [r6, #0]
 8005772:	b30b      	cbz	r3, 80057b8 <__sfp+0x68>
 8005774:	6836      	ldr	r6, [r6, #0]
 8005776:	e7f7      	b.n	8005768 <__sfp+0x18>
 8005778:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800577c:	b9d5      	cbnz	r5, 80057b4 <__sfp+0x64>
 800577e:	4b16      	ldr	r3, [pc, #88]	; (80057d8 <__sfp+0x88>)
 8005780:	60e3      	str	r3, [r4, #12]
 8005782:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005786:	6665      	str	r5, [r4, #100]	; 0x64
 8005788:	f000 f847 	bl	800581a <__retarget_lock_init_recursive>
 800578c:	f7ff ff96 	bl	80056bc <__sfp_lock_release>
 8005790:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005794:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005798:	6025      	str	r5, [r4, #0]
 800579a:	61a5      	str	r5, [r4, #24]
 800579c:	2208      	movs	r2, #8
 800579e:	4629      	mov	r1, r5
 80057a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80057a4:	f7ff fd2c 	bl	8005200 <memset>
 80057a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80057ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80057b0:	4620      	mov	r0, r4
 80057b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057b4:	3468      	adds	r4, #104	; 0x68
 80057b6:	e7d9      	b.n	800576c <__sfp+0x1c>
 80057b8:	2104      	movs	r1, #4
 80057ba:	4638      	mov	r0, r7
 80057bc:	f7ff ff62 	bl	8005684 <__sfmoreglue>
 80057c0:	4604      	mov	r4, r0
 80057c2:	6030      	str	r0, [r6, #0]
 80057c4:	2800      	cmp	r0, #0
 80057c6:	d1d5      	bne.n	8005774 <__sfp+0x24>
 80057c8:	f7ff ff78 	bl	80056bc <__sfp_lock_release>
 80057cc:	230c      	movs	r3, #12
 80057ce:	603b      	str	r3, [r7, #0]
 80057d0:	e7ee      	b.n	80057b0 <__sfp+0x60>
 80057d2:	bf00      	nop
 80057d4:	080063b0 	.word	0x080063b0
 80057d8:	ffff0001 	.word	0xffff0001

080057dc <_fwalk_reent>:
 80057dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80057e0:	4606      	mov	r6, r0
 80057e2:	4688      	mov	r8, r1
 80057e4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80057e8:	2700      	movs	r7, #0
 80057ea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80057ee:	f1b9 0901 	subs.w	r9, r9, #1
 80057f2:	d505      	bpl.n	8005800 <_fwalk_reent+0x24>
 80057f4:	6824      	ldr	r4, [r4, #0]
 80057f6:	2c00      	cmp	r4, #0
 80057f8:	d1f7      	bne.n	80057ea <_fwalk_reent+0xe>
 80057fa:	4638      	mov	r0, r7
 80057fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005800:	89ab      	ldrh	r3, [r5, #12]
 8005802:	2b01      	cmp	r3, #1
 8005804:	d907      	bls.n	8005816 <_fwalk_reent+0x3a>
 8005806:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800580a:	3301      	adds	r3, #1
 800580c:	d003      	beq.n	8005816 <_fwalk_reent+0x3a>
 800580e:	4629      	mov	r1, r5
 8005810:	4630      	mov	r0, r6
 8005812:	47c0      	blx	r8
 8005814:	4307      	orrs	r7, r0
 8005816:	3568      	adds	r5, #104	; 0x68
 8005818:	e7e9      	b.n	80057ee <_fwalk_reent+0x12>

0800581a <__retarget_lock_init_recursive>:
 800581a:	4770      	bx	lr

0800581c <__retarget_lock_acquire_recursive>:
 800581c:	4770      	bx	lr

0800581e <__retarget_lock_release_recursive>:
 800581e:	4770      	bx	lr

08005820 <__swhatbuf_r>:
 8005820:	b570      	push	{r4, r5, r6, lr}
 8005822:	460e      	mov	r6, r1
 8005824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005828:	2900      	cmp	r1, #0
 800582a:	b096      	sub	sp, #88	; 0x58
 800582c:	4614      	mov	r4, r2
 800582e:	461d      	mov	r5, r3
 8005830:	da08      	bge.n	8005844 <__swhatbuf_r+0x24>
 8005832:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005836:	2200      	movs	r2, #0
 8005838:	602a      	str	r2, [r5, #0]
 800583a:	061a      	lsls	r2, r3, #24
 800583c:	d410      	bmi.n	8005860 <__swhatbuf_r+0x40>
 800583e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005842:	e00e      	b.n	8005862 <__swhatbuf_r+0x42>
 8005844:	466a      	mov	r2, sp
 8005846:	f000 fc95 	bl	8006174 <_fstat_r>
 800584a:	2800      	cmp	r0, #0
 800584c:	dbf1      	blt.n	8005832 <__swhatbuf_r+0x12>
 800584e:	9a01      	ldr	r2, [sp, #4]
 8005850:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005854:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005858:	425a      	negs	r2, r3
 800585a:	415a      	adcs	r2, r3
 800585c:	602a      	str	r2, [r5, #0]
 800585e:	e7ee      	b.n	800583e <__swhatbuf_r+0x1e>
 8005860:	2340      	movs	r3, #64	; 0x40
 8005862:	2000      	movs	r0, #0
 8005864:	6023      	str	r3, [r4, #0]
 8005866:	b016      	add	sp, #88	; 0x58
 8005868:	bd70      	pop	{r4, r5, r6, pc}
	...

0800586c <__smakebuf_r>:
 800586c:	898b      	ldrh	r3, [r1, #12]
 800586e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005870:	079d      	lsls	r5, r3, #30
 8005872:	4606      	mov	r6, r0
 8005874:	460c      	mov	r4, r1
 8005876:	d507      	bpl.n	8005888 <__smakebuf_r+0x1c>
 8005878:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800587c:	6023      	str	r3, [r4, #0]
 800587e:	6123      	str	r3, [r4, #16]
 8005880:	2301      	movs	r3, #1
 8005882:	6163      	str	r3, [r4, #20]
 8005884:	b002      	add	sp, #8
 8005886:	bd70      	pop	{r4, r5, r6, pc}
 8005888:	ab01      	add	r3, sp, #4
 800588a:	466a      	mov	r2, sp
 800588c:	f7ff ffc8 	bl	8005820 <__swhatbuf_r>
 8005890:	9900      	ldr	r1, [sp, #0]
 8005892:	4605      	mov	r5, r0
 8005894:	4630      	mov	r0, r6
 8005896:	f000 f895 	bl	80059c4 <_malloc_r>
 800589a:	b948      	cbnz	r0, 80058b0 <__smakebuf_r+0x44>
 800589c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058a0:	059a      	lsls	r2, r3, #22
 80058a2:	d4ef      	bmi.n	8005884 <__smakebuf_r+0x18>
 80058a4:	f023 0303 	bic.w	r3, r3, #3
 80058a8:	f043 0302 	orr.w	r3, r3, #2
 80058ac:	81a3      	strh	r3, [r4, #12]
 80058ae:	e7e3      	b.n	8005878 <__smakebuf_r+0xc>
 80058b0:	4b0d      	ldr	r3, [pc, #52]	; (80058e8 <__smakebuf_r+0x7c>)
 80058b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80058b4:	89a3      	ldrh	r3, [r4, #12]
 80058b6:	6020      	str	r0, [r4, #0]
 80058b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058bc:	81a3      	strh	r3, [r4, #12]
 80058be:	9b00      	ldr	r3, [sp, #0]
 80058c0:	6163      	str	r3, [r4, #20]
 80058c2:	9b01      	ldr	r3, [sp, #4]
 80058c4:	6120      	str	r0, [r4, #16]
 80058c6:	b15b      	cbz	r3, 80058e0 <__smakebuf_r+0x74>
 80058c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80058cc:	4630      	mov	r0, r6
 80058ce:	f000 fc63 	bl	8006198 <_isatty_r>
 80058d2:	b128      	cbz	r0, 80058e0 <__smakebuf_r+0x74>
 80058d4:	89a3      	ldrh	r3, [r4, #12]
 80058d6:	f023 0303 	bic.w	r3, r3, #3
 80058da:	f043 0301 	orr.w	r3, r3, #1
 80058de:	81a3      	strh	r3, [r4, #12]
 80058e0:	89a0      	ldrh	r0, [r4, #12]
 80058e2:	4305      	orrs	r5, r0
 80058e4:	81a5      	strh	r5, [r4, #12]
 80058e6:	e7cd      	b.n	8005884 <__smakebuf_r+0x18>
 80058e8:	08005679 	.word	0x08005679

080058ec <_free_r>:
 80058ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80058ee:	2900      	cmp	r1, #0
 80058f0:	d044      	beq.n	800597c <_free_r+0x90>
 80058f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058f6:	9001      	str	r0, [sp, #4]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	f1a1 0404 	sub.w	r4, r1, #4
 80058fe:	bfb8      	it	lt
 8005900:	18e4      	addlt	r4, r4, r3
 8005902:	f000 fc6b 	bl	80061dc <__malloc_lock>
 8005906:	4a1e      	ldr	r2, [pc, #120]	; (8005980 <_free_r+0x94>)
 8005908:	9801      	ldr	r0, [sp, #4]
 800590a:	6813      	ldr	r3, [r2, #0]
 800590c:	b933      	cbnz	r3, 800591c <_free_r+0x30>
 800590e:	6063      	str	r3, [r4, #4]
 8005910:	6014      	str	r4, [r2, #0]
 8005912:	b003      	add	sp, #12
 8005914:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005918:	f000 bc66 	b.w	80061e8 <__malloc_unlock>
 800591c:	42a3      	cmp	r3, r4
 800591e:	d908      	bls.n	8005932 <_free_r+0x46>
 8005920:	6825      	ldr	r5, [r4, #0]
 8005922:	1961      	adds	r1, r4, r5
 8005924:	428b      	cmp	r3, r1
 8005926:	bf01      	itttt	eq
 8005928:	6819      	ldreq	r1, [r3, #0]
 800592a:	685b      	ldreq	r3, [r3, #4]
 800592c:	1949      	addeq	r1, r1, r5
 800592e:	6021      	streq	r1, [r4, #0]
 8005930:	e7ed      	b.n	800590e <_free_r+0x22>
 8005932:	461a      	mov	r2, r3
 8005934:	685b      	ldr	r3, [r3, #4]
 8005936:	b10b      	cbz	r3, 800593c <_free_r+0x50>
 8005938:	42a3      	cmp	r3, r4
 800593a:	d9fa      	bls.n	8005932 <_free_r+0x46>
 800593c:	6811      	ldr	r1, [r2, #0]
 800593e:	1855      	adds	r5, r2, r1
 8005940:	42a5      	cmp	r5, r4
 8005942:	d10b      	bne.n	800595c <_free_r+0x70>
 8005944:	6824      	ldr	r4, [r4, #0]
 8005946:	4421      	add	r1, r4
 8005948:	1854      	adds	r4, r2, r1
 800594a:	42a3      	cmp	r3, r4
 800594c:	6011      	str	r1, [r2, #0]
 800594e:	d1e0      	bne.n	8005912 <_free_r+0x26>
 8005950:	681c      	ldr	r4, [r3, #0]
 8005952:	685b      	ldr	r3, [r3, #4]
 8005954:	6053      	str	r3, [r2, #4]
 8005956:	4421      	add	r1, r4
 8005958:	6011      	str	r1, [r2, #0]
 800595a:	e7da      	b.n	8005912 <_free_r+0x26>
 800595c:	d902      	bls.n	8005964 <_free_r+0x78>
 800595e:	230c      	movs	r3, #12
 8005960:	6003      	str	r3, [r0, #0]
 8005962:	e7d6      	b.n	8005912 <_free_r+0x26>
 8005964:	6825      	ldr	r5, [r4, #0]
 8005966:	1961      	adds	r1, r4, r5
 8005968:	428b      	cmp	r3, r1
 800596a:	bf04      	itt	eq
 800596c:	6819      	ldreq	r1, [r3, #0]
 800596e:	685b      	ldreq	r3, [r3, #4]
 8005970:	6063      	str	r3, [r4, #4]
 8005972:	bf04      	itt	eq
 8005974:	1949      	addeq	r1, r1, r5
 8005976:	6021      	streq	r1, [r4, #0]
 8005978:	6054      	str	r4, [r2, #4]
 800597a:	e7ca      	b.n	8005912 <_free_r+0x26>
 800597c:	b003      	add	sp, #12
 800597e:	bd30      	pop	{r4, r5, pc}
 8005980:	20000ed0 	.word	0x20000ed0

08005984 <sbrk_aligned>:
 8005984:	b570      	push	{r4, r5, r6, lr}
 8005986:	4e0e      	ldr	r6, [pc, #56]	; (80059c0 <sbrk_aligned+0x3c>)
 8005988:	460c      	mov	r4, r1
 800598a:	6831      	ldr	r1, [r6, #0]
 800598c:	4605      	mov	r5, r0
 800598e:	b911      	cbnz	r1, 8005996 <sbrk_aligned+0x12>
 8005990:	f000 fb7a 	bl	8006088 <_sbrk_r>
 8005994:	6030      	str	r0, [r6, #0]
 8005996:	4621      	mov	r1, r4
 8005998:	4628      	mov	r0, r5
 800599a:	f000 fb75 	bl	8006088 <_sbrk_r>
 800599e:	1c43      	adds	r3, r0, #1
 80059a0:	d00a      	beq.n	80059b8 <sbrk_aligned+0x34>
 80059a2:	1cc4      	adds	r4, r0, #3
 80059a4:	f024 0403 	bic.w	r4, r4, #3
 80059a8:	42a0      	cmp	r0, r4
 80059aa:	d007      	beq.n	80059bc <sbrk_aligned+0x38>
 80059ac:	1a21      	subs	r1, r4, r0
 80059ae:	4628      	mov	r0, r5
 80059b0:	f000 fb6a 	bl	8006088 <_sbrk_r>
 80059b4:	3001      	adds	r0, #1
 80059b6:	d101      	bne.n	80059bc <sbrk_aligned+0x38>
 80059b8:	f04f 34ff 	mov.w	r4, #4294967295
 80059bc:	4620      	mov	r0, r4
 80059be:	bd70      	pop	{r4, r5, r6, pc}
 80059c0:	20000ed4 	.word	0x20000ed4

080059c4 <_malloc_r>:
 80059c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059c8:	1ccd      	adds	r5, r1, #3
 80059ca:	f025 0503 	bic.w	r5, r5, #3
 80059ce:	3508      	adds	r5, #8
 80059d0:	2d0c      	cmp	r5, #12
 80059d2:	bf38      	it	cc
 80059d4:	250c      	movcc	r5, #12
 80059d6:	2d00      	cmp	r5, #0
 80059d8:	4607      	mov	r7, r0
 80059da:	db01      	blt.n	80059e0 <_malloc_r+0x1c>
 80059dc:	42a9      	cmp	r1, r5
 80059de:	d905      	bls.n	80059ec <_malloc_r+0x28>
 80059e0:	230c      	movs	r3, #12
 80059e2:	603b      	str	r3, [r7, #0]
 80059e4:	2600      	movs	r6, #0
 80059e6:	4630      	mov	r0, r6
 80059e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059ec:	4e2e      	ldr	r6, [pc, #184]	; (8005aa8 <_malloc_r+0xe4>)
 80059ee:	f000 fbf5 	bl	80061dc <__malloc_lock>
 80059f2:	6833      	ldr	r3, [r6, #0]
 80059f4:	461c      	mov	r4, r3
 80059f6:	bb34      	cbnz	r4, 8005a46 <_malloc_r+0x82>
 80059f8:	4629      	mov	r1, r5
 80059fa:	4638      	mov	r0, r7
 80059fc:	f7ff ffc2 	bl	8005984 <sbrk_aligned>
 8005a00:	1c43      	adds	r3, r0, #1
 8005a02:	4604      	mov	r4, r0
 8005a04:	d14d      	bne.n	8005aa2 <_malloc_r+0xde>
 8005a06:	6834      	ldr	r4, [r6, #0]
 8005a08:	4626      	mov	r6, r4
 8005a0a:	2e00      	cmp	r6, #0
 8005a0c:	d140      	bne.n	8005a90 <_malloc_r+0xcc>
 8005a0e:	6823      	ldr	r3, [r4, #0]
 8005a10:	4631      	mov	r1, r6
 8005a12:	4638      	mov	r0, r7
 8005a14:	eb04 0803 	add.w	r8, r4, r3
 8005a18:	f000 fb36 	bl	8006088 <_sbrk_r>
 8005a1c:	4580      	cmp	r8, r0
 8005a1e:	d13a      	bne.n	8005a96 <_malloc_r+0xd2>
 8005a20:	6821      	ldr	r1, [r4, #0]
 8005a22:	3503      	adds	r5, #3
 8005a24:	1a6d      	subs	r5, r5, r1
 8005a26:	f025 0503 	bic.w	r5, r5, #3
 8005a2a:	3508      	adds	r5, #8
 8005a2c:	2d0c      	cmp	r5, #12
 8005a2e:	bf38      	it	cc
 8005a30:	250c      	movcc	r5, #12
 8005a32:	4629      	mov	r1, r5
 8005a34:	4638      	mov	r0, r7
 8005a36:	f7ff ffa5 	bl	8005984 <sbrk_aligned>
 8005a3a:	3001      	adds	r0, #1
 8005a3c:	d02b      	beq.n	8005a96 <_malloc_r+0xd2>
 8005a3e:	6823      	ldr	r3, [r4, #0]
 8005a40:	442b      	add	r3, r5
 8005a42:	6023      	str	r3, [r4, #0]
 8005a44:	e00e      	b.n	8005a64 <_malloc_r+0xa0>
 8005a46:	6822      	ldr	r2, [r4, #0]
 8005a48:	1b52      	subs	r2, r2, r5
 8005a4a:	d41e      	bmi.n	8005a8a <_malloc_r+0xc6>
 8005a4c:	2a0b      	cmp	r2, #11
 8005a4e:	d916      	bls.n	8005a7e <_malloc_r+0xba>
 8005a50:	1961      	adds	r1, r4, r5
 8005a52:	42a3      	cmp	r3, r4
 8005a54:	6025      	str	r5, [r4, #0]
 8005a56:	bf18      	it	ne
 8005a58:	6059      	strne	r1, [r3, #4]
 8005a5a:	6863      	ldr	r3, [r4, #4]
 8005a5c:	bf08      	it	eq
 8005a5e:	6031      	streq	r1, [r6, #0]
 8005a60:	5162      	str	r2, [r4, r5]
 8005a62:	604b      	str	r3, [r1, #4]
 8005a64:	4638      	mov	r0, r7
 8005a66:	f104 060b 	add.w	r6, r4, #11
 8005a6a:	f000 fbbd 	bl	80061e8 <__malloc_unlock>
 8005a6e:	f026 0607 	bic.w	r6, r6, #7
 8005a72:	1d23      	adds	r3, r4, #4
 8005a74:	1af2      	subs	r2, r6, r3
 8005a76:	d0b6      	beq.n	80059e6 <_malloc_r+0x22>
 8005a78:	1b9b      	subs	r3, r3, r6
 8005a7a:	50a3      	str	r3, [r4, r2]
 8005a7c:	e7b3      	b.n	80059e6 <_malloc_r+0x22>
 8005a7e:	6862      	ldr	r2, [r4, #4]
 8005a80:	42a3      	cmp	r3, r4
 8005a82:	bf0c      	ite	eq
 8005a84:	6032      	streq	r2, [r6, #0]
 8005a86:	605a      	strne	r2, [r3, #4]
 8005a88:	e7ec      	b.n	8005a64 <_malloc_r+0xa0>
 8005a8a:	4623      	mov	r3, r4
 8005a8c:	6864      	ldr	r4, [r4, #4]
 8005a8e:	e7b2      	b.n	80059f6 <_malloc_r+0x32>
 8005a90:	4634      	mov	r4, r6
 8005a92:	6876      	ldr	r6, [r6, #4]
 8005a94:	e7b9      	b.n	8005a0a <_malloc_r+0x46>
 8005a96:	230c      	movs	r3, #12
 8005a98:	603b      	str	r3, [r7, #0]
 8005a9a:	4638      	mov	r0, r7
 8005a9c:	f000 fba4 	bl	80061e8 <__malloc_unlock>
 8005aa0:	e7a1      	b.n	80059e6 <_malloc_r+0x22>
 8005aa2:	6025      	str	r5, [r4, #0]
 8005aa4:	e7de      	b.n	8005a64 <_malloc_r+0xa0>
 8005aa6:	bf00      	nop
 8005aa8:	20000ed0 	.word	0x20000ed0

08005aac <__sfputc_r>:
 8005aac:	6893      	ldr	r3, [r2, #8]
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	b410      	push	{r4}
 8005ab4:	6093      	str	r3, [r2, #8]
 8005ab6:	da08      	bge.n	8005aca <__sfputc_r+0x1e>
 8005ab8:	6994      	ldr	r4, [r2, #24]
 8005aba:	42a3      	cmp	r3, r4
 8005abc:	db01      	blt.n	8005ac2 <__sfputc_r+0x16>
 8005abe:	290a      	cmp	r1, #10
 8005ac0:	d103      	bne.n	8005aca <__sfputc_r+0x1e>
 8005ac2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ac6:	f7ff bc31 	b.w	800532c <__swbuf_r>
 8005aca:	6813      	ldr	r3, [r2, #0]
 8005acc:	1c58      	adds	r0, r3, #1
 8005ace:	6010      	str	r0, [r2, #0]
 8005ad0:	7019      	strb	r1, [r3, #0]
 8005ad2:	4608      	mov	r0, r1
 8005ad4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ad8:	4770      	bx	lr

08005ada <__sfputs_r>:
 8005ada:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005adc:	4606      	mov	r6, r0
 8005ade:	460f      	mov	r7, r1
 8005ae0:	4614      	mov	r4, r2
 8005ae2:	18d5      	adds	r5, r2, r3
 8005ae4:	42ac      	cmp	r4, r5
 8005ae6:	d101      	bne.n	8005aec <__sfputs_r+0x12>
 8005ae8:	2000      	movs	r0, #0
 8005aea:	e007      	b.n	8005afc <__sfputs_r+0x22>
 8005aec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005af0:	463a      	mov	r2, r7
 8005af2:	4630      	mov	r0, r6
 8005af4:	f7ff ffda 	bl	8005aac <__sfputc_r>
 8005af8:	1c43      	adds	r3, r0, #1
 8005afa:	d1f3      	bne.n	8005ae4 <__sfputs_r+0xa>
 8005afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005b00 <_vfiprintf_r>:
 8005b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b04:	460d      	mov	r5, r1
 8005b06:	b09d      	sub	sp, #116	; 0x74
 8005b08:	4614      	mov	r4, r2
 8005b0a:	4698      	mov	r8, r3
 8005b0c:	4606      	mov	r6, r0
 8005b0e:	b118      	cbz	r0, 8005b18 <_vfiprintf_r+0x18>
 8005b10:	6983      	ldr	r3, [r0, #24]
 8005b12:	b90b      	cbnz	r3, 8005b18 <_vfiprintf_r+0x18>
 8005b14:	f7ff fde4 	bl	80056e0 <__sinit>
 8005b18:	4b89      	ldr	r3, [pc, #548]	; (8005d40 <_vfiprintf_r+0x240>)
 8005b1a:	429d      	cmp	r5, r3
 8005b1c:	d11b      	bne.n	8005b56 <_vfiprintf_r+0x56>
 8005b1e:	6875      	ldr	r5, [r6, #4]
 8005b20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b22:	07d9      	lsls	r1, r3, #31
 8005b24:	d405      	bmi.n	8005b32 <_vfiprintf_r+0x32>
 8005b26:	89ab      	ldrh	r3, [r5, #12]
 8005b28:	059a      	lsls	r2, r3, #22
 8005b2a:	d402      	bmi.n	8005b32 <_vfiprintf_r+0x32>
 8005b2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b2e:	f7ff fe75 	bl	800581c <__retarget_lock_acquire_recursive>
 8005b32:	89ab      	ldrh	r3, [r5, #12]
 8005b34:	071b      	lsls	r3, r3, #28
 8005b36:	d501      	bpl.n	8005b3c <_vfiprintf_r+0x3c>
 8005b38:	692b      	ldr	r3, [r5, #16]
 8005b3a:	b9eb      	cbnz	r3, 8005b78 <_vfiprintf_r+0x78>
 8005b3c:	4629      	mov	r1, r5
 8005b3e:	4630      	mov	r0, r6
 8005b40:	f7ff fc46 	bl	80053d0 <__swsetup_r>
 8005b44:	b1c0      	cbz	r0, 8005b78 <_vfiprintf_r+0x78>
 8005b46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005b48:	07dc      	lsls	r4, r3, #31
 8005b4a:	d50e      	bpl.n	8005b6a <_vfiprintf_r+0x6a>
 8005b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8005b50:	b01d      	add	sp, #116	; 0x74
 8005b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b56:	4b7b      	ldr	r3, [pc, #492]	; (8005d44 <_vfiprintf_r+0x244>)
 8005b58:	429d      	cmp	r5, r3
 8005b5a:	d101      	bne.n	8005b60 <_vfiprintf_r+0x60>
 8005b5c:	68b5      	ldr	r5, [r6, #8]
 8005b5e:	e7df      	b.n	8005b20 <_vfiprintf_r+0x20>
 8005b60:	4b79      	ldr	r3, [pc, #484]	; (8005d48 <_vfiprintf_r+0x248>)
 8005b62:	429d      	cmp	r5, r3
 8005b64:	bf08      	it	eq
 8005b66:	68f5      	ldreq	r5, [r6, #12]
 8005b68:	e7da      	b.n	8005b20 <_vfiprintf_r+0x20>
 8005b6a:	89ab      	ldrh	r3, [r5, #12]
 8005b6c:	0598      	lsls	r0, r3, #22
 8005b6e:	d4ed      	bmi.n	8005b4c <_vfiprintf_r+0x4c>
 8005b70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005b72:	f7ff fe54 	bl	800581e <__retarget_lock_release_recursive>
 8005b76:	e7e9      	b.n	8005b4c <_vfiprintf_r+0x4c>
 8005b78:	2300      	movs	r3, #0
 8005b7a:	9309      	str	r3, [sp, #36]	; 0x24
 8005b7c:	2320      	movs	r3, #32
 8005b7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b82:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b86:	2330      	movs	r3, #48	; 0x30
 8005b88:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005d4c <_vfiprintf_r+0x24c>
 8005b8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b90:	f04f 0901 	mov.w	r9, #1
 8005b94:	4623      	mov	r3, r4
 8005b96:	469a      	mov	sl, r3
 8005b98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b9c:	b10a      	cbz	r2, 8005ba2 <_vfiprintf_r+0xa2>
 8005b9e:	2a25      	cmp	r2, #37	; 0x25
 8005ba0:	d1f9      	bne.n	8005b96 <_vfiprintf_r+0x96>
 8005ba2:	ebba 0b04 	subs.w	fp, sl, r4
 8005ba6:	d00b      	beq.n	8005bc0 <_vfiprintf_r+0xc0>
 8005ba8:	465b      	mov	r3, fp
 8005baa:	4622      	mov	r2, r4
 8005bac:	4629      	mov	r1, r5
 8005bae:	4630      	mov	r0, r6
 8005bb0:	f7ff ff93 	bl	8005ada <__sfputs_r>
 8005bb4:	3001      	adds	r0, #1
 8005bb6:	f000 80aa 	beq.w	8005d0e <_vfiprintf_r+0x20e>
 8005bba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005bbc:	445a      	add	r2, fp
 8005bbe:	9209      	str	r2, [sp, #36]	; 0x24
 8005bc0:	f89a 3000 	ldrb.w	r3, [sl]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	f000 80a2 	beq.w	8005d0e <_vfiprintf_r+0x20e>
 8005bca:	2300      	movs	r3, #0
 8005bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8005bd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005bd4:	f10a 0a01 	add.w	sl, sl, #1
 8005bd8:	9304      	str	r3, [sp, #16]
 8005bda:	9307      	str	r3, [sp, #28]
 8005bdc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005be0:	931a      	str	r3, [sp, #104]	; 0x68
 8005be2:	4654      	mov	r4, sl
 8005be4:	2205      	movs	r2, #5
 8005be6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bea:	4858      	ldr	r0, [pc, #352]	; (8005d4c <_vfiprintf_r+0x24c>)
 8005bec:	f7fa fb18 	bl	8000220 <memchr>
 8005bf0:	9a04      	ldr	r2, [sp, #16]
 8005bf2:	b9d8      	cbnz	r0, 8005c2c <_vfiprintf_r+0x12c>
 8005bf4:	06d1      	lsls	r1, r2, #27
 8005bf6:	bf44      	itt	mi
 8005bf8:	2320      	movmi	r3, #32
 8005bfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005bfe:	0713      	lsls	r3, r2, #28
 8005c00:	bf44      	itt	mi
 8005c02:	232b      	movmi	r3, #43	; 0x2b
 8005c04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c08:	f89a 3000 	ldrb.w	r3, [sl]
 8005c0c:	2b2a      	cmp	r3, #42	; 0x2a
 8005c0e:	d015      	beq.n	8005c3c <_vfiprintf_r+0x13c>
 8005c10:	9a07      	ldr	r2, [sp, #28]
 8005c12:	4654      	mov	r4, sl
 8005c14:	2000      	movs	r0, #0
 8005c16:	f04f 0c0a 	mov.w	ip, #10
 8005c1a:	4621      	mov	r1, r4
 8005c1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c20:	3b30      	subs	r3, #48	; 0x30
 8005c22:	2b09      	cmp	r3, #9
 8005c24:	d94e      	bls.n	8005cc4 <_vfiprintf_r+0x1c4>
 8005c26:	b1b0      	cbz	r0, 8005c56 <_vfiprintf_r+0x156>
 8005c28:	9207      	str	r2, [sp, #28]
 8005c2a:	e014      	b.n	8005c56 <_vfiprintf_r+0x156>
 8005c2c:	eba0 0308 	sub.w	r3, r0, r8
 8005c30:	fa09 f303 	lsl.w	r3, r9, r3
 8005c34:	4313      	orrs	r3, r2
 8005c36:	9304      	str	r3, [sp, #16]
 8005c38:	46a2      	mov	sl, r4
 8005c3a:	e7d2      	b.n	8005be2 <_vfiprintf_r+0xe2>
 8005c3c:	9b03      	ldr	r3, [sp, #12]
 8005c3e:	1d19      	adds	r1, r3, #4
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	9103      	str	r1, [sp, #12]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	bfbb      	ittet	lt
 8005c48:	425b      	neglt	r3, r3
 8005c4a:	f042 0202 	orrlt.w	r2, r2, #2
 8005c4e:	9307      	strge	r3, [sp, #28]
 8005c50:	9307      	strlt	r3, [sp, #28]
 8005c52:	bfb8      	it	lt
 8005c54:	9204      	strlt	r2, [sp, #16]
 8005c56:	7823      	ldrb	r3, [r4, #0]
 8005c58:	2b2e      	cmp	r3, #46	; 0x2e
 8005c5a:	d10c      	bne.n	8005c76 <_vfiprintf_r+0x176>
 8005c5c:	7863      	ldrb	r3, [r4, #1]
 8005c5e:	2b2a      	cmp	r3, #42	; 0x2a
 8005c60:	d135      	bne.n	8005cce <_vfiprintf_r+0x1ce>
 8005c62:	9b03      	ldr	r3, [sp, #12]
 8005c64:	1d1a      	adds	r2, r3, #4
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	9203      	str	r2, [sp, #12]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	bfb8      	it	lt
 8005c6e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005c72:	3402      	adds	r4, #2
 8005c74:	9305      	str	r3, [sp, #20]
 8005c76:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005d5c <_vfiprintf_r+0x25c>
 8005c7a:	7821      	ldrb	r1, [r4, #0]
 8005c7c:	2203      	movs	r2, #3
 8005c7e:	4650      	mov	r0, sl
 8005c80:	f7fa face 	bl	8000220 <memchr>
 8005c84:	b140      	cbz	r0, 8005c98 <_vfiprintf_r+0x198>
 8005c86:	2340      	movs	r3, #64	; 0x40
 8005c88:	eba0 000a 	sub.w	r0, r0, sl
 8005c8c:	fa03 f000 	lsl.w	r0, r3, r0
 8005c90:	9b04      	ldr	r3, [sp, #16]
 8005c92:	4303      	orrs	r3, r0
 8005c94:	3401      	adds	r4, #1
 8005c96:	9304      	str	r3, [sp, #16]
 8005c98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c9c:	482c      	ldr	r0, [pc, #176]	; (8005d50 <_vfiprintf_r+0x250>)
 8005c9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005ca2:	2206      	movs	r2, #6
 8005ca4:	f7fa fabc 	bl	8000220 <memchr>
 8005ca8:	2800      	cmp	r0, #0
 8005caa:	d03f      	beq.n	8005d2c <_vfiprintf_r+0x22c>
 8005cac:	4b29      	ldr	r3, [pc, #164]	; (8005d54 <_vfiprintf_r+0x254>)
 8005cae:	bb1b      	cbnz	r3, 8005cf8 <_vfiprintf_r+0x1f8>
 8005cb0:	9b03      	ldr	r3, [sp, #12]
 8005cb2:	3307      	adds	r3, #7
 8005cb4:	f023 0307 	bic.w	r3, r3, #7
 8005cb8:	3308      	adds	r3, #8
 8005cba:	9303      	str	r3, [sp, #12]
 8005cbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cbe:	443b      	add	r3, r7
 8005cc0:	9309      	str	r3, [sp, #36]	; 0x24
 8005cc2:	e767      	b.n	8005b94 <_vfiprintf_r+0x94>
 8005cc4:	fb0c 3202 	mla	r2, ip, r2, r3
 8005cc8:	460c      	mov	r4, r1
 8005cca:	2001      	movs	r0, #1
 8005ccc:	e7a5      	b.n	8005c1a <_vfiprintf_r+0x11a>
 8005cce:	2300      	movs	r3, #0
 8005cd0:	3401      	adds	r4, #1
 8005cd2:	9305      	str	r3, [sp, #20]
 8005cd4:	4619      	mov	r1, r3
 8005cd6:	f04f 0c0a 	mov.w	ip, #10
 8005cda:	4620      	mov	r0, r4
 8005cdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ce0:	3a30      	subs	r2, #48	; 0x30
 8005ce2:	2a09      	cmp	r2, #9
 8005ce4:	d903      	bls.n	8005cee <_vfiprintf_r+0x1ee>
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d0c5      	beq.n	8005c76 <_vfiprintf_r+0x176>
 8005cea:	9105      	str	r1, [sp, #20]
 8005cec:	e7c3      	b.n	8005c76 <_vfiprintf_r+0x176>
 8005cee:	fb0c 2101 	mla	r1, ip, r1, r2
 8005cf2:	4604      	mov	r4, r0
 8005cf4:	2301      	movs	r3, #1
 8005cf6:	e7f0      	b.n	8005cda <_vfiprintf_r+0x1da>
 8005cf8:	ab03      	add	r3, sp, #12
 8005cfa:	9300      	str	r3, [sp, #0]
 8005cfc:	462a      	mov	r2, r5
 8005cfe:	4b16      	ldr	r3, [pc, #88]	; (8005d58 <_vfiprintf_r+0x258>)
 8005d00:	a904      	add	r1, sp, #16
 8005d02:	4630      	mov	r0, r6
 8005d04:	f3af 8000 	nop.w
 8005d08:	4607      	mov	r7, r0
 8005d0a:	1c78      	adds	r0, r7, #1
 8005d0c:	d1d6      	bne.n	8005cbc <_vfiprintf_r+0x1bc>
 8005d0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005d10:	07d9      	lsls	r1, r3, #31
 8005d12:	d405      	bmi.n	8005d20 <_vfiprintf_r+0x220>
 8005d14:	89ab      	ldrh	r3, [r5, #12]
 8005d16:	059a      	lsls	r2, r3, #22
 8005d18:	d402      	bmi.n	8005d20 <_vfiprintf_r+0x220>
 8005d1a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005d1c:	f7ff fd7f 	bl	800581e <__retarget_lock_release_recursive>
 8005d20:	89ab      	ldrh	r3, [r5, #12]
 8005d22:	065b      	lsls	r3, r3, #25
 8005d24:	f53f af12 	bmi.w	8005b4c <_vfiprintf_r+0x4c>
 8005d28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d2a:	e711      	b.n	8005b50 <_vfiprintf_r+0x50>
 8005d2c:	ab03      	add	r3, sp, #12
 8005d2e:	9300      	str	r3, [sp, #0]
 8005d30:	462a      	mov	r2, r5
 8005d32:	4b09      	ldr	r3, [pc, #36]	; (8005d58 <_vfiprintf_r+0x258>)
 8005d34:	a904      	add	r1, sp, #16
 8005d36:	4630      	mov	r0, r6
 8005d38:	f000 f880 	bl	8005e3c <_printf_i>
 8005d3c:	e7e4      	b.n	8005d08 <_vfiprintf_r+0x208>
 8005d3e:	bf00      	nop
 8005d40:	080063d4 	.word	0x080063d4
 8005d44:	080063f4 	.word	0x080063f4
 8005d48:	080063b4 	.word	0x080063b4
 8005d4c:	08006414 	.word	0x08006414
 8005d50:	0800641e 	.word	0x0800641e
 8005d54:	00000000 	.word	0x00000000
 8005d58:	08005adb 	.word	0x08005adb
 8005d5c:	0800641a 	.word	0x0800641a

08005d60 <_printf_common>:
 8005d60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d64:	4616      	mov	r6, r2
 8005d66:	4699      	mov	r9, r3
 8005d68:	688a      	ldr	r2, [r1, #8]
 8005d6a:	690b      	ldr	r3, [r1, #16]
 8005d6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d70:	4293      	cmp	r3, r2
 8005d72:	bfb8      	it	lt
 8005d74:	4613      	movlt	r3, r2
 8005d76:	6033      	str	r3, [r6, #0]
 8005d78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d7c:	4607      	mov	r7, r0
 8005d7e:	460c      	mov	r4, r1
 8005d80:	b10a      	cbz	r2, 8005d86 <_printf_common+0x26>
 8005d82:	3301      	adds	r3, #1
 8005d84:	6033      	str	r3, [r6, #0]
 8005d86:	6823      	ldr	r3, [r4, #0]
 8005d88:	0699      	lsls	r1, r3, #26
 8005d8a:	bf42      	ittt	mi
 8005d8c:	6833      	ldrmi	r3, [r6, #0]
 8005d8e:	3302      	addmi	r3, #2
 8005d90:	6033      	strmi	r3, [r6, #0]
 8005d92:	6825      	ldr	r5, [r4, #0]
 8005d94:	f015 0506 	ands.w	r5, r5, #6
 8005d98:	d106      	bne.n	8005da8 <_printf_common+0x48>
 8005d9a:	f104 0a19 	add.w	sl, r4, #25
 8005d9e:	68e3      	ldr	r3, [r4, #12]
 8005da0:	6832      	ldr	r2, [r6, #0]
 8005da2:	1a9b      	subs	r3, r3, r2
 8005da4:	42ab      	cmp	r3, r5
 8005da6:	dc26      	bgt.n	8005df6 <_printf_common+0x96>
 8005da8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005dac:	1e13      	subs	r3, r2, #0
 8005dae:	6822      	ldr	r2, [r4, #0]
 8005db0:	bf18      	it	ne
 8005db2:	2301      	movne	r3, #1
 8005db4:	0692      	lsls	r2, r2, #26
 8005db6:	d42b      	bmi.n	8005e10 <_printf_common+0xb0>
 8005db8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005dbc:	4649      	mov	r1, r9
 8005dbe:	4638      	mov	r0, r7
 8005dc0:	47c0      	blx	r8
 8005dc2:	3001      	adds	r0, #1
 8005dc4:	d01e      	beq.n	8005e04 <_printf_common+0xa4>
 8005dc6:	6823      	ldr	r3, [r4, #0]
 8005dc8:	68e5      	ldr	r5, [r4, #12]
 8005dca:	6832      	ldr	r2, [r6, #0]
 8005dcc:	f003 0306 	and.w	r3, r3, #6
 8005dd0:	2b04      	cmp	r3, #4
 8005dd2:	bf08      	it	eq
 8005dd4:	1aad      	subeq	r5, r5, r2
 8005dd6:	68a3      	ldr	r3, [r4, #8]
 8005dd8:	6922      	ldr	r2, [r4, #16]
 8005dda:	bf0c      	ite	eq
 8005ddc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005de0:	2500      	movne	r5, #0
 8005de2:	4293      	cmp	r3, r2
 8005de4:	bfc4      	itt	gt
 8005de6:	1a9b      	subgt	r3, r3, r2
 8005de8:	18ed      	addgt	r5, r5, r3
 8005dea:	2600      	movs	r6, #0
 8005dec:	341a      	adds	r4, #26
 8005dee:	42b5      	cmp	r5, r6
 8005df0:	d11a      	bne.n	8005e28 <_printf_common+0xc8>
 8005df2:	2000      	movs	r0, #0
 8005df4:	e008      	b.n	8005e08 <_printf_common+0xa8>
 8005df6:	2301      	movs	r3, #1
 8005df8:	4652      	mov	r2, sl
 8005dfa:	4649      	mov	r1, r9
 8005dfc:	4638      	mov	r0, r7
 8005dfe:	47c0      	blx	r8
 8005e00:	3001      	adds	r0, #1
 8005e02:	d103      	bne.n	8005e0c <_printf_common+0xac>
 8005e04:	f04f 30ff 	mov.w	r0, #4294967295
 8005e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e0c:	3501      	adds	r5, #1
 8005e0e:	e7c6      	b.n	8005d9e <_printf_common+0x3e>
 8005e10:	18e1      	adds	r1, r4, r3
 8005e12:	1c5a      	adds	r2, r3, #1
 8005e14:	2030      	movs	r0, #48	; 0x30
 8005e16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e1a:	4422      	add	r2, r4
 8005e1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e24:	3302      	adds	r3, #2
 8005e26:	e7c7      	b.n	8005db8 <_printf_common+0x58>
 8005e28:	2301      	movs	r3, #1
 8005e2a:	4622      	mov	r2, r4
 8005e2c:	4649      	mov	r1, r9
 8005e2e:	4638      	mov	r0, r7
 8005e30:	47c0      	blx	r8
 8005e32:	3001      	adds	r0, #1
 8005e34:	d0e6      	beq.n	8005e04 <_printf_common+0xa4>
 8005e36:	3601      	adds	r6, #1
 8005e38:	e7d9      	b.n	8005dee <_printf_common+0x8e>
	...

08005e3c <_printf_i>:
 8005e3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e40:	7e0f      	ldrb	r7, [r1, #24]
 8005e42:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005e44:	2f78      	cmp	r7, #120	; 0x78
 8005e46:	4691      	mov	r9, r2
 8005e48:	4680      	mov	r8, r0
 8005e4a:	460c      	mov	r4, r1
 8005e4c:	469a      	mov	sl, r3
 8005e4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005e52:	d807      	bhi.n	8005e64 <_printf_i+0x28>
 8005e54:	2f62      	cmp	r7, #98	; 0x62
 8005e56:	d80a      	bhi.n	8005e6e <_printf_i+0x32>
 8005e58:	2f00      	cmp	r7, #0
 8005e5a:	f000 80d8 	beq.w	800600e <_printf_i+0x1d2>
 8005e5e:	2f58      	cmp	r7, #88	; 0x58
 8005e60:	f000 80a3 	beq.w	8005faa <_printf_i+0x16e>
 8005e64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e6c:	e03a      	b.n	8005ee4 <_printf_i+0xa8>
 8005e6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e72:	2b15      	cmp	r3, #21
 8005e74:	d8f6      	bhi.n	8005e64 <_printf_i+0x28>
 8005e76:	a101      	add	r1, pc, #4	; (adr r1, 8005e7c <_printf_i+0x40>)
 8005e78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e7c:	08005ed5 	.word	0x08005ed5
 8005e80:	08005ee9 	.word	0x08005ee9
 8005e84:	08005e65 	.word	0x08005e65
 8005e88:	08005e65 	.word	0x08005e65
 8005e8c:	08005e65 	.word	0x08005e65
 8005e90:	08005e65 	.word	0x08005e65
 8005e94:	08005ee9 	.word	0x08005ee9
 8005e98:	08005e65 	.word	0x08005e65
 8005e9c:	08005e65 	.word	0x08005e65
 8005ea0:	08005e65 	.word	0x08005e65
 8005ea4:	08005e65 	.word	0x08005e65
 8005ea8:	08005ff5 	.word	0x08005ff5
 8005eac:	08005f19 	.word	0x08005f19
 8005eb0:	08005fd7 	.word	0x08005fd7
 8005eb4:	08005e65 	.word	0x08005e65
 8005eb8:	08005e65 	.word	0x08005e65
 8005ebc:	08006017 	.word	0x08006017
 8005ec0:	08005e65 	.word	0x08005e65
 8005ec4:	08005f19 	.word	0x08005f19
 8005ec8:	08005e65 	.word	0x08005e65
 8005ecc:	08005e65 	.word	0x08005e65
 8005ed0:	08005fdf 	.word	0x08005fdf
 8005ed4:	682b      	ldr	r3, [r5, #0]
 8005ed6:	1d1a      	adds	r2, r3, #4
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	602a      	str	r2, [r5, #0]
 8005edc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ee0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	e0a3      	b.n	8006030 <_printf_i+0x1f4>
 8005ee8:	6820      	ldr	r0, [r4, #0]
 8005eea:	6829      	ldr	r1, [r5, #0]
 8005eec:	0606      	lsls	r6, r0, #24
 8005eee:	f101 0304 	add.w	r3, r1, #4
 8005ef2:	d50a      	bpl.n	8005f0a <_printf_i+0xce>
 8005ef4:	680e      	ldr	r6, [r1, #0]
 8005ef6:	602b      	str	r3, [r5, #0]
 8005ef8:	2e00      	cmp	r6, #0
 8005efa:	da03      	bge.n	8005f04 <_printf_i+0xc8>
 8005efc:	232d      	movs	r3, #45	; 0x2d
 8005efe:	4276      	negs	r6, r6
 8005f00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f04:	485e      	ldr	r0, [pc, #376]	; (8006080 <_printf_i+0x244>)
 8005f06:	230a      	movs	r3, #10
 8005f08:	e019      	b.n	8005f3e <_printf_i+0x102>
 8005f0a:	680e      	ldr	r6, [r1, #0]
 8005f0c:	602b      	str	r3, [r5, #0]
 8005f0e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005f12:	bf18      	it	ne
 8005f14:	b236      	sxthne	r6, r6
 8005f16:	e7ef      	b.n	8005ef8 <_printf_i+0xbc>
 8005f18:	682b      	ldr	r3, [r5, #0]
 8005f1a:	6820      	ldr	r0, [r4, #0]
 8005f1c:	1d19      	adds	r1, r3, #4
 8005f1e:	6029      	str	r1, [r5, #0]
 8005f20:	0601      	lsls	r1, r0, #24
 8005f22:	d501      	bpl.n	8005f28 <_printf_i+0xec>
 8005f24:	681e      	ldr	r6, [r3, #0]
 8005f26:	e002      	b.n	8005f2e <_printf_i+0xf2>
 8005f28:	0646      	lsls	r6, r0, #25
 8005f2a:	d5fb      	bpl.n	8005f24 <_printf_i+0xe8>
 8005f2c:	881e      	ldrh	r6, [r3, #0]
 8005f2e:	4854      	ldr	r0, [pc, #336]	; (8006080 <_printf_i+0x244>)
 8005f30:	2f6f      	cmp	r7, #111	; 0x6f
 8005f32:	bf0c      	ite	eq
 8005f34:	2308      	moveq	r3, #8
 8005f36:	230a      	movne	r3, #10
 8005f38:	2100      	movs	r1, #0
 8005f3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f3e:	6865      	ldr	r5, [r4, #4]
 8005f40:	60a5      	str	r5, [r4, #8]
 8005f42:	2d00      	cmp	r5, #0
 8005f44:	bfa2      	ittt	ge
 8005f46:	6821      	ldrge	r1, [r4, #0]
 8005f48:	f021 0104 	bicge.w	r1, r1, #4
 8005f4c:	6021      	strge	r1, [r4, #0]
 8005f4e:	b90e      	cbnz	r6, 8005f54 <_printf_i+0x118>
 8005f50:	2d00      	cmp	r5, #0
 8005f52:	d04d      	beq.n	8005ff0 <_printf_i+0x1b4>
 8005f54:	4615      	mov	r5, r2
 8005f56:	fbb6 f1f3 	udiv	r1, r6, r3
 8005f5a:	fb03 6711 	mls	r7, r3, r1, r6
 8005f5e:	5dc7      	ldrb	r7, [r0, r7]
 8005f60:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005f64:	4637      	mov	r7, r6
 8005f66:	42bb      	cmp	r3, r7
 8005f68:	460e      	mov	r6, r1
 8005f6a:	d9f4      	bls.n	8005f56 <_printf_i+0x11a>
 8005f6c:	2b08      	cmp	r3, #8
 8005f6e:	d10b      	bne.n	8005f88 <_printf_i+0x14c>
 8005f70:	6823      	ldr	r3, [r4, #0]
 8005f72:	07de      	lsls	r6, r3, #31
 8005f74:	d508      	bpl.n	8005f88 <_printf_i+0x14c>
 8005f76:	6923      	ldr	r3, [r4, #16]
 8005f78:	6861      	ldr	r1, [r4, #4]
 8005f7a:	4299      	cmp	r1, r3
 8005f7c:	bfde      	ittt	le
 8005f7e:	2330      	movle	r3, #48	; 0x30
 8005f80:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005f84:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005f88:	1b52      	subs	r2, r2, r5
 8005f8a:	6122      	str	r2, [r4, #16]
 8005f8c:	f8cd a000 	str.w	sl, [sp]
 8005f90:	464b      	mov	r3, r9
 8005f92:	aa03      	add	r2, sp, #12
 8005f94:	4621      	mov	r1, r4
 8005f96:	4640      	mov	r0, r8
 8005f98:	f7ff fee2 	bl	8005d60 <_printf_common>
 8005f9c:	3001      	adds	r0, #1
 8005f9e:	d14c      	bne.n	800603a <_printf_i+0x1fe>
 8005fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8005fa4:	b004      	add	sp, #16
 8005fa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005faa:	4835      	ldr	r0, [pc, #212]	; (8006080 <_printf_i+0x244>)
 8005fac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005fb0:	6829      	ldr	r1, [r5, #0]
 8005fb2:	6823      	ldr	r3, [r4, #0]
 8005fb4:	f851 6b04 	ldr.w	r6, [r1], #4
 8005fb8:	6029      	str	r1, [r5, #0]
 8005fba:	061d      	lsls	r5, r3, #24
 8005fbc:	d514      	bpl.n	8005fe8 <_printf_i+0x1ac>
 8005fbe:	07df      	lsls	r7, r3, #31
 8005fc0:	bf44      	itt	mi
 8005fc2:	f043 0320 	orrmi.w	r3, r3, #32
 8005fc6:	6023      	strmi	r3, [r4, #0]
 8005fc8:	b91e      	cbnz	r6, 8005fd2 <_printf_i+0x196>
 8005fca:	6823      	ldr	r3, [r4, #0]
 8005fcc:	f023 0320 	bic.w	r3, r3, #32
 8005fd0:	6023      	str	r3, [r4, #0]
 8005fd2:	2310      	movs	r3, #16
 8005fd4:	e7b0      	b.n	8005f38 <_printf_i+0xfc>
 8005fd6:	6823      	ldr	r3, [r4, #0]
 8005fd8:	f043 0320 	orr.w	r3, r3, #32
 8005fdc:	6023      	str	r3, [r4, #0]
 8005fde:	2378      	movs	r3, #120	; 0x78
 8005fe0:	4828      	ldr	r0, [pc, #160]	; (8006084 <_printf_i+0x248>)
 8005fe2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005fe6:	e7e3      	b.n	8005fb0 <_printf_i+0x174>
 8005fe8:	0659      	lsls	r1, r3, #25
 8005fea:	bf48      	it	mi
 8005fec:	b2b6      	uxthmi	r6, r6
 8005fee:	e7e6      	b.n	8005fbe <_printf_i+0x182>
 8005ff0:	4615      	mov	r5, r2
 8005ff2:	e7bb      	b.n	8005f6c <_printf_i+0x130>
 8005ff4:	682b      	ldr	r3, [r5, #0]
 8005ff6:	6826      	ldr	r6, [r4, #0]
 8005ff8:	6961      	ldr	r1, [r4, #20]
 8005ffa:	1d18      	adds	r0, r3, #4
 8005ffc:	6028      	str	r0, [r5, #0]
 8005ffe:	0635      	lsls	r5, r6, #24
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	d501      	bpl.n	8006008 <_printf_i+0x1cc>
 8006004:	6019      	str	r1, [r3, #0]
 8006006:	e002      	b.n	800600e <_printf_i+0x1d2>
 8006008:	0670      	lsls	r0, r6, #25
 800600a:	d5fb      	bpl.n	8006004 <_printf_i+0x1c8>
 800600c:	8019      	strh	r1, [r3, #0]
 800600e:	2300      	movs	r3, #0
 8006010:	6123      	str	r3, [r4, #16]
 8006012:	4615      	mov	r5, r2
 8006014:	e7ba      	b.n	8005f8c <_printf_i+0x150>
 8006016:	682b      	ldr	r3, [r5, #0]
 8006018:	1d1a      	adds	r2, r3, #4
 800601a:	602a      	str	r2, [r5, #0]
 800601c:	681d      	ldr	r5, [r3, #0]
 800601e:	6862      	ldr	r2, [r4, #4]
 8006020:	2100      	movs	r1, #0
 8006022:	4628      	mov	r0, r5
 8006024:	f7fa f8fc 	bl	8000220 <memchr>
 8006028:	b108      	cbz	r0, 800602e <_printf_i+0x1f2>
 800602a:	1b40      	subs	r0, r0, r5
 800602c:	6060      	str	r0, [r4, #4]
 800602e:	6863      	ldr	r3, [r4, #4]
 8006030:	6123      	str	r3, [r4, #16]
 8006032:	2300      	movs	r3, #0
 8006034:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006038:	e7a8      	b.n	8005f8c <_printf_i+0x150>
 800603a:	6923      	ldr	r3, [r4, #16]
 800603c:	462a      	mov	r2, r5
 800603e:	4649      	mov	r1, r9
 8006040:	4640      	mov	r0, r8
 8006042:	47d0      	blx	sl
 8006044:	3001      	adds	r0, #1
 8006046:	d0ab      	beq.n	8005fa0 <_printf_i+0x164>
 8006048:	6823      	ldr	r3, [r4, #0]
 800604a:	079b      	lsls	r3, r3, #30
 800604c:	d413      	bmi.n	8006076 <_printf_i+0x23a>
 800604e:	68e0      	ldr	r0, [r4, #12]
 8006050:	9b03      	ldr	r3, [sp, #12]
 8006052:	4298      	cmp	r0, r3
 8006054:	bfb8      	it	lt
 8006056:	4618      	movlt	r0, r3
 8006058:	e7a4      	b.n	8005fa4 <_printf_i+0x168>
 800605a:	2301      	movs	r3, #1
 800605c:	4632      	mov	r2, r6
 800605e:	4649      	mov	r1, r9
 8006060:	4640      	mov	r0, r8
 8006062:	47d0      	blx	sl
 8006064:	3001      	adds	r0, #1
 8006066:	d09b      	beq.n	8005fa0 <_printf_i+0x164>
 8006068:	3501      	adds	r5, #1
 800606a:	68e3      	ldr	r3, [r4, #12]
 800606c:	9903      	ldr	r1, [sp, #12]
 800606e:	1a5b      	subs	r3, r3, r1
 8006070:	42ab      	cmp	r3, r5
 8006072:	dcf2      	bgt.n	800605a <_printf_i+0x21e>
 8006074:	e7eb      	b.n	800604e <_printf_i+0x212>
 8006076:	2500      	movs	r5, #0
 8006078:	f104 0619 	add.w	r6, r4, #25
 800607c:	e7f5      	b.n	800606a <_printf_i+0x22e>
 800607e:	bf00      	nop
 8006080:	08006425 	.word	0x08006425
 8006084:	08006436 	.word	0x08006436

08006088 <_sbrk_r>:
 8006088:	b538      	push	{r3, r4, r5, lr}
 800608a:	4d06      	ldr	r5, [pc, #24]	; (80060a4 <_sbrk_r+0x1c>)
 800608c:	2300      	movs	r3, #0
 800608e:	4604      	mov	r4, r0
 8006090:	4608      	mov	r0, r1
 8006092:	602b      	str	r3, [r5, #0]
 8006094:	f7fa fde6 	bl	8000c64 <_sbrk>
 8006098:	1c43      	adds	r3, r0, #1
 800609a:	d102      	bne.n	80060a2 <_sbrk_r+0x1a>
 800609c:	682b      	ldr	r3, [r5, #0]
 800609e:	b103      	cbz	r3, 80060a2 <_sbrk_r+0x1a>
 80060a0:	6023      	str	r3, [r4, #0]
 80060a2:	bd38      	pop	{r3, r4, r5, pc}
 80060a4:	20000ed8 	.word	0x20000ed8

080060a8 <__sread>:
 80060a8:	b510      	push	{r4, lr}
 80060aa:	460c      	mov	r4, r1
 80060ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060b0:	f000 f8a0 	bl	80061f4 <_read_r>
 80060b4:	2800      	cmp	r0, #0
 80060b6:	bfab      	itete	ge
 80060b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80060ba:	89a3      	ldrhlt	r3, [r4, #12]
 80060bc:	181b      	addge	r3, r3, r0
 80060be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80060c2:	bfac      	ite	ge
 80060c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80060c6:	81a3      	strhlt	r3, [r4, #12]
 80060c8:	bd10      	pop	{r4, pc}

080060ca <__swrite>:
 80060ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060ce:	461f      	mov	r7, r3
 80060d0:	898b      	ldrh	r3, [r1, #12]
 80060d2:	05db      	lsls	r3, r3, #23
 80060d4:	4605      	mov	r5, r0
 80060d6:	460c      	mov	r4, r1
 80060d8:	4616      	mov	r6, r2
 80060da:	d505      	bpl.n	80060e8 <__swrite+0x1e>
 80060dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060e0:	2302      	movs	r3, #2
 80060e2:	2200      	movs	r2, #0
 80060e4:	f000 f868 	bl	80061b8 <_lseek_r>
 80060e8:	89a3      	ldrh	r3, [r4, #12]
 80060ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80060ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060f2:	81a3      	strh	r3, [r4, #12]
 80060f4:	4632      	mov	r2, r6
 80060f6:	463b      	mov	r3, r7
 80060f8:	4628      	mov	r0, r5
 80060fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060fe:	f000 b817 	b.w	8006130 <_write_r>

08006102 <__sseek>:
 8006102:	b510      	push	{r4, lr}
 8006104:	460c      	mov	r4, r1
 8006106:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800610a:	f000 f855 	bl	80061b8 <_lseek_r>
 800610e:	1c43      	adds	r3, r0, #1
 8006110:	89a3      	ldrh	r3, [r4, #12]
 8006112:	bf15      	itete	ne
 8006114:	6560      	strne	r0, [r4, #84]	; 0x54
 8006116:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800611a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800611e:	81a3      	strheq	r3, [r4, #12]
 8006120:	bf18      	it	ne
 8006122:	81a3      	strhne	r3, [r4, #12]
 8006124:	bd10      	pop	{r4, pc}

08006126 <__sclose>:
 8006126:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800612a:	f000 b813 	b.w	8006154 <_close_r>
	...

08006130 <_write_r>:
 8006130:	b538      	push	{r3, r4, r5, lr}
 8006132:	4d07      	ldr	r5, [pc, #28]	; (8006150 <_write_r+0x20>)
 8006134:	4604      	mov	r4, r0
 8006136:	4608      	mov	r0, r1
 8006138:	4611      	mov	r1, r2
 800613a:	2200      	movs	r2, #0
 800613c:	602a      	str	r2, [r5, #0]
 800613e:	461a      	mov	r2, r3
 8006140:	f7fa fd40 	bl	8000bc4 <_write>
 8006144:	1c43      	adds	r3, r0, #1
 8006146:	d102      	bne.n	800614e <_write_r+0x1e>
 8006148:	682b      	ldr	r3, [r5, #0]
 800614a:	b103      	cbz	r3, 800614e <_write_r+0x1e>
 800614c:	6023      	str	r3, [r4, #0]
 800614e:	bd38      	pop	{r3, r4, r5, pc}
 8006150:	20000ed8 	.word	0x20000ed8

08006154 <_close_r>:
 8006154:	b538      	push	{r3, r4, r5, lr}
 8006156:	4d06      	ldr	r5, [pc, #24]	; (8006170 <_close_r+0x1c>)
 8006158:	2300      	movs	r3, #0
 800615a:	4604      	mov	r4, r0
 800615c:	4608      	mov	r0, r1
 800615e:	602b      	str	r3, [r5, #0]
 8006160:	f7fa fd4c 	bl	8000bfc <_close>
 8006164:	1c43      	adds	r3, r0, #1
 8006166:	d102      	bne.n	800616e <_close_r+0x1a>
 8006168:	682b      	ldr	r3, [r5, #0]
 800616a:	b103      	cbz	r3, 800616e <_close_r+0x1a>
 800616c:	6023      	str	r3, [r4, #0]
 800616e:	bd38      	pop	{r3, r4, r5, pc}
 8006170:	20000ed8 	.word	0x20000ed8

08006174 <_fstat_r>:
 8006174:	b538      	push	{r3, r4, r5, lr}
 8006176:	4d07      	ldr	r5, [pc, #28]	; (8006194 <_fstat_r+0x20>)
 8006178:	2300      	movs	r3, #0
 800617a:	4604      	mov	r4, r0
 800617c:	4608      	mov	r0, r1
 800617e:	4611      	mov	r1, r2
 8006180:	602b      	str	r3, [r5, #0]
 8006182:	f7fa fd47 	bl	8000c14 <_fstat>
 8006186:	1c43      	adds	r3, r0, #1
 8006188:	d102      	bne.n	8006190 <_fstat_r+0x1c>
 800618a:	682b      	ldr	r3, [r5, #0]
 800618c:	b103      	cbz	r3, 8006190 <_fstat_r+0x1c>
 800618e:	6023      	str	r3, [r4, #0]
 8006190:	bd38      	pop	{r3, r4, r5, pc}
 8006192:	bf00      	nop
 8006194:	20000ed8 	.word	0x20000ed8

08006198 <_isatty_r>:
 8006198:	b538      	push	{r3, r4, r5, lr}
 800619a:	4d06      	ldr	r5, [pc, #24]	; (80061b4 <_isatty_r+0x1c>)
 800619c:	2300      	movs	r3, #0
 800619e:	4604      	mov	r4, r0
 80061a0:	4608      	mov	r0, r1
 80061a2:	602b      	str	r3, [r5, #0]
 80061a4:	f7fa fd46 	bl	8000c34 <_isatty>
 80061a8:	1c43      	adds	r3, r0, #1
 80061aa:	d102      	bne.n	80061b2 <_isatty_r+0x1a>
 80061ac:	682b      	ldr	r3, [r5, #0]
 80061ae:	b103      	cbz	r3, 80061b2 <_isatty_r+0x1a>
 80061b0:	6023      	str	r3, [r4, #0]
 80061b2:	bd38      	pop	{r3, r4, r5, pc}
 80061b4:	20000ed8 	.word	0x20000ed8

080061b8 <_lseek_r>:
 80061b8:	b538      	push	{r3, r4, r5, lr}
 80061ba:	4d07      	ldr	r5, [pc, #28]	; (80061d8 <_lseek_r+0x20>)
 80061bc:	4604      	mov	r4, r0
 80061be:	4608      	mov	r0, r1
 80061c0:	4611      	mov	r1, r2
 80061c2:	2200      	movs	r2, #0
 80061c4:	602a      	str	r2, [r5, #0]
 80061c6:	461a      	mov	r2, r3
 80061c8:	f7fa fd3f 	bl	8000c4a <_lseek>
 80061cc:	1c43      	adds	r3, r0, #1
 80061ce:	d102      	bne.n	80061d6 <_lseek_r+0x1e>
 80061d0:	682b      	ldr	r3, [r5, #0]
 80061d2:	b103      	cbz	r3, 80061d6 <_lseek_r+0x1e>
 80061d4:	6023      	str	r3, [r4, #0]
 80061d6:	bd38      	pop	{r3, r4, r5, pc}
 80061d8:	20000ed8 	.word	0x20000ed8

080061dc <__malloc_lock>:
 80061dc:	4801      	ldr	r0, [pc, #4]	; (80061e4 <__malloc_lock+0x8>)
 80061de:	f7ff bb1d 	b.w	800581c <__retarget_lock_acquire_recursive>
 80061e2:	bf00      	nop
 80061e4:	20000ecc 	.word	0x20000ecc

080061e8 <__malloc_unlock>:
 80061e8:	4801      	ldr	r0, [pc, #4]	; (80061f0 <__malloc_unlock+0x8>)
 80061ea:	f7ff bb18 	b.w	800581e <__retarget_lock_release_recursive>
 80061ee:	bf00      	nop
 80061f0:	20000ecc 	.word	0x20000ecc

080061f4 <_read_r>:
 80061f4:	b538      	push	{r3, r4, r5, lr}
 80061f6:	4d07      	ldr	r5, [pc, #28]	; (8006214 <_read_r+0x20>)
 80061f8:	4604      	mov	r4, r0
 80061fa:	4608      	mov	r0, r1
 80061fc:	4611      	mov	r1, r2
 80061fe:	2200      	movs	r2, #0
 8006200:	602a      	str	r2, [r5, #0]
 8006202:	461a      	mov	r2, r3
 8006204:	f7fa fcc1 	bl	8000b8a <_read>
 8006208:	1c43      	adds	r3, r0, #1
 800620a:	d102      	bne.n	8006212 <_read_r+0x1e>
 800620c:	682b      	ldr	r3, [r5, #0]
 800620e:	b103      	cbz	r3, 8006212 <_read_r+0x1e>
 8006210:	6023      	str	r3, [r4, #0]
 8006212:	bd38      	pop	{r3, r4, r5, pc}
 8006214:	20000ed8 	.word	0x20000ed8

08006218 <_init>:
 8006218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800621a:	bf00      	nop
 800621c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800621e:	bc08      	pop	{r3}
 8006220:	469e      	mov	lr, r3
 8006222:	4770      	bx	lr

08006224 <_fini>:
 8006224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006226:	bf00      	nop
 8006228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800622a:	bc08      	pop	{r3}
 800622c:	469e      	mov	lr, r3
 800622e:	4770      	bx	lr
