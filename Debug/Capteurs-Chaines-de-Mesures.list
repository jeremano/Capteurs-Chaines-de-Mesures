
Capteurs-Chaines-de-Mesures.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000572c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  0800590c  0800590c  0001590c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a20  08005a20  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005a20  08005a20  00015a20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a28  08005a28  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a28  08005a28  00015a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a2c  08005a2c  00015a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005a30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ef8  20000074  08005aa4  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000f6c  08005aa4  00020f6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014e18  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003275  00000000  00000000  00034ebc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f0  00000000  00000000  00038138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001088  00000000  00000000  00039328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000208d0  00000000  00000000  0003a3b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016212  00000000  00000000  0005ac80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c419e  00000000  00000000  00070e92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00135030  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005104  00000000  00000000  00135080  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000074 	.word	0x20000074
 80001fc:	00000000 	.word	0x00000000
 8000200:	080058f4 	.word	0x080058f4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000078 	.word	0x20000078
 800021c:	080058f4 	.word	0x080058f4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005c4:	b5b0      	push	{r4, r5, r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005ca:	4b09      	ldr	r3, [pc, #36]	; (80005f0 <MX_FREERTOS_Init+0x2c>)
 80005cc:	1d3c      	adds	r4, r7, #4
 80005ce:	461d      	mov	r5, r3
 80005d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d4:	682b      	ldr	r3, [r5, #0]
 80005d6:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005d8:	1d3b      	adds	r3, r7, #4
 80005da:	2100      	movs	r1, #0
 80005dc:	4618      	mov	r0, r3
 80005de:	f002 ff68 	bl	80034b2 <osThreadCreate>
 80005e2:	4603      	mov	r3, r0
 80005e4:	4a03      	ldr	r2, [pc, #12]	; (80005f4 <MX_FREERTOS_Init+0x30>)
 80005e6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80005e8:	bf00      	nop
 80005ea:	3718      	adds	r7, #24
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bdb0      	pop	{r4, r5, r7, pc}
 80005f0:	08005918 	.word	0x08005918
 80005f4:	20000090 	.word	0x20000090

080005f8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000600:	2001      	movs	r0, #1
 8000602:	f002 ff7d 	bl	8003500 <osDelay>
 8000606:	e7fb      	b.n	8000600 <StartDefaultTask+0x8>

08000608 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b08a      	sub	sp, #40	; 0x28
 800060c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060e:	f107 0314 	add.w	r3, r7, #20
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
 800061c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800061e:	4b2b      	ldr	r3, [pc, #172]	; (80006cc <MX_GPIO_Init+0xc4>)
 8000620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000622:	4a2a      	ldr	r2, [pc, #168]	; (80006cc <MX_GPIO_Init+0xc4>)
 8000624:	f043 0304 	orr.w	r3, r3, #4
 8000628:	64d3      	str	r3, [r2, #76]	; 0x4c
 800062a:	4b28      	ldr	r3, [pc, #160]	; (80006cc <MX_GPIO_Init+0xc4>)
 800062c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800062e:	f003 0304 	and.w	r3, r3, #4
 8000632:	613b      	str	r3, [r7, #16]
 8000634:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000636:	4b25      	ldr	r3, [pc, #148]	; (80006cc <MX_GPIO_Init+0xc4>)
 8000638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800063a:	4a24      	ldr	r2, [pc, #144]	; (80006cc <MX_GPIO_Init+0xc4>)
 800063c:	f043 0320 	orr.w	r3, r3, #32
 8000640:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000642:	4b22      	ldr	r3, [pc, #136]	; (80006cc <MX_GPIO_Init+0xc4>)
 8000644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000646:	f003 0320 	and.w	r3, r3, #32
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064e:	4b1f      	ldr	r3, [pc, #124]	; (80006cc <MX_GPIO_Init+0xc4>)
 8000650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000652:	4a1e      	ldr	r2, [pc, #120]	; (80006cc <MX_GPIO_Init+0xc4>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	64d3      	str	r3, [r2, #76]	; 0x4c
 800065a:	4b1c      	ldr	r3, [pc, #112]	; (80006cc <MX_GPIO_Init+0xc4>)
 800065c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065e:	f003 0301 	and.w	r3, r3, #1
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000666:	4b19      	ldr	r3, [pc, #100]	; (80006cc <MX_GPIO_Init+0xc4>)
 8000668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066a:	4a18      	ldr	r2, [pc, #96]	; (80006cc <MX_GPIO_Init+0xc4>)
 800066c:	f043 0302 	orr.w	r3, r3, #2
 8000670:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000672:	4b16      	ldr	r3, [pc, #88]	; (80006cc <MX_GPIO_Init+0xc4>)
 8000674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000676:	f003 0302 	and.w	r3, r3, #2
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800067e:	2200      	movs	r2, #0
 8000680:	2120      	movs	r1, #32
 8000682:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000686:	f000 fec3 	bl	8001410 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800068a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800068e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000690:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000694:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	2300      	movs	r3, #0
 8000698:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800069a:	f107 0314 	add.w	r3, r7, #20
 800069e:	4619      	mov	r1, r3
 80006a0:	480b      	ldr	r0, [pc, #44]	; (80006d0 <MX_GPIO_Init+0xc8>)
 80006a2:	f000 fd33 	bl	800110c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006a6:	2320      	movs	r3, #32
 80006a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006aa:	2301      	movs	r3, #1
 80006ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b2:	2300      	movs	r3, #0
 80006b4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006b6:	f107 0314 	add.w	r3, r7, #20
 80006ba:	4619      	mov	r1, r3
 80006bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c0:	f000 fd24 	bl	800110c <HAL_GPIO_Init>

}
 80006c4:	bf00      	nop
 80006c6:	3728      	adds	r7, #40	; 0x28
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40021000 	.word	0x40021000
 80006d0:	48000800 	.word	0x48000800

080006d4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006d8:	4b1b      	ldr	r3, [pc, #108]	; (8000748 <MX_I2C1_Init+0x74>)
 80006da:	4a1c      	ldr	r2, [pc, #112]	; (800074c <MX_I2C1_Init+0x78>)
 80006dc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 80006de:	4b1a      	ldr	r3, [pc, #104]	; (8000748 <MX_I2C1_Init+0x74>)
 80006e0:	4a1b      	ldr	r2, [pc, #108]	; (8000750 <MX_I2C1_Init+0x7c>)
 80006e2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006e4:	4b18      	ldr	r3, [pc, #96]	; (8000748 <MX_I2C1_Init+0x74>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006ea:	4b17      	ldr	r3, [pc, #92]	; (8000748 <MX_I2C1_Init+0x74>)
 80006ec:	2201      	movs	r2, #1
 80006ee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006f0:	4b15      	ldr	r3, [pc, #84]	; (8000748 <MX_I2C1_Init+0x74>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006f6:	4b14      	ldr	r3, [pc, #80]	; (8000748 <MX_I2C1_Init+0x74>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006fc:	4b12      	ldr	r3, [pc, #72]	; (8000748 <MX_I2C1_Init+0x74>)
 80006fe:	2200      	movs	r2, #0
 8000700:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000702:	4b11      	ldr	r3, [pc, #68]	; (8000748 <MX_I2C1_Init+0x74>)
 8000704:	2200      	movs	r2, #0
 8000706:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000708:	4b0f      	ldr	r3, [pc, #60]	; (8000748 <MX_I2C1_Init+0x74>)
 800070a:	2200      	movs	r2, #0
 800070c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800070e:	480e      	ldr	r0, [pc, #56]	; (8000748 <MX_I2C1_Init+0x74>)
 8000710:	f000 fe96 	bl	8001440 <HAL_I2C_Init>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800071a:	f000 f920 	bl	800095e <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800071e:	2100      	movs	r1, #0
 8000720:	4809      	ldr	r0, [pc, #36]	; (8000748 <MX_I2C1_Init+0x74>)
 8000722:	f001 f863 	bl	80017ec <HAL_I2CEx_ConfigAnalogFilter>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800072c:	f000 f917 	bl	800095e <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000730:	2100      	movs	r1, #0
 8000732:	4805      	ldr	r0, [pc, #20]	; (8000748 <MX_I2C1_Init+0x74>)
 8000734:	f001 f8a5 	bl	8001882 <HAL_I2CEx_ConfigDigitalFilter>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800073e:	f000 f90e 	bl	800095e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000094 	.word	0x20000094
 800074c:	40005400 	.word	0x40005400
 8000750:	30a0a7fb 	.word	0x30a0a7fb

08000754 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b09a      	sub	sp, #104	; 0x68
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
 800076a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800076c:	f107 0310 	add.w	r3, r7, #16
 8000770:	2244      	movs	r2, #68	; 0x44
 8000772:	2100      	movs	r1, #0
 8000774:	4618      	mov	r0, r3
 8000776:	f004 f853 	bl	8004820 <memset>
  if(i2cHandle->Instance==I2C1)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4a1f      	ldr	r2, [pc, #124]	; (80007fc <HAL_I2C_MspInit+0xa8>)
 8000780:	4293      	cmp	r3, r2
 8000782:	d136      	bne.n	80007f2 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000784:	2340      	movs	r3, #64	; 0x40
 8000786:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000788:	2300      	movs	r3, #0
 800078a:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800078c:	f107 0310 	add.w	r3, r7, #16
 8000790:	4618      	mov	r0, r3
 8000792:	f001 feab 	bl	80024ec <HAL_RCCEx_PeriphCLKConfig>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800079c:	f000 f8df 	bl	800095e <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a0:	4b17      	ldr	r3, [pc, #92]	; (8000800 <HAL_I2C_MspInit+0xac>)
 80007a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a4:	4a16      	ldr	r2, [pc, #88]	; (8000800 <HAL_I2C_MspInit+0xac>)
 80007a6:	f043 0302 	orr.w	r3, r3, #2
 80007aa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ac:	4b14      	ldr	r3, [pc, #80]	; (8000800 <HAL_I2C_MspInit+0xac>)
 80007ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b0:	f003 0302 	and.w	r3, r3, #2
 80007b4:	60fb      	str	r3, [r7, #12]
 80007b6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007b8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007bc:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007be:	2312      	movs	r3, #18
 80007c0:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c6:	2300      	movs	r3, #0
 80007c8:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007ca:	2304      	movs	r3, #4
 80007cc:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ce:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80007d2:	4619      	mov	r1, r3
 80007d4:	480b      	ldr	r0, [pc, #44]	; (8000804 <HAL_I2C_MspInit+0xb0>)
 80007d6:	f000 fc99 	bl	800110c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <HAL_I2C_MspInit+0xac>)
 80007dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007de:	4a08      	ldr	r2, [pc, #32]	; (8000800 <HAL_I2C_MspInit+0xac>)
 80007e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007e4:	6593      	str	r3, [r2, #88]	; 0x58
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <HAL_I2C_MspInit+0xac>)
 80007e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007f2:	bf00      	nop
 80007f4:	3768      	adds	r7, #104	; 0x68
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40005400 	.word	0x40005400
 8000800:	40021000 	.word	0x40021000
 8000804:	48000400 	.word	0x48000400

08000808 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
int main(void)
 800080e:	f107 0310 	add.w	r3, r7, #16
 8000812:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN 1 */
	int __io_putchar(int ch) {
		HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
	return ch;
	}
	printf("Test\r\n");
 8000814:	4828      	ldr	r0, [pc, #160]	; (80008b8 <main+0xb0>)
 8000816:	f004 f8a7 	bl	8004968 <puts>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800081a:	f000 fb00 	bl	8000e1e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800081e:	f000 f853 	bl	80008c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000822:	f7ff fef1 	bl	8000608 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000826:	f7ff ff55 	bl	80006d4 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800082a:	f000 f9eb 	bl	8000c04 <MX_USART1_UART_Init>
  MX_LPUART1_UART_Init();
 800082e:	f000 f99f 	bl	8000b70 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 8000832:	2201      	movs	r2, #1
 8000834:	2120      	movs	r1, #32
 8000836:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800083a:	f000 fde9 	bl	8001410 <HAL_GPIO_WritePin>
    HAL_Delay(2000);
 800083e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000842:	f000 fb5d 	bl	8000f00 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	2120      	movs	r1, #32
 800084a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800084e:	f000 fddf 	bl	8001410 <HAL_GPIO_WritePin>
    BSP_LCD_DisplayStringAt(0, LINE(5), (uint8_t *)mess,CENTER_MODE);
    HAL_Delay(1000);
    BSP_LCD_Clear(LCD_COLOR_WHITE);
    */
    // Go through all possible i2c addresses
      for (uint8_t i = 0; i < 128; i++) {
 8000852:	2300      	movs	r3, #0
 8000854:	71fb      	strb	r3, [r7, #7]
 8000856:	e023      	b.n	80008a0 <main+0x98>

    	  if (HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 3, 5) == HAL_OK) {
 8000858:	79fb      	ldrb	r3, [r7, #7]
 800085a:	b29b      	uxth	r3, r3
 800085c:	005b      	lsls	r3, r3, #1
 800085e:	b299      	uxth	r1, r3
 8000860:	2305      	movs	r3, #5
 8000862:	2203      	movs	r2, #3
 8000864:	4815      	ldr	r0, [pc, #84]	; (80008bc <main+0xb4>)
 8000866:	f000 fe7a 	bl	800155e <HAL_I2C_IsDeviceReady>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d105      	bne.n	800087c <main+0x74>
    		  // We got an ack
    		  printf("%2x ", i);
 8000870:	79fb      	ldrb	r3, [r7, #7]
 8000872:	4619      	mov	r1, r3
 8000874:	4812      	ldr	r0, [pc, #72]	; (80008c0 <main+0xb8>)
 8000876:	f003 ffdb 	bl	8004830 <iprintf>
 800087a:	e002      	b.n	8000882 <main+0x7a>
    	  } else {
    		  printf("-- ");
 800087c:	4811      	ldr	r0, [pc, #68]	; (80008c4 <main+0xbc>)
 800087e:	f003 ffd7 	bl	8004830 <iprintf>
    	  }

    	  if (i > 0 && (i + 1) % 16 == 0) printf("\n");
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d008      	beq.n	800089a <main+0x92>
 8000888:	79fb      	ldrb	r3, [r7, #7]
 800088a:	3301      	adds	r3, #1
 800088c:	f003 030f 	and.w	r3, r3, #15
 8000890:	2b00      	cmp	r3, #0
 8000892:	d102      	bne.n	800089a <main+0x92>
 8000894:	200a      	movs	r0, #10
 8000896:	f003 ffe3 	bl	8004860 <putchar>
      for (uint8_t i = 0; i < 128; i++) {
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	3301      	adds	r3, #1
 800089e:	71fb      	strb	r3, [r7, #7]
 80008a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	dad7      	bge.n	8000858 <main+0x50>

      }

      printf("\n");
 80008a8:	200a      	movs	r0, #10
 80008aa:	f003 ffd9 	bl	8004860 <putchar>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80008ae:	f7ff fe89 	bl	80005c4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80008b2:	f002 fdf7 	bl	80034a4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008b6:	e7fe      	b.n	80008b6 <main+0xae>
 80008b8:	0800592c 	.word	0x0800592c
 80008bc:	20000094 	.word	0x20000094
 80008c0:	08005934 	.word	0x08005934
 80008c4:	0800593c 	.word	0x0800593c

080008c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b094      	sub	sp, #80	; 0x50
 80008cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ce:	f107 0318 	add.w	r3, r7, #24
 80008d2:	2238      	movs	r2, #56	; 0x38
 80008d4:	2100      	movs	r1, #0
 80008d6:	4618      	mov	r0, r3
 80008d8:	f003 ffa2 	bl	8004820 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008dc:	1d3b      	adds	r3, r7, #4
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
 80008e4:	609a      	str	r2, [r3, #8]
 80008e6:	60da      	str	r2, [r3, #12]
 80008e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80008ea:	2000      	movs	r0, #0
 80008ec:	f001 f816 	bl	800191c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008f0:	2302      	movs	r3, #2
 80008f2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008fa:	2340      	movs	r3, #64	; 0x40
 80008fc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008fe:	2302      	movs	r3, #2
 8000900:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000902:	2302      	movs	r3, #2
 8000904:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000906:	2304      	movs	r3, #4
 8000908:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800090a:	2355      	movs	r3, #85	; 0x55
 800090c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800090e:	2302      	movs	r3, #2
 8000910:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000912:	2302      	movs	r3, #2
 8000914:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000916:	2302      	movs	r3, #2
 8000918:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800091a:	f107 0318 	add.w	r3, r7, #24
 800091e:	4618      	mov	r0, r3
 8000920:	f001 f8b0 	bl	8001a84 <HAL_RCC_OscConfig>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800092a:	f000 f818 	bl	800095e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800092e:	230f      	movs	r3, #15
 8000930:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000932:	2303      	movs	r3, #3
 8000934:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000936:	2300      	movs	r3, #0
 8000938:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800093a:	2300      	movs	r3, #0
 800093c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800093e:	2300      	movs	r3, #0
 8000940:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	2104      	movs	r1, #4
 8000946:	4618      	mov	r0, r3
 8000948:	f001 fbb4 	bl	80020b4 <HAL_RCC_ClockConfig>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000952:	f000 f804 	bl	800095e <Error_Handler>
  }
}
 8000956:	bf00      	nop
 8000958:	3750      	adds	r7, #80	; 0x50
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000962:	bf00      	nop
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000972:	4b12      	ldr	r3, [pc, #72]	; (80009bc <HAL_MspInit+0x50>)
 8000974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000976:	4a11      	ldr	r2, [pc, #68]	; (80009bc <HAL_MspInit+0x50>)
 8000978:	f043 0301 	orr.w	r3, r3, #1
 800097c:	6613      	str	r3, [r2, #96]	; 0x60
 800097e:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <HAL_MspInit+0x50>)
 8000980:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800098a:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <HAL_MspInit+0x50>)
 800098c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800098e:	4a0b      	ldr	r2, [pc, #44]	; (80009bc <HAL_MspInit+0x50>)
 8000990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000994:	6593      	str	r3, [r2, #88]	; 0x58
 8000996:	4b09      	ldr	r3, [pc, #36]	; (80009bc <HAL_MspInit+0x50>)
 8000998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800099a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800099e:	603b      	str	r3, [r7, #0]
 80009a0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009a2:	2200      	movs	r2, #0
 80009a4:	210f      	movs	r1, #15
 80009a6:	f06f 0001 	mvn.w	r0, #1
 80009aa:	f000 fb88 	bl	80010be <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80009ae:	f001 f859 	bl	8001a64 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40021000 	.word	0x40021000

080009c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009c4:	e7fe      	b.n	80009c4 <NMI_Handler+0x4>

080009c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009c6:	b480      	push	{r7}
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ca:	e7fe      	b.n	80009ca <HardFault_Handler+0x4>

080009cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <MemManage_Handler+0x4>

080009d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009d6:	e7fe      	b.n	80009d6 <BusFault_Handler+0x4>

080009d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009dc:	e7fe      	b.n	80009dc <UsageFault_Handler+0x4>

080009de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr

080009ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f0:	f000 fa68 	bl	8000ec4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80009f4:	f003 fa6e 	bl	8003ed4 <xTaskGetSchedulerState>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d001      	beq.n	8000a02 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80009fe:	f003 fcab 	bl	8004358 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	b086      	sub	sp, #24
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	60f8      	str	r0, [r7, #12]
 8000a0e:	60b9      	str	r1, [r7, #8]
 8000a10:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a12:	2300      	movs	r3, #0
 8000a14:	617b      	str	r3, [r7, #20]
 8000a16:	e00a      	b.n	8000a2e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a18:	f3af 8000 	nop.w
 8000a1c:	4601      	mov	r1, r0
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	1c5a      	adds	r2, r3, #1
 8000a22:	60ba      	str	r2, [r7, #8]
 8000a24:	b2ca      	uxtb	r2, r1
 8000a26:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a28:	697b      	ldr	r3, [r7, #20]
 8000a2a:	3301      	adds	r3, #1
 8000a2c:	617b      	str	r3, [r7, #20]
 8000a2e:	697a      	ldr	r2, [r7, #20]
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	429a      	cmp	r2, r3
 8000a34:	dbf0      	blt.n	8000a18 <_read+0x12>
	}

return len;
 8000a36:	687b      	ldr	r3, [r7, #4]
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3718      	adds	r7, #24
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b086      	sub	sp, #24
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	60f8      	str	r0, [r7, #12]
 8000a48:	60b9      	str	r1, [r7, #8]
 8000a4a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	617b      	str	r3, [r7, #20]
 8000a50:	e009      	b.n	8000a66 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a52:	68bb      	ldr	r3, [r7, #8]
 8000a54:	1c5a      	adds	r2, r3, #1
 8000a56:	60ba      	str	r2, [r7, #8]
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	3301      	adds	r3, #1
 8000a64:	617b      	str	r3, [r7, #20]
 8000a66:	697a      	ldr	r2, [r7, #20]
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	dbf1      	blt.n	8000a52 <_write+0x12>
	}
	return len;
 8000a6e:	687b      	ldr	r3, [r7, #4]
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	3718      	adds	r7, #24
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <_close>:

int _close(int file)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
	return -1;
 8000a80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000aa0:	605a      	str	r2, [r3, #4]
	return 0;
 8000aa2:	2300      	movs	r3, #0
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr

08000ab0 <_isatty>:

int _isatty(int file)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
	return 1;
 8000ab8:	2301      	movs	r3, #1
}
 8000aba:	4618      	mov	r0, r3
 8000abc:	370c      	adds	r7, #12
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr

08000ac6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	b085      	sub	sp, #20
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	60f8      	str	r0, [r7, #12]
 8000ace:	60b9      	str	r1, [r7, #8]
 8000ad0:	607a      	str	r2, [r7, #4]
	return 0;
 8000ad2:	2300      	movs	r3, #0
}
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	3714      	adds	r7, #20
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ae8:	4a14      	ldr	r2, [pc, #80]	; (8000b3c <_sbrk+0x5c>)
 8000aea:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <_sbrk+0x60>)
 8000aec:	1ad3      	subs	r3, r2, r3
 8000aee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000af4:	4b13      	ldr	r3, [pc, #76]	; (8000b44 <_sbrk+0x64>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d102      	bne.n	8000b02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000afc:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <_sbrk+0x64>)
 8000afe:	4a12      	ldr	r2, [pc, #72]	; (8000b48 <_sbrk+0x68>)
 8000b00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b02:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <_sbrk+0x64>)
 8000b04:	681a      	ldr	r2, [r3, #0]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4413      	add	r3, r2
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d207      	bcs.n	8000b20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b10:	f003 fe5c 	bl	80047cc <__errno>
 8000b14:	4603      	mov	r3, r0
 8000b16:	220c      	movs	r2, #12
 8000b18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b1e:	e009      	b.n	8000b34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b20:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <_sbrk+0x64>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b26:	4b07      	ldr	r3, [pc, #28]	; (8000b44 <_sbrk+0x64>)
 8000b28:	681a      	ldr	r2, [r3, #0]
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	4a05      	ldr	r2, [pc, #20]	; (8000b44 <_sbrk+0x64>)
 8000b30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b32:	68fb      	ldr	r3, [r7, #12]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3718      	adds	r7, #24
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20008000 	.word	0x20008000
 8000b40:	00000400 	.word	0x00000400
 8000b44:	200000e0 	.word	0x200000e0
 8000b48:	20000f70 	.word	0x20000f70

08000b4c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b50:	4b06      	ldr	r3, [pc, #24]	; (8000b6c <SystemInit+0x20>)
 8000b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b56:	4a05      	ldr	r2, [pc, #20]	; (8000b6c <SystemInit+0x20>)
 8000b58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000b74:	4b20      	ldr	r3, [pc, #128]	; (8000bf8 <MX_LPUART1_UART_Init+0x88>)
 8000b76:	4a21      	ldr	r2, [pc, #132]	; (8000bfc <MX_LPUART1_UART_Init+0x8c>)
 8000b78:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000b7a:	4b1f      	ldr	r3, [pc, #124]	; (8000bf8 <MX_LPUART1_UART_Init+0x88>)
 8000b7c:	4a20      	ldr	r2, [pc, #128]	; (8000c00 <MX_LPUART1_UART_Init+0x90>)
 8000b7e:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b80:	4b1d      	ldr	r3, [pc, #116]	; (8000bf8 <MX_LPUART1_UART_Init+0x88>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000b86:	4b1c      	ldr	r3, [pc, #112]	; (8000bf8 <MX_LPUART1_UART_Init+0x88>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000b8c:	4b1a      	ldr	r3, [pc, #104]	; (8000bf8 <MX_LPUART1_UART_Init+0x88>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000b92:	4b19      	ldr	r3, [pc, #100]	; (8000bf8 <MX_LPUART1_UART_Init+0x88>)
 8000b94:	220c      	movs	r2, #12
 8000b96:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b98:	4b17      	ldr	r3, [pc, #92]	; (8000bf8 <MX_LPUART1_UART_Init+0x88>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b9e:	4b16      	ldr	r3, [pc, #88]	; (8000bf8 <MX_LPUART1_UART_Init+0x88>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ba4:	4b14      	ldr	r3, [pc, #80]	; (8000bf8 <MX_LPUART1_UART_Init+0x88>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000baa:	4b13      	ldr	r3, [pc, #76]	; (8000bf8 <MX_LPUART1_UART_Init+0x88>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000bb0:	4811      	ldr	r0, [pc, #68]	; (8000bf8 <MX_LPUART1_UART_Init+0x88>)
 8000bb2:	f001 fe8b 	bl	80028cc <HAL_UART_Init>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <MX_LPUART1_UART_Init+0x50>
  {
    Error_Handler();
 8000bbc:	f7ff fecf 	bl	800095e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	480d      	ldr	r0, [pc, #52]	; (8000bf8 <MX_LPUART1_UART_Init+0x88>)
 8000bc4:	f002 fb8c 	bl	80032e0 <HAL_UARTEx_SetTxFifoThreshold>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_LPUART1_UART_Init+0x62>
  {
    Error_Handler();
 8000bce:	f7ff fec6 	bl	800095e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	4808      	ldr	r0, [pc, #32]	; (8000bf8 <MX_LPUART1_UART_Init+0x88>)
 8000bd6:	f002 fbc1 	bl	800335c <HAL_UARTEx_SetRxFifoThreshold>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_LPUART1_UART_Init+0x74>
  {
    Error_Handler();
 8000be0:	f7ff febd 	bl	800095e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000be4:	4804      	ldr	r0, [pc, #16]	; (8000bf8 <MX_LPUART1_UART_Init+0x88>)
 8000be6:	f002 fb42 	bl	800326e <HAL_UARTEx_DisableFifoMode>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_LPUART1_UART_Init+0x84>
  {
    Error_Handler();
 8000bf0:	f7ff feb5 	bl	800095e <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000bf4:	bf00      	nop
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	200000e4 	.word	0x200000e4
 8000bfc:	40008000 	.word	0x40008000
 8000c00:	00033324 	.word	0x00033324

08000c04 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c08:	4b22      	ldr	r3, [pc, #136]	; (8000c94 <MX_USART1_UART_Init+0x90>)
 8000c0a:	4a23      	ldr	r2, [pc, #140]	; (8000c98 <MX_USART1_UART_Init+0x94>)
 8000c0c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c0e:	4b21      	ldr	r3, [pc, #132]	; (8000c94 <MX_USART1_UART_Init+0x90>)
 8000c10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c14:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c16:	4b1f      	ldr	r3, [pc, #124]	; (8000c94 <MX_USART1_UART_Init+0x90>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c1c:	4b1d      	ldr	r3, [pc, #116]	; (8000c94 <MX_USART1_UART_Init+0x90>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c22:	4b1c      	ldr	r3, [pc, #112]	; (8000c94 <MX_USART1_UART_Init+0x90>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c28:	4b1a      	ldr	r3, [pc, #104]	; (8000c94 <MX_USART1_UART_Init+0x90>)
 8000c2a:	220c      	movs	r2, #12
 8000c2c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c2e:	4b19      	ldr	r3, [pc, #100]	; (8000c94 <MX_USART1_UART_Init+0x90>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c34:	4b17      	ldr	r3, [pc, #92]	; (8000c94 <MX_USART1_UART_Init+0x90>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c3a:	4b16      	ldr	r3, [pc, #88]	; (8000c94 <MX_USART1_UART_Init+0x90>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000c40:	4b14      	ldr	r3, [pc, #80]	; (8000c94 <MX_USART1_UART_Init+0x90>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c46:	4b13      	ldr	r3, [pc, #76]	; (8000c94 <MX_USART1_UART_Init+0x90>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c4c:	4811      	ldr	r0, [pc, #68]	; (8000c94 <MX_USART1_UART_Init+0x90>)
 8000c4e:	f001 fe3d 	bl	80028cc <HAL_UART_Init>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000c58:	f7ff fe81 	bl	800095e <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	480d      	ldr	r0, [pc, #52]	; (8000c94 <MX_USART1_UART_Init+0x90>)
 8000c60:	f002 fb3e 	bl	80032e0 <HAL_UARTEx_SetTxFifoThreshold>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000c6a:	f7ff fe78 	bl	800095e <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c6e:	2100      	movs	r1, #0
 8000c70:	4808      	ldr	r0, [pc, #32]	; (8000c94 <MX_USART1_UART_Init+0x90>)
 8000c72:	f002 fb73 	bl	800335c <HAL_UARTEx_SetRxFifoThreshold>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000c7c:	f7ff fe6f 	bl	800095e <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000c80:	4804      	ldr	r0, [pc, #16]	; (8000c94 <MX_USART1_UART_Init+0x90>)
 8000c82:	f002 faf4 	bl	800326e <HAL_UARTEx_DisableFifoMode>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000c8c:	f7ff fe67 	bl	800095e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c90:	bf00      	nop
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20000174 	.word	0x20000174
 8000c98:	40013800 	.word	0x40013800

08000c9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b09c      	sub	sp, #112	; 0x70
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000ca8:	2200      	movs	r2, #0
 8000caa:	601a      	str	r2, [r3, #0]
 8000cac:	605a      	str	r2, [r3, #4]
 8000cae:	609a      	str	r2, [r3, #8]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cb4:	f107 0318 	add.w	r3, r7, #24
 8000cb8:	2244      	movs	r2, #68	; 0x44
 8000cba:	2100      	movs	r1, #0
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f003 fdaf 	bl	8004820 <memset>
  if(uartHandle->Instance==LPUART1)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a3d      	ldr	r2, [pc, #244]	; (8000dbc <HAL_UART_MspInit+0x120>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d137      	bne.n	8000d3c <HAL_UART_MspInit+0xa0>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000ccc:	2320      	movs	r3, #32
 8000cce:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cd4:	f107 0318 	add.w	r3, r7, #24
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f001 fc07 	bl	80024ec <HAL_RCCEx_PeriphCLKConfig>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ce4:	f7ff fe3b 	bl	800095e <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000ce8:	4b35      	ldr	r3, [pc, #212]	; (8000dc0 <HAL_UART_MspInit+0x124>)
 8000cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cec:	4a34      	ldr	r2, [pc, #208]	; (8000dc0 <HAL_UART_MspInit+0x124>)
 8000cee:	f043 0301 	orr.w	r3, r3, #1
 8000cf2:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000cf4:	4b32      	ldr	r3, [pc, #200]	; (8000dc0 <HAL_UART_MspInit+0x124>)
 8000cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000cf8:	f003 0301 	and.w	r3, r3, #1
 8000cfc:	617b      	str	r3, [r7, #20]
 8000cfe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d00:	4b2f      	ldr	r3, [pc, #188]	; (8000dc0 <HAL_UART_MspInit+0x124>)
 8000d02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d04:	4a2e      	ldr	r2, [pc, #184]	; (8000dc0 <HAL_UART_MspInit+0x124>)
 8000d06:	f043 0301 	orr.w	r3, r3, #1
 8000d0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d0c:	4b2c      	ldr	r3, [pc, #176]	; (8000dc0 <HAL_UART_MspInit+0x124>)
 8000d0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d10:	f003 0301 	and.w	r3, r3, #1
 8000d14:	613b      	str	r3, [r7, #16]
 8000d16:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000d18:	230c      	movs	r3, #12
 8000d1a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d24:	2300      	movs	r3, #0
 8000d26:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000d28:	230c      	movs	r3, #12
 8000d2a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d30:	4619      	mov	r1, r3
 8000d32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d36:	f000 f9e9 	bl	800110c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000d3a:	e03a      	b.n	8000db2 <HAL_UART_MspInit+0x116>
  else if(uartHandle->Instance==USART1)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a20      	ldr	r2, [pc, #128]	; (8000dc4 <HAL_UART_MspInit+0x128>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d135      	bne.n	8000db2 <HAL_UART_MspInit+0x116>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d46:	2301      	movs	r3, #1
 8000d48:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d4e:	f107 0318 	add.w	r3, r7, #24
 8000d52:	4618      	mov	r0, r3
 8000d54:	f001 fbca 	bl	80024ec <HAL_RCCEx_PeriphCLKConfig>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <HAL_UART_MspInit+0xc6>
      Error_Handler();
 8000d5e:	f7ff fdfe 	bl	800095e <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d62:	4b17      	ldr	r3, [pc, #92]	; (8000dc0 <HAL_UART_MspInit+0x124>)
 8000d64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d66:	4a16      	ldr	r2, [pc, #88]	; (8000dc0 <HAL_UART_MspInit+0x124>)
 8000d68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d6c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d6e:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <HAL_UART_MspInit+0x124>)
 8000d70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d76:	60fb      	str	r3, [r7, #12]
 8000d78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d7a:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <HAL_UART_MspInit+0x124>)
 8000d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d7e:	4a10      	ldr	r2, [pc, #64]	; (8000dc0 <HAL_UART_MspInit+0x124>)
 8000d80:	f043 0304 	orr.w	r3, r3, #4
 8000d84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d86:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <HAL_UART_MspInit+0x124>)
 8000d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8a:	f003 0304 	and.w	r3, r3, #4
 8000d8e:	60bb      	str	r3, [r7, #8]
 8000d90:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000d92:	2330      	movs	r3, #48	; 0x30
 8000d94:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d96:	2302      	movs	r3, #2
 8000d98:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000da2:	2307      	movs	r3, #7
 8000da4:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000da6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000daa:	4619      	mov	r1, r3
 8000dac:	4806      	ldr	r0, [pc, #24]	; (8000dc8 <HAL_UART_MspInit+0x12c>)
 8000dae:	f000 f9ad 	bl	800110c <HAL_GPIO_Init>
}
 8000db2:	bf00      	nop
 8000db4:	3770      	adds	r7, #112	; 0x70
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40008000 	.word	0x40008000
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	40013800 	.word	0x40013800
 8000dc8:	48000800 	.word	0x48000800

08000dcc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000dcc:	480d      	ldr	r0, [pc, #52]	; (8000e04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dce:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dd0:	480d      	ldr	r0, [pc, #52]	; (8000e08 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dd2:	490e      	ldr	r1, [pc, #56]	; (8000e0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dd4:	4a0e      	ldr	r2, [pc, #56]	; (8000e10 <LoopForever+0xe>)
  movs r3, #0
 8000dd6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000dd8:	e002      	b.n	8000de0 <LoopCopyDataInit>

08000dda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ddc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dde:	3304      	adds	r3, #4

08000de0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000de0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000de2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de4:	d3f9      	bcc.n	8000dda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000de6:	4a0b      	ldr	r2, [pc, #44]	; (8000e14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000de8:	4c0b      	ldr	r4, [pc, #44]	; (8000e18 <LoopForever+0x16>)
  movs r3, #0
 8000dea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dec:	e001      	b.n	8000df2 <LoopFillZerobss>

08000dee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000df0:	3204      	adds	r2, #4

08000df2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000df2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df4:	d3fb      	bcc.n	8000dee <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000df6:	f7ff fea9 	bl	8000b4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dfa:	f003 fced 	bl	80047d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000dfe:	f7ff fd03 	bl	8000808 <main>

08000e02 <LoopForever>:

LoopForever:
    b LoopForever
 8000e02:	e7fe      	b.n	8000e02 <LoopForever>
  ldr   r0, =_estack
 8000e04:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000e08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e0c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000e10:	08005a30 	.word	0x08005a30
  ldr r2, =_sbss
 8000e14:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000e18:	20000f6c 	.word	0x20000f6c

08000e1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e1c:	e7fe      	b.n	8000e1c <ADC1_2_IRQHandler>

08000e1e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b082      	sub	sp, #8
 8000e22:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e24:	2300      	movs	r3, #0
 8000e26:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e28:	2003      	movs	r0, #3
 8000e2a:	f000 f93d 	bl	80010a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e2e:	200f      	movs	r0, #15
 8000e30:	f000 f80e 	bl	8000e50 <HAL_InitTick>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d002      	beq.n	8000e40 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	71fb      	strb	r3, [r7, #7]
 8000e3e:	e001      	b.n	8000e44 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e40:	f7ff fd94 	bl	800096c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e44:	79fb      	ldrb	r3, [r7, #7]

}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
	...

08000e50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000e5c:	4b16      	ldr	r3, [pc, #88]	; (8000eb8 <HAL_InitTick+0x68>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d022      	beq.n	8000eaa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000e64:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <HAL_InitTick+0x6c>)
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	4b13      	ldr	r3, [pc, #76]	; (8000eb8 <HAL_InitTick+0x68>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e70:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f000 f93a 	bl	80010f2 <HAL_SYSTICK_Config>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d10f      	bne.n	8000ea4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2b0f      	cmp	r3, #15
 8000e88:	d809      	bhi.n	8000e9e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	6879      	ldr	r1, [r7, #4]
 8000e8e:	f04f 30ff 	mov.w	r0, #4294967295
 8000e92:	f000 f914 	bl	80010be <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e96:	4a0a      	ldr	r2, [pc, #40]	; (8000ec0 <HAL_InitTick+0x70>)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6013      	str	r3, [r2, #0]
 8000e9c:	e007      	b.n	8000eae <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	73fb      	strb	r3, [r7, #15]
 8000ea2:	e004      	b.n	8000eae <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	73fb      	strb	r3, [r7, #15]
 8000ea8:	e001      	b.n	8000eae <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000eae:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	3710      	adds	r7, #16
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20000008 	.word	0x20000008
 8000ebc:	20000000 	.word	0x20000000
 8000ec0:	20000004 	.word	0x20000004

08000ec4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ec8:	4b05      	ldr	r3, [pc, #20]	; (8000ee0 <HAL_IncTick+0x1c>)
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	4b05      	ldr	r3, [pc, #20]	; (8000ee4 <HAL_IncTick+0x20>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	4a03      	ldr	r2, [pc, #12]	; (8000ee0 <HAL_IncTick+0x1c>)
 8000ed4:	6013      	str	r3, [r2, #0]
}
 8000ed6:	bf00      	nop
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	20000204 	.word	0x20000204
 8000ee4:	20000008 	.word	0x20000008

08000ee8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  return uwTick;
 8000eec:	4b03      	ldr	r3, [pc, #12]	; (8000efc <HAL_GetTick+0x14>)
 8000eee:	681b      	ldr	r3, [r3, #0]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	20000204 	.word	0x20000204

08000f00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b084      	sub	sp, #16
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f08:	f7ff ffee 	bl	8000ee8 <HAL_GetTick>
 8000f0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f18:	d004      	beq.n	8000f24 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f1a:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <HAL_Delay+0x40>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	68fa      	ldr	r2, [r7, #12]
 8000f20:	4413      	add	r3, r2
 8000f22:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f24:	bf00      	nop
 8000f26:	f7ff ffdf 	bl	8000ee8 <HAL_GetTick>
 8000f2a:	4602      	mov	r2, r0
 8000f2c:	68bb      	ldr	r3, [r7, #8]
 8000f2e:	1ad3      	subs	r3, r2, r3
 8000f30:	68fa      	ldr	r2, [r7, #12]
 8000f32:	429a      	cmp	r2, r3
 8000f34:	d8f7      	bhi.n	8000f26 <HAL_Delay+0x26>
  {
  }
}
 8000f36:	bf00      	nop
 8000f38:	bf00      	nop
 8000f3a:	3710      	adds	r7, #16
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	20000008 	.word	0x20000008

08000f44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f003 0307 	and.w	r3, r3, #7
 8000f52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f54:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <__NVIC_SetPriorityGrouping+0x44>)
 8000f56:	68db      	ldr	r3, [r3, #12]
 8000f58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f5a:	68ba      	ldr	r2, [r7, #8]
 8000f5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f60:	4013      	ands	r3, r2
 8000f62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f76:	4a04      	ldr	r2, [pc, #16]	; (8000f88 <__NVIC_SetPriorityGrouping+0x44>)
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	60d3      	str	r3, [r2, #12]
}
 8000f7c:	bf00      	nop
 8000f7e:	3714      	adds	r7, #20
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	e000ed00 	.word	0xe000ed00

08000f8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f90:	4b04      	ldr	r3, [pc, #16]	; (8000fa4 <__NVIC_GetPriorityGrouping+0x18>)
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	0a1b      	lsrs	r3, r3, #8
 8000f96:	f003 0307 	and.w	r3, r3, #7
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa2:	4770      	bx	lr
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	6039      	str	r1, [r7, #0]
 8000fb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	db0a      	blt.n	8000fd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	b2da      	uxtb	r2, r3
 8000fc0:	490c      	ldr	r1, [pc, #48]	; (8000ff4 <__NVIC_SetPriority+0x4c>)
 8000fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc6:	0112      	lsls	r2, r2, #4
 8000fc8:	b2d2      	uxtb	r2, r2
 8000fca:	440b      	add	r3, r1
 8000fcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fd0:	e00a      	b.n	8000fe8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	b2da      	uxtb	r2, r3
 8000fd6:	4908      	ldr	r1, [pc, #32]	; (8000ff8 <__NVIC_SetPriority+0x50>)
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	f003 030f 	and.w	r3, r3, #15
 8000fde:	3b04      	subs	r3, #4
 8000fe0:	0112      	lsls	r2, r2, #4
 8000fe2:	b2d2      	uxtb	r2, r2
 8000fe4:	440b      	add	r3, r1
 8000fe6:	761a      	strb	r2, [r3, #24]
}
 8000fe8:	bf00      	nop
 8000fea:	370c      	adds	r7, #12
 8000fec:	46bd      	mov	sp, r7
 8000fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff2:	4770      	bx	lr
 8000ff4:	e000e100 	.word	0xe000e100
 8000ff8:	e000ed00 	.word	0xe000ed00

08000ffc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b089      	sub	sp, #36	; 0x24
 8001000:	af00      	add	r7, sp, #0
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	f1c3 0307 	rsb	r3, r3, #7
 8001016:	2b04      	cmp	r3, #4
 8001018:	bf28      	it	cs
 800101a:	2304      	movcs	r3, #4
 800101c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	3304      	adds	r3, #4
 8001022:	2b06      	cmp	r3, #6
 8001024:	d902      	bls.n	800102c <NVIC_EncodePriority+0x30>
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	3b03      	subs	r3, #3
 800102a:	e000      	b.n	800102e <NVIC_EncodePriority+0x32>
 800102c:	2300      	movs	r3, #0
 800102e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001030:	f04f 32ff 	mov.w	r2, #4294967295
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	43da      	mvns	r2, r3
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	401a      	ands	r2, r3
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001044:	f04f 31ff 	mov.w	r1, #4294967295
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	fa01 f303 	lsl.w	r3, r1, r3
 800104e:	43d9      	mvns	r1, r3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001054:	4313      	orrs	r3, r2
         );
}
 8001056:	4618      	mov	r0, r3
 8001058:	3724      	adds	r7, #36	; 0x24
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
	...

08001064 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3b01      	subs	r3, #1
 8001070:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001074:	d301      	bcc.n	800107a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001076:	2301      	movs	r3, #1
 8001078:	e00f      	b.n	800109a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800107a:	4a0a      	ldr	r2, [pc, #40]	; (80010a4 <SysTick_Config+0x40>)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3b01      	subs	r3, #1
 8001080:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001082:	210f      	movs	r1, #15
 8001084:	f04f 30ff 	mov.w	r0, #4294967295
 8001088:	f7ff ff8e 	bl	8000fa8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800108c:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <SysTick_Config+0x40>)
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001092:	4b04      	ldr	r3, [pc, #16]	; (80010a4 <SysTick_Config+0x40>)
 8001094:	2207      	movs	r2, #7
 8001096:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	e000e010 	.word	0xe000e010

080010a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f7ff ff47 	bl	8000f44 <__NVIC_SetPriorityGrouping>
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b086      	sub	sp, #24
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	4603      	mov	r3, r0
 80010c6:	60b9      	str	r1, [r7, #8]
 80010c8:	607a      	str	r2, [r7, #4]
 80010ca:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010cc:	f7ff ff5e 	bl	8000f8c <__NVIC_GetPriorityGrouping>
 80010d0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	68b9      	ldr	r1, [r7, #8]
 80010d6:	6978      	ldr	r0, [r7, #20]
 80010d8:	f7ff ff90 	bl	8000ffc <NVIC_EncodePriority>
 80010dc:	4602      	mov	r2, r0
 80010de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e2:	4611      	mov	r1, r2
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ff5f 	bl	8000fa8 <__NVIC_SetPriority>
}
 80010ea:	bf00      	nop
 80010ec:	3718      	adds	r7, #24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b082      	sub	sp, #8
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f7ff ffb2 	bl	8001064 <SysTick_Config>
 8001100:	4603      	mov	r3, r0
}
 8001102:	4618      	mov	r0, r3
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
	...

0800110c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800110c:	b480      	push	{r7}
 800110e:	b087      	sub	sp, #28
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800111a:	e15a      	b.n	80013d2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	2101      	movs	r1, #1
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	fa01 f303 	lsl.w	r3, r1, r3
 8001128:	4013      	ands	r3, r2
 800112a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	2b00      	cmp	r3, #0
 8001130:	f000 814c 	beq.w	80013cc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f003 0303 	and.w	r3, r3, #3
 800113c:	2b01      	cmp	r3, #1
 800113e:	d005      	beq.n	800114c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001148:	2b02      	cmp	r3, #2
 800114a:	d130      	bne.n	80011ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	2203      	movs	r2, #3
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	4013      	ands	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	68da      	ldr	r2, [r3, #12]
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	4313      	orrs	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001182:	2201      	movs	r2, #1
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	43db      	mvns	r3, r3
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	4013      	ands	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	091b      	lsrs	r3, r3, #4
 8001198:	f003 0201 	and.w	r2, r3, #1
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f003 0303 	and.w	r3, r3, #3
 80011b6:	2b03      	cmp	r3, #3
 80011b8:	d017      	beq.n	80011ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	68db      	ldr	r3, [r3, #12]
 80011be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	2203      	movs	r2, #3
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43db      	mvns	r3, r3
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	4013      	ands	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	689a      	ldr	r2, [r3, #8]
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f003 0303 	and.w	r3, r3, #3
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d123      	bne.n	800123e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	08da      	lsrs	r2, r3, #3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	3208      	adds	r2, #8
 80011fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001202:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	f003 0307 	and.w	r3, r3, #7
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	220f      	movs	r2, #15
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	43db      	mvns	r3, r3
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	4013      	ands	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	691a      	ldr	r2, [r3, #16]
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	f003 0307 	and.w	r3, r3, #7
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	4313      	orrs	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	08da      	lsrs	r2, r3, #3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3208      	adds	r2, #8
 8001238:	6939      	ldr	r1, [r7, #16]
 800123a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	2203      	movs	r2, #3
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	43db      	mvns	r3, r3
 8001250:	693a      	ldr	r2, [r7, #16]
 8001252:	4013      	ands	r3, r2
 8001254:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f003 0203 	and.w	r2, r3, #3
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	4313      	orrs	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800127a:	2b00      	cmp	r3, #0
 800127c:	f000 80a6 	beq.w	80013cc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001280:	4b5b      	ldr	r3, [pc, #364]	; (80013f0 <HAL_GPIO_Init+0x2e4>)
 8001282:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001284:	4a5a      	ldr	r2, [pc, #360]	; (80013f0 <HAL_GPIO_Init+0x2e4>)
 8001286:	f043 0301 	orr.w	r3, r3, #1
 800128a:	6613      	str	r3, [r2, #96]	; 0x60
 800128c:	4b58      	ldr	r3, [pc, #352]	; (80013f0 <HAL_GPIO_Init+0x2e4>)
 800128e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001290:	f003 0301 	and.w	r3, r3, #1
 8001294:	60bb      	str	r3, [r7, #8]
 8001296:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001298:	4a56      	ldr	r2, [pc, #344]	; (80013f4 <HAL_GPIO_Init+0x2e8>)
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	089b      	lsrs	r3, r3, #2
 800129e:	3302      	adds	r3, #2
 80012a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	f003 0303 	and.w	r3, r3, #3
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	220f      	movs	r2, #15
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	43db      	mvns	r3, r3
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	4013      	ands	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012c2:	d01f      	beq.n	8001304 <HAL_GPIO_Init+0x1f8>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4a4c      	ldr	r2, [pc, #304]	; (80013f8 <HAL_GPIO_Init+0x2ec>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d019      	beq.n	8001300 <HAL_GPIO_Init+0x1f4>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4a4b      	ldr	r2, [pc, #300]	; (80013fc <HAL_GPIO_Init+0x2f0>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d013      	beq.n	80012fc <HAL_GPIO_Init+0x1f0>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4a4a      	ldr	r2, [pc, #296]	; (8001400 <HAL_GPIO_Init+0x2f4>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d00d      	beq.n	80012f8 <HAL_GPIO_Init+0x1ec>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4a49      	ldr	r2, [pc, #292]	; (8001404 <HAL_GPIO_Init+0x2f8>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d007      	beq.n	80012f4 <HAL_GPIO_Init+0x1e8>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	4a48      	ldr	r2, [pc, #288]	; (8001408 <HAL_GPIO_Init+0x2fc>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d101      	bne.n	80012f0 <HAL_GPIO_Init+0x1e4>
 80012ec:	2305      	movs	r3, #5
 80012ee:	e00a      	b.n	8001306 <HAL_GPIO_Init+0x1fa>
 80012f0:	2306      	movs	r3, #6
 80012f2:	e008      	b.n	8001306 <HAL_GPIO_Init+0x1fa>
 80012f4:	2304      	movs	r3, #4
 80012f6:	e006      	b.n	8001306 <HAL_GPIO_Init+0x1fa>
 80012f8:	2303      	movs	r3, #3
 80012fa:	e004      	b.n	8001306 <HAL_GPIO_Init+0x1fa>
 80012fc:	2302      	movs	r3, #2
 80012fe:	e002      	b.n	8001306 <HAL_GPIO_Init+0x1fa>
 8001300:	2301      	movs	r3, #1
 8001302:	e000      	b.n	8001306 <HAL_GPIO_Init+0x1fa>
 8001304:	2300      	movs	r3, #0
 8001306:	697a      	ldr	r2, [r7, #20]
 8001308:	f002 0203 	and.w	r2, r2, #3
 800130c:	0092      	lsls	r2, r2, #2
 800130e:	4093      	lsls	r3, r2
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	4313      	orrs	r3, r2
 8001314:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001316:	4937      	ldr	r1, [pc, #220]	; (80013f4 <HAL_GPIO_Init+0x2e8>)
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	089b      	lsrs	r3, r3, #2
 800131c:	3302      	adds	r3, #2
 800131e:	693a      	ldr	r2, [r7, #16]
 8001320:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001324:	4b39      	ldr	r3, [pc, #228]	; (800140c <HAL_GPIO_Init+0x300>)
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	43db      	mvns	r3, r3
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	4013      	ands	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d003      	beq.n	8001348 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	4313      	orrs	r3, r2
 8001346:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001348:	4a30      	ldr	r2, [pc, #192]	; (800140c <HAL_GPIO_Init+0x300>)
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800134e:	4b2f      	ldr	r3, [pc, #188]	; (800140c <HAL_GPIO_Init+0x300>)
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	43db      	mvns	r3, r3
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	4013      	ands	r3, r2
 800135c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001366:	2b00      	cmp	r3, #0
 8001368:	d003      	beq.n	8001372 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	4313      	orrs	r3, r2
 8001370:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001372:	4a26      	ldr	r2, [pc, #152]	; (800140c <HAL_GPIO_Init+0x300>)
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001378:	4b24      	ldr	r3, [pc, #144]	; (800140c <HAL_GPIO_Init+0x300>)
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	43db      	mvns	r3, r3
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	4013      	ands	r3, r2
 8001386:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d003      	beq.n	800139c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	4313      	orrs	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800139c:	4a1b      	ldr	r2, [pc, #108]	; (800140c <HAL_GPIO_Init+0x300>)
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80013a2:	4b1a      	ldr	r3, [pc, #104]	; (800140c <HAL_GPIO_Init+0x300>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	43db      	mvns	r3, r3
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	4013      	ands	r3, r2
 80013b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d003      	beq.n	80013c6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013c6:	4a11      	ldr	r2, [pc, #68]	; (800140c <HAL_GPIO_Init+0x300>)
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	3301      	adds	r3, #1
 80013d0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	681a      	ldr	r2, [r3, #0]
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	fa22 f303 	lsr.w	r3, r2, r3
 80013dc:	2b00      	cmp	r3, #0
 80013de:	f47f ae9d 	bne.w	800111c <HAL_GPIO_Init+0x10>
  }
}
 80013e2:	bf00      	nop
 80013e4:	bf00      	nop
 80013e6:	371c      	adds	r7, #28
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	40021000 	.word	0x40021000
 80013f4:	40010000 	.word	0x40010000
 80013f8:	48000400 	.word	0x48000400
 80013fc:	48000800 	.word	0x48000800
 8001400:	48000c00 	.word	0x48000c00
 8001404:	48001000 	.word	0x48001000
 8001408:	48001400 	.word	0x48001400
 800140c:	40010400 	.word	0x40010400

08001410 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	460b      	mov	r3, r1
 800141a:	807b      	strh	r3, [r7, #2]
 800141c:	4613      	mov	r3, r2
 800141e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001420:	787b      	ldrb	r3, [r7, #1]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d003      	beq.n	800142e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001426:	887a      	ldrh	r2, [r7, #2]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800142c:	e002      	b.n	8001434 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800142e:	887a      	ldrh	r2, [r7, #2]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d101      	bne.n	8001452 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e081      	b.n	8001556 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001458:	b2db      	uxtb	r3, r3
 800145a:	2b00      	cmp	r3, #0
 800145c:	d106      	bne.n	800146c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2200      	movs	r2, #0
 8001462:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f7ff f974 	bl	8000754 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	2224      	movs	r2, #36	; 0x24
 8001470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f022 0201 	bic.w	r2, r2, #1
 8001482:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685a      	ldr	r2, [r3, #4]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001490:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	689a      	ldr	r2, [r3, #8]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014a0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	68db      	ldr	r3, [r3, #12]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d107      	bne.n	80014ba <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	689a      	ldr	r2, [r3, #8]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	e006      	b.n	80014c8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	689a      	ldr	r2, [r3, #8]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80014c6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d104      	bne.n	80014da <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80014d8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	687a      	ldr	r2, [r7, #4]
 80014e2:	6812      	ldr	r2, [r2, #0]
 80014e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014ec:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	68da      	ldr	r2, [r3, #12]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014fc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	691a      	ldr	r2, [r3, #16]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	695b      	ldr	r3, [r3, #20]
 8001506:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	699b      	ldr	r3, [r3, #24]
 800150e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	430a      	orrs	r2, r1
 8001516:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	69d9      	ldr	r1, [r3, #28]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a1a      	ldr	r2, [r3, #32]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	430a      	orrs	r2, r1
 8001526:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f042 0201 	orr.w	r2, r2, #1
 8001536:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2200      	movs	r2, #0
 800153c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2220      	movs	r2, #32
 8001542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2200      	movs	r2, #0
 800154a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b08a      	sub	sp, #40	; 0x28
 8001562:	af02      	add	r7, sp, #8
 8001564:	60f8      	str	r0, [r7, #12]
 8001566:	607a      	str	r2, [r7, #4]
 8001568:	603b      	str	r3, [r7, #0]
 800156a:	460b      	mov	r3, r1
 800156c:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800156e:	2300      	movs	r3, #0
 8001570:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001578:	b2db      	uxtb	r3, r3
 800157a:	2b20      	cmp	r3, #32
 800157c:	f040 80f1 	bne.w	8001762 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	699b      	ldr	r3, [r3, #24]
 8001586:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800158a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800158e:	d101      	bne.n	8001594 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8001590:	2302      	movs	r3, #2
 8001592:	e0e7      	b.n	8001764 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800159a:	2b01      	cmp	r3, #1
 800159c:	d101      	bne.n	80015a2 <HAL_I2C_IsDeviceReady+0x44>
 800159e:	2302      	movs	r3, #2
 80015a0:	e0e0      	b.n	8001764 <HAL_I2C_IsDeviceReady+0x206>
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	2201      	movs	r2, #1
 80015a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2224      	movs	r2, #36	; 0x24
 80015ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	2200      	movs	r2, #0
 80015b6:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d107      	bne.n	80015d0 <HAL_I2C_IsDeviceReady+0x72>
 80015c0:	897b      	ldrh	r3, [r7, #10]
 80015c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015ca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015ce:	e004      	b.n	80015da <HAL_I2C_IsDeviceReady+0x7c>
 80015d0:	897b      	ldrh	r3, [r7, #10]
 80015d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015d6:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80015da:	68fa      	ldr	r2, [r7, #12]
 80015dc:	6812      	ldr	r2, [r2, #0]
 80015de:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80015e0:	f7ff fc82 	bl	8000ee8 <HAL_GetTick>
 80015e4:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	699b      	ldr	r3, [r3, #24]
 80015ec:	f003 0320 	and.w	r3, r3, #32
 80015f0:	2b20      	cmp	r3, #32
 80015f2:	bf0c      	ite	eq
 80015f4:	2301      	moveq	r3, #1
 80015f6:	2300      	movne	r3, #0
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	699b      	ldr	r3, [r3, #24]
 8001602:	f003 0310 	and.w	r3, r3, #16
 8001606:	2b10      	cmp	r3, #16
 8001608:	bf0c      	ite	eq
 800160a:	2301      	moveq	r3, #1
 800160c:	2300      	movne	r3, #0
 800160e:	b2db      	uxtb	r3, r3
 8001610:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001612:	e034      	b.n	800167e <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800161a:	d01a      	beq.n	8001652 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800161c:	f7ff fc64 	bl	8000ee8 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	683a      	ldr	r2, [r7, #0]
 8001628:	429a      	cmp	r2, r3
 800162a:	d302      	bcc.n	8001632 <HAL_I2C_IsDeviceReady+0xd4>
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d10f      	bne.n	8001652 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	2220      	movs	r2, #32
 8001636:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163e:	f043 0220 	orr.w	r2, r3, #32
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	2200      	movs	r2, #0
 800164a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e088      	b.n	8001764 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	699b      	ldr	r3, [r3, #24]
 8001658:	f003 0320 	and.w	r3, r3, #32
 800165c:	2b20      	cmp	r3, #32
 800165e:	bf0c      	ite	eq
 8001660:	2301      	moveq	r3, #1
 8001662:	2300      	movne	r3, #0
 8001664:	b2db      	uxtb	r3, r3
 8001666:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	699b      	ldr	r3, [r3, #24]
 800166e:	f003 0310 	and.w	r3, r3, #16
 8001672:	2b10      	cmp	r3, #16
 8001674:	bf0c      	ite	eq
 8001676:	2301      	moveq	r3, #1
 8001678:	2300      	movne	r3, #0
 800167a:	b2db      	uxtb	r3, r3
 800167c:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800167e:	7ffb      	ldrb	r3, [r7, #31]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d102      	bne.n	800168a <HAL_I2C_IsDeviceReady+0x12c>
 8001684:	7fbb      	ldrb	r3, [r7, #30]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d0c4      	beq.n	8001614 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	f003 0310 	and.w	r3, r3, #16
 8001694:	2b10      	cmp	r3, #16
 8001696:	d01a      	beq.n	80016ce <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	9300      	str	r3, [sp, #0]
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	2200      	movs	r2, #0
 80016a0:	2120      	movs	r1, #32
 80016a2:	68f8      	ldr	r0, [r7, #12]
 80016a4:	f000 f862 	bl	800176c <I2C_WaitOnFlagUntilTimeout>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e058      	b.n	8001764 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	2220      	movs	r2, #32
 80016b8:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	2220      	movs	r2, #32
 80016be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	2200      	movs	r2, #0
 80016c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80016ca:	2300      	movs	r3, #0
 80016cc:	e04a      	b.n	8001764 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	9300      	str	r3, [sp, #0]
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	2200      	movs	r2, #0
 80016d6:	2120      	movs	r1, #32
 80016d8:	68f8      	ldr	r0, [r7, #12]
 80016da:	f000 f847 	bl	800176c <I2C_WaitOnFlagUntilTimeout>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80016e4:	2301      	movs	r3, #1
 80016e6:	e03d      	b.n	8001764 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2210      	movs	r2, #16
 80016ee:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2220      	movs	r2, #32
 80016f6:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d118      	bne.n	8001732 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	685a      	ldr	r2, [r3, #4]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800170e:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	9300      	str	r3, [sp, #0]
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	2200      	movs	r2, #0
 8001718:	2120      	movs	r1, #32
 800171a:	68f8      	ldr	r0, [r7, #12]
 800171c:	f000 f826 	bl	800176c <I2C_WaitOnFlagUntilTimeout>
 8001720:	4603      	mov	r3, r0
 8001722:	2b00      	cmp	r3, #0
 8001724:	d001      	beq.n	800172a <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e01c      	b.n	8001764 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2220      	movs	r2, #32
 8001730:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	3301      	adds	r3, #1
 8001736:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001738:	697b      	ldr	r3, [r7, #20]
 800173a:	687a      	ldr	r2, [r7, #4]
 800173c:	429a      	cmp	r2, r3
 800173e:	f63f af3b 	bhi.w	80015b8 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	2220      	movs	r2, #32
 8001746:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174e:	f043 0220 	orr.w	r2, r3, #32
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	2200      	movs	r2, #0
 800175a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e000      	b.n	8001764 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8001762:	2302      	movs	r3, #2
  }
}
 8001764:	4618      	mov	r0, r3
 8001766:	3720      	adds	r7, #32
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	60b9      	str	r1, [r7, #8]
 8001776:	603b      	str	r3, [r7, #0]
 8001778:	4613      	mov	r3, r2
 800177a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800177c:	e022      	b.n	80017c4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001784:	d01e      	beq.n	80017c4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001786:	f7ff fbaf 	bl	8000ee8 <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	683a      	ldr	r2, [r7, #0]
 8001792:	429a      	cmp	r2, r3
 8001794:	d302      	bcc.n	800179c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d113      	bne.n	80017c4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a0:	f043 0220 	orr.w	r2, r3, #32
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2220      	movs	r2, #32
 80017ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2200      	movs	r2, #0
 80017b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	2200      	movs	r2, #0
 80017bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e00f      	b.n	80017e4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	699a      	ldr	r2, [r3, #24]
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	4013      	ands	r3, r2
 80017ce:	68ba      	ldr	r2, [r7, #8]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	bf0c      	ite	eq
 80017d4:	2301      	moveq	r3, #1
 80017d6:	2300      	movne	r3, #0
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	461a      	mov	r2, r3
 80017dc:	79fb      	ldrb	r3, [r7, #7]
 80017de:	429a      	cmp	r2, r3
 80017e0:	d0cd      	beq.n	800177e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80017e2:	2300      	movs	r3, #0
}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3710      	adds	r7, #16
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}

080017ec <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b20      	cmp	r3, #32
 8001800:	d138      	bne.n	8001874 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001808:	2b01      	cmp	r3, #1
 800180a:	d101      	bne.n	8001810 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800180c:	2302      	movs	r3, #2
 800180e:	e032      	b.n	8001876 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2201      	movs	r2, #1
 8001814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2224      	movs	r2, #36	; 0x24
 800181c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f022 0201 	bic.w	r2, r2, #1
 800182e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800183e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6819      	ldr	r1, [r3, #0]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	683a      	ldr	r2, [r7, #0]
 800184c:	430a      	orrs	r2, r1
 800184e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f042 0201 	orr.w	r2, r2, #1
 800185e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2220      	movs	r2, #32
 8001864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2200      	movs	r2, #0
 800186c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001870:	2300      	movs	r3, #0
 8001872:	e000      	b.n	8001876 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001874:	2302      	movs	r3, #2
  }
}
 8001876:	4618      	mov	r0, r3
 8001878:	370c      	adds	r7, #12
 800187a:	46bd      	mov	sp, r7
 800187c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001880:	4770      	bx	lr

08001882 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001882:	b480      	push	{r7}
 8001884:	b085      	sub	sp, #20
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
 800188a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001892:	b2db      	uxtb	r3, r3
 8001894:	2b20      	cmp	r3, #32
 8001896:	d139      	bne.n	800190c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d101      	bne.n	80018a6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80018a2:	2302      	movs	r3, #2
 80018a4:	e033      	b.n	800190e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2201      	movs	r2, #1
 80018aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2224      	movs	r2, #36	; 0x24
 80018b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f022 0201 	bic.w	r2, r2, #1
 80018c4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80018d4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	021b      	lsls	r3, r3, #8
 80018da:	68fa      	ldr	r2, [r7, #12]
 80018dc:	4313      	orrs	r3, r2
 80018de:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	68fa      	ldr	r2, [r7, #12]
 80018e6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f042 0201 	orr.w	r2, r2, #1
 80018f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2220      	movs	r2, #32
 80018fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2200      	movs	r2, #0
 8001904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001908:	2300      	movs	r3, #0
 800190a:	e000      	b.n	800190e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800190c:	2302      	movs	r3, #2
  }
}
 800190e:	4618      	mov	r0, r3
 8001910:	3714      	adds	r7, #20
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
	...

0800191c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d141      	bne.n	80019ae <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800192a:	4b4b      	ldr	r3, [pc, #300]	; (8001a58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001932:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001936:	d131      	bne.n	800199c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001938:	4b47      	ldr	r3, [pc, #284]	; (8001a58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800193a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800193e:	4a46      	ldr	r2, [pc, #280]	; (8001a58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001940:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001944:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001948:	4b43      	ldr	r3, [pc, #268]	; (8001a58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001950:	4a41      	ldr	r2, [pc, #260]	; (8001a58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001952:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001956:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001958:	4b40      	ldr	r3, [pc, #256]	; (8001a5c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2232      	movs	r2, #50	; 0x32
 800195e:	fb02 f303 	mul.w	r3, r2, r3
 8001962:	4a3f      	ldr	r2, [pc, #252]	; (8001a60 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001964:	fba2 2303 	umull	r2, r3, r2, r3
 8001968:	0c9b      	lsrs	r3, r3, #18
 800196a:	3301      	adds	r3, #1
 800196c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800196e:	e002      	b.n	8001976 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	3b01      	subs	r3, #1
 8001974:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001976:	4b38      	ldr	r3, [pc, #224]	; (8001a58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001978:	695b      	ldr	r3, [r3, #20]
 800197a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800197e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001982:	d102      	bne.n	800198a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d1f2      	bne.n	8001970 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800198a:	4b33      	ldr	r3, [pc, #204]	; (8001a58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800198c:	695b      	ldr	r3, [r3, #20]
 800198e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001992:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001996:	d158      	bne.n	8001a4a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001998:	2303      	movs	r3, #3
 800199a:	e057      	b.n	8001a4c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800199c:	4b2e      	ldr	r3, [pc, #184]	; (8001a58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800199e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019a2:	4a2d      	ldr	r2, [pc, #180]	; (8001a58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80019ac:	e04d      	b.n	8001a4a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019b4:	d141      	bne.n	8001a3a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80019b6:	4b28      	ldr	r3, [pc, #160]	; (8001a58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019c2:	d131      	bne.n	8001a28 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019c4:	4b24      	ldr	r3, [pc, #144]	; (8001a58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019ca:	4a23      	ldr	r2, [pc, #140]	; (8001a58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019d4:	4b20      	ldr	r3, [pc, #128]	; (8001a58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80019dc:	4a1e      	ldr	r2, [pc, #120]	; (8001a58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80019e4:	4b1d      	ldr	r3, [pc, #116]	; (8001a5c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2232      	movs	r2, #50	; 0x32
 80019ea:	fb02 f303 	mul.w	r3, r2, r3
 80019ee:	4a1c      	ldr	r2, [pc, #112]	; (8001a60 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80019f0:	fba2 2303 	umull	r2, r3, r2, r3
 80019f4:	0c9b      	lsrs	r3, r3, #18
 80019f6:	3301      	adds	r3, #1
 80019f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80019fa:	e002      	b.n	8001a02 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	3b01      	subs	r3, #1
 8001a00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a02:	4b15      	ldr	r3, [pc, #84]	; (8001a58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a0e:	d102      	bne.n	8001a16 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d1f2      	bne.n	80019fc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a16:	4b10      	ldr	r3, [pc, #64]	; (8001a58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a18:	695b      	ldr	r3, [r3, #20]
 8001a1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a22:	d112      	bne.n	8001a4a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e011      	b.n	8001a4c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a28:	4b0b      	ldr	r3, [pc, #44]	; (8001a58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a2e:	4a0a      	ldr	r2, [pc, #40]	; (8001a58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a34:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001a38:	e007      	b.n	8001a4a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a3a:	4b07      	ldr	r3, [pc, #28]	; (8001a58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a42:	4a05      	ldr	r2, [pc, #20]	; (8001a58 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a44:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a48:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001a4a:	2300      	movs	r3, #0
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3714      	adds	r7, #20
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr
 8001a58:	40007000 	.word	0x40007000
 8001a5c:	20000000 	.word	0x20000000
 8001a60:	431bde83 	.word	0x431bde83

08001a64 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001a68:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	4a04      	ldr	r2, [pc, #16]	; (8001a80 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001a6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a72:	6093      	str	r3, [r2, #8]
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	40007000 	.word	0x40007000

08001a84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b088      	sub	sp, #32
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e306      	b.n	80020a4 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d075      	beq.n	8001b8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001aa2:	4b97      	ldr	r3, [pc, #604]	; (8001d00 <HAL_RCC_OscConfig+0x27c>)
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	f003 030c 	and.w	r3, r3, #12
 8001aaa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001aac:	4b94      	ldr	r3, [pc, #592]	; (8001d00 <HAL_RCC_OscConfig+0x27c>)
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	f003 0303 	and.w	r3, r3, #3
 8001ab4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001ab6:	69bb      	ldr	r3, [r7, #24]
 8001ab8:	2b0c      	cmp	r3, #12
 8001aba:	d102      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x3e>
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	2b03      	cmp	r3, #3
 8001ac0:	d002      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x44>
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	2b08      	cmp	r3, #8
 8001ac6:	d10b      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ac8:	4b8d      	ldr	r3, [pc, #564]	; (8001d00 <HAL_RCC_OscConfig+0x27c>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d05b      	beq.n	8001b8c <HAL_RCC_OscConfig+0x108>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d157      	bne.n	8001b8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	e2e1      	b.n	80020a4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ae8:	d106      	bne.n	8001af8 <HAL_RCC_OscConfig+0x74>
 8001aea:	4b85      	ldr	r3, [pc, #532]	; (8001d00 <HAL_RCC_OscConfig+0x27c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a84      	ldr	r2, [pc, #528]	; (8001d00 <HAL_RCC_OscConfig+0x27c>)
 8001af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001af4:	6013      	str	r3, [r2, #0]
 8001af6:	e01d      	b.n	8001b34 <HAL_RCC_OscConfig+0xb0>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b00:	d10c      	bne.n	8001b1c <HAL_RCC_OscConfig+0x98>
 8001b02:	4b7f      	ldr	r3, [pc, #508]	; (8001d00 <HAL_RCC_OscConfig+0x27c>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a7e      	ldr	r2, [pc, #504]	; (8001d00 <HAL_RCC_OscConfig+0x27c>)
 8001b08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b0c:	6013      	str	r3, [r2, #0]
 8001b0e:	4b7c      	ldr	r3, [pc, #496]	; (8001d00 <HAL_RCC_OscConfig+0x27c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a7b      	ldr	r2, [pc, #492]	; (8001d00 <HAL_RCC_OscConfig+0x27c>)
 8001b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b18:	6013      	str	r3, [r2, #0]
 8001b1a:	e00b      	b.n	8001b34 <HAL_RCC_OscConfig+0xb0>
 8001b1c:	4b78      	ldr	r3, [pc, #480]	; (8001d00 <HAL_RCC_OscConfig+0x27c>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a77      	ldr	r2, [pc, #476]	; (8001d00 <HAL_RCC_OscConfig+0x27c>)
 8001b22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b26:	6013      	str	r3, [r2, #0]
 8001b28:	4b75      	ldr	r3, [pc, #468]	; (8001d00 <HAL_RCC_OscConfig+0x27c>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a74      	ldr	r2, [pc, #464]	; (8001d00 <HAL_RCC_OscConfig+0x27c>)
 8001b2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d013      	beq.n	8001b64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b3c:	f7ff f9d4 	bl	8000ee8 <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b44:	f7ff f9d0 	bl	8000ee8 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b64      	cmp	r3, #100	; 0x64
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e2a6      	b.n	80020a4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b56:	4b6a      	ldr	r3, [pc, #424]	; (8001d00 <HAL_RCC_OscConfig+0x27c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d0f0      	beq.n	8001b44 <HAL_RCC_OscConfig+0xc0>
 8001b62:	e014      	b.n	8001b8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b64:	f7ff f9c0 	bl	8000ee8 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b6c:	f7ff f9bc 	bl	8000ee8 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b64      	cmp	r3, #100	; 0x64
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e292      	b.n	80020a4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b7e:	4b60      	ldr	r3, [pc, #384]	; (8001d00 <HAL_RCC_OscConfig+0x27c>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1f0      	bne.n	8001b6c <HAL_RCC_OscConfig+0xe8>
 8001b8a:	e000      	b.n	8001b8e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d075      	beq.n	8001c86 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b9a:	4b59      	ldr	r3, [pc, #356]	; (8001d00 <HAL_RCC_OscConfig+0x27c>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f003 030c 	and.w	r3, r3, #12
 8001ba2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ba4:	4b56      	ldr	r3, [pc, #344]	; (8001d00 <HAL_RCC_OscConfig+0x27c>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	f003 0303 	and.w	r3, r3, #3
 8001bac:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	2b0c      	cmp	r3, #12
 8001bb2:	d102      	bne.n	8001bba <HAL_RCC_OscConfig+0x136>
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d002      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x13c>
 8001bba:	69bb      	ldr	r3, [r7, #24]
 8001bbc:	2b04      	cmp	r3, #4
 8001bbe:	d11f      	bne.n	8001c00 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bc0:	4b4f      	ldr	r3, [pc, #316]	; (8001d00 <HAL_RCC_OscConfig+0x27c>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d005      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x154>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d101      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e265      	b.n	80020a4 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd8:	4b49      	ldr	r3, [pc, #292]	; (8001d00 <HAL_RCC_OscConfig+0x27c>)
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	691b      	ldr	r3, [r3, #16]
 8001be4:	061b      	lsls	r3, r3, #24
 8001be6:	4946      	ldr	r1, [pc, #280]	; (8001d00 <HAL_RCC_OscConfig+0x27c>)
 8001be8:	4313      	orrs	r3, r2
 8001bea:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001bec:	4b45      	ldr	r3, [pc, #276]	; (8001d04 <HAL_RCC_OscConfig+0x280>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7ff f92d 	bl	8000e50 <HAL_InitTick>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d043      	beq.n	8001c84 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	e251      	b.n	80020a4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	68db      	ldr	r3, [r3, #12]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d023      	beq.n	8001c50 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c08:	4b3d      	ldr	r3, [pc, #244]	; (8001d00 <HAL_RCC_OscConfig+0x27c>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a3c      	ldr	r2, [pc, #240]	; (8001d00 <HAL_RCC_OscConfig+0x27c>)
 8001c0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c14:	f7ff f968 	bl	8000ee8 <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c1c:	f7ff f964 	bl	8000ee8 <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e23a      	b.n	80020a4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c2e:	4b34      	ldr	r3, [pc, #208]	; (8001d00 <HAL_RCC_OscConfig+0x27c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d0f0      	beq.n	8001c1c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c3a:	4b31      	ldr	r3, [pc, #196]	; (8001d00 <HAL_RCC_OscConfig+0x27c>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	061b      	lsls	r3, r3, #24
 8001c48:	492d      	ldr	r1, [pc, #180]	; (8001d00 <HAL_RCC_OscConfig+0x27c>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	604b      	str	r3, [r1, #4]
 8001c4e:	e01a      	b.n	8001c86 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c50:	4b2b      	ldr	r3, [pc, #172]	; (8001d00 <HAL_RCC_OscConfig+0x27c>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a2a      	ldr	r2, [pc, #168]	; (8001d00 <HAL_RCC_OscConfig+0x27c>)
 8001c56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c5c:	f7ff f944 	bl	8000ee8 <HAL_GetTick>
 8001c60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c62:	e008      	b.n	8001c76 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c64:	f7ff f940 	bl	8000ee8 <HAL_GetTick>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	1ad3      	subs	r3, r2, r3
 8001c6e:	2b02      	cmp	r3, #2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e216      	b.n	80020a4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c76:	4b22      	ldr	r3, [pc, #136]	; (8001d00 <HAL_RCC_OscConfig+0x27c>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1f0      	bne.n	8001c64 <HAL_RCC_OscConfig+0x1e0>
 8001c82:	e000      	b.n	8001c86 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c84:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0308 	and.w	r3, r3, #8
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d041      	beq.n	8001d16 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	695b      	ldr	r3, [r3, #20]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d01c      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c9a:	4b19      	ldr	r3, [pc, #100]	; (8001d00 <HAL_RCC_OscConfig+0x27c>)
 8001c9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ca0:	4a17      	ldr	r2, [pc, #92]	; (8001d00 <HAL_RCC_OscConfig+0x27c>)
 8001ca2:	f043 0301 	orr.w	r3, r3, #1
 8001ca6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001caa:	f7ff f91d 	bl	8000ee8 <HAL_GetTick>
 8001cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cb0:	e008      	b.n	8001cc4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cb2:	f7ff f919 	bl	8000ee8 <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e1ef      	b.n	80020a4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cc4:	4b0e      	ldr	r3, [pc, #56]	; (8001d00 <HAL_RCC_OscConfig+0x27c>)
 8001cc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d0ef      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x22e>
 8001cd2:	e020      	b.n	8001d16 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cd4:	4b0a      	ldr	r3, [pc, #40]	; (8001d00 <HAL_RCC_OscConfig+0x27c>)
 8001cd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cda:	4a09      	ldr	r2, [pc, #36]	; (8001d00 <HAL_RCC_OscConfig+0x27c>)
 8001cdc:	f023 0301 	bic.w	r3, r3, #1
 8001ce0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce4:	f7ff f900 	bl	8000ee8 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cea:	e00d      	b.n	8001d08 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cec:	f7ff f8fc 	bl	8000ee8 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d906      	bls.n	8001d08 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e1d2      	b.n	80020a4 <HAL_RCC_OscConfig+0x620>
 8001cfe:	bf00      	nop
 8001d00:	40021000 	.word	0x40021000
 8001d04:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d08:	4b8c      	ldr	r3, [pc, #560]	; (8001f3c <HAL_RCC_OscConfig+0x4b8>)
 8001d0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d1ea      	bne.n	8001cec <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0304 	and.w	r3, r3, #4
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	f000 80a6 	beq.w	8001e70 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d24:	2300      	movs	r3, #0
 8001d26:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d28:	4b84      	ldr	r3, [pc, #528]	; (8001f3c <HAL_RCC_OscConfig+0x4b8>)
 8001d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d101      	bne.n	8001d38 <HAL_RCC_OscConfig+0x2b4>
 8001d34:	2301      	movs	r3, #1
 8001d36:	e000      	b.n	8001d3a <HAL_RCC_OscConfig+0x2b6>
 8001d38:	2300      	movs	r3, #0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d00d      	beq.n	8001d5a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d3e:	4b7f      	ldr	r3, [pc, #508]	; (8001f3c <HAL_RCC_OscConfig+0x4b8>)
 8001d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d42:	4a7e      	ldr	r2, [pc, #504]	; (8001f3c <HAL_RCC_OscConfig+0x4b8>)
 8001d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d48:	6593      	str	r3, [r2, #88]	; 0x58
 8001d4a:	4b7c      	ldr	r3, [pc, #496]	; (8001f3c <HAL_RCC_OscConfig+0x4b8>)
 8001d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d52:	60fb      	str	r3, [r7, #12]
 8001d54:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001d56:	2301      	movs	r3, #1
 8001d58:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d5a:	4b79      	ldr	r3, [pc, #484]	; (8001f40 <HAL_RCC_OscConfig+0x4bc>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d118      	bne.n	8001d98 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d66:	4b76      	ldr	r3, [pc, #472]	; (8001f40 <HAL_RCC_OscConfig+0x4bc>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a75      	ldr	r2, [pc, #468]	; (8001f40 <HAL_RCC_OscConfig+0x4bc>)
 8001d6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d72:	f7ff f8b9 	bl	8000ee8 <HAL_GetTick>
 8001d76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d78:	e008      	b.n	8001d8c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d7a:	f7ff f8b5 	bl	8000ee8 <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d901      	bls.n	8001d8c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e18b      	b.n	80020a4 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d8c:	4b6c      	ldr	r3, [pc, #432]	; (8001f40 <HAL_RCC_OscConfig+0x4bc>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d0f0      	beq.n	8001d7a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	2b01      	cmp	r3, #1
 8001d9e:	d108      	bne.n	8001db2 <HAL_RCC_OscConfig+0x32e>
 8001da0:	4b66      	ldr	r3, [pc, #408]	; (8001f3c <HAL_RCC_OscConfig+0x4b8>)
 8001da2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001da6:	4a65      	ldr	r2, [pc, #404]	; (8001f3c <HAL_RCC_OscConfig+0x4b8>)
 8001da8:	f043 0301 	orr.w	r3, r3, #1
 8001dac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001db0:	e024      	b.n	8001dfc <HAL_RCC_OscConfig+0x378>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	2b05      	cmp	r3, #5
 8001db8:	d110      	bne.n	8001ddc <HAL_RCC_OscConfig+0x358>
 8001dba:	4b60      	ldr	r3, [pc, #384]	; (8001f3c <HAL_RCC_OscConfig+0x4b8>)
 8001dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dc0:	4a5e      	ldr	r2, [pc, #376]	; (8001f3c <HAL_RCC_OscConfig+0x4b8>)
 8001dc2:	f043 0304 	orr.w	r3, r3, #4
 8001dc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dca:	4b5c      	ldr	r3, [pc, #368]	; (8001f3c <HAL_RCC_OscConfig+0x4b8>)
 8001dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dd0:	4a5a      	ldr	r2, [pc, #360]	; (8001f3c <HAL_RCC_OscConfig+0x4b8>)
 8001dd2:	f043 0301 	orr.w	r3, r3, #1
 8001dd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dda:	e00f      	b.n	8001dfc <HAL_RCC_OscConfig+0x378>
 8001ddc:	4b57      	ldr	r3, [pc, #348]	; (8001f3c <HAL_RCC_OscConfig+0x4b8>)
 8001dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001de2:	4a56      	ldr	r2, [pc, #344]	; (8001f3c <HAL_RCC_OscConfig+0x4b8>)
 8001de4:	f023 0301 	bic.w	r3, r3, #1
 8001de8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dec:	4b53      	ldr	r3, [pc, #332]	; (8001f3c <HAL_RCC_OscConfig+0x4b8>)
 8001dee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001df2:	4a52      	ldr	r2, [pc, #328]	; (8001f3c <HAL_RCC_OscConfig+0x4b8>)
 8001df4:	f023 0304 	bic.w	r3, r3, #4
 8001df8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d016      	beq.n	8001e32 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e04:	f7ff f870 	bl	8000ee8 <HAL_GetTick>
 8001e08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e0a:	e00a      	b.n	8001e22 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e0c:	f7ff f86c 	bl	8000ee8 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e140      	b.n	80020a4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e22:	4b46      	ldr	r3, [pc, #280]	; (8001f3c <HAL_RCC_OscConfig+0x4b8>)
 8001e24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d0ed      	beq.n	8001e0c <HAL_RCC_OscConfig+0x388>
 8001e30:	e015      	b.n	8001e5e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e32:	f7ff f859 	bl	8000ee8 <HAL_GetTick>
 8001e36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e38:	e00a      	b.n	8001e50 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e3a:	f7ff f855 	bl	8000ee8 <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e129      	b.n	80020a4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e50:	4b3a      	ldr	r3, [pc, #232]	; (8001f3c <HAL_RCC_OscConfig+0x4b8>)
 8001e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1ed      	bne.n	8001e3a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e5e:	7ffb      	ldrb	r3, [r7, #31]
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d105      	bne.n	8001e70 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e64:	4b35      	ldr	r3, [pc, #212]	; (8001f3c <HAL_RCC_OscConfig+0x4b8>)
 8001e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e68:	4a34      	ldr	r2, [pc, #208]	; (8001f3c <HAL_RCC_OscConfig+0x4b8>)
 8001e6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e6e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0320 	and.w	r3, r3, #32
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d03c      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d01c      	beq.n	8001ebe <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e84:	4b2d      	ldr	r3, [pc, #180]	; (8001f3c <HAL_RCC_OscConfig+0x4b8>)
 8001e86:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e8a:	4a2c      	ldr	r2, [pc, #176]	; (8001f3c <HAL_RCC_OscConfig+0x4b8>)
 8001e8c:	f043 0301 	orr.w	r3, r3, #1
 8001e90:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e94:	f7ff f828 	bl	8000ee8 <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e9c:	f7ff f824 	bl	8000ee8 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e0fa      	b.n	80020a4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001eae:	4b23      	ldr	r3, [pc, #140]	; (8001f3c <HAL_RCC_OscConfig+0x4b8>)
 8001eb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001eb4:	f003 0302 	and.w	r3, r3, #2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d0ef      	beq.n	8001e9c <HAL_RCC_OscConfig+0x418>
 8001ebc:	e01b      	b.n	8001ef6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001ebe:	4b1f      	ldr	r3, [pc, #124]	; (8001f3c <HAL_RCC_OscConfig+0x4b8>)
 8001ec0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ec4:	4a1d      	ldr	r2, [pc, #116]	; (8001f3c <HAL_RCC_OscConfig+0x4b8>)
 8001ec6:	f023 0301 	bic.w	r3, r3, #1
 8001eca:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ece:	f7ff f80b 	bl	8000ee8 <HAL_GetTick>
 8001ed2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ed4:	e008      	b.n	8001ee8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ed6:	f7ff f807 	bl	8000ee8 <HAL_GetTick>
 8001eda:	4602      	mov	r2, r0
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d901      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e0dd      	b.n	80020a4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ee8:	4b14      	ldr	r3, [pc, #80]	; (8001f3c <HAL_RCC_OscConfig+0x4b8>)
 8001eea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d1ef      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f000 80d1 	beq.w	80020a2 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f00:	4b0e      	ldr	r3, [pc, #56]	; (8001f3c <HAL_RCC_OscConfig+0x4b8>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	f003 030c 	and.w	r3, r3, #12
 8001f08:	2b0c      	cmp	r3, #12
 8001f0a:	f000 808b 	beq.w	8002024 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	69db      	ldr	r3, [r3, #28]
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d15e      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f16:	4b09      	ldr	r3, [pc, #36]	; (8001f3c <HAL_RCC_OscConfig+0x4b8>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a08      	ldr	r2, [pc, #32]	; (8001f3c <HAL_RCC_OscConfig+0x4b8>)
 8001f1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f20:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f22:	f7fe ffe1 	bl	8000ee8 <HAL_GetTick>
 8001f26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f28:	e00c      	b.n	8001f44 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f2a:	f7fe ffdd 	bl	8000ee8 <HAL_GetTick>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	1ad3      	subs	r3, r2, r3
 8001f34:	2b02      	cmp	r3, #2
 8001f36:	d905      	bls.n	8001f44 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e0b3      	b.n	80020a4 <HAL_RCC_OscConfig+0x620>
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f44:	4b59      	ldr	r3, [pc, #356]	; (80020ac <HAL_RCC_OscConfig+0x628>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d1ec      	bne.n	8001f2a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f50:	4b56      	ldr	r3, [pc, #344]	; (80020ac <HAL_RCC_OscConfig+0x628>)
 8001f52:	68da      	ldr	r2, [r3, #12]
 8001f54:	4b56      	ldr	r3, [pc, #344]	; (80020b0 <HAL_RCC_OscConfig+0x62c>)
 8001f56:	4013      	ands	r3, r2
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	6a11      	ldr	r1, [r2, #32]
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f60:	3a01      	subs	r2, #1
 8001f62:	0112      	lsls	r2, r2, #4
 8001f64:	4311      	orrs	r1, r2
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001f6a:	0212      	lsls	r2, r2, #8
 8001f6c:	4311      	orrs	r1, r2
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f72:	0852      	lsrs	r2, r2, #1
 8001f74:	3a01      	subs	r2, #1
 8001f76:	0552      	lsls	r2, r2, #21
 8001f78:	4311      	orrs	r1, r2
 8001f7a:	687a      	ldr	r2, [r7, #4]
 8001f7c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f7e:	0852      	lsrs	r2, r2, #1
 8001f80:	3a01      	subs	r2, #1
 8001f82:	0652      	lsls	r2, r2, #25
 8001f84:	4311      	orrs	r1, r2
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001f8a:	06d2      	lsls	r2, r2, #27
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	4947      	ldr	r1, [pc, #284]	; (80020ac <HAL_RCC_OscConfig+0x628>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f94:	4b45      	ldr	r3, [pc, #276]	; (80020ac <HAL_RCC_OscConfig+0x628>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a44      	ldr	r2, [pc, #272]	; (80020ac <HAL_RCC_OscConfig+0x628>)
 8001f9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f9e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fa0:	4b42      	ldr	r3, [pc, #264]	; (80020ac <HAL_RCC_OscConfig+0x628>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	4a41      	ldr	r2, [pc, #260]	; (80020ac <HAL_RCC_OscConfig+0x628>)
 8001fa6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001faa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fac:	f7fe ff9c 	bl	8000ee8 <HAL_GetTick>
 8001fb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fb2:	e008      	b.n	8001fc6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb4:	f7fe ff98 	bl	8000ee8 <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e06e      	b.n	80020a4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fc6:	4b39      	ldr	r3, [pc, #228]	; (80020ac <HAL_RCC_OscConfig+0x628>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d0f0      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x530>
 8001fd2:	e066      	b.n	80020a2 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fd4:	4b35      	ldr	r3, [pc, #212]	; (80020ac <HAL_RCC_OscConfig+0x628>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a34      	ldr	r2, [pc, #208]	; (80020ac <HAL_RCC_OscConfig+0x628>)
 8001fda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fde:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001fe0:	4b32      	ldr	r3, [pc, #200]	; (80020ac <HAL_RCC_OscConfig+0x628>)
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	4a31      	ldr	r2, [pc, #196]	; (80020ac <HAL_RCC_OscConfig+0x628>)
 8001fe6:	f023 0303 	bic.w	r3, r3, #3
 8001fea:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001fec:	4b2f      	ldr	r3, [pc, #188]	; (80020ac <HAL_RCC_OscConfig+0x628>)
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	4a2e      	ldr	r2, [pc, #184]	; (80020ac <HAL_RCC_OscConfig+0x628>)
 8001ff2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001ff6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ffa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ffc:	f7fe ff74 	bl	8000ee8 <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002004:	f7fe ff70 	bl	8000ee8 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e046      	b.n	80020a4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002016:	4b25      	ldr	r3, [pc, #148]	; (80020ac <HAL_RCC_OscConfig+0x628>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d1f0      	bne.n	8002004 <HAL_RCC_OscConfig+0x580>
 8002022:	e03e      	b.n	80020a2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	69db      	ldr	r3, [r3, #28]
 8002028:	2b01      	cmp	r3, #1
 800202a:	d101      	bne.n	8002030 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e039      	b.n	80020a4 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002030:	4b1e      	ldr	r3, [pc, #120]	; (80020ac <HAL_RCC_OscConfig+0x628>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	f003 0203 	and.w	r2, r3, #3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a1b      	ldr	r3, [r3, #32]
 8002040:	429a      	cmp	r2, r3
 8002042:	d12c      	bne.n	800209e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204e:	3b01      	subs	r3, #1
 8002050:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002052:	429a      	cmp	r2, r3
 8002054:	d123      	bne.n	800209e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002060:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002062:	429a      	cmp	r2, r3
 8002064:	d11b      	bne.n	800209e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002070:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002072:	429a      	cmp	r2, r3
 8002074:	d113      	bne.n	800209e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002080:	085b      	lsrs	r3, r3, #1
 8002082:	3b01      	subs	r3, #1
 8002084:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002086:	429a      	cmp	r2, r3
 8002088:	d109      	bne.n	800209e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800208a:	697b      	ldr	r3, [r7, #20]
 800208c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002094:	085b      	lsrs	r3, r3, #1
 8002096:	3b01      	subs	r3, #1
 8002098:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800209a:	429a      	cmp	r2, r3
 800209c:	d001      	beq.n	80020a2 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e000      	b.n	80020a4 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3720      	adds	r7, #32
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40021000 	.word	0x40021000
 80020b0:	019f800c 	.word	0x019f800c

080020b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
 80020bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80020be:	2300      	movs	r3, #0
 80020c0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d101      	bne.n	80020cc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80020c8:	2301      	movs	r3, #1
 80020ca:	e11e      	b.n	800230a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020cc:	4b91      	ldr	r3, [pc, #580]	; (8002314 <HAL_RCC_ClockConfig+0x260>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 030f 	and.w	r3, r3, #15
 80020d4:	683a      	ldr	r2, [r7, #0]
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d910      	bls.n	80020fc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020da:	4b8e      	ldr	r3, [pc, #568]	; (8002314 <HAL_RCC_ClockConfig+0x260>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f023 020f 	bic.w	r2, r3, #15
 80020e2:	498c      	ldr	r1, [pc, #560]	; (8002314 <HAL_RCC_ClockConfig+0x260>)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	4313      	orrs	r3, r2
 80020e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ea:	4b8a      	ldr	r3, [pc, #552]	; (8002314 <HAL_RCC_ClockConfig+0x260>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 030f 	and.w	r3, r3, #15
 80020f2:	683a      	ldr	r2, [r7, #0]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d001      	beq.n	80020fc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e106      	b.n	800230a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0301 	and.w	r3, r3, #1
 8002104:	2b00      	cmp	r3, #0
 8002106:	d073      	beq.n	80021f0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	2b03      	cmp	r3, #3
 800210e:	d129      	bne.n	8002164 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002110:	4b81      	ldr	r3, [pc, #516]	; (8002318 <HAL_RCC_ClockConfig+0x264>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d101      	bne.n	8002120 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e0f4      	b.n	800230a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002120:	f000 f99e 	bl	8002460 <RCC_GetSysClockFreqFromPLLSource>
 8002124:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	4a7c      	ldr	r2, [pc, #496]	; (800231c <HAL_RCC_ClockConfig+0x268>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d93f      	bls.n	80021ae <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800212e:	4b7a      	ldr	r3, [pc, #488]	; (8002318 <HAL_RCC_ClockConfig+0x264>)
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d009      	beq.n	800214e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002142:	2b00      	cmp	r3, #0
 8002144:	d033      	beq.n	80021ae <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800214a:	2b00      	cmp	r3, #0
 800214c:	d12f      	bne.n	80021ae <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800214e:	4b72      	ldr	r3, [pc, #456]	; (8002318 <HAL_RCC_ClockConfig+0x264>)
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002156:	4a70      	ldr	r2, [pc, #448]	; (8002318 <HAL_RCC_ClockConfig+0x264>)
 8002158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800215c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800215e:	2380      	movs	r3, #128	; 0x80
 8002160:	617b      	str	r3, [r7, #20]
 8002162:	e024      	b.n	80021ae <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	2b02      	cmp	r3, #2
 800216a:	d107      	bne.n	800217c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800216c:	4b6a      	ldr	r3, [pc, #424]	; (8002318 <HAL_RCC_ClockConfig+0x264>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d109      	bne.n	800218c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e0c6      	b.n	800230a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800217c:	4b66      	ldr	r3, [pc, #408]	; (8002318 <HAL_RCC_ClockConfig+0x264>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002184:	2b00      	cmp	r3, #0
 8002186:	d101      	bne.n	800218c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e0be      	b.n	800230a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800218c:	f000 f8ce 	bl	800232c <HAL_RCC_GetSysClockFreq>
 8002190:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	4a61      	ldr	r2, [pc, #388]	; (800231c <HAL_RCC_ClockConfig+0x268>)
 8002196:	4293      	cmp	r3, r2
 8002198:	d909      	bls.n	80021ae <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800219a:	4b5f      	ldr	r3, [pc, #380]	; (8002318 <HAL_RCC_ClockConfig+0x264>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80021a2:	4a5d      	ldr	r2, [pc, #372]	; (8002318 <HAL_RCC_ClockConfig+0x264>)
 80021a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021a8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80021aa:	2380      	movs	r3, #128	; 0x80
 80021ac:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021ae:	4b5a      	ldr	r3, [pc, #360]	; (8002318 <HAL_RCC_ClockConfig+0x264>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f023 0203 	bic.w	r2, r3, #3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	4957      	ldr	r1, [pc, #348]	; (8002318 <HAL_RCC_ClockConfig+0x264>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021c0:	f7fe fe92 	bl	8000ee8 <HAL_GetTick>
 80021c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021c6:	e00a      	b.n	80021de <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021c8:	f7fe fe8e 	bl	8000ee8 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e095      	b.n	800230a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021de:	4b4e      	ldr	r3, [pc, #312]	; (8002318 <HAL_RCC_ClockConfig+0x264>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f003 020c 	and.w	r2, r3, #12
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d1eb      	bne.n	80021c8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d023      	beq.n	8002244 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0304 	and.w	r3, r3, #4
 8002204:	2b00      	cmp	r3, #0
 8002206:	d005      	beq.n	8002214 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002208:	4b43      	ldr	r3, [pc, #268]	; (8002318 <HAL_RCC_ClockConfig+0x264>)
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	4a42      	ldr	r2, [pc, #264]	; (8002318 <HAL_RCC_ClockConfig+0x264>)
 800220e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002212:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0308 	and.w	r3, r3, #8
 800221c:	2b00      	cmp	r3, #0
 800221e:	d007      	beq.n	8002230 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002220:	4b3d      	ldr	r3, [pc, #244]	; (8002318 <HAL_RCC_ClockConfig+0x264>)
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002228:	4a3b      	ldr	r2, [pc, #236]	; (8002318 <HAL_RCC_ClockConfig+0x264>)
 800222a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800222e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002230:	4b39      	ldr	r3, [pc, #228]	; (8002318 <HAL_RCC_ClockConfig+0x264>)
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	4936      	ldr	r1, [pc, #216]	; (8002318 <HAL_RCC_ClockConfig+0x264>)
 800223e:	4313      	orrs	r3, r2
 8002240:	608b      	str	r3, [r1, #8]
 8002242:	e008      	b.n	8002256 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	2b80      	cmp	r3, #128	; 0x80
 8002248:	d105      	bne.n	8002256 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800224a:	4b33      	ldr	r3, [pc, #204]	; (8002318 <HAL_RCC_ClockConfig+0x264>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	4a32      	ldr	r2, [pc, #200]	; (8002318 <HAL_RCC_ClockConfig+0x264>)
 8002250:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002254:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002256:	4b2f      	ldr	r3, [pc, #188]	; (8002314 <HAL_RCC_ClockConfig+0x260>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 030f 	and.w	r3, r3, #15
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	429a      	cmp	r2, r3
 8002262:	d21d      	bcs.n	80022a0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002264:	4b2b      	ldr	r3, [pc, #172]	; (8002314 <HAL_RCC_ClockConfig+0x260>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f023 020f 	bic.w	r2, r3, #15
 800226c:	4929      	ldr	r1, [pc, #164]	; (8002314 <HAL_RCC_ClockConfig+0x260>)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	4313      	orrs	r3, r2
 8002272:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002274:	f7fe fe38 	bl	8000ee8 <HAL_GetTick>
 8002278:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800227a:	e00a      	b.n	8002292 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800227c:	f7fe fe34 	bl	8000ee8 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	f241 3288 	movw	r2, #5000	; 0x1388
 800228a:	4293      	cmp	r3, r2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e03b      	b.n	800230a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002292:	4b20      	ldr	r3, [pc, #128]	; (8002314 <HAL_RCC_ClockConfig+0x260>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 030f 	and.w	r3, r3, #15
 800229a:	683a      	ldr	r2, [r7, #0]
 800229c:	429a      	cmp	r2, r3
 800229e:	d1ed      	bne.n	800227c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0304 	and.w	r3, r3, #4
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d008      	beq.n	80022be <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022ac:	4b1a      	ldr	r3, [pc, #104]	; (8002318 <HAL_RCC_ClockConfig+0x264>)
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	4917      	ldr	r1, [pc, #92]	; (8002318 <HAL_RCC_ClockConfig+0x264>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0308 	and.w	r3, r3, #8
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d009      	beq.n	80022de <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022ca:	4b13      	ldr	r3, [pc, #76]	; (8002318 <HAL_RCC_ClockConfig+0x264>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	691b      	ldr	r3, [r3, #16]
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	490f      	ldr	r1, [pc, #60]	; (8002318 <HAL_RCC_ClockConfig+0x264>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022de:	f000 f825 	bl	800232c <HAL_RCC_GetSysClockFreq>
 80022e2:	4602      	mov	r2, r0
 80022e4:	4b0c      	ldr	r3, [pc, #48]	; (8002318 <HAL_RCC_ClockConfig+0x264>)
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	091b      	lsrs	r3, r3, #4
 80022ea:	f003 030f 	and.w	r3, r3, #15
 80022ee:	490c      	ldr	r1, [pc, #48]	; (8002320 <HAL_RCC_ClockConfig+0x26c>)
 80022f0:	5ccb      	ldrb	r3, [r1, r3]
 80022f2:	f003 031f 	and.w	r3, r3, #31
 80022f6:	fa22 f303 	lsr.w	r3, r2, r3
 80022fa:	4a0a      	ldr	r2, [pc, #40]	; (8002324 <HAL_RCC_ClockConfig+0x270>)
 80022fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80022fe:	4b0a      	ldr	r3, [pc, #40]	; (8002328 <HAL_RCC_ClockConfig+0x274>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4618      	mov	r0, r3
 8002304:	f7fe fda4 	bl	8000e50 <HAL_InitTick>
 8002308:	4603      	mov	r3, r0
}
 800230a:	4618      	mov	r0, r3
 800230c:	3718      	adds	r7, #24
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	40022000 	.word	0x40022000
 8002318:	40021000 	.word	0x40021000
 800231c:	04c4b400 	.word	0x04c4b400
 8002320:	08005948 	.word	0x08005948
 8002324:	20000000 	.word	0x20000000
 8002328:	20000004 	.word	0x20000004

0800232c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800232c:	b480      	push	{r7}
 800232e:	b087      	sub	sp, #28
 8002330:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002332:	4b2c      	ldr	r3, [pc, #176]	; (80023e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f003 030c 	and.w	r3, r3, #12
 800233a:	2b04      	cmp	r3, #4
 800233c:	d102      	bne.n	8002344 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800233e:	4b2a      	ldr	r3, [pc, #168]	; (80023e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002340:	613b      	str	r3, [r7, #16]
 8002342:	e047      	b.n	80023d4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002344:	4b27      	ldr	r3, [pc, #156]	; (80023e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f003 030c 	and.w	r3, r3, #12
 800234c:	2b08      	cmp	r3, #8
 800234e:	d102      	bne.n	8002356 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002350:	4b26      	ldr	r3, [pc, #152]	; (80023ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8002352:	613b      	str	r3, [r7, #16]
 8002354:	e03e      	b.n	80023d4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002356:	4b23      	ldr	r3, [pc, #140]	; (80023e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f003 030c 	and.w	r3, r3, #12
 800235e:	2b0c      	cmp	r3, #12
 8002360:	d136      	bne.n	80023d0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002362:	4b20      	ldr	r3, [pc, #128]	; (80023e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	f003 0303 	and.w	r3, r3, #3
 800236a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800236c:	4b1d      	ldr	r3, [pc, #116]	; (80023e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	091b      	lsrs	r3, r3, #4
 8002372:	f003 030f 	and.w	r3, r3, #15
 8002376:	3301      	adds	r3, #1
 8002378:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2b03      	cmp	r3, #3
 800237e:	d10c      	bne.n	800239a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002380:	4a1a      	ldr	r2, [pc, #104]	; (80023ec <HAL_RCC_GetSysClockFreq+0xc0>)
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	fbb2 f3f3 	udiv	r3, r2, r3
 8002388:	4a16      	ldr	r2, [pc, #88]	; (80023e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800238a:	68d2      	ldr	r2, [r2, #12]
 800238c:	0a12      	lsrs	r2, r2, #8
 800238e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002392:	fb02 f303 	mul.w	r3, r2, r3
 8002396:	617b      	str	r3, [r7, #20]
      break;
 8002398:	e00c      	b.n	80023b4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800239a:	4a13      	ldr	r2, [pc, #76]	; (80023e8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a2:	4a10      	ldr	r2, [pc, #64]	; (80023e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023a4:	68d2      	ldr	r2, [r2, #12]
 80023a6:	0a12      	lsrs	r2, r2, #8
 80023a8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80023ac:	fb02 f303 	mul.w	r3, r2, r3
 80023b0:	617b      	str	r3, [r7, #20]
      break;
 80023b2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80023b4:	4b0b      	ldr	r3, [pc, #44]	; (80023e4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	0e5b      	lsrs	r3, r3, #25
 80023ba:	f003 0303 	and.w	r3, r3, #3
 80023be:	3301      	adds	r3, #1
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80023c4:	697a      	ldr	r2, [r7, #20]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023cc:	613b      	str	r3, [r7, #16]
 80023ce:	e001      	b.n	80023d4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80023d0:	2300      	movs	r3, #0
 80023d2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80023d4:	693b      	ldr	r3, [r7, #16]
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	371c      	adds	r7, #28
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	40021000 	.word	0x40021000
 80023e8:	00f42400 	.word	0x00f42400
 80023ec:	016e3600 	.word	0x016e3600

080023f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023f4:	4b03      	ldr	r3, [pc, #12]	; (8002404 <HAL_RCC_GetHCLKFreq+0x14>)
 80023f6:	681b      	ldr	r3, [r3, #0]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	20000000 	.word	0x20000000

08002408 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800240c:	f7ff fff0 	bl	80023f0 <HAL_RCC_GetHCLKFreq>
 8002410:	4602      	mov	r2, r0
 8002412:	4b06      	ldr	r3, [pc, #24]	; (800242c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	0a1b      	lsrs	r3, r3, #8
 8002418:	f003 0307 	and.w	r3, r3, #7
 800241c:	4904      	ldr	r1, [pc, #16]	; (8002430 <HAL_RCC_GetPCLK1Freq+0x28>)
 800241e:	5ccb      	ldrb	r3, [r1, r3]
 8002420:	f003 031f 	and.w	r3, r3, #31
 8002424:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002428:	4618      	mov	r0, r3
 800242a:	bd80      	pop	{r7, pc}
 800242c:	40021000 	.word	0x40021000
 8002430:	08005958 	.word	0x08005958

08002434 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002438:	f7ff ffda 	bl	80023f0 <HAL_RCC_GetHCLKFreq>
 800243c:	4602      	mov	r2, r0
 800243e:	4b06      	ldr	r3, [pc, #24]	; (8002458 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	0adb      	lsrs	r3, r3, #11
 8002444:	f003 0307 	and.w	r3, r3, #7
 8002448:	4904      	ldr	r1, [pc, #16]	; (800245c <HAL_RCC_GetPCLK2Freq+0x28>)
 800244a:	5ccb      	ldrb	r3, [r1, r3]
 800244c:	f003 031f 	and.w	r3, r3, #31
 8002450:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002454:	4618      	mov	r0, r3
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40021000 	.word	0x40021000
 800245c:	08005958 	.word	0x08005958

08002460 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002460:	b480      	push	{r7}
 8002462:	b087      	sub	sp, #28
 8002464:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002466:	4b1e      	ldr	r3, [pc, #120]	; (80024e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	f003 0303 	and.w	r3, r3, #3
 800246e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002470:	4b1b      	ldr	r3, [pc, #108]	; (80024e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	091b      	lsrs	r3, r3, #4
 8002476:	f003 030f 	and.w	r3, r3, #15
 800247a:	3301      	adds	r3, #1
 800247c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	2b03      	cmp	r3, #3
 8002482:	d10c      	bne.n	800249e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002484:	4a17      	ldr	r2, [pc, #92]	; (80024e4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	fbb2 f3f3 	udiv	r3, r2, r3
 800248c:	4a14      	ldr	r2, [pc, #80]	; (80024e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800248e:	68d2      	ldr	r2, [r2, #12]
 8002490:	0a12      	lsrs	r2, r2, #8
 8002492:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002496:	fb02 f303 	mul.w	r3, r2, r3
 800249a:	617b      	str	r3, [r7, #20]
    break;
 800249c:	e00c      	b.n	80024b8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800249e:	4a12      	ldr	r2, [pc, #72]	; (80024e8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024a6:	4a0e      	ldr	r2, [pc, #56]	; (80024e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024a8:	68d2      	ldr	r2, [r2, #12]
 80024aa:	0a12      	lsrs	r2, r2, #8
 80024ac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80024b0:	fb02 f303 	mul.w	r3, r2, r3
 80024b4:	617b      	str	r3, [r7, #20]
    break;
 80024b6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80024b8:	4b09      	ldr	r3, [pc, #36]	; (80024e0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	0e5b      	lsrs	r3, r3, #25
 80024be:	f003 0303 	and.w	r3, r3, #3
 80024c2:	3301      	adds	r3, #1
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80024c8:	697a      	ldr	r2, [r7, #20]
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80024d2:	687b      	ldr	r3, [r7, #4]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	371c      	adds	r7, #28
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	40021000 	.word	0x40021000
 80024e4:	016e3600 	.word	0x016e3600
 80024e8:	00f42400 	.word	0x00f42400

080024ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b086      	sub	sp, #24
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024f4:	2300      	movs	r3, #0
 80024f6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024f8:	2300      	movs	r3, #0
 80024fa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002504:	2b00      	cmp	r3, #0
 8002506:	f000 8098 	beq.w	800263a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800250a:	2300      	movs	r3, #0
 800250c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800250e:	4b43      	ldr	r3, [pc, #268]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d10d      	bne.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800251a:	4b40      	ldr	r3, [pc, #256]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800251c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800251e:	4a3f      	ldr	r2, [pc, #252]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002524:	6593      	str	r3, [r2, #88]	; 0x58
 8002526:	4b3d      	ldr	r3, [pc, #244]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002528:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800252a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800252e:	60bb      	str	r3, [r7, #8]
 8002530:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002532:	2301      	movs	r3, #1
 8002534:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002536:	4b3a      	ldr	r3, [pc, #232]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a39      	ldr	r2, [pc, #228]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800253c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002540:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002542:	f7fe fcd1 	bl	8000ee8 <HAL_GetTick>
 8002546:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002548:	e009      	b.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800254a:	f7fe fccd 	bl	8000ee8 <HAL_GetTick>
 800254e:	4602      	mov	r2, r0
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	1ad3      	subs	r3, r2, r3
 8002554:	2b02      	cmp	r3, #2
 8002556:	d902      	bls.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	74fb      	strb	r3, [r7, #19]
        break;
 800255c:	e005      	b.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800255e:	4b30      	ldr	r3, [pc, #192]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002566:	2b00      	cmp	r3, #0
 8002568:	d0ef      	beq.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800256a:	7cfb      	ldrb	r3, [r7, #19]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d159      	bne.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002570:	4b2a      	ldr	r3, [pc, #168]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002576:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800257a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d01e      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	697a      	ldr	r2, [r7, #20]
 8002588:	429a      	cmp	r2, r3
 800258a:	d019      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800258c:	4b23      	ldr	r3, [pc, #140]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800258e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002592:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002596:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002598:	4b20      	ldr	r3, [pc, #128]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800259a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800259e:	4a1f      	ldr	r2, [pc, #124]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80025a8:	4b1c      	ldr	r3, [pc, #112]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ae:	4a1b      	ldr	r2, [pc, #108]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80025b8:	4a18      	ldr	r2, [pc, #96]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d016      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ca:	f7fe fc8d 	bl	8000ee8 <HAL_GetTick>
 80025ce:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025d0:	e00b      	b.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025d2:	f7fe fc89 	bl	8000ee8 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d902      	bls.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	74fb      	strb	r3, [r7, #19]
            break;
 80025e8:	e006      	b.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025ea:	4b0c      	ldr	r3, [pc, #48]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d0ec      	beq.n	80025d2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80025f8:	7cfb      	ldrb	r3, [r7, #19]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d10b      	bne.n	8002616 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025fe:	4b07      	ldr	r3, [pc, #28]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002604:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260c:	4903      	ldr	r1, [pc, #12]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800260e:	4313      	orrs	r3, r2
 8002610:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002614:	e008      	b.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002616:	7cfb      	ldrb	r3, [r7, #19]
 8002618:	74bb      	strb	r3, [r7, #18]
 800261a:	e005      	b.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800261c:	40021000 	.word	0x40021000
 8002620:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002624:	7cfb      	ldrb	r3, [r7, #19]
 8002626:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002628:	7c7b      	ldrb	r3, [r7, #17]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d105      	bne.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800262e:	4ba6      	ldr	r3, [pc, #664]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002632:	4aa5      	ldr	r2, [pc, #660]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002634:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002638:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0301 	and.w	r3, r3, #1
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00a      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002646:	4ba0      	ldr	r3, [pc, #640]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002648:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800264c:	f023 0203 	bic.w	r2, r3, #3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	499c      	ldr	r1, [pc, #624]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002656:	4313      	orrs	r3, r2
 8002658:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0302 	and.w	r3, r3, #2
 8002664:	2b00      	cmp	r3, #0
 8002666:	d00a      	beq.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002668:	4b97      	ldr	r3, [pc, #604]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800266a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800266e:	f023 020c 	bic.w	r2, r3, #12
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	4994      	ldr	r1, [pc, #592]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002678:	4313      	orrs	r3, r2
 800267a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0304 	and.w	r3, r3, #4
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00a      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800268a:	4b8f      	ldr	r3, [pc, #572]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800268c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002690:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	498b      	ldr	r1, [pc, #556]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800269a:	4313      	orrs	r3, r2
 800269c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 0308 	and.w	r3, r3, #8
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d00a      	beq.n	80026c2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80026ac:	4b86      	ldr	r3, [pc, #536]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	691b      	ldr	r3, [r3, #16]
 80026ba:	4983      	ldr	r1, [pc, #524]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0320 	and.w	r3, r3, #32
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d00a      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80026ce:	4b7e      	ldr	r3, [pc, #504]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026d4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	695b      	ldr	r3, [r3, #20]
 80026dc:	497a      	ldr	r1, [pc, #488]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d00a      	beq.n	8002706 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026f0:	4b75      	ldr	r3, [pc, #468]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	4972      	ldr	r1, [pc, #456]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002700:	4313      	orrs	r3, r2
 8002702:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00a      	beq.n	8002728 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002712:	4b6d      	ldr	r3, [pc, #436]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002718:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	69db      	ldr	r3, [r3, #28]
 8002720:	4969      	ldr	r1, [pc, #420]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002722:	4313      	orrs	r3, r2
 8002724:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002730:	2b00      	cmp	r3, #0
 8002732:	d00a      	beq.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002734:	4b64      	ldr	r3, [pc, #400]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800273a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6a1b      	ldr	r3, [r3, #32]
 8002742:	4961      	ldr	r1, [pc, #388]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002744:	4313      	orrs	r3, r2
 8002746:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002752:	2b00      	cmp	r3, #0
 8002754:	d00a      	beq.n	800276c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002756:	4b5c      	ldr	r3, [pc, #368]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800275c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002764:	4958      	ldr	r1, [pc, #352]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002766:	4313      	orrs	r3, r2
 8002768:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002774:	2b00      	cmp	r3, #0
 8002776:	d015      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002778:	4b53      	ldr	r3, [pc, #332]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800277a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800277e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002786:	4950      	ldr	r1, [pc, #320]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002788:	4313      	orrs	r3, r2
 800278a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002792:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002796:	d105      	bne.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002798:	4b4b      	ldr	r3, [pc, #300]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	4a4a      	ldr	r2, [pc, #296]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800279e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027a2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d015      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80027b0:	4b45      	ldr	r3, [pc, #276]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027be:	4942      	ldr	r1, [pc, #264]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027ce:	d105      	bne.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027d0:	4b3d      	ldr	r3, [pc, #244]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	4a3c      	ldr	r2, [pc, #240]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027da:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d015      	beq.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80027e8:	4b37      	ldr	r3, [pc, #220]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ee:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f6:	4934      	ldr	r1, [pc, #208]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002802:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002806:	d105      	bne.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002808:	4b2f      	ldr	r3, [pc, #188]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	4a2e      	ldr	r2, [pc, #184]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800280e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002812:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d015      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002820:	4b29      	ldr	r3, [pc, #164]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002822:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002826:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800282e:	4926      	ldr	r1, [pc, #152]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002830:	4313      	orrs	r3, r2
 8002832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800283a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800283e:	d105      	bne.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002840:	4b21      	ldr	r3, [pc, #132]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	4a20      	ldr	r2, [pc, #128]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002846:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800284a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002854:	2b00      	cmp	r3, #0
 8002856:	d015      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002858:	4b1b      	ldr	r3, [pc, #108]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800285a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800285e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002866:	4918      	ldr	r1, [pc, #96]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002868:	4313      	orrs	r3, r2
 800286a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002872:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002876:	d105      	bne.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002878:	4b13      	ldr	r3, [pc, #76]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	4a12      	ldr	r2, [pc, #72]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800287e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002882:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d015      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002890:	4b0d      	ldr	r3, [pc, #52]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002896:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800289e:	490a      	ldr	r1, [pc, #40]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028a0:	4313      	orrs	r3, r2
 80028a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028ae:	d105      	bne.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80028b0:	4b05      	ldr	r3, [pc, #20]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	4a04      	ldr	r2, [pc, #16]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80028b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ba:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80028bc:	7cbb      	ldrb	r3, [r7, #18]
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3718      	adds	r7, #24
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	40021000 	.word	0x40021000

080028cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e042      	b.n	8002964 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d106      	bne.n	80028f6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028f0:	6878      	ldr	r0, [r7, #4]
 80028f2:	f7fe f9d3 	bl	8000c9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2224      	movs	r2, #36	; 0x24
 80028fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f022 0201 	bic.w	r2, r2, #1
 800290c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800290e:	6878      	ldr	r0, [r7, #4]
 8002910:	f000 f82c 	bl	800296c <UART_SetConfig>
 8002914:	4603      	mov	r3, r0
 8002916:	2b01      	cmp	r3, #1
 8002918:	d101      	bne.n	800291e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	e022      	b.n	8002964 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002922:	2b00      	cmp	r3, #0
 8002924:	d002      	beq.n	800292c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 faec 	bl	8002f04 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	685a      	ldr	r2, [r3, #4]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800293a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	689a      	ldr	r2, [r3, #8]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800294a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f042 0201 	orr.w	r2, r2, #1
 800295a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 fb73 	bl	8003048 <UART_CheckIdleState>
 8002962:	4603      	mov	r3, r0
}
 8002964:	4618      	mov	r0, r3
 8002966:	3708      	adds	r7, #8
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}

0800296c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800296c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002970:	b08c      	sub	sp, #48	; 0x30
 8002972:	af00      	add	r7, sp, #0
 8002974:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002976:	2300      	movs	r3, #0
 8002978:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	689a      	ldr	r2, [r3, #8]
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	431a      	orrs	r2, r3
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	431a      	orrs	r2, r3
 800298c:	697b      	ldr	r3, [r7, #20]
 800298e:	69db      	ldr	r3, [r3, #28]
 8002990:	4313      	orrs	r3, r2
 8002992:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	4bab      	ldr	r3, [pc, #684]	; (8002c48 <UART_SetConfig+0x2dc>)
 800299c:	4013      	ands	r3, r2
 800299e:	697a      	ldr	r2, [r7, #20]
 80029a0:	6812      	ldr	r2, [r2, #0]
 80029a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80029a4:	430b      	orrs	r3, r1
 80029a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	68da      	ldr	r2, [r3, #12]
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	430a      	orrs	r2, r1
 80029bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4aa0      	ldr	r2, [pc, #640]	; (8002c4c <UART_SetConfig+0x2e0>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d004      	beq.n	80029d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	6a1b      	ldr	r3, [r3, #32]
 80029d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80029d4:	4313      	orrs	r3, r2
 80029d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80029e2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80029e6:	697a      	ldr	r2, [r7, #20]
 80029e8:	6812      	ldr	r2, [r2, #0]
 80029ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80029ec:	430b      	orrs	r3, r1
 80029ee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f6:	f023 010f 	bic.w	r1, r3, #15
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	430a      	orrs	r2, r1
 8002a04:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a91      	ldr	r2, [pc, #580]	; (8002c50 <UART_SetConfig+0x2e4>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d125      	bne.n	8002a5c <UART_SetConfig+0xf0>
 8002a10:	4b90      	ldr	r3, [pc, #576]	; (8002c54 <UART_SetConfig+0x2e8>)
 8002a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a16:	f003 0303 	and.w	r3, r3, #3
 8002a1a:	2b03      	cmp	r3, #3
 8002a1c:	d81a      	bhi.n	8002a54 <UART_SetConfig+0xe8>
 8002a1e:	a201      	add	r2, pc, #4	; (adr r2, 8002a24 <UART_SetConfig+0xb8>)
 8002a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a24:	08002a35 	.word	0x08002a35
 8002a28:	08002a45 	.word	0x08002a45
 8002a2c:	08002a3d 	.word	0x08002a3d
 8002a30:	08002a4d 	.word	0x08002a4d
 8002a34:	2301      	movs	r3, #1
 8002a36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002a3a:	e0d6      	b.n	8002bea <UART_SetConfig+0x27e>
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002a42:	e0d2      	b.n	8002bea <UART_SetConfig+0x27e>
 8002a44:	2304      	movs	r3, #4
 8002a46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002a4a:	e0ce      	b.n	8002bea <UART_SetConfig+0x27e>
 8002a4c:	2308      	movs	r3, #8
 8002a4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002a52:	e0ca      	b.n	8002bea <UART_SetConfig+0x27e>
 8002a54:	2310      	movs	r3, #16
 8002a56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002a5a:	e0c6      	b.n	8002bea <UART_SetConfig+0x27e>
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a7d      	ldr	r2, [pc, #500]	; (8002c58 <UART_SetConfig+0x2ec>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d138      	bne.n	8002ad8 <UART_SetConfig+0x16c>
 8002a66:	4b7b      	ldr	r3, [pc, #492]	; (8002c54 <UART_SetConfig+0x2e8>)
 8002a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a6c:	f003 030c 	and.w	r3, r3, #12
 8002a70:	2b0c      	cmp	r3, #12
 8002a72:	d82d      	bhi.n	8002ad0 <UART_SetConfig+0x164>
 8002a74:	a201      	add	r2, pc, #4	; (adr r2, 8002a7c <UART_SetConfig+0x110>)
 8002a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a7a:	bf00      	nop
 8002a7c:	08002ab1 	.word	0x08002ab1
 8002a80:	08002ad1 	.word	0x08002ad1
 8002a84:	08002ad1 	.word	0x08002ad1
 8002a88:	08002ad1 	.word	0x08002ad1
 8002a8c:	08002ac1 	.word	0x08002ac1
 8002a90:	08002ad1 	.word	0x08002ad1
 8002a94:	08002ad1 	.word	0x08002ad1
 8002a98:	08002ad1 	.word	0x08002ad1
 8002a9c:	08002ab9 	.word	0x08002ab9
 8002aa0:	08002ad1 	.word	0x08002ad1
 8002aa4:	08002ad1 	.word	0x08002ad1
 8002aa8:	08002ad1 	.word	0x08002ad1
 8002aac:	08002ac9 	.word	0x08002ac9
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ab6:	e098      	b.n	8002bea <UART_SetConfig+0x27e>
 8002ab8:	2302      	movs	r3, #2
 8002aba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002abe:	e094      	b.n	8002bea <UART_SetConfig+0x27e>
 8002ac0:	2304      	movs	r3, #4
 8002ac2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ac6:	e090      	b.n	8002bea <UART_SetConfig+0x27e>
 8002ac8:	2308      	movs	r3, #8
 8002aca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ace:	e08c      	b.n	8002bea <UART_SetConfig+0x27e>
 8002ad0:	2310      	movs	r3, #16
 8002ad2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002ad6:	e088      	b.n	8002bea <UART_SetConfig+0x27e>
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a5f      	ldr	r2, [pc, #380]	; (8002c5c <UART_SetConfig+0x2f0>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d125      	bne.n	8002b2e <UART_SetConfig+0x1c2>
 8002ae2:	4b5c      	ldr	r3, [pc, #368]	; (8002c54 <UART_SetConfig+0x2e8>)
 8002ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002aec:	2b30      	cmp	r3, #48	; 0x30
 8002aee:	d016      	beq.n	8002b1e <UART_SetConfig+0x1b2>
 8002af0:	2b30      	cmp	r3, #48	; 0x30
 8002af2:	d818      	bhi.n	8002b26 <UART_SetConfig+0x1ba>
 8002af4:	2b20      	cmp	r3, #32
 8002af6:	d00a      	beq.n	8002b0e <UART_SetConfig+0x1a2>
 8002af8:	2b20      	cmp	r3, #32
 8002afa:	d814      	bhi.n	8002b26 <UART_SetConfig+0x1ba>
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d002      	beq.n	8002b06 <UART_SetConfig+0x19a>
 8002b00:	2b10      	cmp	r3, #16
 8002b02:	d008      	beq.n	8002b16 <UART_SetConfig+0x1aa>
 8002b04:	e00f      	b.n	8002b26 <UART_SetConfig+0x1ba>
 8002b06:	2300      	movs	r3, #0
 8002b08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b0c:	e06d      	b.n	8002bea <UART_SetConfig+0x27e>
 8002b0e:	2302      	movs	r3, #2
 8002b10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b14:	e069      	b.n	8002bea <UART_SetConfig+0x27e>
 8002b16:	2304      	movs	r3, #4
 8002b18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b1c:	e065      	b.n	8002bea <UART_SetConfig+0x27e>
 8002b1e:	2308      	movs	r3, #8
 8002b20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b24:	e061      	b.n	8002bea <UART_SetConfig+0x27e>
 8002b26:	2310      	movs	r3, #16
 8002b28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b2c:	e05d      	b.n	8002bea <UART_SetConfig+0x27e>
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a4b      	ldr	r2, [pc, #300]	; (8002c60 <UART_SetConfig+0x2f4>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d125      	bne.n	8002b84 <UART_SetConfig+0x218>
 8002b38:	4b46      	ldr	r3, [pc, #280]	; (8002c54 <UART_SetConfig+0x2e8>)
 8002b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b3e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002b42:	2bc0      	cmp	r3, #192	; 0xc0
 8002b44:	d016      	beq.n	8002b74 <UART_SetConfig+0x208>
 8002b46:	2bc0      	cmp	r3, #192	; 0xc0
 8002b48:	d818      	bhi.n	8002b7c <UART_SetConfig+0x210>
 8002b4a:	2b80      	cmp	r3, #128	; 0x80
 8002b4c:	d00a      	beq.n	8002b64 <UART_SetConfig+0x1f8>
 8002b4e:	2b80      	cmp	r3, #128	; 0x80
 8002b50:	d814      	bhi.n	8002b7c <UART_SetConfig+0x210>
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d002      	beq.n	8002b5c <UART_SetConfig+0x1f0>
 8002b56:	2b40      	cmp	r3, #64	; 0x40
 8002b58:	d008      	beq.n	8002b6c <UART_SetConfig+0x200>
 8002b5a:	e00f      	b.n	8002b7c <UART_SetConfig+0x210>
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b62:	e042      	b.n	8002bea <UART_SetConfig+0x27e>
 8002b64:	2302      	movs	r3, #2
 8002b66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b6a:	e03e      	b.n	8002bea <UART_SetConfig+0x27e>
 8002b6c:	2304      	movs	r3, #4
 8002b6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b72:	e03a      	b.n	8002bea <UART_SetConfig+0x27e>
 8002b74:	2308      	movs	r3, #8
 8002b76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b7a:	e036      	b.n	8002bea <UART_SetConfig+0x27e>
 8002b7c:	2310      	movs	r3, #16
 8002b7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b82:	e032      	b.n	8002bea <UART_SetConfig+0x27e>
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a30      	ldr	r2, [pc, #192]	; (8002c4c <UART_SetConfig+0x2e0>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d12a      	bne.n	8002be4 <UART_SetConfig+0x278>
 8002b8e:	4b31      	ldr	r3, [pc, #196]	; (8002c54 <UART_SetConfig+0x2e8>)
 8002b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b94:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002b98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002b9c:	d01a      	beq.n	8002bd4 <UART_SetConfig+0x268>
 8002b9e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ba2:	d81b      	bhi.n	8002bdc <UART_SetConfig+0x270>
 8002ba4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ba8:	d00c      	beq.n	8002bc4 <UART_SetConfig+0x258>
 8002baa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bae:	d815      	bhi.n	8002bdc <UART_SetConfig+0x270>
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d003      	beq.n	8002bbc <UART_SetConfig+0x250>
 8002bb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bb8:	d008      	beq.n	8002bcc <UART_SetConfig+0x260>
 8002bba:	e00f      	b.n	8002bdc <UART_SetConfig+0x270>
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002bc2:	e012      	b.n	8002bea <UART_SetConfig+0x27e>
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002bca:	e00e      	b.n	8002bea <UART_SetConfig+0x27e>
 8002bcc:	2304      	movs	r3, #4
 8002bce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002bd2:	e00a      	b.n	8002bea <UART_SetConfig+0x27e>
 8002bd4:	2308      	movs	r3, #8
 8002bd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002bda:	e006      	b.n	8002bea <UART_SetConfig+0x27e>
 8002bdc:	2310      	movs	r3, #16
 8002bde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002be2:	e002      	b.n	8002bea <UART_SetConfig+0x27e>
 8002be4:	2310      	movs	r3, #16
 8002be6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a17      	ldr	r2, [pc, #92]	; (8002c4c <UART_SetConfig+0x2e0>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	f040 80a8 	bne.w	8002d46 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002bf6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002bfa:	2b08      	cmp	r3, #8
 8002bfc:	d834      	bhi.n	8002c68 <UART_SetConfig+0x2fc>
 8002bfe:	a201      	add	r2, pc, #4	; (adr r2, 8002c04 <UART_SetConfig+0x298>)
 8002c00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c04:	08002c29 	.word	0x08002c29
 8002c08:	08002c69 	.word	0x08002c69
 8002c0c:	08002c31 	.word	0x08002c31
 8002c10:	08002c69 	.word	0x08002c69
 8002c14:	08002c37 	.word	0x08002c37
 8002c18:	08002c69 	.word	0x08002c69
 8002c1c:	08002c69 	.word	0x08002c69
 8002c20:	08002c69 	.word	0x08002c69
 8002c24:	08002c3f 	.word	0x08002c3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c28:	f7ff fbee 	bl	8002408 <HAL_RCC_GetPCLK1Freq>
 8002c2c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002c2e:	e021      	b.n	8002c74 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c30:	4b0c      	ldr	r3, [pc, #48]	; (8002c64 <UART_SetConfig+0x2f8>)
 8002c32:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002c34:	e01e      	b.n	8002c74 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c36:	f7ff fb79 	bl	800232c <HAL_RCC_GetSysClockFreq>
 8002c3a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002c3c:	e01a      	b.n	8002c74 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c42:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002c44:	e016      	b.n	8002c74 <UART_SetConfig+0x308>
 8002c46:	bf00      	nop
 8002c48:	cfff69f3 	.word	0xcfff69f3
 8002c4c:	40008000 	.word	0x40008000
 8002c50:	40013800 	.word	0x40013800
 8002c54:	40021000 	.word	0x40021000
 8002c58:	40004400 	.word	0x40004400
 8002c5c:	40004800 	.word	0x40004800
 8002c60:	40004c00 	.word	0x40004c00
 8002c64:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002c72:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f000 812a 	beq.w	8002ed0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c80:	4a9e      	ldr	r2, [pc, #632]	; (8002efc <UART_SetConfig+0x590>)
 8002c82:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c86:	461a      	mov	r2, r3
 8002c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c8e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	685a      	ldr	r2, [r3, #4]
 8002c94:	4613      	mov	r3, r2
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	4413      	add	r3, r2
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d305      	bcc.n	8002cac <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d903      	bls.n	8002cb4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002cb2:	e10d      	b.n	8002ed0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	60bb      	str	r3, [r7, #8]
 8002cba:	60fa      	str	r2, [r7, #12]
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc0:	4a8e      	ldr	r2, [pc, #568]	; (8002efc <UART_SetConfig+0x590>)
 8002cc2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	2200      	movs	r2, #0
 8002cca:	603b      	str	r3, [r7, #0]
 8002ccc:	607a      	str	r2, [r7, #4]
 8002cce:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002cd2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002cd6:	f7fd faf3 	bl	80002c0 <__aeabi_uldivmod>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	460b      	mov	r3, r1
 8002cde:	4610      	mov	r0, r2
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	f04f 0200 	mov.w	r2, #0
 8002ce6:	f04f 0300 	mov.w	r3, #0
 8002cea:	020b      	lsls	r3, r1, #8
 8002cec:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002cf0:	0202      	lsls	r2, r0, #8
 8002cf2:	6979      	ldr	r1, [r7, #20]
 8002cf4:	6849      	ldr	r1, [r1, #4]
 8002cf6:	0849      	lsrs	r1, r1, #1
 8002cf8:	2000      	movs	r0, #0
 8002cfa:	460c      	mov	r4, r1
 8002cfc:	4605      	mov	r5, r0
 8002cfe:	eb12 0804 	adds.w	r8, r2, r4
 8002d02:	eb43 0905 	adc.w	r9, r3, r5
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	469a      	mov	sl, r3
 8002d0e:	4693      	mov	fp, r2
 8002d10:	4652      	mov	r2, sl
 8002d12:	465b      	mov	r3, fp
 8002d14:	4640      	mov	r0, r8
 8002d16:	4649      	mov	r1, r9
 8002d18:	f7fd fad2 	bl	80002c0 <__aeabi_uldivmod>
 8002d1c:	4602      	mov	r2, r0
 8002d1e:	460b      	mov	r3, r1
 8002d20:	4613      	mov	r3, r2
 8002d22:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002d24:	6a3b      	ldr	r3, [r7, #32]
 8002d26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d2a:	d308      	bcc.n	8002d3e <UART_SetConfig+0x3d2>
 8002d2c:	6a3b      	ldr	r3, [r7, #32]
 8002d2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d32:	d204      	bcs.n	8002d3e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	6a3a      	ldr	r2, [r7, #32]
 8002d3a:	60da      	str	r2, [r3, #12]
 8002d3c:	e0c8      	b.n	8002ed0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002d44:	e0c4      	b.n	8002ed0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d4e:	d167      	bne.n	8002e20 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8002d50:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002d54:	2b08      	cmp	r3, #8
 8002d56:	d828      	bhi.n	8002daa <UART_SetConfig+0x43e>
 8002d58:	a201      	add	r2, pc, #4	; (adr r2, 8002d60 <UART_SetConfig+0x3f4>)
 8002d5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d5e:	bf00      	nop
 8002d60:	08002d85 	.word	0x08002d85
 8002d64:	08002d8d 	.word	0x08002d8d
 8002d68:	08002d95 	.word	0x08002d95
 8002d6c:	08002dab 	.word	0x08002dab
 8002d70:	08002d9b 	.word	0x08002d9b
 8002d74:	08002dab 	.word	0x08002dab
 8002d78:	08002dab 	.word	0x08002dab
 8002d7c:	08002dab 	.word	0x08002dab
 8002d80:	08002da3 	.word	0x08002da3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d84:	f7ff fb40 	bl	8002408 <HAL_RCC_GetPCLK1Freq>
 8002d88:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002d8a:	e014      	b.n	8002db6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002d8c:	f7ff fb52 	bl	8002434 <HAL_RCC_GetPCLK2Freq>
 8002d90:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002d92:	e010      	b.n	8002db6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002d94:	4b5a      	ldr	r3, [pc, #360]	; (8002f00 <UART_SetConfig+0x594>)
 8002d96:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002d98:	e00d      	b.n	8002db6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d9a:	f7ff fac7 	bl	800232c <HAL_RCC_GetSysClockFreq>
 8002d9e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002da0:	e009      	b.n	8002db6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002da2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002da6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002da8:	e005      	b.n	8002db6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8002daa:	2300      	movs	r3, #0
 8002dac:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002db4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	f000 8089 	beq.w	8002ed0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002dbe:	697b      	ldr	r3, [r7, #20]
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc2:	4a4e      	ldr	r2, [pc, #312]	; (8002efc <UART_SetConfig+0x590>)
 8002dc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002dc8:	461a      	mov	r2, r3
 8002dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dcc:	fbb3 f3f2 	udiv	r3, r3, r2
 8002dd0:	005a      	lsls	r2, r3, #1
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	085b      	lsrs	r3, r3, #1
 8002dd8:	441a      	add	r2, r3
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002de4:	6a3b      	ldr	r3, [r7, #32]
 8002de6:	2b0f      	cmp	r3, #15
 8002de8:	d916      	bls.n	8002e18 <UART_SetConfig+0x4ac>
 8002dea:	6a3b      	ldr	r3, [r7, #32]
 8002dec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002df0:	d212      	bcs.n	8002e18 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002df2:	6a3b      	ldr	r3, [r7, #32]
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	f023 030f 	bic.w	r3, r3, #15
 8002dfa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002dfc:	6a3b      	ldr	r3, [r7, #32]
 8002dfe:	085b      	lsrs	r3, r3, #1
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	f003 0307 	and.w	r3, r3, #7
 8002e06:	b29a      	uxth	r2, r3
 8002e08:	8bfb      	ldrh	r3, [r7, #30]
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	8bfa      	ldrh	r2, [r7, #30]
 8002e14:	60da      	str	r2, [r3, #12]
 8002e16:	e05b      	b.n	8002ed0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002e1e:	e057      	b.n	8002ed0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002e20:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002e24:	2b08      	cmp	r3, #8
 8002e26:	d828      	bhi.n	8002e7a <UART_SetConfig+0x50e>
 8002e28:	a201      	add	r2, pc, #4	; (adr r2, 8002e30 <UART_SetConfig+0x4c4>)
 8002e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e2e:	bf00      	nop
 8002e30:	08002e55 	.word	0x08002e55
 8002e34:	08002e5d 	.word	0x08002e5d
 8002e38:	08002e65 	.word	0x08002e65
 8002e3c:	08002e7b 	.word	0x08002e7b
 8002e40:	08002e6b 	.word	0x08002e6b
 8002e44:	08002e7b 	.word	0x08002e7b
 8002e48:	08002e7b 	.word	0x08002e7b
 8002e4c:	08002e7b 	.word	0x08002e7b
 8002e50:	08002e73 	.word	0x08002e73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e54:	f7ff fad8 	bl	8002408 <HAL_RCC_GetPCLK1Freq>
 8002e58:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002e5a:	e014      	b.n	8002e86 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e5c:	f7ff faea 	bl	8002434 <HAL_RCC_GetPCLK2Freq>
 8002e60:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002e62:	e010      	b.n	8002e86 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e64:	4b26      	ldr	r3, [pc, #152]	; (8002f00 <UART_SetConfig+0x594>)
 8002e66:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002e68:	e00d      	b.n	8002e86 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e6a:	f7ff fa5f 	bl	800232c <HAL_RCC_GetSysClockFreq>
 8002e6e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002e70:	e009      	b.n	8002e86 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e76:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002e78:	e005      	b.n	8002e86 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002e84:	bf00      	nop
    }

    if (pclk != 0U)
 8002e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d021      	beq.n	8002ed0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e90:	4a1a      	ldr	r2, [pc, #104]	; (8002efc <UART_SetConfig+0x590>)
 8002e92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e96:	461a      	mov	r2, r3
 8002e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9a:	fbb3 f2f2 	udiv	r2, r3, r2
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	085b      	lsrs	r3, r3, #1
 8002ea4:	441a      	add	r2, r3
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002eb0:	6a3b      	ldr	r3, [r7, #32]
 8002eb2:	2b0f      	cmp	r3, #15
 8002eb4:	d909      	bls.n	8002eca <UART_SetConfig+0x55e>
 8002eb6:	6a3b      	ldr	r3, [r7, #32]
 8002eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ebc:	d205      	bcs.n	8002eca <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002ebe:	6a3b      	ldr	r3, [r7, #32]
 8002ec0:	b29a      	uxth	r2, r3
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	60da      	str	r2, [r3, #12]
 8002ec8:	e002      	b.n	8002ed0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8002ed8:	697b      	ldr	r3, [r7, #20]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	2200      	movs	r2, #0
 8002eea:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8002eec:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3730      	adds	r7, #48	; 0x30
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002efa:	bf00      	nop
 8002efc:	08005960 	.word	0x08005960
 8002f00:	00f42400 	.word	0x00f42400

08002f04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f10:	f003 0301 	and.w	r3, r3, #1
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d00a      	beq.n	8002f2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d00a      	beq.n	8002f50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f54:	f003 0304 	and.w	r3, r3, #4
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d00a      	beq.n	8002f72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f76:	f003 0308 	and.w	r3, r3, #8
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00a      	beq.n	8002f94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	430a      	orrs	r2, r1
 8002f92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f98:	f003 0310 	and.w	r3, r3, #16
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d00a      	beq.n	8002fb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fba:	f003 0320 	and.w	r3, r3, #32
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00a      	beq.n	8002fd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	430a      	orrs	r2, r1
 8002fd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d01a      	beq.n	800301a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ffe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003002:	d10a      	bne.n	800301a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	430a      	orrs	r2, r1
 8003018:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800301e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00a      	beq.n	800303c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	430a      	orrs	r2, r1
 800303a:	605a      	str	r2, [r3, #4]
  }
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b086      	sub	sp, #24
 800304c:	af02      	add	r7, sp, #8
 800304e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003058:	f7fd ff46 	bl	8000ee8 <HAL_GetTick>
 800305c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f003 0308 	and.w	r3, r3, #8
 8003068:	2b08      	cmp	r3, #8
 800306a:	d10e      	bne.n	800308a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800306c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003070:	9300      	str	r3, [sp, #0]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2200      	movs	r2, #0
 8003076:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f000 f82f 	bl	80030de <UART_WaitOnFlagUntilTimeout>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e025      	b.n	80030d6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0304 	and.w	r3, r3, #4
 8003094:	2b04      	cmp	r3, #4
 8003096:	d10e      	bne.n	80030b6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003098:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800309c:	9300      	str	r3, [sp, #0]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f000 f819 	bl	80030de <UART_WaitOnFlagUntilTimeout>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e00f      	b.n	80030d6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2220      	movs	r2, #32
 80030ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2220      	movs	r2, #32
 80030c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4618      	mov	r0, r3
 80030d8:	3710      	adds	r7, #16
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80030de:	b580      	push	{r7, lr}
 80030e0:	b09c      	sub	sp, #112	; 0x70
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	60f8      	str	r0, [r7, #12]
 80030e6:	60b9      	str	r1, [r7, #8]
 80030e8:	603b      	str	r3, [r7, #0]
 80030ea:	4613      	mov	r3, r2
 80030ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030ee:	e0a9      	b.n	8003244 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f6:	f000 80a5 	beq.w	8003244 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030fa:	f7fd fef5 	bl	8000ee8 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003106:	429a      	cmp	r2, r3
 8003108:	d302      	bcc.n	8003110 <UART_WaitOnFlagUntilTimeout+0x32>
 800310a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800310c:	2b00      	cmp	r3, #0
 800310e:	d140      	bne.n	8003192 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003116:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003118:	e853 3f00 	ldrex	r3, [r3]
 800311c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800311e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003120:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003124:	667b      	str	r3, [r7, #100]	; 0x64
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	461a      	mov	r2, r3
 800312c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800312e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003130:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003132:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003134:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003136:	e841 2300 	strex	r3, r2, [r1]
 800313a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800313c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800313e:	2b00      	cmp	r3, #0
 8003140:	d1e6      	bne.n	8003110 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	3308      	adds	r3, #8
 8003148:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800314a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800314c:	e853 3f00 	ldrex	r3, [r3]
 8003150:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003154:	f023 0301 	bic.w	r3, r3, #1
 8003158:	663b      	str	r3, [r7, #96]	; 0x60
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	3308      	adds	r3, #8
 8003160:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003162:	64ba      	str	r2, [r7, #72]	; 0x48
 8003164:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003166:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003168:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800316a:	e841 2300 	strex	r3, r2, [r1]
 800316e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003170:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1e5      	bne.n	8003142 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2220      	movs	r2, #32
 800317a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2220      	movs	r2, #32
 8003182:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800318e:	2303      	movs	r3, #3
 8003190:	e069      	b.n	8003266 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	2b00      	cmp	r3, #0
 800319e:	d051      	beq.n	8003244 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	69db      	ldr	r3, [r3, #28]
 80031a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031ae:	d149      	bne.n	8003244 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031b8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c2:	e853 3f00 	ldrex	r3, [r3]
 80031c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80031c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80031ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	461a      	mov	r2, r3
 80031d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031d8:	637b      	str	r3, [r7, #52]	; 0x34
 80031da:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80031de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031e0:	e841 2300 	strex	r3, r2, [r1]
 80031e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80031e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d1e6      	bne.n	80031ba <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	3308      	adds	r3, #8
 80031f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	e853 3f00 	ldrex	r3, [r3]
 80031fa:	613b      	str	r3, [r7, #16]
   return(result);
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	f023 0301 	bic.w	r3, r3, #1
 8003202:	66bb      	str	r3, [r7, #104]	; 0x68
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	3308      	adds	r3, #8
 800320a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800320c:	623a      	str	r2, [r7, #32]
 800320e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003210:	69f9      	ldr	r1, [r7, #28]
 8003212:	6a3a      	ldr	r2, [r7, #32]
 8003214:	e841 2300 	strex	r3, r2, [r1]
 8003218:	61bb      	str	r3, [r7, #24]
   return(result);
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1e5      	bne.n	80031ec <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2220      	movs	r2, #32
 8003224:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2220      	movs	r2, #32
 800322c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	2220      	movs	r2, #32
 8003234:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2200      	movs	r2, #0
 800323c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003240:	2303      	movs	r3, #3
 8003242:	e010      	b.n	8003266 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	69da      	ldr	r2, [r3, #28]
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	4013      	ands	r3, r2
 800324e:	68ba      	ldr	r2, [r7, #8]
 8003250:	429a      	cmp	r2, r3
 8003252:	bf0c      	ite	eq
 8003254:	2301      	moveq	r3, #1
 8003256:	2300      	movne	r3, #0
 8003258:	b2db      	uxtb	r3, r3
 800325a:	461a      	mov	r2, r3
 800325c:	79fb      	ldrb	r3, [r7, #7]
 800325e:	429a      	cmp	r2, r3
 8003260:	f43f af46 	beq.w	80030f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3770      	adds	r7, #112	; 0x70
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}

0800326e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800326e:	b480      	push	{r7}
 8003270:	b085      	sub	sp, #20
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800327c:	2b01      	cmp	r3, #1
 800327e:	d101      	bne.n	8003284 <HAL_UARTEx_DisableFifoMode+0x16>
 8003280:	2302      	movs	r3, #2
 8003282:	e027      	b.n	80032d4 <HAL_UARTEx_DisableFifoMode+0x66>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2201      	movs	r2, #1
 8003288:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2224      	movs	r2, #36	; 0x24
 8003290:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f022 0201 	bic.w	r2, r2, #1
 80032aa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80032b2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2200      	movs	r2, #0
 80032b8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2220      	movs	r2, #32
 80032c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80032d2:	2300      	movs	r3, #0
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3714      	adds	r7, #20
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	d101      	bne.n	80032f8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80032f4:	2302      	movs	r3, #2
 80032f6:	e02d      	b.n	8003354 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2224      	movs	r2, #36	; 0x24
 8003304:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f022 0201 	bic.w	r2, r2, #1
 800331e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	683a      	ldr	r2, [r7, #0]
 8003330:	430a      	orrs	r2, r1
 8003332:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f000 f84f 	bl	80033d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2220      	movs	r2, #32
 8003346:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003352:	2300      	movs	r3, #0
}
 8003354:	4618      	mov	r0, r3
 8003356:	3710      	adds	r7, #16
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800336c:	2b01      	cmp	r3, #1
 800336e:	d101      	bne.n	8003374 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003370:	2302      	movs	r3, #2
 8003372:	e02d      	b.n	80033d0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2224      	movs	r2, #36	; 0x24
 8003380:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f022 0201 	bic.w	r2, r2, #1
 800339a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	683a      	ldr	r2, [r7, #0]
 80033ac:	430a      	orrs	r2, r1
 80033ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80033b0:	6878      	ldr	r0, [r7, #4]
 80033b2:	f000 f811 	bl	80033d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2220      	movs	r2, #32
 80033c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3710      	adds	r7, #16
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80033d8:	b480      	push	{r7}
 80033da:	b085      	sub	sp, #20
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d108      	bne.n	80033fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80033f8:	e031      	b.n	800345e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80033fa:	2308      	movs	r3, #8
 80033fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80033fe:	2308      	movs	r3, #8
 8003400:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	0e5b      	lsrs	r3, r3, #25
 800340a:	b2db      	uxtb	r3, r3
 800340c:	f003 0307 	and.w	r3, r3, #7
 8003410:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	0f5b      	lsrs	r3, r3, #29
 800341a:	b2db      	uxtb	r3, r3
 800341c:	f003 0307 	and.w	r3, r3, #7
 8003420:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003422:	7bbb      	ldrb	r3, [r7, #14]
 8003424:	7b3a      	ldrb	r2, [r7, #12]
 8003426:	4911      	ldr	r1, [pc, #68]	; (800346c <UARTEx_SetNbDataToProcess+0x94>)
 8003428:	5c8a      	ldrb	r2, [r1, r2]
 800342a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800342e:	7b3a      	ldrb	r2, [r7, #12]
 8003430:	490f      	ldr	r1, [pc, #60]	; (8003470 <UARTEx_SetNbDataToProcess+0x98>)
 8003432:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003434:	fb93 f3f2 	sdiv	r3, r3, r2
 8003438:	b29a      	uxth	r2, r3
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003440:	7bfb      	ldrb	r3, [r7, #15]
 8003442:	7b7a      	ldrb	r2, [r7, #13]
 8003444:	4909      	ldr	r1, [pc, #36]	; (800346c <UARTEx_SetNbDataToProcess+0x94>)
 8003446:	5c8a      	ldrb	r2, [r1, r2]
 8003448:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800344c:	7b7a      	ldrb	r2, [r7, #13]
 800344e:	4908      	ldr	r1, [pc, #32]	; (8003470 <UARTEx_SetNbDataToProcess+0x98>)
 8003450:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003452:	fb93 f3f2 	sdiv	r3, r3, r2
 8003456:	b29a      	uxth	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800345e:	bf00      	nop
 8003460:	3714      	adds	r7, #20
 8003462:	46bd      	mov	sp, r7
 8003464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	08005978 	.word	0x08005978
 8003470:	08005980 	.word	0x08005980

08003474 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003474:	b480      	push	{r7}
 8003476:	b085      	sub	sp, #20
 8003478:	af00      	add	r7, sp, #0
 800347a:	4603      	mov	r3, r0
 800347c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800347e:	2300      	movs	r3, #0
 8003480:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003482:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003486:	2b84      	cmp	r3, #132	; 0x84
 8003488:	d005      	beq.n	8003496 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800348a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	4413      	add	r3, r2
 8003492:	3303      	adds	r3, #3
 8003494:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003496:	68fb      	ldr	r3, [r7, #12]
}
 8003498:	4618      	mov	r0, r3
 800349a:	3714      	adds	r7, #20
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr

080034a4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80034a8:	f000 fa58 	bl	800395c <vTaskStartScheduler>
  
  return osOK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	bd80      	pop	{r7, pc}

080034b2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80034b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034b4:	b087      	sub	sp, #28
 80034b6:	af02      	add	r7, sp, #8
 80034b8:	6078      	str	r0, [r7, #4]
 80034ba:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685c      	ldr	r4, [r3, #4]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80034c8:	b29e      	uxth	r6, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7ff ffcf 	bl	8003474 <makeFreeRtosPriority>
 80034d6:	4602      	mov	r2, r0
 80034d8:	f107 030c 	add.w	r3, r7, #12
 80034dc:	9301      	str	r3, [sp, #4]
 80034de:	9200      	str	r2, [sp, #0]
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	4632      	mov	r2, r6
 80034e4:	4629      	mov	r1, r5
 80034e6:	4620      	mov	r0, r4
 80034e8:	f000 f8d2 	bl	8003690 <xTaskCreate>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d001      	beq.n	80034f6 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80034f2:	2300      	movs	r3, #0
 80034f4:	e000      	b.n	80034f8 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 80034f6:	68fb      	ldr	r3, [r7, #12]
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3714      	adds	r7, #20
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003500 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <osDelay+0x16>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	e000      	b.n	8003518 <osDelay+0x18>
 8003516:	2301      	movs	r3, #1
 8003518:	4618      	mov	r0, r3
 800351a:	f000 f9eb 	bl	80038f4 <vTaskDelay>
  
  return osOK;
 800351e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003520:	4618      	mov	r0, r3
 8003522:	3710      	adds	r7, #16
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f103 0208 	add.w	r2, r3, #8
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	f04f 32ff 	mov.w	r2, #4294967295
 8003540:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	f103 0208 	add.w	r2, r3, #8
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f103 0208 	add.w	r2, r3, #8
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800355c:	bf00      	nop
 800355e:	370c      	adds	r7, #12
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003576:	bf00      	nop
 8003578:	370c      	adds	r7, #12
 800357a:	46bd      	mov	sp, r7
 800357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003580:	4770      	bx	lr

08003582 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003582:	b480      	push	{r7}
 8003584:	b085      	sub	sp, #20
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
 800358a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	689a      	ldr	r2, [r3, #8]
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	683a      	ldr	r2, [r7, #0]
 80035a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	683a      	ldr	r2, [r7, #0]
 80035ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	1c5a      	adds	r2, r3, #1
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	601a      	str	r2, [r3, #0]
}
 80035be:	bf00      	nop
 80035c0:	3714      	adds	r7, #20
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr

080035ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80035ca:	b480      	push	{r7}
 80035cc:	b085      	sub	sp, #20
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
 80035d2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e0:	d103      	bne.n	80035ea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	60fb      	str	r3, [r7, #12]
 80035e8:	e00c      	b.n	8003604 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	3308      	adds	r3, #8
 80035ee:	60fb      	str	r3, [r7, #12]
 80035f0:	e002      	b.n	80035f8 <vListInsert+0x2e>
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	60fb      	str	r3, [r7, #12]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68ba      	ldr	r2, [r7, #8]
 8003600:	429a      	cmp	r2, r3
 8003602:	d2f6      	bcs.n	80035f2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	685a      	ldr	r2, [r3, #4]
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	683a      	ldr	r2, [r7, #0]
 8003612:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	683a      	ldr	r2, [r7, #0]
 800361e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	687a      	ldr	r2, [r7, #4]
 8003624:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	1c5a      	adds	r2, r3, #1
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	601a      	str	r2, [r3, #0]
}
 8003630:	bf00      	nop
 8003632:	3714      	adds	r7, #20
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800363c:	b480      	push	{r7}
 800363e:	b085      	sub	sp, #20
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	6892      	ldr	r2, [r2, #8]
 8003652:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	6852      	ldr	r2, [r2, #4]
 800365c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	429a      	cmp	r2, r3
 8003666:	d103      	bne.n	8003670 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	689a      	ldr	r2, [r3, #8]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	1e5a      	subs	r2, r3, #1
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
}
 8003684:	4618      	mov	r0, r3
 8003686:	3714      	adds	r7, #20
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003690:	b580      	push	{r7, lr}
 8003692:	b08c      	sub	sp, #48	; 0x30
 8003694:	af04      	add	r7, sp, #16
 8003696:	60f8      	str	r0, [r7, #12]
 8003698:	60b9      	str	r1, [r7, #8]
 800369a:	603b      	str	r3, [r7, #0]
 800369c:	4613      	mov	r3, r2
 800369e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80036a0:	88fb      	ldrh	r3, [r7, #6]
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	4618      	mov	r0, r3
 80036a6:	f000 fea7 	bl	80043f8 <pvPortMalloc>
 80036aa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d00e      	beq.n	80036d0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80036b2:	2054      	movs	r0, #84	; 0x54
 80036b4:	f000 fea0 	bl	80043f8 <pvPortMalloc>
 80036b8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d003      	beq.n	80036c8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	631a      	str	r2, [r3, #48]	; 0x30
 80036c6:	e005      	b.n	80036d4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80036c8:	6978      	ldr	r0, [r7, #20]
 80036ca:	f000 ff61 	bl	8004590 <vPortFree>
 80036ce:	e001      	b.n	80036d4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80036d0:	2300      	movs	r3, #0
 80036d2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d013      	beq.n	8003702 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80036da:	88fa      	ldrh	r2, [r7, #6]
 80036dc:	2300      	movs	r3, #0
 80036de:	9303      	str	r3, [sp, #12]
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	9302      	str	r3, [sp, #8]
 80036e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e6:	9301      	str	r3, [sp, #4]
 80036e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ea:	9300      	str	r3, [sp, #0]
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	68b9      	ldr	r1, [r7, #8]
 80036f0:	68f8      	ldr	r0, [r7, #12]
 80036f2:	f000 f80e 	bl	8003712 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80036f6:	69f8      	ldr	r0, [r7, #28]
 80036f8:	f000 f892 	bl	8003820 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80036fc:	2301      	movs	r3, #1
 80036fe:	61bb      	str	r3, [r7, #24]
 8003700:	e002      	b.n	8003708 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003702:	f04f 33ff 	mov.w	r3, #4294967295
 8003706:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003708:	69bb      	ldr	r3, [r7, #24]
	}
 800370a:	4618      	mov	r0, r3
 800370c:	3720      	adds	r7, #32
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003712:	b580      	push	{r7, lr}
 8003714:	b088      	sub	sp, #32
 8003716:	af00      	add	r7, sp, #0
 8003718:	60f8      	str	r0, [r7, #12]
 800371a:	60b9      	str	r1, [r7, #8]
 800371c:	607a      	str	r2, [r7, #4]
 800371e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003720:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003722:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800372a:	3b01      	subs	r3, #1
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	4413      	add	r3, r2
 8003730:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003732:	69bb      	ldr	r3, [r7, #24]
 8003734:	f023 0307 	bic.w	r3, r3, #7
 8003738:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	f003 0307 	and.w	r3, r3, #7
 8003740:	2b00      	cmp	r3, #0
 8003742:	d00a      	beq.n	800375a <prvInitialiseNewTask+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003744:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003748:	f383 8811 	msr	BASEPRI, r3
 800374c:	f3bf 8f6f 	isb	sy
 8003750:	f3bf 8f4f 	dsb	sy
 8003754:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003756:	bf00      	nop
 8003758:	e7fe      	b.n	8003758 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d01f      	beq.n	80037a0 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003760:	2300      	movs	r3, #0
 8003762:	61fb      	str	r3, [r7, #28]
 8003764:	e012      	b.n	800378c <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003766:	68ba      	ldr	r2, [r7, #8]
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	4413      	add	r3, r2
 800376c:	7819      	ldrb	r1, [r3, #0]
 800376e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	4413      	add	r3, r2
 8003774:	3334      	adds	r3, #52	; 0x34
 8003776:	460a      	mov	r2, r1
 8003778:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800377a:	68ba      	ldr	r2, [r7, #8]
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	4413      	add	r3, r2
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d006      	beq.n	8003794 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	3301      	adds	r3, #1
 800378a:	61fb      	str	r3, [r7, #28]
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	2b0f      	cmp	r3, #15
 8003790:	d9e9      	bls.n	8003766 <prvInitialiseNewTask+0x54>
 8003792:	e000      	b.n	8003796 <prvInitialiseNewTask+0x84>
			{
				break;
 8003794:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003798:	2200      	movs	r2, #0
 800379a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800379e:	e003      	b.n	80037a8 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80037a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80037a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037aa:	2b06      	cmp	r3, #6
 80037ac:	d901      	bls.n	80037b2 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80037ae:	2306      	movs	r3, #6
 80037b0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80037b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037b6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80037b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80037bc:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80037be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c0:	2200      	movs	r2, #0
 80037c2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80037c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c6:	3304      	adds	r3, #4
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7ff fecd 	bl	8003568 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80037ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037d0:	3318      	adds	r3, #24
 80037d2:	4618      	mov	r0, r3
 80037d4:	f7ff fec8 	bl	8003568 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80037d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037dc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e0:	f1c3 0207 	rsb	r2, r3, #7
 80037e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037e6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80037e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037ec:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80037ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f0:	2200      	movs	r2, #0
 80037f2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80037f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80037fc:	683a      	ldr	r2, [r7, #0]
 80037fe:	68f9      	ldr	r1, [r7, #12]
 8003800:	69b8      	ldr	r0, [r7, #24]
 8003802:	f000 fbeb 	bl	8003fdc <pxPortInitialiseStack>
 8003806:	4602      	mov	r2, r0
 8003808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800380a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800380c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800380e:	2b00      	cmp	r3, #0
 8003810:	d002      	beq.n	8003818 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003814:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003816:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003818:	bf00      	nop
 800381a:	3720      	adds	r7, #32
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003828:	f000 fd04 	bl	8004234 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800382c:	4b2a      	ldr	r3, [pc, #168]	; (80038d8 <prvAddNewTaskToReadyList+0xb8>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	3301      	adds	r3, #1
 8003832:	4a29      	ldr	r2, [pc, #164]	; (80038d8 <prvAddNewTaskToReadyList+0xb8>)
 8003834:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003836:	4b29      	ldr	r3, [pc, #164]	; (80038dc <prvAddNewTaskToReadyList+0xbc>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d109      	bne.n	8003852 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800383e:	4a27      	ldr	r2, [pc, #156]	; (80038dc <prvAddNewTaskToReadyList+0xbc>)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003844:	4b24      	ldr	r3, [pc, #144]	; (80038d8 <prvAddNewTaskToReadyList+0xb8>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d110      	bne.n	800386e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800384c:	f000 faa4 	bl	8003d98 <prvInitialiseTaskLists>
 8003850:	e00d      	b.n	800386e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003852:	4b23      	ldr	r3, [pc, #140]	; (80038e0 <prvAddNewTaskToReadyList+0xc0>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d109      	bne.n	800386e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800385a:	4b20      	ldr	r3, [pc, #128]	; (80038dc <prvAddNewTaskToReadyList+0xbc>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003864:	429a      	cmp	r2, r3
 8003866:	d802      	bhi.n	800386e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003868:	4a1c      	ldr	r2, [pc, #112]	; (80038dc <prvAddNewTaskToReadyList+0xbc>)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800386e:	4b1d      	ldr	r3, [pc, #116]	; (80038e4 <prvAddNewTaskToReadyList+0xc4>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	3301      	adds	r3, #1
 8003874:	4a1b      	ldr	r2, [pc, #108]	; (80038e4 <prvAddNewTaskToReadyList+0xc4>)
 8003876:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387c:	2201      	movs	r2, #1
 800387e:	409a      	lsls	r2, r3
 8003880:	4b19      	ldr	r3, [pc, #100]	; (80038e8 <prvAddNewTaskToReadyList+0xc8>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4313      	orrs	r3, r2
 8003886:	4a18      	ldr	r2, [pc, #96]	; (80038e8 <prvAddNewTaskToReadyList+0xc8>)
 8003888:	6013      	str	r3, [r2, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800388e:	4613      	mov	r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	4413      	add	r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	4a15      	ldr	r2, [pc, #84]	; (80038ec <prvAddNewTaskToReadyList+0xcc>)
 8003898:	441a      	add	r2, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	3304      	adds	r3, #4
 800389e:	4619      	mov	r1, r3
 80038a0:	4610      	mov	r0, r2
 80038a2:	f7ff fe6e 	bl	8003582 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80038a6:	f000 fcf5 	bl	8004294 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80038aa:	4b0d      	ldr	r3, [pc, #52]	; (80038e0 <prvAddNewTaskToReadyList+0xc0>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00e      	beq.n	80038d0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80038b2:	4b0a      	ldr	r3, [pc, #40]	; (80038dc <prvAddNewTaskToReadyList+0xbc>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038bc:	429a      	cmp	r2, r3
 80038be:	d207      	bcs.n	80038d0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80038c0:	4b0b      	ldr	r3, [pc, #44]	; (80038f0 <prvAddNewTaskToReadyList+0xd0>)
 80038c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038c6:	601a      	str	r2, [r3, #0]
 80038c8:	f3bf 8f4f 	dsb	sy
 80038cc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80038d0:	bf00      	nop
 80038d2:	3708      	adds	r7, #8
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	20000308 	.word	0x20000308
 80038dc:	20000208 	.word	0x20000208
 80038e0:	20000314 	.word	0x20000314
 80038e4:	20000324 	.word	0x20000324
 80038e8:	20000310 	.word	0x20000310
 80038ec:	2000020c 	.word	0x2000020c
 80038f0:	e000ed04 	.word	0xe000ed04

080038f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80038fc:	2300      	movs	r3, #0
 80038fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d017      	beq.n	8003936 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003906:	4b13      	ldr	r3, [pc, #76]	; (8003954 <vTaskDelay+0x60>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00a      	beq.n	8003924 <vTaskDelay+0x30>
	__asm volatile
 800390e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003912:	f383 8811 	msr	BASEPRI, r3
 8003916:	f3bf 8f6f 	isb	sy
 800391a:	f3bf 8f4f 	dsb	sy
 800391e:	60bb      	str	r3, [r7, #8]
}
 8003920:	bf00      	nop
 8003922:	e7fe      	b.n	8003922 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003924:	f000 f862 	bl	80039ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003928:	2100      	movs	r1, #0
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 faf0 	bl	8003f10 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003930:	f000 f86a 	bl	8003a08 <xTaskResumeAll>
 8003934:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d107      	bne.n	800394c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800393c:	4b06      	ldr	r3, [pc, #24]	; (8003958 <vTaskDelay+0x64>)
 800393e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003942:	601a      	str	r2, [r3, #0]
 8003944:	f3bf 8f4f 	dsb	sy
 8003948:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800394c:	bf00      	nop
 800394e:	3710      	adds	r7, #16
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}
 8003954:	20000330 	.word	0x20000330
 8003958:	e000ed04 	.word	0xe000ed04

0800395c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b086      	sub	sp, #24
 8003960:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8003962:	4b1c      	ldr	r3, [pc, #112]	; (80039d4 <vTaskStartScheduler+0x78>)
 8003964:	9301      	str	r3, [sp, #4]
 8003966:	2300      	movs	r3, #0
 8003968:	9300      	str	r3, [sp, #0]
 800396a:	2300      	movs	r3, #0
 800396c:	2280      	movs	r2, #128	; 0x80
 800396e:	491a      	ldr	r1, [pc, #104]	; (80039d8 <vTaskStartScheduler+0x7c>)
 8003970:	481a      	ldr	r0, [pc, #104]	; (80039dc <vTaskStartScheduler+0x80>)
 8003972:	f7ff fe8d 	bl	8003690 <xTaskCreate>
 8003976:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d116      	bne.n	80039ac <vTaskStartScheduler+0x50>
	__asm volatile
 800397e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003982:	f383 8811 	msr	BASEPRI, r3
 8003986:	f3bf 8f6f 	isb	sy
 800398a:	f3bf 8f4f 	dsb	sy
 800398e:	60bb      	str	r3, [r7, #8]
}
 8003990:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003992:	4b13      	ldr	r3, [pc, #76]	; (80039e0 <vTaskStartScheduler+0x84>)
 8003994:	f04f 32ff 	mov.w	r2, #4294967295
 8003998:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800399a:	4b12      	ldr	r3, [pc, #72]	; (80039e4 <vTaskStartScheduler+0x88>)
 800399c:	2201      	movs	r2, #1
 800399e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80039a0:	4b11      	ldr	r3, [pc, #68]	; (80039e8 <vTaskStartScheduler+0x8c>)
 80039a2:	2200      	movs	r2, #0
 80039a4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80039a6:	f000 fba3 	bl	80040f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80039aa:	e00e      	b.n	80039ca <vTaskStartScheduler+0x6e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b2:	d10a      	bne.n	80039ca <vTaskStartScheduler+0x6e>
	__asm volatile
 80039b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b8:	f383 8811 	msr	BASEPRI, r3
 80039bc:	f3bf 8f6f 	isb	sy
 80039c0:	f3bf 8f4f 	dsb	sy
 80039c4:	607b      	str	r3, [r7, #4]
}
 80039c6:	bf00      	nop
 80039c8:	e7fe      	b.n	80039c8 <vTaskStartScheduler+0x6c>
}
 80039ca:	bf00      	nop
 80039cc:	3710      	adds	r7, #16
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}
 80039d2:	bf00      	nop
 80039d4:	2000032c 	.word	0x2000032c
 80039d8:	08005940 	.word	0x08005940
 80039dc:	08003d69 	.word	0x08003d69
 80039e0:	20000328 	.word	0x20000328
 80039e4:	20000314 	.word	0x20000314
 80039e8:	2000030c 	.word	0x2000030c

080039ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80039ec:	b480      	push	{r7}
 80039ee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80039f0:	4b04      	ldr	r3, [pc, #16]	; (8003a04 <vTaskSuspendAll+0x18>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	3301      	adds	r3, #1
 80039f6:	4a03      	ldr	r2, [pc, #12]	; (8003a04 <vTaskSuspendAll+0x18>)
 80039f8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80039fa:	bf00      	nop
 80039fc:	46bd      	mov	sp, r7
 80039fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a02:	4770      	bx	lr
 8003a04:	20000330 	.word	0x20000330

08003a08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003a12:	2300      	movs	r3, #0
 8003a14:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003a16:	4b41      	ldr	r3, [pc, #260]	; (8003b1c <xTaskResumeAll+0x114>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d10a      	bne.n	8003a34 <xTaskResumeAll+0x2c>
	__asm volatile
 8003a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a22:	f383 8811 	msr	BASEPRI, r3
 8003a26:	f3bf 8f6f 	isb	sy
 8003a2a:	f3bf 8f4f 	dsb	sy
 8003a2e:	603b      	str	r3, [r7, #0]
}
 8003a30:	bf00      	nop
 8003a32:	e7fe      	b.n	8003a32 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003a34:	f000 fbfe 	bl	8004234 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003a38:	4b38      	ldr	r3, [pc, #224]	; (8003b1c <xTaskResumeAll+0x114>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	4a37      	ldr	r2, [pc, #220]	; (8003b1c <xTaskResumeAll+0x114>)
 8003a40:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a42:	4b36      	ldr	r3, [pc, #216]	; (8003b1c <xTaskResumeAll+0x114>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d161      	bne.n	8003b0e <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003a4a:	4b35      	ldr	r3, [pc, #212]	; (8003b20 <xTaskResumeAll+0x118>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d05d      	beq.n	8003b0e <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a52:	e02e      	b.n	8003ab2 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a54:	4b33      	ldr	r3, [pc, #204]	; (8003b24 <xTaskResumeAll+0x11c>)
 8003a56:	68db      	ldr	r3, [r3, #12]
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	3318      	adds	r3, #24
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7ff fdeb 	bl	800363c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	3304      	adds	r3, #4
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7ff fde6 	bl	800363c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a74:	2201      	movs	r2, #1
 8003a76:	409a      	lsls	r2, r3
 8003a78:	4b2b      	ldr	r3, [pc, #172]	; (8003b28 <xTaskResumeAll+0x120>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	4a2a      	ldr	r2, [pc, #168]	; (8003b28 <xTaskResumeAll+0x120>)
 8003a80:	6013      	str	r3, [r2, #0]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a86:	4613      	mov	r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	4413      	add	r3, r2
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	4a27      	ldr	r2, [pc, #156]	; (8003b2c <xTaskResumeAll+0x124>)
 8003a90:	441a      	add	r2, r3
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	3304      	adds	r3, #4
 8003a96:	4619      	mov	r1, r3
 8003a98:	4610      	mov	r0, r2
 8003a9a:	f7ff fd72 	bl	8003582 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aa2:	4b23      	ldr	r3, [pc, #140]	; (8003b30 <xTaskResumeAll+0x128>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d302      	bcc.n	8003ab2 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003aac:	4b21      	ldr	r3, [pc, #132]	; (8003b34 <xTaskResumeAll+0x12c>)
 8003aae:	2201      	movs	r2, #1
 8003ab0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ab2:	4b1c      	ldr	r3, [pc, #112]	; (8003b24 <xTaskResumeAll+0x11c>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d1cc      	bne.n	8003a54 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d001      	beq.n	8003ac4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003ac0:	f000 f9e8 	bl	8003e94 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003ac4:	4b1c      	ldr	r3, [pc, #112]	; (8003b38 <xTaskResumeAll+0x130>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d010      	beq.n	8003af2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003ad0:	f000 f836 	bl	8003b40 <xTaskIncrementTick>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d002      	beq.n	8003ae0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003ada:	4b16      	ldr	r3, [pc, #88]	; (8003b34 <xTaskResumeAll+0x12c>)
 8003adc:	2201      	movs	r2, #1
 8003ade:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d1f1      	bne.n	8003ad0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8003aec:	4b12      	ldr	r3, [pc, #72]	; (8003b38 <xTaskResumeAll+0x130>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003af2:	4b10      	ldr	r3, [pc, #64]	; (8003b34 <xTaskResumeAll+0x12c>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d009      	beq.n	8003b0e <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003afa:	2301      	movs	r3, #1
 8003afc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003afe:	4b0f      	ldr	r3, [pc, #60]	; (8003b3c <xTaskResumeAll+0x134>)
 8003b00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b04:	601a      	str	r2, [r3, #0]
 8003b06:	f3bf 8f4f 	dsb	sy
 8003b0a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003b0e:	f000 fbc1 	bl	8004294 <vPortExitCritical>

	return xAlreadyYielded;
 8003b12:	68bb      	ldr	r3, [r7, #8]
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	3710      	adds	r7, #16
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	20000330 	.word	0x20000330
 8003b20:	20000308 	.word	0x20000308
 8003b24:	200002c8 	.word	0x200002c8
 8003b28:	20000310 	.word	0x20000310
 8003b2c:	2000020c 	.word	0x2000020c
 8003b30:	20000208 	.word	0x20000208
 8003b34:	2000031c 	.word	0x2000031c
 8003b38:	20000318 	.word	0x20000318
 8003b3c:	e000ed04 	.word	0xe000ed04

08003b40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b086      	sub	sp, #24
 8003b44:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003b46:	2300      	movs	r3, #0
 8003b48:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b4a:	4b4e      	ldr	r3, [pc, #312]	; (8003c84 <xTaskIncrementTick+0x144>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	f040 808e 	bne.w	8003c70 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003b54:	4b4c      	ldr	r3, [pc, #304]	; (8003c88 <xTaskIncrementTick+0x148>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	3301      	adds	r3, #1
 8003b5a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003b5c:	4a4a      	ldr	r2, [pc, #296]	; (8003c88 <xTaskIncrementTick+0x148>)
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d120      	bne.n	8003baa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003b68:	4b48      	ldr	r3, [pc, #288]	; (8003c8c <xTaskIncrementTick+0x14c>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00a      	beq.n	8003b88 <xTaskIncrementTick+0x48>
	__asm volatile
 8003b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b76:	f383 8811 	msr	BASEPRI, r3
 8003b7a:	f3bf 8f6f 	isb	sy
 8003b7e:	f3bf 8f4f 	dsb	sy
 8003b82:	603b      	str	r3, [r7, #0]
}
 8003b84:	bf00      	nop
 8003b86:	e7fe      	b.n	8003b86 <xTaskIncrementTick+0x46>
 8003b88:	4b40      	ldr	r3, [pc, #256]	; (8003c8c <xTaskIncrementTick+0x14c>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	60fb      	str	r3, [r7, #12]
 8003b8e:	4b40      	ldr	r3, [pc, #256]	; (8003c90 <xTaskIncrementTick+0x150>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4a3e      	ldr	r2, [pc, #248]	; (8003c8c <xTaskIncrementTick+0x14c>)
 8003b94:	6013      	str	r3, [r2, #0]
 8003b96:	4a3e      	ldr	r2, [pc, #248]	; (8003c90 <xTaskIncrementTick+0x150>)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6013      	str	r3, [r2, #0]
 8003b9c:	4b3d      	ldr	r3, [pc, #244]	; (8003c94 <xTaskIncrementTick+0x154>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	4a3c      	ldr	r2, [pc, #240]	; (8003c94 <xTaskIncrementTick+0x154>)
 8003ba4:	6013      	str	r3, [r2, #0]
 8003ba6:	f000 f975 	bl	8003e94 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003baa:	4b3b      	ldr	r3, [pc, #236]	; (8003c98 <xTaskIncrementTick+0x158>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d348      	bcc.n	8003c46 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003bb4:	4b35      	ldr	r3, [pc, #212]	; (8003c8c <xTaskIncrementTick+0x14c>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d104      	bne.n	8003bc8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bbe:	4b36      	ldr	r3, [pc, #216]	; (8003c98 <xTaskIncrementTick+0x158>)
 8003bc0:	f04f 32ff 	mov.w	r2, #4294967295
 8003bc4:	601a      	str	r2, [r3, #0]
					break;
 8003bc6:	e03e      	b.n	8003c46 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bc8:	4b30      	ldr	r3, [pc, #192]	; (8003c8c <xTaskIncrementTick+0x14c>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68db      	ldr	r3, [r3, #12]
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d203      	bcs.n	8003be8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003be0:	4a2d      	ldr	r2, [pc, #180]	; (8003c98 <xTaskIncrementTick+0x158>)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003be6:	e02e      	b.n	8003c46 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	3304      	adds	r3, #4
 8003bec:	4618      	mov	r0, r3
 8003bee:	f7ff fd25 	bl	800363c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d004      	beq.n	8003c04 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003bfa:	68bb      	ldr	r3, [r7, #8]
 8003bfc:	3318      	adds	r3, #24
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7ff fd1c 	bl	800363c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c08:	2201      	movs	r2, #1
 8003c0a:	409a      	lsls	r2, r3
 8003c0c:	4b23      	ldr	r3, [pc, #140]	; (8003c9c <xTaskIncrementTick+0x15c>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4313      	orrs	r3, r2
 8003c12:	4a22      	ldr	r2, [pc, #136]	; (8003c9c <xTaskIncrementTick+0x15c>)
 8003c14:	6013      	str	r3, [r2, #0]
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	4413      	add	r3, r2
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	4a1f      	ldr	r2, [pc, #124]	; (8003ca0 <xTaskIncrementTick+0x160>)
 8003c24:	441a      	add	r2, r3
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	3304      	adds	r3, #4
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	4610      	mov	r0, r2
 8003c2e:	f7ff fca8 	bl	8003582 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c36:	4b1b      	ldr	r3, [pc, #108]	; (8003ca4 <xTaskIncrementTick+0x164>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d3b9      	bcc.n	8003bb4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003c40:	2301      	movs	r3, #1
 8003c42:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c44:	e7b6      	b.n	8003bb4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003c46:	4b17      	ldr	r3, [pc, #92]	; (8003ca4 <xTaskIncrementTick+0x164>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c4c:	4914      	ldr	r1, [pc, #80]	; (8003ca0 <xTaskIncrementTick+0x160>)
 8003c4e:	4613      	mov	r3, r2
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	4413      	add	r3, r2
 8003c54:	009b      	lsls	r3, r3, #2
 8003c56:	440b      	add	r3, r1
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d901      	bls.n	8003c62 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003c62:	4b11      	ldr	r3, [pc, #68]	; (8003ca8 <xTaskIncrementTick+0x168>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d007      	beq.n	8003c7a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	617b      	str	r3, [r7, #20]
 8003c6e:	e004      	b.n	8003c7a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003c70:	4b0e      	ldr	r3, [pc, #56]	; (8003cac <xTaskIncrementTick+0x16c>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	3301      	adds	r3, #1
 8003c76:	4a0d      	ldr	r2, [pc, #52]	; (8003cac <xTaskIncrementTick+0x16c>)
 8003c78:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003c7a:	697b      	ldr	r3, [r7, #20]
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3718      	adds	r7, #24
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	20000330 	.word	0x20000330
 8003c88:	2000030c 	.word	0x2000030c
 8003c8c:	200002c0 	.word	0x200002c0
 8003c90:	200002c4 	.word	0x200002c4
 8003c94:	20000320 	.word	0x20000320
 8003c98:	20000328 	.word	0x20000328
 8003c9c:	20000310 	.word	0x20000310
 8003ca0:	2000020c 	.word	0x2000020c
 8003ca4:	20000208 	.word	0x20000208
 8003ca8:	2000031c 	.word	0x2000031c
 8003cac:	20000318 	.word	0x20000318

08003cb0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b087      	sub	sp, #28
 8003cb4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003cb6:	4b27      	ldr	r3, [pc, #156]	; (8003d54 <vTaskSwitchContext+0xa4>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d003      	beq.n	8003cc6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003cbe:	4b26      	ldr	r3, [pc, #152]	; (8003d58 <vTaskSwitchContext+0xa8>)
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003cc4:	e03f      	b.n	8003d46 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003cc6:	4b24      	ldr	r3, [pc, #144]	; (8003d58 <vTaskSwitchContext+0xa8>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ccc:	4b23      	ldr	r3, [pc, #140]	; (8003d5c <vTaskSwitchContext+0xac>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	fab3 f383 	clz	r3, r3
 8003cd8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003cda:	7afb      	ldrb	r3, [r7, #11]
 8003cdc:	f1c3 031f 	rsb	r3, r3, #31
 8003ce0:	617b      	str	r3, [r7, #20]
 8003ce2:	491f      	ldr	r1, [pc, #124]	; (8003d60 <vTaskSwitchContext+0xb0>)
 8003ce4:	697a      	ldr	r2, [r7, #20]
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	4413      	add	r3, r2
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	440b      	add	r3, r1
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d10a      	bne.n	8003d0c <vTaskSwitchContext+0x5c>
	__asm volatile
 8003cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cfa:	f383 8811 	msr	BASEPRI, r3
 8003cfe:	f3bf 8f6f 	isb	sy
 8003d02:	f3bf 8f4f 	dsb	sy
 8003d06:	607b      	str	r3, [r7, #4]
}
 8003d08:	bf00      	nop
 8003d0a:	e7fe      	b.n	8003d0a <vTaskSwitchContext+0x5a>
 8003d0c:	697a      	ldr	r2, [r7, #20]
 8003d0e:	4613      	mov	r3, r2
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	4413      	add	r3, r2
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	4a12      	ldr	r2, [pc, #72]	; (8003d60 <vTaskSwitchContext+0xb0>)
 8003d18:	4413      	add	r3, r2
 8003d1a:	613b      	str	r3, [r7, #16]
 8003d1c:	693b      	ldr	r3, [r7, #16]
 8003d1e:	685b      	ldr	r3, [r3, #4]
 8003d20:	685a      	ldr	r2, [r3, #4]
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	605a      	str	r2, [r3, #4]
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	685a      	ldr	r2, [r3, #4]
 8003d2a:	693b      	ldr	r3, [r7, #16]
 8003d2c:	3308      	adds	r3, #8
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d104      	bne.n	8003d3c <vTaskSwitchContext+0x8c>
 8003d32:	693b      	ldr	r3, [r7, #16]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	685a      	ldr	r2, [r3, #4]
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	605a      	str	r2, [r3, #4]
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	4a08      	ldr	r2, [pc, #32]	; (8003d64 <vTaskSwitchContext+0xb4>)
 8003d44:	6013      	str	r3, [r2, #0]
}
 8003d46:	bf00      	nop
 8003d48:	371c      	adds	r7, #28
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr
 8003d52:	bf00      	nop
 8003d54:	20000330 	.word	0x20000330
 8003d58:	2000031c 	.word	0x2000031c
 8003d5c:	20000310 	.word	0x20000310
 8003d60:	2000020c 	.word	0x2000020c
 8003d64:	20000208 	.word	0x20000208

08003d68 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003d70:	f000 f852 	bl	8003e18 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003d74:	4b06      	ldr	r3, [pc, #24]	; (8003d90 <prvIdleTask+0x28>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d9f9      	bls.n	8003d70 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003d7c:	4b05      	ldr	r3, [pc, #20]	; (8003d94 <prvIdleTask+0x2c>)
 8003d7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d82:	601a      	str	r2, [r3, #0]
 8003d84:	f3bf 8f4f 	dsb	sy
 8003d88:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003d8c:	e7f0      	b.n	8003d70 <prvIdleTask+0x8>
 8003d8e:	bf00      	nop
 8003d90:	2000020c 	.word	0x2000020c
 8003d94:	e000ed04 	.word	0xe000ed04

08003d98 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b082      	sub	sp, #8
 8003d9c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003d9e:	2300      	movs	r3, #0
 8003da0:	607b      	str	r3, [r7, #4]
 8003da2:	e00c      	b.n	8003dbe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003da4:	687a      	ldr	r2, [r7, #4]
 8003da6:	4613      	mov	r3, r2
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	4413      	add	r3, r2
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	4a12      	ldr	r2, [pc, #72]	; (8003df8 <prvInitialiseTaskLists+0x60>)
 8003db0:	4413      	add	r3, r2
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7ff fbb8 	bl	8003528 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	3301      	adds	r3, #1
 8003dbc:	607b      	str	r3, [r7, #4]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2b06      	cmp	r3, #6
 8003dc2:	d9ef      	bls.n	8003da4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003dc4:	480d      	ldr	r0, [pc, #52]	; (8003dfc <prvInitialiseTaskLists+0x64>)
 8003dc6:	f7ff fbaf 	bl	8003528 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003dca:	480d      	ldr	r0, [pc, #52]	; (8003e00 <prvInitialiseTaskLists+0x68>)
 8003dcc:	f7ff fbac 	bl	8003528 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003dd0:	480c      	ldr	r0, [pc, #48]	; (8003e04 <prvInitialiseTaskLists+0x6c>)
 8003dd2:	f7ff fba9 	bl	8003528 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003dd6:	480c      	ldr	r0, [pc, #48]	; (8003e08 <prvInitialiseTaskLists+0x70>)
 8003dd8:	f7ff fba6 	bl	8003528 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003ddc:	480b      	ldr	r0, [pc, #44]	; (8003e0c <prvInitialiseTaskLists+0x74>)
 8003dde:	f7ff fba3 	bl	8003528 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003de2:	4b0b      	ldr	r3, [pc, #44]	; (8003e10 <prvInitialiseTaskLists+0x78>)
 8003de4:	4a05      	ldr	r2, [pc, #20]	; (8003dfc <prvInitialiseTaskLists+0x64>)
 8003de6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003de8:	4b0a      	ldr	r3, [pc, #40]	; (8003e14 <prvInitialiseTaskLists+0x7c>)
 8003dea:	4a05      	ldr	r2, [pc, #20]	; (8003e00 <prvInitialiseTaskLists+0x68>)
 8003dec:	601a      	str	r2, [r3, #0]
}
 8003dee:	bf00      	nop
 8003df0:	3708      	adds	r7, #8
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	2000020c 	.word	0x2000020c
 8003dfc:	20000298 	.word	0x20000298
 8003e00:	200002ac 	.word	0x200002ac
 8003e04:	200002c8 	.word	0x200002c8
 8003e08:	200002dc 	.word	0x200002dc
 8003e0c:	200002f4 	.word	0x200002f4
 8003e10:	200002c0 	.word	0x200002c0
 8003e14:	200002c4 	.word	0x200002c4

08003e18 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e1e:	e019      	b.n	8003e54 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003e20:	f000 fa08 	bl	8004234 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e24:	4b10      	ldr	r3, [pc, #64]	; (8003e68 <prvCheckTasksWaitingTermination+0x50>)
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	3304      	adds	r3, #4
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7ff fc03 	bl	800363c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003e36:	4b0d      	ldr	r3, [pc, #52]	; (8003e6c <prvCheckTasksWaitingTermination+0x54>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	4a0b      	ldr	r2, [pc, #44]	; (8003e6c <prvCheckTasksWaitingTermination+0x54>)
 8003e3e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003e40:	4b0b      	ldr	r3, [pc, #44]	; (8003e70 <prvCheckTasksWaitingTermination+0x58>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	3b01      	subs	r3, #1
 8003e46:	4a0a      	ldr	r2, [pc, #40]	; (8003e70 <prvCheckTasksWaitingTermination+0x58>)
 8003e48:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003e4a:	f000 fa23 	bl	8004294 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f000 f810 	bl	8003e74 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003e54:	4b06      	ldr	r3, [pc, #24]	; (8003e70 <prvCheckTasksWaitingTermination+0x58>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1e1      	bne.n	8003e20 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003e5c:	bf00      	nop
 8003e5e:	bf00      	nop
 8003e60:	3708      	adds	r7, #8
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	200002dc 	.word	0x200002dc
 8003e6c:	20000308 	.word	0x20000308
 8003e70:	200002f0 	.word	0x200002f0

08003e74 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e80:	4618      	mov	r0, r3
 8003e82:	f000 fb85 	bl	8004590 <vPortFree>
			vPortFree( pxTCB );
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f000 fb82 	bl	8004590 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003e8c:	bf00      	nop
 8003e8e:	3708      	adds	r7, #8
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e9a:	4b0c      	ldr	r3, [pc, #48]	; (8003ecc <prvResetNextTaskUnblockTime+0x38>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d104      	bne.n	8003eae <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003ea4:	4b0a      	ldr	r3, [pc, #40]	; (8003ed0 <prvResetNextTaskUnblockTime+0x3c>)
 8003ea6:	f04f 32ff 	mov.w	r2, #4294967295
 8003eaa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003eac:	e008      	b.n	8003ec0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003eae:	4b07      	ldr	r3, [pc, #28]	; (8003ecc <prvResetNextTaskUnblockTime+0x38>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68db      	ldr	r3, [r3, #12]
 8003eb4:	68db      	ldr	r3, [r3, #12]
 8003eb6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	4a04      	ldr	r2, [pc, #16]	; (8003ed0 <prvResetNextTaskUnblockTime+0x3c>)
 8003ebe:	6013      	str	r3, [r2, #0]
}
 8003ec0:	bf00      	nop
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr
 8003ecc:	200002c0 	.word	0x200002c0
 8003ed0:	20000328 	.word	0x20000328

08003ed4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003eda:	4b0b      	ldr	r3, [pc, #44]	; (8003f08 <xTaskGetSchedulerState+0x34>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d102      	bne.n	8003ee8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	607b      	str	r3, [r7, #4]
 8003ee6:	e008      	b.n	8003efa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ee8:	4b08      	ldr	r3, [pc, #32]	; (8003f0c <xTaskGetSchedulerState+0x38>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d102      	bne.n	8003ef6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003ef0:	2302      	movs	r3, #2
 8003ef2:	607b      	str	r3, [r7, #4]
 8003ef4:	e001      	b.n	8003efa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003efa:	687b      	ldr	r3, [r7, #4]
	}
 8003efc:	4618      	mov	r0, r3
 8003efe:	370c      	adds	r7, #12
 8003f00:	46bd      	mov	sp, r7
 8003f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f06:	4770      	bx	lr
 8003f08:	20000314 	.word	0x20000314
 8003f0c:	20000330 	.word	0x20000330

08003f10 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003f1a:	4b29      	ldr	r3, [pc, #164]	; (8003fc0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003f20:	4b28      	ldr	r3, [pc, #160]	; (8003fc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	3304      	adds	r3, #4
 8003f26:	4618      	mov	r0, r3
 8003f28:	f7ff fb88 	bl	800363c <uxListRemove>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d10b      	bne.n	8003f4a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003f32:	4b24      	ldr	r3, [pc, #144]	; (8003fc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f38:	2201      	movs	r2, #1
 8003f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3e:	43da      	mvns	r2, r3
 8003f40:	4b21      	ldr	r3, [pc, #132]	; (8003fc8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4013      	ands	r3, r2
 8003f46:	4a20      	ldr	r2, [pc, #128]	; (8003fc8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003f48:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f50:	d10a      	bne.n	8003f68 <prvAddCurrentTaskToDelayedList+0x58>
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d007      	beq.n	8003f68 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f58:	4b1a      	ldr	r3, [pc, #104]	; (8003fc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	3304      	adds	r3, #4
 8003f5e:	4619      	mov	r1, r3
 8003f60:	481a      	ldr	r0, [pc, #104]	; (8003fcc <prvAddCurrentTaskToDelayedList+0xbc>)
 8003f62:	f7ff fb0e 	bl	8003582 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003f66:	e026      	b.n	8003fb6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4413      	add	r3, r2
 8003f6e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003f70:	4b14      	ldr	r3, [pc, #80]	; (8003fc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	68ba      	ldr	r2, [r7, #8]
 8003f76:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003f78:	68ba      	ldr	r2, [r7, #8]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d209      	bcs.n	8003f94 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f80:	4b13      	ldr	r3, [pc, #76]	; (8003fd0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	4b0f      	ldr	r3, [pc, #60]	; (8003fc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	3304      	adds	r3, #4
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	4610      	mov	r0, r2
 8003f8e:	f7ff fb1c 	bl	80035ca <vListInsert>
}
 8003f92:	e010      	b.n	8003fb6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f94:	4b0f      	ldr	r3, [pc, #60]	; (8003fd4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	4b0a      	ldr	r3, [pc, #40]	; (8003fc4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	3304      	adds	r3, #4
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	4610      	mov	r0, r2
 8003fa2:	f7ff fb12 	bl	80035ca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003fa6:	4b0c      	ldr	r3, [pc, #48]	; (8003fd8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	68ba      	ldr	r2, [r7, #8]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d202      	bcs.n	8003fb6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003fb0:	4a09      	ldr	r2, [pc, #36]	; (8003fd8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	6013      	str	r3, [r2, #0]
}
 8003fb6:	bf00      	nop
 8003fb8:	3710      	adds	r7, #16
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	2000030c 	.word	0x2000030c
 8003fc4:	20000208 	.word	0x20000208
 8003fc8:	20000310 	.word	0x20000310
 8003fcc:	200002f4 	.word	0x200002f4
 8003fd0:	200002c4 	.word	0x200002c4
 8003fd4:	200002c0 	.word	0x200002c0
 8003fd8:	20000328 	.word	0x20000328

08003fdc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	3b04      	subs	r3, #4
 8003fec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003ff4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	3b04      	subs	r3, #4
 8003ffa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	f023 0201 	bic.w	r2, r3, #1
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	3b04      	subs	r3, #4
 800400a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800400c:	4a0c      	ldr	r2, [pc, #48]	; (8004040 <pxPortInitialiseStack+0x64>)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	3b14      	subs	r3, #20
 8004016:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004018:	687a      	ldr	r2, [r7, #4]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	3b04      	subs	r3, #4
 8004022:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f06f 0202 	mvn.w	r2, #2
 800402a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	3b20      	subs	r3, #32
 8004030:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004032:	68fb      	ldr	r3, [r7, #12]
}
 8004034:	4618      	mov	r0, r3
 8004036:	3714      	adds	r7, #20
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr
 8004040:	08004045 	.word	0x08004045

08004044 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004044:	b480      	push	{r7}
 8004046:	b085      	sub	sp, #20
 8004048:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800404a:	2300      	movs	r3, #0
 800404c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800404e:	4b12      	ldr	r3, [pc, #72]	; (8004098 <prvTaskExitError+0x54>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004056:	d00a      	beq.n	800406e <prvTaskExitError+0x2a>
	__asm volatile
 8004058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800405c:	f383 8811 	msr	BASEPRI, r3
 8004060:	f3bf 8f6f 	isb	sy
 8004064:	f3bf 8f4f 	dsb	sy
 8004068:	60fb      	str	r3, [r7, #12]
}
 800406a:	bf00      	nop
 800406c:	e7fe      	b.n	800406c <prvTaskExitError+0x28>
	__asm volatile
 800406e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004072:	f383 8811 	msr	BASEPRI, r3
 8004076:	f3bf 8f6f 	isb	sy
 800407a:	f3bf 8f4f 	dsb	sy
 800407e:	60bb      	str	r3, [r7, #8]
}
 8004080:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004082:	bf00      	nop
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d0fc      	beq.n	8004084 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800408a:	bf00      	nop
 800408c:	bf00      	nop
 800408e:	3714      	adds	r7, #20
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr
 8004098:	2000000c 	.word	0x2000000c
 800409c:	00000000 	.word	0x00000000

080040a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80040a0:	4b07      	ldr	r3, [pc, #28]	; (80040c0 <pxCurrentTCBConst2>)
 80040a2:	6819      	ldr	r1, [r3, #0]
 80040a4:	6808      	ldr	r0, [r1, #0]
 80040a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040aa:	f380 8809 	msr	PSP, r0
 80040ae:	f3bf 8f6f 	isb	sy
 80040b2:	f04f 0000 	mov.w	r0, #0
 80040b6:	f380 8811 	msr	BASEPRI, r0
 80040ba:	4770      	bx	lr
 80040bc:	f3af 8000 	nop.w

080040c0 <pxCurrentTCBConst2>:
 80040c0:	20000208 	.word	0x20000208
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80040c4:	bf00      	nop
 80040c6:	bf00      	nop

080040c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80040c8:	4808      	ldr	r0, [pc, #32]	; (80040ec <prvPortStartFirstTask+0x24>)
 80040ca:	6800      	ldr	r0, [r0, #0]
 80040cc:	6800      	ldr	r0, [r0, #0]
 80040ce:	f380 8808 	msr	MSP, r0
 80040d2:	f04f 0000 	mov.w	r0, #0
 80040d6:	f380 8814 	msr	CONTROL, r0
 80040da:	b662      	cpsie	i
 80040dc:	b661      	cpsie	f
 80040de:	f3bf 8f4f 	dsb	sy
 80040e2:	f3bf 8f6f 	isb	sy
 80040e6:	df00      	svc	0
 80040e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80040ea:	bf00      	nop
 80040ec:	e000ed08 	.word	0xe000ed08

080040f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b086      	sub	sp, #24
 80040f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80040f6:	4b46      	ldr	r3, [pc, #280]	; (8004210 <xPortStartScheduler+0x120>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a46      	ldr	r2, [pc, #280]	; (8004214 <xPortStartScheduler+0x124>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d10a      	bne.n	8004116 <xPortStartScheduler+0x26>
	__asm volatile
 8004100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004104:	f383 8811 	msr	BASEPRI, r3
 8004108:	f3bf 8f6f 	isb	sy
 800410c:	f3bf 8f4f 	dsb	sy
 8004110:	613b      	str	r3, [r7, #16]
}
 8004112:	bf00      	nop
 8004114:	e7fe      	b.n	8004114 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004116:	4b3e      	ldr	r3, [pc, #248]	; (8004210 <xPortStartScheduler+0x120>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a3f      	ldr	r2, [pc, #252]	; (8004218 <xPortStartScheduler+0x128>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d10a      	bne.n	8004136 <xPortStartScheduler+0x46>
	__asm volatile
 8004120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004124:	f383 8811 	msr	BASEPRI, r3
 8004128:	f3bf 8f6f 	isb	sy
 800412c:	f3bf 8f4f 	dsb	sy
 8004130:	60fb      	str	r3, [r7, #12]
}
 8004132:	bf00      	nop
 8004134:	e7fe      	b.n	8004134 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004136:	4b39      	ldr	r3, [pc, #228]	; (800421c <xPortStartScheduler+0x12c>)
 8004138:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	b2db      	uxtb	r3, r3
 8004140:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	22ff      	movs	r2, #255	; 0xff
 8004146:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	b2db      	uxtb	r3, r3
 800414e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004150:	78fb      	ldrb	r3, [r7, #3]
 8004152:	b2db      	uxtb	r3, r3
 8004154:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004158:	b2da      	uxtb	r2, r3
 800415a:	4b31      	ldr	r3, [pc, #196]	; (8004220 <xPortStartScheduler+0x130>)
 800415c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800415e:	4b31      	ldr	r3, [pc, #196]	; (8004224 <xPortStartScheduler+0x134>)
 8004160:	2207      	movs	r2, #7
 8004162:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004164:	e009      	b.n	800417a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004166:	4b2f      	ldr	r3, [pc, #188]	; (8004224 <xPortStartScheduler+0x134>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	3b01      	subs	r3, #1
 800416c:	4a2d      	ldr	r2, [pc, #180]	; (8004224 <xPortStartScheduler+0x134>)
 800416e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004170:	78fb      	ldrb	r3, [r7, #3]
 8004172:	b2db      	uxtb	r3, r3
 8004174:	005b      	lsls	r3, r3, #1
 8004176:	b2db      	uxtb	r3, r3
 8004178:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800417a:	78fb      	ldrb	r3, [r7, #3]
 800417c:	b2db      	uxtb	r3, r3
 800417e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004182:	2b80      	cmp	r3, #128	; 0x80
 8004184:	d0ef      	beq.n	8004166 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004186:	4b27      	ldr	r3, [pc, #156]	; (8004224 <xPortStartScheduler+0x134>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f1c3 0307 	rsb	r3, r3, #7
 800418e:	2b04      	cmp	r3, #4
 8004190:	d00a      	beq.n	80041a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004196:	f383 8811 	msr	BASEPRI, r3
 800419a:	f3bf 8f6f 	isb	sy
 800419e:	f3bf 8f4f 	dsb	sy
 80041a2:	60bb      	str	r3, [r7, #8]
}
 80041a4:	bf00      	nop
 80041a6:	e7fe      	b.n	80041a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80041a8:	4b1e      	ldr	r3, [pc, #120]	; (8004224 <xPortStartScheduler+0x134>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	021b      	lsls	r3, r3, #8
 80041ae:	4a1d      	ldr	r2, [pc, #116]	; (8004224 <xPortStartScheduler+0x134>)
 80041b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80041b2:	4b1c      	ldr	r3, [pc, #112]	; (8004224 <xPortStartScheduler+0x134>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041ba:	4a1a      	ldr	r2, [pc, #104]	; (8004224 <xPortStartScheduler+0x134>)
 80041bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	b2da      	uxtb	r2, r3
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80041c6:	4b18      	ldr	r3, [pc, #96]	; (8004228 <xPortStartScheduler+0x138>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a17      	ldr	r2, [pc, #92]	; (8004228 <xPortStartScheduler+0x138>)
 80041cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80041d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80041d2:	4b15      	ldr	r3, [pc, #84]	; (8004228 <xPortStartScheduler+0x138>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a14      	ldr	r2, [pc, #80]	; (8004228 <xPortStartScheduler+0x138>)
 80041d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80041dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80041de:	f000 f8dd 	bl	800439c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80041e2:	4b12      	ldr	r3, [pc, #72]	; (800422c <xPortStartScheduler+0x13c>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80041e8:	f000 f8fc 	bl	80043e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80041ec:	4b10      	ldr	r3, [pc, #64]	; (8004230 <xPortStartScheduler+0x140>)
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a0f      	ldr	r2, [pc, #60]	; (8004230 <xPortStartScheduler+0x140>)
 80041f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80041f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80041f8:	f7ff ff66 	bl	80040c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80041fc:	f7ff fd58 	bl	8003cb0 <vTaskSwitchContext>
	prvTaskExitError();
 8004200:	f7ff ff20 	bl	8004044 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3718      	adds	r7, #24
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	e000ed00 	.word	0xe000ed00
 8004214:	410fc271 	.word	0x410fc271
 8004218:	410fc270 	.word	0x410fc270
 800421c:	e000e400 	.word	0xe000e400
 8004220:	20000334 	.word	0x20000334
 8004224:	20000338 	.word	0x20000338
 8004228:	e000ed20 	.word	0xe000ed20
 800422c:	2000000c 	.word	0x2000000c
 8004230:	e000ef34 	.word	0xe000ef34

08004234 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
	__asm volatile
 800423a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800423e:	f383 8811 	msr	BASEPRI, r3
 8004242:	f3bf 8f6f 	isb	sy
 8004246:	f3bf 8f4f 	dsb	sy
 800424a:	607b      	str	r3, [r7, #4]
}
 800424c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800424e:	4b0f      	ldr	r3, [pc, #60]	; (800428c <vPortEnterCritical+0x58>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	3301      	adds	r3, #1
 8004254:	4a0d      	ldr	r2, [pc, #52]	; (800428c <vPortEnterCritical+0x58>)
 8004256:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004258:	4b0c      	ldr	r3, [pc, #48]	; (800428c <vPortEnterCritical+0x58>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	2b01      	cmp	r3, #1
 800425e:	d10f      	bne.n	8004280 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004260:	4b0b      	ldr	r3, [pc, #44]	; (8004290 <vPortEnterCritical+0x5c>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	b2db      	uxtb	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00a      	beq.n	8004280 <vPortEnterCritical+0x4c>
	__asm volatile
 800426a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800426e:	f383 8811 	msr	BASEPRI, r3
 8004272:	f3bf 8f6f 	isb	sy
 8004276:	f3bf 8f4f 	dsb	sy
 800427a:	603b      	str	r3, [r7, #0]
}
 800427c:	bf00      	nop
 800427e:	e7fe      	b.n	800427e <vPortEnterCritical+0x4a>
	}
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr
 800428c:	2000000c 	.word	0x2000000c
 8004290:	e000ed04 	.word	0xe000ed04

08004294 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004294:	b480      	push	{r7}
 8004296:	b083      	sub	sp, #12
 8004298:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800429a:	4b12      	ldr	r3, [pc, #72]	; (80042e4 <vPortExitCritical+0x50>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d10a      	bne.n	80042b8 <vPortExitCritical+0x24>
	__asm volatile
 80042a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a6:	f383 8811 	msr	BASEPRI, r3
 80042aa:	f3bf 8f6f 	isb	sy
 80042ae:	f3bf 8f4f 	dsb	sy
 80042b2:	607b      	str	r3, [r7, #4]
}
 80042b4:	bf00      	nop
 80042b6:	e7fe      	b.n	80042b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80042b8:	4b0a      	ldr	r3, [pc, #40]	; (80042e4 <vPortExitCritical+0x50>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	3b01      	subs	r3, #1
 80042be:	4a09      	ldr	r2, [pc, #36]	; (80042e4 <vPortExitCritical+0x50>)
 80042c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80042c2:	4b08      	ldr	r3, [pc, #32]	; (80042e4 <vPortExitCritical+0x50>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d105      	bne.n	80042d6 <vPortExitCritical+0x42>
 80042ca:	2300      	movs	r3, #0
 80042cc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80042d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80042d6:	bf00      	nop
 80042d8:	370c      	adds	r7, #12
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	2000000c 	.word	0x2000000c
	...

080042f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80042f0:	f3ef 8009 	mrs	r0, PSP
 80042f4:	f3bf 8f6f 	isb	sy
 80042f8:	4b15      	ldr	r3, [pc, #84]	; (8004350 <pxCurrentTCBConst>)
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	f01e 0f10 	tst.w	lr, #16
 8004300:	bf08      	it	eq
 8004302:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004306:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800430a:	6010      	str	r0, [r2, #0]
 800430c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004310:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004314:	f380 8811 	msr	BASEPRI, r0
 8004318:	f3bf 8f4f 	dsb	sy
 800431c:	f3bf 8f6f 	isb	sy
 8004320:	f7ff fcc6 	bl	8003cb0 <vTaskSwitchContext>
 8004324:	f04f 0000 	mov.w	r0, #0
 8004328:	f380 8811 	msr	BASEPRI, r0
 800432c:	bc09      	pop	{r0, r3}
 800432e:	6819      	ldr	r1, [r3, #0]
 8004330:	6808      	ldr	r0, [r1, #0]
 8004332:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004336:	f01e 0f10 	tst.w	lr, #16
 800433a:	bf08      	it	eq
 800433c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004340:	f380 8809 	msr	PSP, r0
 8004344:	f3bf 8f6f 	isb	sy
 8004348:	4770      	bx	lr
 800434a:	bf00      	nop
 800434c:	f3af 8000 	nop.w

08004350 <pxCurrentTCBConst>:
 8004350:	20000208 	.word	0x20000208
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004354:	bf00      	nop
 8004356:	bf00      	nop

08004358 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
	__asm volatile
 800435e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004362:	f383 8811 	msr	BASEPRI, r3
 8004366:	f3bf 8f6f 	isb	sy
 800436a:	f3bf 8f4f 	dsb	sy
 800436e:	607b      	str	r3, [r7, #4]
}
 8004370:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004372:	f7ff fbe5 	bl	8003b40 <xTaskIncrementTick>
 8004376:	4603      	mov	r3, r0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d003      	beq.n	8004384 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800437c:	4b06      	ldr	r3, [pc, #24]	; (8004398 <xPortSysTickHandler+0x40>)
 800437e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004382:	601a      	str	r2, [r3, #0]
 8004384:	2300      	movs	r3, #0
 8004386:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	f383 8811 	msr	BASEPRI, r3
}
 800438e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004390:	bf00      	nop
 8004392:	3708      	adds	r7, #8
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	e000ed04 	.word	0xe000ed04

0800439c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800439c:	b480      	push	{r7}
 800439e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80043a0:	4b0b      	ldr	r3, [pc, #44]	; (80043d0 <vPortSetupTimerInterrupt+0x34>)
 80043a2:	2200      	movs	r2, #0
 80043a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80043a6:	4b0b      	ldr	r3, [pc, #44]	; (80043d4 <vPortSetupTimerInterrupt+0x38>)
 80043a8:	2200      	movs	r2, #0
 80043aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80043ac:	4b0a      	ldr	r3, [pc, #40]	; (80043d8 <vPortSetupTimerInterrupt+0x3c>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a0a      	ldr	r2, [pc, #40]	; (80043dc <vPortSetupTimerInterrupt+0x40>)
 80043b2:	fba2 2303 	umull	r2, r3, r2, r3
 80043b6:	099b      	lsrs	r3, r3, #6
 80043b8:	4a09      	ldr	r2, [pc, #36]	; (80043e0 <vPortSetupTimerInterrupt+0x44>)
 80043ba:	3b01      	subs	r3, #1
 80043bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80043be:	4b04      	ldr	r3, [pc, #16]	; (80043d0 <vPortSetupTimerInterrupt+0x34>)
 80043c0:	2207      	movs	r2, #7
 80043c2:	601a      	str	r2, [r3, #0]
}
 80043c4:	bf00      	nop
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	e000e010 	.word	0xe000e010
 80043d4:	e000e018 	.word	0xe000e018
 80043d8:	20000000 	.word	0x20000000
 80043dc:	10624dd3 	.word	0x10624dd3
 80043e0:	e000e014 	.word	0xe000e014

080043e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80043e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80043f4 <vPortEnableVFP+0x10>
 80043e8:	6801      	ldr	r1, [r0, #0]
 80043ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80043ee:	6001      	str	r1, [r0, #0]
 80043f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80043f2:	bf00      	nop
 80043f4:	e000ed88 	.word	0xe000ed88

080043f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b08a      	sub	sp, #40	; 0x28
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004400:	2300      	movs	r3, #0
 8004402:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004404:	f7ff faf2 	bl	80039ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004408:	4b5b      	ldr	r3, [pc, #364]	; (8004578 <pvPortMalloc+0x180>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d101      	bne.n	8004414 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004410:	f000 f920 	bl	8004654 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004414:	4b59      	ldr	r3, [pc, #356]	; (800457c <pvPortMalloc+0x184>)
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4013      	ands	r3, r2
 800441c:	2b00      	cmp	r3, #0
 800441e:	f040 8093 	bne.w	8004548 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d01d      	beq.n	8004464 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004428:	2208      	movs	r2, #8
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4413      	add	r3, r2
 800442e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	f003 0307 	and.w	r3, r3, #7
 8004436:	2b00      	cmp	r3, #0
 8004438:	d014      	beq.n	8004464 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f023 0307 	bic.w	r3, r3, #7
 8004440:	3308      	adds	r3, #8
 8004442:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f003 0307 	and.w	r3, r3, #7
 800444a:	2b00      	cmp	r3, #0
 800444c:	d00a      	beq.n	8004464 <pvPortMalloc+0x6c>
	__asm volatile
 800444e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004452:	f383 8811 	msr	BASEPRI, r3
 8004456:	f3bf 8f6f 	isb	sy
 800445a:	f3bf 8f4f 	dsb	sy
 800445e:	617b      	str	r3, [r7, #20]
}
 8004460:	bf00      	nop
 8004462:	e7fe      	b.n	8004462 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d06e      	beq.n	8004548 <pvPortMalloc+0x150>
 800446a:	4b45      	ldr	r3, [pc, #276]	; (8004580 <pvPortMalloc+0x188>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	429a      	cmp	r2, r3
 8004472:	d869      	bhi.n	8004548 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004474:	4b43      	ldr	r3, [pc, #268]	; (8004584 <pvPortMalloc+0x18c>)
 8004476:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004478:	4b42      	ldr	r3, [pc, #264]	; (8004584 <pvPortMalloc+0x18c>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800447e:	e004      	b.n	800448a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004482:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800448a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	429a      	cmp	r2, r3
 8004492:	d903      	bls.n	800449c <pvPortMalloc+0xa4>
 8004494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d1f1      	bne.n	8004480 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800449c:	4b36      	ldr	r3, [pc, #216]	; (8004578 <pvPortMalloc+0x180>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d050      	beq.n	8004548 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80044a6:	6a3b      	ldr	r3, [r7, #32]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	2208      	movs	r2, #8
 80044ac:	4413      	add	r3, r2
 80044ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80044b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	6a3b      	ldr	r3, [r7, #32]
 80044b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80044b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ba:	685a      	ldr	r2, [r3, #4]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	1ad2      	subs	r2, r2, r3
 80044c0:	2308      	movs	r3, #8
 80044c2:	005b      	lsls	r3, r3, #1
 80044c4:	429a      	cmp	r2, r3
 80044c6:	d91f      	bls.n	8004508 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80044c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4413      	add	r3, r2
 80044ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	f003 0307 	and.w	r3, r3, #7
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d00a      	beq.n	80044f0 <pvPortMalloc+0xf8>
	__asm volatile
 80044da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044de:	f383 8811 	msr	BASEPRI, r3
 80044e2:	f3bf 8f6f 	isb	sy
 80044e6:	f3bf 8f4f 	dsb	sy
 80044ea:	613b      	str	r3, [r7, #16]
}
 80044ec:	bf00      	nop
 80044ee:	e7fe      	b.n	80044ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80044f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f2:	685a      	ldr	r2, [r3, #4]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	1ad2      	subs	r2, r2, r3
 80044f8:	69bb      	ldr	r3, [r7, #24]
 80044fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80044fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004502:	69b8      	ldr	r0, [r7, #24]
 8004504:	f000 f908 	bl	8004718 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004508:	4b1d      	ldr	r3, [pc, #116]	; (8004580 <pvPortMalloc+0x188>)
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	4a1b      	ldr	r2, [pc, #108]	; (8004580 <pvPortMalloc+0x188>)
 8004514:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004516:	4b1a      	ldr	r3, [pc, #104]	; (8004580 <pvPortMalloc+0x188>)
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	4b1b      	ldr	r3, [pc, #108]	; (8004588 <pvPortMalloc+0x190>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	429a      	cmp	r2, r3
 8004520:	d203      	bcs.n	800452a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004522:	4b17      	ldr	r3, [pc, #92]	; (8004580 <pvPortMalloc+0x188>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	4a18      	ldr	r2, [pc, #96]	; (8004588 <pvPortMalloc+0x190>)
 8004528:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800452a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452c:	685a      	ldr	r2, [r3, #4]
 800452e:	4b13      	ldr	r3, [pc, #76]	; (800457c <pvPortMalloc+0x184>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	431a      	orrs	r2, r3
 8004534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004536:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453a:	2200      	movs	r2, #0
 800453c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800453e:	4b13      	ldr	r3, [pc, #76]	; (800458c <pvPortMalloc+0x194>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	3301      	adds	r3, #1
 8004544:	4a11      	ldr	r2, [pc, #68]	; (800458c <pvPortMalloc+0x194>)
 8004546:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004548:	f7ff fa5e 	bl	8003a08 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	f003 0307 	and.w	r3, r3, #7
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00a      	beq.n	800456c <pvPortMalloc+0x174>
	__asm volatile
 8004556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800455a:	f383 8811 	msr	BASEPRI, r3
 800455e:	f3bf 8f6f 	isb	sy
 8004562:	f3bf 8f4f 	dsb	sy
 8004566:	60fb      	str	r3, [r7, #12]
}
 8004568:	bf00      	nop
 800456a:	e7fe      	b.n	800456a <pvPortMalloc+0x172>
	return pvReturn;
 800456c:	69fb      	ldr	r3, [r7, #28]
}
 800456e:	4618      	mov	r0, r3
 8004570:	3728      	adds	r7, #40	; 0x28
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	20000f44 	.word	0x20000f44
 800457c:	20000f58 	.word	0x20000f58
 8004580:	20000f48 	.word	0x20000f48
 8004584:	20000f3c 	.word	0x20000f3c
 8004588:	20000f4c 	.word	0x20000f4c
 800458c:	20000f50 	.word	0x20000f50

08004590 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b086      	sub	sp, #24
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d04d      	beq.n	800463e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80045a2:	2308      	movs	r3, #8
 80045a4:	425b      	negs	r3, r3
 80045a6:	697a      	ldr	r2, [r7, #20]
 80045a8:	4413      	add	r3, r2
 80045aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	685a      	ldr	r2, [r3, #4]
 80045b4:	4b24      	ldr	r3, [pc, #144]	; (8004648 <vPortFree+0xb8>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4013      	ands	r3, r2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d10a      	bne.n	80045d4 <vPortFree+0x44>
	__asm volatile
 80045be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c2:	f383 8811 	msr	BASEPRI, r3
 80045c6:	f3bf 8f6f 	isb	sy
 80045ca:	f3bf 8f4f 	dsb	sy
 80045ce:	60fb      	str	r3, [r7, #12]
}
 80045d0:	bf00      	nop
 80045d2:	e7fe      	b.n	80045d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d00a      	beq.n	80045f2 <vPortFree+0x62>
	__asm volatile
 80045dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e0:	f383 8811 	msr	BASEPRI, r3
 80045e4:	f3bf 8f6f 	isb	sy
 80045e8:	f3bf 8f4f 	dsb	sy
 80045ec:	60bb      	str	r3, [r7, #8]
}
 80045ee:	bf00      	nop
 80045f0:	e7fe      	b.n	80045f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	685a      	ldr	r2, [r3, #4]
 80045f6:	4b14      	ldr	r3, [pc, #80]	; (8004648 <vPortFree+0xb8>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4013      	ands	r3, r2
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d01e      	beq.n	800463e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d11a      	bne.n	800463e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	685a      	ldr	r2, [r3, #4]
 800460c:	4b0e      	ldr	r3, [pc, #56]	; (8004648 <vPortFree+0xb8>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	43db      	mvns	r3, r3
 8004612:	401a      	ands	r2, r3
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004618:	f7ff f9e8 	bl	80039ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	685a      	ldr	r2, [r3, #4]
 8004620:	4b0a      	ldr	r3, [pc, #40]	; (800464c <vPortFree+0xbc>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4413      	add	r3, r2
 8004626:	4a09      	ldr	r2, [pc, #36]	; (800464c <vPortFree+0xbc>)
 8004628:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800462a:	6938      	ldr	r0, [r7, #16]
 800462c:	f000 f874 	bl	8004718 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004630:	4b07      	ldr	r3, [pc, #28]	; (8004650 <vPortFree+0xc0>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	3301      	adds	r3, #1
 8004636:	4a06      	ldr	r2, [pc, #24]	; (8004650 <vPortFree+0xc0>)
 8004638:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800463a:	f7ff f9e5 	bl	8003a08 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800463e:	bf00      	nop
 8004640:	3718      	adds	r7, #24
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	20000f58 	.word	0x20000f58
 800464c:	20000f48 	.word	0x20000f48
 8004650:	20000f54 	.word	0x20000f54

08004654 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800465a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800465e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004660:	4b27      	ldr	r3, [pc, #156]	; (8004700 <prvHeapInit+0xac>)
 8004662:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f003 0307 	and.w	r3, r3, #7
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00c      	beq.n	8004688 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	3307      	adds	r3, #7
 8004672:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f023 0307 	bic.w	r3, r3, #7
 800467a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800467c:	68ba      	ldr	r2, [r7, #8]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	4a1f      	ldr	r2, [pc, #124]	; (8004700 <prvHeapInit+0xac>)
 8004684:	4413      	add	r3, r2
 8004686:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800468c:	4a1d      	ldr	r2, [pc, #116]	; (8004704 <prvHeapInit+0xb0>)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004692:	4b1c      	ldr	r3, [pc, #112]	; (8004704 <prvHeapInit+0xb0>)
 8004694:	2200      	movs	r2, #0
 8004696:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	68ba      	ldr	r2, [r7, #8]
 800469c:	4413      	add	r3, r2
 800469e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80046a0:	2208      	movs	r2, #8
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	1a9b      	subs	r3, r3, r2
 80046a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f023 0307 	bic.w	r3, r3, #7
 80046ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	4a15      	ldr	r2, [pc, #84]	; (8004708 <prvHeapInit+0xb4>)
 80046b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80046b6:	4b14      	ldr	r3, [pc, #80]	; (8004708 <prvHeapInit+0xb4>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	2200      	movs	r2, #0
 80046bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80046be:	4b12      	ldr	r3, [pc, #72]	; (8004708 <prvHeapInit+0xb4>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	2200      	movs	r2, #0
 80046c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	1ad2      	subs	r2, r2, r3
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80046d4:	4b0c      	ldr	r3, [pc, #48]	; (8004708 <prvHeapInit+0xb4>)
 80046d6:	681a      	ldr	r2, [r3, #0]
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	4a0a      	ldr	r2, [pc, #40]	; (800470c <prvHeapInit+0xb8>)
 80046e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	4a09      	ldr	r2, [pc, #36]	; (8004710 <prvHeapInit+0xbc>)
 80046ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80046ec:	4b09      	ldr	r3, [pc, #36]	; (8004714 <prvHeapInit+0xc0>)
 80046ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80046f2:	601a      	str	r2, [r3, #0]
}
 80046f4:	bf00      	nop
 80046f6:	3714      	adds	r7, #20
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr
 8004700:	2000033c 	.word	0x2000033c
 8004704:	20000f3c 	.word	0x20000f3c
 8004708:	20000f44 	.word	0x20000f44
 800470c:	20000f4c 	.word	0x20000f4c
 8004710:	20000f48 	.word	0x20000f48
 8004714:	20000f58 	.word	0x20000f58

08004718 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004718:	b480      	push	{r7}
 800471a:	b085      	sub	sp, #20
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004720:	4b28      	ldr	r3, [pc, #160]	; (80047c4 <prvInsertBlockIntoFreeList+0xac>)
 8004722:	60fb      	str	r3, [r7, #12]
 8004724:	e002      	b.n	800472c <prvInsertBlockIntoFreeList+0x14>
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	60fb      	str	r3, [r7, #12]
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	429a      	cmp	r2, r3
 8004734:	d8f7      	bhi.n	8004726 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	68ba      	ldr	r2, [r7, #8]
 8004740:	4413      	add	r3, r2
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	429a      	cmp	r2, r3
 8004746:	d108      	bne.n	800475a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	685a      	ldr	r2, [r3, #4]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	441a      	add	r2, r3
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	68ba      	ldr	r2, [r7, #8]
 8004764:	441a      	add	r2, r3
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	429a      	cmp	r2, r3
 800476c:	d118      	bne.n	80047a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	4b15      	ldr	r3, [pc, #84]	; (80047c8 <prvInsertBlockIntoFreeList+0xb0>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	429a      	cmp	r2, r3
 8004778:	d00d      	beq.n	8004796 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685a      	ldr	r2, [r3, #4]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	441a      	add	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	601a      	str	r2, [r3, #0]
 8004794:	e008      	b.n	80047a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004796:	4b0c      	ldr	r3, [pc, #48]	; (80047c8 <prvInsertBlockIntoFreeList+0xb0>)
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	601a      	str	r2, [r3, #0]
 800479e:	e003      	b.n	80047a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681a      	ldr	r2, [r3, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80047a8:	68fa      	ldr	r2, [r7, #12]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d002      	beq.n	80047b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	687a      	ldr	r2, [r7, #4]
 80047b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047b6:	bf00      	nop
 80047b8:	3714      	adds	r7, #20
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	20000f3c 	.word	0x20000f3c
 80047c8:	20000f44 	.word	0x20000f44

080047cc <__errno>:
 80047cc:	4b01      	ldr	r3, [pc, #4]	; (80047d4 <__errno+0x8>)
 80047ce:	6818      	ldr	r0, [r3, #0]
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop
 80047d4:	20000010 	.word	0x20000010

080047d8 <__libc_init_array>:
 80047d8:	b570      	push	{r4, r5, r6, lr}
 80047da:	4d0d      	ldr	r5, [pc, #52]	; (8004810 <__libc_init_array+0x38>)
 80047dc:	4c0d      	ldr	r4, [pc, #52]	; (8004814 <__libc_init_array+0x3c>)
 80047de:	1b64      	subs	r4, r4, r5
 80047e0:	10a4      	asrs	r4, r4, #2
 80047e2:	2600      	movs	r6, #0
 80047e4:	42a6      	cmp	r6, r4
 80047e6:	d109      	bne.n	80047fc <__libc_init_array+0x24>
 80047e8:	4d0b      	ldr	r5, [pc, #44]	; (8004818 <__libc_init_array+0x40>)
 80047ea:	4c0c      	ldr	r4, [pc, #48]	; (800481c <__libc_init_array+0x44>)
 80047ec:	f001 f882 	bl	80058f4 <_init>
 80047f0:	1b64      	subs	r4, r4, r5
 80047f2:	10a4      	asrs	r4, r4, #2
 80047f4:	2600      	movs	r6, #0
 80047f6:	42a6      	cmp	r6, r4
 80047f8:	d105      	bne.n	8004806 <__libc_init_array+0x2e>
 80047fa:	bd70      	pop	{r4, r5, r6, pc}
 80047fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004800:	4798      	blx	r3
 8004802:	3601      	adds	r6, #1
 8004804:	e7ee      	b.n	80047e4 <__libc_init_array+0xc>
 8004806:	f855 3b04 	ldr.w	r3, [r5], #4
 800480a:	4798      	blx	r3
 800480c:	3601      	adds	r6, #1
 800480e:	e7f2      	b.n	80047f6 <__libc_init_array+0x1e>
 8004810:	08005a28 	.word	0x08005a28
 8004814:	08005a28 	.word	0x08005a28
 8004818:	08005a28 	.word	0x08005a28
 800481c:	08005a2c 	.word	0x08005a2c

08004820 <memset>:
 8004820:	4402      	add	r2, r0
 8004822:	4603      	mov	r3, r0
 8004824:	4293      	cmp	r3, r2
 8004826:	d100      	bne.n	800482a <memset+0xa>
 8004828:	4770      	bx	lr
 800482a:	f803 1b01 	strb.w	r1, [r3], #1
 800482e:	e7f9      	b.n	8004824 <memset+0x4>

08004830 <iprintf>:
 8004830:	b40f      	push	{r0, r1, r2, r3}
 8004832:	4b0a      	ldr	r3, [pc, #40]	; (800485c <iprintf+0x2c>)
 8004834:	b513      	push	{r0, r1, r4, lr}
 8004836:	681c      	ldr	r4, [r3, #0]
 8004838:	b124      	cbz	r4, 8004844 <iprintf+0x14>
 800483a:	69a3      	ldr	r3, [r4, #24]
 800483c:	b913      	cbnz	r3, 8004844 <iprintf+0x14>
 800483e:	4620      	mov	r0, r4
 8004840:	f000 fa74 	bl	8004d2c <__sinit>
 8004844:	ab05      	add	r3, sp, #20
 8004846:	9a04      	ldr	r2, [sp, #16]
 8004848:	68a1      	ldr	r1, [r4, #8]
 800484a:	9301      	str	r3, [sp, #4]
 800484c:	4620      	mov	r0, r4
 800484e:	f000 fc7d 	bl	800514c <_vfiprintf_r>
 8004852:	b002      	add	sp, #8
 8004854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004858:	b004      	add	sp, #16
 800485a:	4770      	bx	lr
 800485c:	20000010 	.word	0x20000010

08004860 <putchar>:
 8004860:	4b09      	ldr	r3, [pc, #36]	; (8004888 <putchar+0x28>)
 8004862:	b513      	push	{r0, r1, r4, lr}
 8004864:	681c      	ldr	r4, [r3, #0]
 8004866:	4601      	mov	r1, r0
 8004868:	b134      	cbz	r4, 8004878 <putchar+0x18>
 800486a:	69a3      	ldr	r3, [r4, #24]
 800486c:	b923      	cbnz	r3, 8004878 <putchar+0x18>
 800486e:	9001      	str	r0, [sp, #4]
 8004870:	4620      	mov	r0, r4
 8004872:	f000 fa5b 	bl	8004d2c <__sinit>
 8004876:	9901      	ldr	r1, [sp, #4]
 8004878:	68a2      	ldr	r2, [r4, #8]
 800487a:	4620      	mov	r0, r4
 800487c:	b002      	add	sp, #8
 800487e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004882:	f000 bf27 	b.w	80056d4 <_putc_r>
 8004886:	bf00      	nop
 8004888:	20000010 	.word	0x20000010

0800488c <_puts_r>:
 800488c:	b570      	push	{r4, r5, r6, lr}
 800488e:	460e      	mov	r6, r1
 8004890:	4605      	mov	r5, r0
 8004892:	b118      	cbz	r0, 800489c <_puts_r+0x10>
 8004894:	6983      	ldr	r3, [r0, #24]
 8004896:	b90b      	cbnz	r3, 800489c <_puts_r+0x10>
 8004898:	f000 fa48 	bl	8004d2c <__sinit>
 800489c:	69ab      	ldr	r3, [r5, #24]
 800489e:	68ac      	ldr	r4, [r5, #8]
 80048a0:	b913      	cbnz	r3, 80048a8 <_puts_r+0x1c>
 80048a2:	4628      	mov	r0, r5
 80048a4:	f000 fa42 	bl	8004d2c <__sinit>
 80048a8:	4b2c      	ldr	r3, [pc, #176]	; (800495c <_puts_r+0xd0>)
 80048aa:	429c      	cmp	r4, r3
 80048ac:	d120      	bne.n	80048f0 <_puts_r+0x64>
 80048ae:	686c      	ldr	r4, [r5, #4]
 80048b0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80048b2:	07db      	lsls	r3, r3, #31
 80048b4:	d405      	bmi.n	80048c2 <_puts_r+0x36>
 80048b6:	89a3      	ldrh	r3, [r4, #12]
 80048b8:	0598      	lsls	r0, r3, #22
 80048ba:	d402      	bmi.n	80048c2 <_puts_r+0x36>
 80048bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048be:	f000 fad3 	bl	8004e68 <__retarget_lock_acquire_recursive>
 80048c2:	89a3      	ldrh	r3, [r4, #12]
 80048c4:	0719      	lsls	r1, r3, #28
 80048c6:	d51d      	bpl.n	8004904 <_puts_r+0x78>
 80048c8:	6923      	ldr	r3, [r4, #16]
 80048ca:	b1db      	cbz	r3, 8004904 <_puts_r+0x78>
 80048cc:	3e01      	subs	r6, #1
 80048ce:	68a3      	ldr	r3, [r4, #8]
 80048d0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80048d4:	3b01      	subs	r3, #1
 80048d6:	60a3      	str	r3, [r4, #8]
 80048d8:	bb39      	cbnz	r1, 800492a <_puts_r+0x9e>
 80048da:	2b00      	cmp	r3, #0
 80048dc:	da38      	bge.n	8004950 <_puts_r+0xc4>
 80048de:	4622      	mov	r2, r4
 80048e0:	210a      	movs	r1, #10
 80048e2:	4628      	mov	r0, r5
 80048e4:	f000 f848 	bl	8004978 <__swbuf_r>
 80048e8:	3001      	adds	r0, #1
 80048ea:	d011      	beq.n	8004910 <_puts_r+0x84>
 80048ec:	250a      	movs	r5, #10
 80048ee:	e011      	b.n	8004914 <_puts_r+0x88>
 80048f0:	4b1b      	ldr	r3, [pc, #108]	; (8004960 <_puts_r+0xd4>)
 80048f2:	429c      	cmp	r4, r3
 80048f4:	d101      	bne.n	80048fa <_puts_r+0x6e>
 80048f6:	68ac      	ldr	r4, [r5, #8]
 80048f8:	e7da      	b.n	80048b0 <_puts_r+0x24>
 80048fa:	4b1a      	ldr	r3, [pc, #104]	; (8004964 <_puts_r+0xd8>)
 80048fc:	429c      	cmp	r4, r3
 80048fe:	bf08      	it	eq
 8004900:	68ec      	ldreq	r4, [r5, #12]
 8004902:	e7d5      	b.n	80048b0 <_puts_r+0x24>
 8004904:	4621      	mov	r1, r4
 8004906:	4628      	mov	r0, r5
 8004908:	f000 f888 	bl	8004a1c <__swsetup_r>
 800490c:	2800      	cmp	r0, #0
 800490e:	d0dd      	beq.n	80048cc <_puts_r+0x40>
 8004910:	f04f 35ff 	mov.w	r5, #4294967295
 8004914:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004916:	07da      	lsls	r2, r3, #31
 8004918:	d405      	bmi.n	8004926 <_puts_r+0x9a>
 800491a:	89a3      	ldrh	r3, [r4, #12]
 800491c:	059b      	lsls	r3, r3, #22
 800491e:	d402      	bmi.n	8004926 <_puts_r+0x9a>
 8004920:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004922:	f000 faa2 	bl	8004e6a <__retarget_lock_release_recursive>
 8004926:	4628      	mov	r0, r5
 8004928:	bd70      	pop	{r4, r5, r6, pc}
 800492a:	2b00      	cmp	r3, #0
 800492c:	da04      	bge.n	8004938 <_puts_r+0xac>
 800492e:	69a2      	ldr	r2, [r4, #24]
 8004930:	429a      	cmp	r2, r3
 8004932:	dc06      	bgt.n	8004942 <_puts_r+0xb6>
 8004934:	290a      	cmp	r1, #10
 8004936:	d004      	beq.n	8004942 <_puts_r+0xb6>
 8004938:	6823      	ldr	r3, [r4, #0]
 800493a:	1c5a      	adds	r2, r3, #1
 800493c:	6022      	str	r2, [r4, #0]
 800493e:	7019      	strb	r1, [r3, #0]
 8004940:	e7c5      	b.n	80048ce <_puts_r+0x42>
 8004942:	4622      	mov	r2, r4
 8004944:	4628      	mov	r0, r5
 8004946:	f000 f817 	bl	8004978 <__swbuf_r>
 800494a:	3001      	adds	r0, #1
 800494c:	d1bf      	bne.n	80048ce <_puts_r+0x42>
 800494e:	e7df      	b.n	8004910 <_puts_r+0x84>
 8004950:	6823      	ldr	r3, [r4, #0]
 8004952:	250a      	movs	r5, #10
 8004954:	1c5a      	adds	r2, r3, #1
 8004956:	6022      	str	r2, [r4, #0]
 8004958:	701d      	strb	r5, [r3, #0]
 800495a:	e7db      	b.n	8004914 <_puts_r+0x88>
 800495c:	080059ac 	.word	0x080059ac
 8004960:	080059cc 	.word	0x080059cc
 8004964:	0800598c 	.word	0x0800598c

08004968 <puts>:
 8004968:	4b02      	ldr	r3, [pc, #8]	; (8004974 <puts+0xc>)
 800496a:	4601      	mov	r1, r0
 800496c:	6818      	ldr	r0, [r3, #0]
 800496e:	f7ff bf8d 	b.w	800488c <_puts_r>
 8004972:	bf00      	nop
 8004974:	20000010 	.word	0x20000010

08004978 <__swbuf_r>:
 8004978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800497a:	460e      	mov	r6, r1
 800497c:	4614      	mov	r4, r2
 800497e:	4605      	mov	r5, r0
 8004980:	b118      	cbz	r0, 800498a <__swbuf_r+0x12>
 8004982:	6983      	ldr	r3, [r0, #24]
 8004984:	b90b      	cbnz	r3, 800498a <__swbuf_r+0x12>
 8004986:	f000 f9d1 	bl	8004d2c <__sinit>
 800498a:	4b21      	ldr	r3, [pc, #132]	; (8004a10 <__swbuf_r+0x98>)
 800498c:	429c      	cmp	r4, r3
 800498e:	d12b      	bne.n	80049e8 <__swbuf_r+0x70>
 8004990:	686c      	ldr	r4, [r5, #4]
 8004992:	69a3      	ldr	r3, [r4, #24]
 8004994:	60a3      	str	r3, [r4, #8]
 8004996:	89a3      	ldrh	r3, [r4, #12]
 8004998:	071a      	lsls	r2, r3, #28
 800499a:	d52f      	bpl.n	80049fc <__swbuf_r+0x84>
 800499c:	6923      	ldr	r3, [r4, #16]
 800499e:	b36b      	cbz	r3, 80049fc <__swbuf_r+0x84>
 80049a0:	6923      	ldr	r3, [r4, #16]
 80049a2:	6820      	ldr	r0, [r4, #0]
 80049a4:	1ac0      	subs	r0, r0, r3
 80049a6:	6963      	ldr	r3, [r4, #20]
 80049a8:	b2f6      	uxtb	r6, r6
 80049aa:	4283      	cmp	r3, r0
 80049ac:	4637      	mov	r7, r6
 80049ae:	dc04      	bgt.n	80049ba <__swbuf_r+0x42>
 80049b0:	4621      	mov	r1, r4
 80049b2:	4628      	mov	r0, r5
 80049b4:	f000 f926 	bl	8004c04 <_fflush_r>
 80049b8:	bb30      	cbnz	r0, 8004a08 <__swbuf_r+0x90>
 80049ba:	68a3      	ldr	r3, [r4, #8]
 80049bc:	3b01      	subs	r3, #1
 80049be:	60a3      	str	r3, [r4, #8]
 80049c0:	6823      	ldr	r3, [r4, #0]
 80049c2:	1c5a      	adds	r2, r3, #1
 80049c4:	6022      	str	r2, [r4, #0]
 80049c6:	701e      	strb	r6, [r3, #0]
 80049c8:	6963      	ldr	r3, [r4, #20]
 80049ca:	3001      	adds	r0, #1
 80049cc:	4283      	cmp	r3, r0
 80049ce:	d004      	beq.n	80049da <__swbuf_r+0x62>
 80049d0:	89a3      	ldrh	r3, [r4, #12]
 80049d2:	07db      	lsls	r3, r3, #31
 80049d4:	d506      	bpl.n	80049e4 <__swbuf_r+0x6c>
 80049d6:	2e0a      	cmp	r6, #10
 80049d8:	d104      	bne.n	80049e4 <__swbuf_r+0x6c>
 80049da:	4621      	mov	r1, r4
 80049dc:	4628      	mov	r0, r5
 80049de:	f000 f911 	bl	8004c04 <_fflush_r>
 80049e2:	b988      	cbnz	r0, 8004a08 <__swbuf_r+0x90>
 80049e4:	4638      	mov	r0, r7
 80049e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049e8:	4b0a      	ldr	r3, [pc, #40]	; (8004a14 <__swbuf_r+0x9c>)
 80049ea:	429c      	cmp	r4, r3
 80049ec:	d101      	bne.n	80049f2 <__swbuf_r+0x7a>
 80049ee:	68ac      	ldr	r4, [r5, #8]
 80049f0:	e7cf      	b.n	8004992 <__swbuf_r+0x1a>
 80049f2:	4b09      	ldr	r3, [pc, #36]	; (8004a18 <__swbuf_r+0xa0>)
 80049f4:	429c      	cmp	r4, r3
 80049f6:	bf08      	it	eq
 80049f8:	68ec      	ldreq	r4, [r5, #12]
 80049fa:	e7ca      	b.n	8004992 <__swbuf_r+0x1a>
 80049fc:	4621      	mov	r1, r4
 80049fe:	4628      	mov	r0, r5
 8004a00:	f000 f80c 	bl	8004a1c <__swsetup_r>
 8004a04:	2800      	cmp	r0, #0
 8004a06:	d0cb      	beq.n	80049a0 <__swbuf_r+0x28>
 8004a08:	f04f 37ff 	mov.w	r7, #4294967295
 8004a0c:	e7ea      	b.n	80049e4 <__swbuf_r+0x6c>
 8004a0e:	bf00      	nop
 8004a10:	080059ac 	.word	0x080059ac
 8004a14:	080059cc 	.word	0x080059cc
 8004a18:	0800598c 	.word	0x0800598c

08004a1c <__swsetup_r>:
 8004a1c:	4b32      	ldr	r3, [pc, #200]	; (8004ae8 <__swsetup_r+0xcc>)
 8004a1e:	b570      	push	{r4, r5, r6, lr}
 8004a20:	681d      	ldr	r5, [r3, #0]
 8004a22:	4606      	mov	r6, r0
 8004a24:	460c      	mov	r4, r1
 8004a26:	b125      	cbz	r5, 8004a32 <__swsetup_r+0x16>
 8004a28:	69ab      	ldr	r3, [r5, #24]
 8004a2a:	b913      	cbnz	r3, 8004a32 <__swsetup_r+0x16>
 8004a2c:	4628      	mov	r0, r5
 8004a2e:	f000 f97d 	bl	8004d2c <__sinit>
 8004a32:	4b2e      	ldr	r3, [pc, #184]	; (8004aec <__swsetup_r+0xd0>)
 8004a34:	429c      	cmp	r4, r3
 8004a36:	d10f      	bne.n	8004a58 <__swsetup_r+0x3c>
 8004a38:	686c      	ldr	r4, [r5, #4]
 8004a3a:	89a3      	ldrh	r3, [r4, #12]
 8004a3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004a40:	0719      	lsls	r1, r3, #28
 8004a42:	d42c      	bmi.n	8004a9e <__swsetup_r+0x82>
 8004a44:	06dd      	lsls	r5, r3, #27
 8004a46:	d411      	bmi.n	8004a6c <__swsetup_r+0x50>
 8004a48:	2309      	movs	r3, #9
 8004a4a:	6033      	str	r3, [r6, #0]
 8004a4c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004a50:	81a3      	strh	r3, [r4, #12]
 8004a52:	f04f 30ff 	mov.w	r0, #4294967295
 8004a56:	e03e      	b.n	8004ad6 <__swsetup_r+0xba>
 8004a58:	4b25      	ldr	r3, [pc, #148]	; (8004af0 <__swsetup_r+0xd4>)
 8004a5a:	429c      	cmp	r4, r3
 8004a5c:	d101      	bne.n	8004a62 <__swsetup_r+0x46>
 8004a5e:	68ac      	ldr	r4, [r5, #8]
 8004a60:	e7eb      	b.n	8004a3a <__swsetup_r+0x1e>
 8004a62:	4b24      	ldr	r3, [pc, #144]	; (8004af4 <__swsetup_r+0xd8>)
 8004a64:	429c      	cmp	r4, r3
 8004a66:	bf08      	it	eq
 8004a68:	68ec      	ldreq	r4, [r5, #12]
 8004a6a:	e7e6      	b.n	8004a3a <__swsetup_r+0x1e>
 8004a6c:	0758      	lsls	r0, r3, #29
 8004a6e:	d512      	bpl.n	8004a96 <__swsetup_r+0x7a>
 8004a70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a72:	b141      	cbz	r1, 8004a86 <__swsetup_r+0x6a>
 8004a74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a78:	4299      	cmp	r1, r3
 8004a7a:	d002      	beq.n	8004a82 <__swsetup_r+0x66>
 8004a7c:	4630      	mov	r0, r6
 8004a7e:	f000 fa5b 	bl	8004f38 <_free_r>
 8004a82:	2300      	movs	r3, #0
 8004a84:	6363      	str	r3, [r4, #52]	; 0x34
 8004a86:	89a3      	ldrh	r3, [r4, #12]
 8004a88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004a8c:	81a3      	strh	r3, [r4, #12]
 8004a8e:	2300      	movs	r3, #0
 8004a90:	6063      	str	r3, [r4, #4]
 8004a92:	6923      	ldr	r3, [r4, #16]
 8004a94:	6023      	str	r3, [r4, #0]
 8004a96:	89a3      	ldrh	r3, [r4, #12]
 8004a98:	f043 0308 	orr.w	r3, r3, #8
 8004a9c:	81a3      	strh	r3, [r4, #12]
 8004a9e:	6923      	ldr	r3, [r4, #16]
 8004aa0:	b94b      	cbnz	r3, 8004ab6 <__swsetup_r+0x9a>
 8004aa2:	89a3      	ldrh	r3, [r4, #12]
 8004aa4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004aa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004aac:	d003      	beq.n	8004ab6 <__swsetup_r+0x9a>
 8004aae:	4621      	mov	r1, r4
 8004ab0:	4630      	mov	r0, r6
 8004ab2:	f000 fa01 	bl	8004eb8 <__smakebuf_r>
 8004ab6:	89a0      	ldrh	r0, [r4, #12]
 8004ab8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004abc:	f010 0301 	ands.w	r3, r0, #1
 8004ac0:	d00a      	beq.n	8004ad8 <__swsetup_r+0xbc>
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	60a3      	str	r3, [r4, #8]
 8004ac6:	6963      	ldr	r3, [r4, #20]
 8004ac8:	425b      	negs	r3, r3
 8004aca:	61a3      	str	r3, [r4, #24]
 8004acc:	6923      	ldr	r3, [r4, #16]
 8004ace:	b943      	cbnz	r3, 8004ae2 <__swsetup_r+0xc6>
 8004ad0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004ad4:	d1ba      	bne.n	8004a4c <__swsetup_r+0x30>
 8004ad6:	bd70      	pop	{r4, r5, r6, pc}
 8004ad8:	0781      	lsls	r1, r0, #30
 8004ada:	bf58      	it	pl
 8004adc:	6963      	ldrpl	r3, [r4, #20]
 8004ade:	60a3      	str	r3, [r4, #8]
 8004ae0:	e7f4      	b.n	8004acc <__swsetup_r+0xb0>
 8004ae2:	2000      	movs	r0, #0
 8004ae4:	e7f7      	b.n	8004ad6 <__swsetup_r+0xba>
 8004ae6:	bf00      	nop
 8004ae8:	20000010 	.word	0x20000010
 8004aec:	080059ac 	.word	0x080059ac
 8004af0:	080059cc 	.word	0x080059cc
 8004af4:	0800598c 	.word	0x0800598c

08004af8 <__sflush_r>:
 8004af8:	898a      	ldrh	r2, [r1, #12]
 8004afa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004afe:	4605      	mov	r5, r0
 8004b00:	0710      	lsls	r0, r2, #28
 8004b02:	460c      	mov	r4, r1
 8004b04:	d458      	bmi.n	8004bb8 <__sflush_r+0xc0>
 8004b06:	684b      	ldr	r3, [r1, #4]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	dc05      	bgt.n	8004b18 <__sflush_r+0x20>
 8004b0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	dc02      	bgt.n	8004b18 <__sflush_r+0x20>
 8004b12:	2000      	movs	r0, #0
 8004b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b1a:	2e00      	cmp	r6, #0
 8004b1c:	d0f9      	beq.n	8004b12 <__sflush_r+0x1a>
 8004b1e:	2300      	movs	r3, #0
 8004b20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004b24:	682f      	ldr	r7, [r5, #0]
 8004b26:	602b      	str	r3, [r5, #0]
 8004b28:	d032      	beq.n	8004b90 <__sflush_r+0x98>
 8004b2a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004b2c:	89a3      	ldrh	r3, [r4, #12]
 8004b2e:	075a      	lsls	r2, r3, #29
 8004b30:	d505      	bpl.n	8004b3e <__sflush_r+0x46>
 8004b32:	6863      	ldr	r3, [r4, #4]
 8004b34:	1ac0      	subs	r0, r0, r3
 8004b36:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004b38:	b10b      	cbz	r3, 8004b3e <__sflush_r+0x46>
 8004b3a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b3c:	1ac0      	subs	r0, r0, r3
 8004b3e:	2300      	movs	r3, #0
 8004b40:	4602      	mov	r2, r0
 8004b42:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b44:	6a21      	ldr	r1, [r4, #32]
 8004b46:	4628      	mov	r0, r5
 8004b48:	47b0      	blx	r6
 8004b4a:	1c43      	adds	r3, r0, #1
 8004b4c:	89a3      	ldrh	r3, [r4, #12]
 8004b4e:	d106      	bne.n	8004b5e <__sflush_r+0x66>
 8004b50:	6829      	ldr	r1, [r5, #0]
 8004b52:	291d      	cmp	r1, #29
 8004b54:	d82c      	bhi.n	8004bb0 <__sflush_r+0xb8>
 8004b56:	4a2a      	ldr	r2, [pc, #168]	; (8004c00 <__sflush_r+0x108>)
 8004b58:	40ca      	lsrs	r2, r1
 8004b5a:	07d6      	lsls	r6, r2, #31
 8004b5c:	d528      	bpl.n	8004bb0 <__sflush_r+0xb8>
 8004b5e:	2200      	movs	r2, #0
 8004b60:	6062      	str	r2, [r4, #4]
 8004b62:	04d9      	lsls	r1, r3, #19
 8004b64:	6922      	ldr	r2, [r4, #16]
 8004b66:	6022      	str	r2, [r4, #0]
 8004b68:	d504      	bpl.n	8004b74 <__sflush_r+0x7c>
 8004b6a:	1c42      	adds	r2, r0, #1
 8004b6c:	d101      	bne.n	8004b72 <__sflush_r+0x7a>
 8004b6e:	682b      	ldr	r3, [r5, #0]
 8004b70:	b903      	cbnz	r3, 8004b74 <__sflush_r+0x7c>
 8004b72:	6560      	str	r0, [r4, #84]	; 0x54
 8004b74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b76:	602f      	str	r7, [r5, #0]
 8004b78:	2900      	cmp	r1, #0
 8004b7a:	d0ca      	beq.n	8004b12 <__sflush_r+0x1a>
 8004b7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004b80:	4299      	cmp	r1, r3
 8004b82:	d002      	beq.n	8004b8a <__sflush_r+0x92>
 8004b84:	4628      	mov	r0, r5
 8004b86:	f000 f9d7 	bl	8004f38 <_free_r>
 8004b8a:	2000      	movs	r0, #0
 8004b8c:	6360      	str	r0, [r4, #52]	; 0x34
 8004b8e:	e7c1      	b.n	8004b14 <__sflush_r+0x1c>
 8004b90:	6a21      	ldr	r1, [r4, #32]
 8004b92:	2301      	movs	r3, #1
 8004b94:	4628      	mov	r0, r5
 8004b96:	47b0      	blx	r6
 8004b98:	1c41      	adds	r1, r0, #1
 8004b9a:	d1c7      	bne.n	8004b2c <__sflush_r+0x34>
 8004b9c:	682b      	ldr	r3, [r5, #0]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d0c4      	beq.n	8004b2c <__sflush_r+0x34>
 8004ba2:	2b1d      	cmp	r3, #29
 8004ba4:	d001      	beq.n	8004baa <__sflush_r+0xb2>
 8004ba6:	2b16      	cmp	r3, #22
 8004ba8:	d101      	bne.n	8004bae <__sflush_r+0xb6>
 8004baa:	602f      	str	r7, [r5, #0]
 8004bac:	e7b1      	b.n	8004b12 <__sflush_r+0x1a>
 8004bae:	89a3      	ldrh	r3, [r4, #12]
 8004bb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bb4:	81a3      	strh	r3, [r4, #12]
 8004bb6:	e7ad      	b.n	8004b14 <__sflush_r+0x1c>
 8004bb8:	690f      	ldr	r7, [r1, #16]
 8004bba:	2f00      	cmp	r7, #0
 8004bbc:	d0a9      	beq.n	8004b12 <__sflush_r+0x1a>
 8004bbe:	0793      	lsls	r3, r2, #30
 8004bc0:	680e      	ldr	r6, [r1, #0]
 8004bc2:	bf08      	it	eq
 8004bc4:	694b      	ldreq	r3, [r1, #20]
 8004bc6:	600f      	str	r7, [r1, #0]
 8004bc8:	bf18      	it	ne
 8004bca:	2300      	movne	r3, #0
 8004bcc:	eba6 0807 	sub.w	r8, r6, r7
 8004bd0:	608b      	str	r3, [r1, #8]
 8004bd2:	f1b8 0f00 	cmp.w	r8, #0
 8004bd6:	dd9c      	ble.n	8004b12 <__sflush_r+0x1a>
 8004bd8:	6a21      	ldr	r1, [r4, #32]
 8004bda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004bdc:	4643      	mov	r3, r8
 8004bde:	463a      	mov	r2, r7
 8004be0:	4628      	mov	r0, r5
 8004be2:	47b0      	blx	r6
 8004be4:	2800      	cmp	r0, #0
 8004be6:	dc06      	bgt.n	8004bf6 <__sflush_r+0xfe>
 8004be8:	89a3      	ldrh	r3, [r4, #12]
 8004bea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bee:	81a3      	strh	r3, [r4, #12]
 8004bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8004bf4:	e78e      	b.n	8004b14 <__sflush_r+0x1c>
 8004bf6:	4407      	add	r7, r0
 8004bf8:	eba8 0800 	sub.w	r8, r8, r0
 8004bfc:	e7e9      	b.n	8004bd2 <__sflush_r+0xda>
 8004bfe:	bf00      	nop
 8004c00:	20400001 	.word	0x20400001

08004c04 <_fflush_r>:
 8004c04:	b538      	push	{r3, r4, r5, lr}
 8004c06:	690b      	ldr	r3, [r1, #16]
 8004c08:	4605      	mov	r5, r0
 8004c0a:	460c      	mov	r4, r1
 8004c0c:	b913      	cbnz	r3, 8004c14 <_fflush_r+0x10>
 8004c0e:	2500      	movs	r5, #0
 8004c10:	4628      	mov	r0, r5
 8004c12:	bd38      	pop	{r3, r4, r5, pc}
 8004c14:	b118      	cbz	r0, 8004c1e <_fflush_r+0x1a>
 8004c16:	6983      	ldr	r3, [r0, #24]
 8004c18:	b90b      	cbnz	r3, 8004c1e <_fflush_r+0x1a>
 8004c1a:	f000 f887 	bl	8004d2c <__sinit>
 8004c1e:	4b14      	ldr	r3, [pc, #80]	; (8004c70 <_fflush_r+0x6c>)
 8004c20:	429c      	cmp	r4, r3
 8004c22:	d11b      	bne.n	8004c5c <_fflush_r+0x58>
 8004c24:	686c      	ldr	r4, [r5, #4]
 8004c26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d0ef      	beq.n	8004c0e <_fflush_r+0xa>
 8004c2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004c30:	07d0      	lsls	r0, r2, #31
 8004c32:	d404      	bmi.n	8004c3e <_fflush_r+0x3a>
 8004c34:	0599      	lsls	r1, r3, #22
 8004c36:	d402      	bmi.n	8004c3e <_fflush_r+0x3a>
 8004c38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c3a:	f000 f915 	bl	8004e68 <__retarget_lock_acquire_recursive>
 8004c3e:	4628      	mov	r0, r5
 8004c40:	4621      	mov	r1, r4
 8004c42:	f7ff ff59 	bl	8004af8 <__sflush_r>
 8004c46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c48:	07da      	lsls	r2, r3, #31
 8004c4a:	4605      	mov	r5, r0
 8004c4c:	d4e0      	bmi.n	8004c10 <_fflush_r+0xc>
 8004c4e:	89a3      	ldrh	r3, [r4, #12]
 8004c50:	059b      	lsls	r3, r3, #22
 8004c52:	d4dd      	bmi.n	8004c10 <_fflush_r+0xc>
 8004c54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c56:	f000 f908 	bl	8004e6a <__retarget_lock_release_recursive>
 8004c5a:	e7d9      	b.n	8004c10 <_fflush_r+0xc>
 8004c5c:	4b05      	ldr	r3, [pc, #20]	; (8004c74 <_fflush_r+0x70>)
 8004c5e:	429c      	cmp	r4, r3
 8004c60:	d101      	bne.n	8004c66 <_fflush_r+0x62>
 8004c62:	68ac      	ldr	r4, [r5, #8]
 8004c64:	e7df      	b.n	8004c26 <_fflush_r+0x22>
 8004c66:	4b04      	ldr	r3, [pc, #16]	; (8004c78 <_fflush_r+0x74>)
 8004c68:	429c      	cmp	r4, r3
 8004c6a:	bf08      	it	eq
 8004c6c:	68ec      	ldreq	r4, [r5, #12]
 8004c6e:	e7da      	b.n	8004c26 <_fflush_r+0x22>
 8004c70:	080059ac 	.word	0x080059ac
 8004c74:	080059cc 	.word	0x080059cc
 8004c78:	0800598c 	.word	0x0800598c

08004c7c <std>:
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	b510      	push	{r4, lr}
 8004c80:	4604      	mov	r4, r0
 8004c82:	e9c0 3300 	strd	r3, r3, [r0]
 8004c86:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004c8a:	6083      	str	r3, [r0, #8]
 8004c8c:	8181      	strh	r1, [r0, #12]
 8004c8e:	6643      	str	r3, [r0, #100]	; 0x64
 8004c90:	81c2      	strh	r2, [r0, #14]
 8004c92:	6183      	str	r3, [r0, #24]
 8004c94:	4619      	mov	r1, r3
 8004c96:	2208      	movs	r2, #8
 8004c98:	305c      	adds	r0, #92	; 0x5c
 8004c9a:	f7ff fdc1 	bl	8004820 <memset>
 8004c9e:	4b05      	ldr	r3, [pc, #20]	; (8004cb4 <std+0x38>)
 8004ca0:	6263      	str	r3, [r4, #36]	; 0x24
 8004ca2:	4b05      	ldr	r3, [pc, #20]	; (8004cb8 <std+0x3c>)
 8004ca4:	62a3      	str	r3, [r4, #40]	; 0x28
 8004ca6:	4b05      	ldr	r3, [pc, #20]	; (8004cbc <std+0x40>)
 8004ca8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004caa:	4b05      	ldr	r3, [pc, #20]	; (8004cc0 <std+0x44>)
 8004cac:	6224      	str	r4, [r4, #32]
 8004cae:	6323      	str	r3, [r4, #48]	; 0x30
 8004cb0:	bd10      	pop	{r4, pc}
 8004cb2:	bf00      	nop
 8004cb4:	08005785 	.word	0x08005785
 8004cb8:	080057a7 	.word	0x080057a7
 8004cbc:	080057df 	.word	0x080057df
 8004cc0:	08005803 	.word	0x08005803

08004cc4 <_cleanup_r>:
 8004cc4:	4901      	ldr	r1, [pc, #4]	; (8004ccc <_cleanup_r+0x8>)
 8004cc6:	f000 b8af 	b.w	8004e28 <_fwalk_reent>
 8004cca:	bf00      	nop
 8004ccc:	08004c05 	.word	0x08004c05

08004cd0 <__sfmoreglue>:
 8004cd0:	b570      	push	{r4, r5, r6, lr}
 8004cd2:	2268      	movs	r2, #104	; 0x68
 8004cd4:	1e4d      	subs	r5, r1, #1
 8004cd6:	4355      	muls	r5, r2
 8004cd8:	460e      	mov	r6, r1
 8004cda:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004cde:	f000 f997 	bl	8005010 <_malloc_r>
 8004ce2:	4604      	mov	r4, r0
 8004ce4:	b140      	cbz	r0, 8004cf8 <__sfmoreglue+0x28>
 8004ce6:	2100      	movs	r1, #0
 8004ce8:	e9c0 1600 	strd	r1, r6, [r0]
 8004cec:	300c      	adds	r0, #12
 8004cee:	60a0      	str	r0, [r4, #8]
 8004cf0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004cf4:	f7ff fd94 	bl	8004820 <memset>
 8004cf8:	4620      	mov	r0, r4
 8004cfa:	bd70      	pop	{r4, r5, r6, pc}

08004cfc <__sfp_lock_acquire>:
 8004cfc:	4801      	ldr	r0, [pc, #4]	; (8004d04 <__sfp_lock_acquire+0x8>)
 8004cfe:	f000 b8b3 	b.w	8004e68 <__retarget_lock_acquire_recursive>
 8004d02:	bf00      	nop
 8004d04:	20000f5d 	.word	0x20000f5d

08004d08 <__sfp_lock_release>:
 8004d08:	4801      	ldr	r0, [pc, #4]	; (8004d10 <__sfp_lock_release+0x8>)
 8004d0a:	f000 b8ae 	b.w	8004e6a <__retarget_lock_release_recursive>
 8004d0e:	bf00      	nop
 8004d10:	20000f5d 	.word	0x20000f5d

08004d14 <__sinit_lock_acquire>:
 8004d14:	4801      	ldr	r0, [pc, #4]	; (8004d1c <__sinit_lock_acquire+0x8>)
 8004d16:	f000 b8a7 	b.w	8004e68 <__retarget_lock_acquire_recursive>
 8004d1a:	bf00      	nop
 8004d1c:	20000f5e 	.word	0x20000f5e

08004d20 <__sinit_lock_release>:
 8004d20:	4801      	ldr	r0, [pc, #4]	; (8004d28 <__sinit_lock_release+0x8>)
 8004d22:	f000 b8a2 	b.w	8004e6a <__retarget_lock_release_recursive>
 8004d26:	bf00      	nop
 8004d28:	20000f5e 	.word	0x20000f5e

08004d2c <__sinit>:
 8004d2c:	b510      	push	{r4, lr}
 8004d2e:	4604      	mov	r4, r0
 8004d30:	f7ff fff0 	bl	8004d14 <__sinit_lock_acquire>
 8004d34:	69a3      	ldr	r3, [r4, #24]
 8004d36:	b11b      	cbz	r3, 8004d40 <__sinit+0x14>
 8004d38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d3c:	f7ff bff0 	b.w	8004d20 <__sinit_lock_release>
 8004d40:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004d44:	6523      	str	r3, [r4, #80]	; 0x50
 8004d46:	4b13      	ldr	r3, [pc, #76]	; (8004d94 <__sinit+0x68>)
 8004d48:	4a13      	ldr	r2, [pc, #76]	; (8004d98 <__sinit+0x6c>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	62a2      	str	r2, [r4, #40]	; 0x28
 8004d4e:	42a3      	cmp	r3, r4
 8004d50:	bf04      	itt	eq
 8004d52:	2301      	moveq	r3, #1
 8004d54:	61a3      	streq	r3, [r4, #24]
 8004d56:	4620      	mov	r0, r4
 8004d58:	f000 f820 	bl	8004d9c <__sfp>
 8004d5c:	6060      	str	r0, [r4, #4]
 8004d5e:	4620      	mov	r0, r4
 8004d60:	f000 f81c 	bl	8004d9c <__sfp>
 8004d64:	60a0      	str	r0, [r4, #8]
 8004d66:	4620      	mov	r0, r4
 8004d68:	f000 f818 	bl	8004d9c <__sfp>
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	60e0      	str	r0, [r4, #12]
 8004d70:	2104      	movs	r1, #4
 8004d72:	6860      	ldr	r0, [r4, #4]
 8004d74:	f7ff ff82 	bl	8004c7c <std>
 8004d78:	68a0      	ldr	r0, [r4, #8]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	2109      	movs	r1, #9
 8004d7e:	f7ff ff7d 	bl	8004c7c <std>
 8004d82:	68e0      	ldr	r0, [r4, #12]
 8004d84:	2202      	movs	r2, #2
 8004d86:	2112      	movs	r1, #18
 8004d88:	f7ff ff78 	bl	8004c7c <std>
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	61a3      	str	r3, [r4, #24]
 8004d90:	e7d2      	b.n	8004d38 <__sinit+0xc>
 8004d92:	bf00      	nop
 8004d94:	08005988 	.word	0x08005988
 8004d98:	08004cc5 	.word	0x08004cc5

08004d9c <__sfp>:
 8004d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d9e:	4607      	mov	r7, r0
 8004da0:	f7ff ffac 	bl	8004cfc <__sfp_lock_acquire>
 8004da4:	4b1e      	ldr	r3, [pc, #120]	; (8004e20 <__sfp+0x84>)
 8004da6:	681e      	ldr	r6, [r3, #0]
 8004da8:	69b3      	ldr	r3, [r6, #24]
 8004daa:	b913      	cbnz	r3, 8004db2 <__sfp+0x16>
 8004dac:	4630      	mov	r0, r6
 8004dae:	f7ff ffbd 	bl	8004d2c <__sinit>
 8004db2:	3648      	adds	r6, #72	; 0x48
 8004db4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004db8:	3b01      	subs	r3, #1
 8004dba:	d503      	bpl.n	8004dc4 <__sfp+0x28>
 8004dbc:	6833      	ldr	r3, [r6, #0]
 8004dbe:	b30b      	cbz	r3, 8004e04 <__sfp+0x68>
 8004dc0:	6836      	ldr	r6, [r6, #0]
 8004dc2:	e7f7      	b.n	8004db4 <__sfp+0x18>
 8004dc4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004dc8:	b9d5      	cbnz	r5, 8004e00 <__sfp+0x64>
 8004dca:	4b16      	ldr	r3, [pc, #88]	; (8004e24 <__sfp+0x88>)
 8004dcc:	60e3      	str	r3, [r4, #12]
 8004dce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004dd2:	6665      	str	r5, [r4, #100]	; 0x64
 8004dd4:	f000 f847 	bl	8004e66 <__retarget_lock_init_recursive>
 8004dd8:	f7ff ff96 	bl	8004d08 <__sfp_lock_release>
 8004ddc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004de0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004de4:	6025      	str	r5, [r4, #0]
 8004de6:	61a5      	str	r5, [r4, #24]
 8004de8:	2208      	movs	r2, #8
 8004dea:	4629      	mov	r1, r5
 8004dec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004df0:	f7ff fd16 	bl	8004820 <memset>
 8004df4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004df8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004dfc:	4620      	mov	r0, r4
 8004dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e00:	3468      	adds	r4, #104	; 0x68
 8004e02:	e7d9      	b.n	8004db8 <__sfp+0x1c>
 8004e04:	2104      	movs	r1, #4
 8004e06:	4638      	mov	r0, r7
 8004e08:	f7ff ff62 	bl	8004cd0 <__sfmoreglue>
 8004e0c:	4604      	mov	r4, r0
 8004e0e:	6030      	str	r0, [r6, #0]
 8004e10:	2800      	cmp	r0, #0
 8004e12:	d1d5      	bne.n	8004dc0 <__sfp+0x24>
 8004e14:	f7ff ff78 	bl	8004d08 <__sfp_lock_release>
 8004e18:	230c      	movs	r3, #12
 8004e1a:	603b      	str	r3, [r7, #0]
 8004e1c:	e7ee      	b.n	8004dfc <__sfp+0x60>
 8004e1e:	bf00      	nop
 8004e20:	08005988 	.word	0x08005988
 8004e24:	ffff0001 	.word	0xffff0001

08004e28 <_fwalk_reent>:
 8004e28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e2c:	4606      	mov	r6, r0
 8004e2e:	4688      	mov	r8, r1
 8004e30:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004e34:	2700      	movs	r7, #0
 8004e36:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004e3a:	f1b9 0901 	subs.w	r9, r9, #1
 8004e3e:	d505      	bpl.n	8004e4c <_fwalk_reent+0x24>
 8004e40:	6824      	ldr	r4, [r4, #0]
 8004e42:	2c00      	cmp	r4, #0
 8004e44:	d1f7      	bne.n	8004e36 <_fwalk_reent+0xe>
 8004e46:	4638      	mov	r0, r7
 8004e48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e4c:	89ab      	ldrh	r3, [r5, #12]
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d907      	bls.n	8004e62 <_fwalk_reent+0x3a>
 8004e52:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004e56:	3301      	adds	r3, #1
 8004e58:	d003      	beq.n	8004e62 <_fwalk_reent+0x3a>
 8004e5a:	4629      	mov	r1, r5
 8004e5c:	4630      	mov	r0, r6
 8004e5e:	47c0      	blx	r8
 8004e60:	4307      	orrs	r7, r0
 8004e62:	3568      	adds	r5, #104	; 0x68
 8004e64:	e7e9      	b.n	8004e3a <_fwalk_reent+0x12>

08004e66 <__retarget_lock_init_recursive>:
 8004e66:	4770      	bx	lr

08004e68 <__retarget_lock_acquire_recursive>:
 8004e68:	4770      	bx	lr

08004e6a <__retarget_lock_release_recursive>:
 8004e6a:	4770      	bx	lr

08004e6c <__swhatbuf_r>:
 8004e6c:	b570      	push	{r4, r5, r6, lr}
 8004e6e:	460e      	mov	r6, r1
 8004e70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e74:	2900      	cmp	r1, #0
 8004e76:	b096      	sub	sp, #88	; 0x58
 8004e78:	4614      	mov	r4, r2
 8004e7a:	461d      	mov	r5, r3
 8004e7c:	da08      	bge.n	8004e90 <__swhatbuf_r+0x24>
 8004e7e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004e82:	2200      	movs	r2, #0
 8004e84:	602a      	str	r2, [r5, #0]
 8004e86:	061a      	lsls	r2, r3, #24
 8004e88:	d410      	bmi.n	8004eac <__swhatbuf_r+0x40>
 8004e8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004e8e:	e00e      	b.n	8004eae <__swhatbuf_r+0x42>
 8004e90:	466a      	mov	r2, sp
 8004e92:	f000 fcdd 	bl	8005850 <_fstat_r>
 8004e96:	2800      	cmp	r0, #0
 8004e98:	dbf1      	blt.n	8004e7e <__swhatbuf_r+0x12>
 8004e9a:	9a01      	ldr	r2, [sp, #4]
 8004e9c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004ea0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004ea4:	425a      	negs	r2, r3
 8004ea6:	415a      	adcs	r2, r3
 8004ea8:	602a      	str	r2, [r5, #0]
 8004eaa:	e7ee      	b.n	8004e8a <__swhatbuf_r+0x1e>
 8004eac:	2340      	movs	r3, #64	; 0x40
 8004eae:	2000      	movs	r0, #0
 8004eb0:	6023      	str	r3, [r4, #0]
 8004eb2:	b016      	add	sp, #88	; 0x58
 8004eb4:	bd70      	pop	{r4, r5, r6, pc}
	...

08004eb8 <__smakebuf_r>:
 8004eb8:	898b      	ldrh	r3, [r1, #12]
 8004eba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004ebc:	079d      	lsls	r5, r3, #30
 8004ebe:	4606      	mov	r6, r0
 8004ec0:	460c      	mov	r4, r1
 8004ec2:	d507      	bpl.n	8004ed4 <__smakebuf_r+0x1c>
 8004ec4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004ec8:	6023      	str	r3, [r4, #0]
 8004eca:	6123      	str	r3, [r4, #16]
 8004ecc:	2301      	movs	r3, #1
 8004ece:	6163      	str	r3, [r4, #20]
 8004ed0:	b002      	add	sp, #8
 8004ed2:	bd70      	pop	{r4, r5, r6, pc}
 8004ed4:	ab01      	add	r3, sp, #4
 8004ed6:	466a      	mov	r2, sp
 8004ed8:	f7ff ffc8 	bl	8004e6c <__swhatbuf_r>
 8004edc:	9900      	ldr	r1, [sp, #0]
 8004ede:	4605      	mov	r5, r0
 8004ee0:	4630      	mov	r0, r6
 8004ee2:	f000 f895 	bl	8005010 <_malloc_r>
 8004ee6:	b948      	cbnz	r0, 8004efc <__smakebuf_r+0x44>
 8004ee8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004eec:	059a      	lsls	r2, r3, #22
 8004eee:	d4ef      	bmi.n	8004ed0 <__smakebuf_r+0x18>
 8004ef0:	f023 0303 	bic.w	r3, r3, #3
 8004ef4:	f043 0302 	orr.w	r3, r3, #2
 8004ef8:	81a3      	strh	r3, [r4, #12]
 8004efa:	e7e3      	b.n	8004ec4 <__smakebuf_r+0xc>
 8004efc:	4b0d      	ldr	r3, [pc, #52]	; (8004f34 <__smakebuf_r+0x7c>)
 8004efe:	62b3      	str	r3, [r6, #40]	; 0x28
 8004f00:	89a3      	ldrh	r3, [r4, #12]
 8004f02:	6020      	str	r0, [r4, #0]
 8004f04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f08:	81a3      	strh	r3, [r4, #12]
 8004f0a:	9b00      	ldr	r3, [sp, #0]
 8004f0c:	6163      	str	r3, [r4, #20]
 8004f0e:	9b01      	ldr	r3, [sp, #4]
 8004f10:	6120      	str	r0, [r4, #16]
 8004f12:	b15b      	cbz	r3, 8004f2c <__smakebuf_r+0x74>
 8004f14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f18:	4630      	mov	r0, r6
 8004f1a:	f000 fcab 	bl	8005874 <_isatty_r>
 8004f1e:	b128      	cbz	r0, 8004f2c <__smakebuf_r+0x74>
 8004f20:	89a3      	ldrh	r3, [r4, #12]
 8004f22:	f023 0303 	bic.w	r3, r3, #3
 8004f26:	f043 0301 	orr.w	r3, r3, #1
 8004f2a:	81a3      	strh	r3, [r4, #12]
 8004f2c:	89a0      	ldrh	r0, [r4, #12]
 8004f2e:	4305      	orrs	r5, r0
 8004f30:	81a5      	strh	r5, [r4, #12]
 8004f32:	e7cd      	b.n	8004ed0 <__smakebuf_r+0x18>
 8004f34:	08004cc5 	.word	0x08004cc5

08004f38 <_free_r>:
 8004f38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f3a:	2900      	cmp	r1, #0
 8004f3c:	d044      	beq.n	8004fc8 <_free_r+0x90>
 8004f3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f42:	9001      	str	r0, [sp, #4]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f1a1 0404 	sub.w	r4, r1, #4
 8004f4a:	bfb8      	it	lt
 8004f4c:	18e4      	addlt	r4, r4, r3
 8004f4e:	f000 fcb3 	bl	80058b8 <__malloc_lock>
 8004f52:	4a1e      	ldr	r2, [pc, #120]	; (8004fcc <_free_r+0x94>)
 8004f54:	9801      	ldr	r0, [sp, #4]
 8004f56:	6813      	ldr	r3, [r2, #0]
 8004f58:	b933      	cbnz	r3, 8004f68 <_free_r+0x30>
 8004f5a:	6063      	str	r3, [r4, #4]
 8004f5c:	6014      	str	r4, [r2, #0]
 8004f5e:	b003      	add	sp, #12
 8004f60:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004f64:	f000 bcae 	b.w	80058c4 <__malloc_unlock>
 8004f68:	42a3      	cmp	r3, r4
 8004f6a:	d908      	bls.n	8004f7e <_free_r+0x46>
 8004f6c:	6825      	ldr	r5, [r4, #0]
 8004f6e:	1961      	adds	r1, r4, r5
 8004f70:	428b      	cmp	r3, r1
 8004f72:	bf01      	itttt	eq
 8004f74:	6819      	ldreq	r1, [r3, #0]
 8004f76:	685b      	ldreq	r3, [r3, #4]
 8004f78:	1949      	addeq	r1, r1, r5
 8004f7a:	6021      	streq	r1, [r4, #0]
 8004f7c:	e7ed      	b.n	8004f5a <_free_r+0x22>
 8004f7e:	461a      	mov	r2, r3
 8004f80:	685b      	ldr	r3, [r3, #4]
 8004f82:	b10b      	cbz	r3, 8004f88 <_free_r+0x50>
 8004f84:	42a3      	cmp	r3, r4
 8004f86:	d9fa      	bls.n	8004f7e <_free_r+0x46>
 8004f88:	6811      	ldr	r1, [r2, #0]
 8004f8a:	1855      	adds	r5, r2, r1
 8004f8c:	42a5      	cmp	r5, r4
 8004f8e:	d10b      	bne.n	8004fa8 <_free_r+0x70>
 8004f90:	6824      	ldr	r4, [r4, #0]
 8004f92:	4421      	add	r1, r4
 8004f94:	1854      	adds	r4, r2, r1
 8004f96:	42a3      	cmp	r3, r4
 8004f98:	6011      	str	r1, [r2, #0]
 8004f9a:	d1e0      	bne.n	8004f5e <_free_r+0x26>
 8004f9c:	681c      	ldr	r4, [r3, #0]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	6053      	str	r3, [r2, #4]
 8004fa2:	4421      	add	r1, r4
 8004fa4:	6011      	str	r1, [r2, #0]
 8004fa6:	e7da      	b.n	8004f5e <_free_r+0x26>
 8004fa8:	d902      	bls.n	8004fb0 <_free_r+0x78>
 8004faa:	230c      	movs	r3, #12
 8004fac:	6003      	str	r3, [r0, #0]
 8004fae:	e7d6      	b.n	8004f5e <_free_r+0x26>
 8004fb0:	6825      	ldr	r5, [r4, #0]
 8004fb2:	1961      	adds	r1, r4, r5
 8004fb4:	428b      	cmp	r3, r1
 8004fb6:	bf04      	itt	eq
 8004fb8:	6819      	ldreq	r1, [r3, #0]
 8004fba:	685b      	ldreq	r3, [r3, #4]
 8004fbc:	6063      	str	r3, [r4, #4]
 8004fbe:	bf04      	itt	eq
 8004fc0:	1949      	addeq	r1, r1, r5
 8004fc2:	6021      	streq	r1, [r4, #0]
 8004fc4:	6054      	str	r4, [r2, #4]
 8004fc6:	e7ca      	b.n	8004f5e <_free_r+0x26>
 8004fc8:	b003      	add	sp, #12
 8004fca:	bd30      	pop	{r4, r5, pc}
 8004fcc:	20000f60 	.word	0x20000f60

08004fd0 <sbrk_aligned>:
 8004fd0:	b570      	push	{r4, r5, r6, lr}
 8004fd2:	4e0e      	ldr	r6, [pc, #56]	; (800500c <sbrk_aligned+0x3c>)
 8004fd4:	460c      	mov	r4, r1
 8004fd6:	6831      	ldr	r1, [r6, #0]
 8004fd8:	4605      	mov	r5, r0
 8004fda:	b911      	cbnz	r1, 8004fe2 <sbrk_aligned+0x12>
 8004fdc:	f000 fbc2 	bl	8005764 <_sbrk_r>
 8004fe0:	6030      	str	r0, [r6, #0]
 8004fe2:	4621      	mov	r1, r4
 8004fe4:	4628      	mov	r0, r5
 8004fe6:	f000 fbbd 	bl	8005764 <_sbrk_r>
 8004fea:	1c43      	adds	r3, r0, #1
 8004fec:	d00a      	beq.n	8005004 <sbrk_aligned+0x34>
 8004fee:	1cc4      	adds	r4, r0, #3
 8004ff0:	f024 0403 	bic.w	r4, r4, #3
 8004ff4:	42a0      	cmp	r0, r4
 8004ff6:	d007      	beq.n	8005008 <sbrk_aligned+0x38>
 8004ff8:	1a21      	subs	r1, r4, r0
 8004ffa:	4628      	mov	r0, r5
 8004ffc:	f000 fbb2 	bl	8005764 <_sbrk_r>
 8005000:	3001      	adds	r0, #1
 8005002:	d101      	bne.n	8005008 <sbrk_aligned+0x38>
 8005004:	f04f 34ff 	mov.w	r4, #4294967295
 8005008:	4620      	mov	r0, r4
 800500a:	bd70      	pop	{r4, r5, r6, pc}
 800500c:	20000f64 	.word	0x20000f64

08005010 <_malloc_r>:
 8005010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005014:	1ccd      	adds	r5, r1, #3
 8005016:	f025 0503 	bic.w	r5, r5, #3
 800501a:	3508      	adds	r5, #8
 800501c:	2d0c      	cmp	r5, #12
 800501e:	bf38      	it	cc
 8005020:	250c      	movcc	r5, #12
 8005022:	2d00      	cmp	r5, #0
 8005024:	4607      	mov	r7, r0
 8005026:	db01      	blt.n	800502c <_malloc_r+0x1c>
 8005028:	42a9      	cmp	r1, r5
 800502a:	d905      	bls.n	8005038 <_malloc_r+0x28>
 800502c:	230c      	movs	r3, #12
 800502e:	603b      	str	r3, [r7, #0]
 8005030:	2600      	movs	r6, #0
 8005032:	4630      	mov	r0, r6
 8005034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005038:	4e2e      	ldr	r6, [pc, #184]	; (80050f4 <_malloc_r+0xe4>)
 800503a:	f000 fc3d 	bl	80058b8 <__malloc_lock>
 800503e:	6833      	ldr	r3, [r6, #0]
 8005040:	461c      	mov	r4, r3
 8005042:	bb34      	cbnz	r4, 8005092 <_malloc_r+0x82>
 8005044:	4629      	mov	r1, r5
 8005046:	4638      	mov	r0, r7
 8005048:	f7ff ffc2 	bl	8004fd0 <sbrk_aligned>
 800504c:	1c43      	adds	r3, r0, #1
 800504e:	4604      	mov	r4, r0
 8005050:	d14d      	bne.n	80050ee <_malloc_r+0xde>
 8005052:	6834      	ldr	r4, [r6, #0]
 8005054:	4626      	mov	r6, r4
 8005056:	2e00      	cmp	r6, #0
 8005058:	d140      	bne.n	80050dc <_malloc_r+0xcc>
 800505a:	6823      	ldr	r3, [r4, #0]
 800505c:	4631      	mov	r1, r6
 800505e:	4638      	mov	r0, r7
 8005060:	eb04 0803 	add.w	r8, r4, r3
 8005064:	f000 fb7e 	bl	8005764 <_sbrk_r>
 8005068:	4580      	cmp	r8, r0
 800506a:	d13a      	bne.n	80050e2 <_malloc_r+0xd2>
 800506c:	6821      	ldr	r1, [r4, #0]
 800506e:	3503      	adds	r5, #3
 8005070:	1a6d      	subs	r5, r5, r1
 8005072:	f025 0503 	bic.w	r5, r5, #3
 8005076:	3508      	adds	r5, #8
 8005078:	2d0c      	cmp	r5, #12
 800507a:	bf38      	it	cc
 800507c:	250c      	movcc	r5, #12
 800507e:	4629      	mov	r1, r5
 8005080:	4638      	mov	r0, r7
 8005082:	f7ff ffa5 	bl	8004fd0 <sbrk_aligned>
 8005086:	3001      	adds	r0, #1
 8005088:	d02b      	beq.n	80050e2 <_malloc_r+0xd2>
 800508a:	6823      	ldr	r3, [r4, #0]
 800508c:	442b      	add	r3, r5
 800508e:	6023      	str	r3, [r4, #0]
 8005090:	e00e      	b.n	80050b0 <_malloc_r+0xa0>
 8005092:	6822      	ldr	r2, [r4, #0]
 8005094:	1b52      	subs	r2, r2, r5
 8005096:	d41e      	bmi.n	80050d6 <_malloc_r+0xc6>
 8005098:	2a0b      	cmp	r2, #11
 800509a:	d916      	bls.n	80050ca <_malloc_r+0xba>
 800509c:	1961      	adds	r1, r4, r5
 800509e:	42a3      	cmp	r3, r4
 80050a0:	6025      	str	r5, [r4, #0]
 80050a2:	bf18      	it	ne
 80050a4:	6059      	strne	r1, [r3, #4]
 80050a6:	6863      	ldr	r3, [r4, #4]
 80050a8:	bf08      	it	eq
 80050aa:	6031      	streq	r1, [r6, #0]
 80050ac:	5162      	str	r2, [r4, r5]
 80050ae:	604b      	str	r3, [r1, #4]
 80050b0:	4638      	mov	r0, r7
 80050b2:	f104 060b 	add.w	r6, r4, #11
 80050b6:	f000 fc05 	bl	80058c4 <__malloc_unlock>
 80050ba:	f026 0607 	bic.w	r6, r6, #7
 80050be:	1d23      	adds	r3, r4, #4
 80050c0:	1af2      	subs	r2, r6, r3
 80050c2:	d0b6      	beq.n	8005032 <_malloc_r+0x22>
 80050c4:	1b9b      	subs	r3, r3, r6
 80050c6:	50a3      	str	r3, [r4, r2]
 80050c8:	e7b3      	b.n	8005032 <_malloc_r+0x22>
 80050ca:	6862      	ldr	r2, [r4, #4]
 80050cc:	42a3      	cmp	r3, r4
 80050ce:	bf0c      	ite	eq
 80050d0:	6032      	streq	r2, [r6, #0]
 80050d2:	605a      	strne	r2, [r3, #4]
 80050d4:	e7ec      	b.n	80050b0 <_malloc_r+0xa0>
 80050d6:	4623      	mov	r3, r4
 80050d8:	6864      	ldr	r4, [r4, #4]
 80050da:	e7b2      	b.n	8005042 <_malloc_r+0x32>
 80050dc:	4634      	mov	r4, r6
 80050de:	6876      	ldr	r6, [r6, #4]
 80050e0:	e7b9      	b.n	8005056 <_malloc_r+0x46>
 80050e2:	230c      	movs	r3, #12
 80050e4:	603b      	str	r3, [r7, #0]
 80050e6:	4638      	mov	r0, r7
 80050e8:	f000 fbec 	bl	80058c4 <__malloc_unlock>
 80050ec:	e7a1      	b.n	8005032 <_malloc_r+0x22>
 80050ee:	6025      	str	r5, [r4, #0]
 80050f0:	e7de      	b.n	80050b0 <_malloc_r+0xa0>
 80050f2:	bf00      	nop
 80050f4:	20000f60 	.word	0x20000f60

080050f8 <__sfputc_r>:
 80050f8:	6893      	ldr	r3, [r2, #8]
 80050fa:	3b01      	subs	r3, #1
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	b410      	push	{r4}
 8005100:	6093      	str	r3, [r2, #8]
 8005102:	da08      	bge.n	8005116 <__sfputc_r+0x1e>
 8005104:	6994      	ldr	r4, [r2, #24]
 8005106:	42a3      	cmp	r3, r4
 8005108:	db01      	blt.n	800510e <__sfputc_r+0x16>
 800510a:	290a      	cmp	r1, #10
 800510c:	d103      	bne.n	8005116 <__sfputc_r+0x1e>
 800510e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005112:	f7ff bc31 	b.w	8004978 <__swbuf_r>
 8005116:	6813      	ldr	r3, [r2, #0]
 8005118:	1c58      	adds	r0, r3, #1
 800511a:	6010      	str	r0, [r2, #0]
 800511c:	7019      	strb	r1, [r3, #0]
 800511e:	4608      	mov	r0, r1
 8005120:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005124:	4770      	bx	lr

08005126 <__sfputs_r>:
 8005126:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005128:	4606      	mov	r6, r0
 800512a:	460f      	mov	r7, r1
 800512c:	4614      	mov	r4, r2
 800512e:	18d5      	adds	r5, r2, r3
 8005130:	42ac      	cmp	r4, r5
 8005132:	d101      	bne.n	8005138 <__sfputs_r+0x12>
 8005134:	2000      	movs	r0, #0
 8005136:	e007      	b.n	8005148 <__sfputs_r+0x22>
 8005138:	f814 1b01 	ldrb.w	r1, [r4], #1
 800513c:	463a      	mov	r2, r7
 800513e:	4630      	mov	r0, r6
 8005140:	f7ff ffda 	bl	80050f8 <__sfputc_r>
 8005144:	1c43      	adds	r3, r0, #1
 8005146:	d1f3      	bne.n	8005130 <__sfputs_r+0xa>
 8005148:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800514c <_vfiprintf_r>:
 800514c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005150:	460d      	mov	r5, r1
 8005152:	b09d      	sub	sp, #116	; 0x74
 8005154:	4614      	mov	r4, r2
 8005156:	4698      	mov	r8, r3
 8005158:	4606      	mov	r6, r0
 800515a:	b118      	cbz	r0, 8005164 <_vfiprintf_r+0x18>
 800515c:	6983      	ldr	r3, [r0, #24]
 800515e:	b90b      	cbnz	r3, 8005164 <_vfiprintf_r+0x18>
 8005160:	f7ff fde4 	bl	8004d2c <__sinit>
 8005164:	4b89      	ldr	r3, [pc, #548]	; (800538c <_vfiprintf_r+0x240>)
 8005166:	429d      	cmp	r5, r3
 8005168:	d11b      	bne.n	80051a2 <_vfiprintf_r+0x56>
 800516a:	6875      	ldr	r5, [r6, #4]
 800516c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800516e:	07d9      	lsls	r1, r3, #31
 8005170:	d405      	bmi.n	800517e <_vfiprintf_r+0x32>
 8005172:	89ab      	ldrh	r3, [r5, #12]
 8005174:	059a      	lsls	r2, r3, #22
 8005176:	d402      	bmi.n	800517e <_vfiprintf_r+0x32>
 8005178:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800517a:	f7ff fe75 	bl	8004e68 <__retarget_lock_acquire_recursive>
 800517e:	89ab      	ldrh	r3, [r5, #12]
 8005180:	071b      	lsls	r3, r3, #28
 8005182:	d501      	bpl.n	8005188 <_vfiprintf_r+0x3c>
 8005184:	692b      	ldr	r3, [r5, #16]
 8005186:	b9eb      	cbnz	r3, 80051c4 <_vfiprintf_r+0x78>
 8005188:	4629      	mov	r1, r5
 800518a:	4630      	mov	r0, r6
 800518c:	f7ff fc46 	bl	8004a1c <__swsetup_r>
 8005190:	b1c0      	cbz	r0, 80051c4 <_vfiprintf_r+0x78>
 8005192:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005194:	07dc      	lsls	r4, r3, #31
 8005196:	d50e      	bpl.n	80051b6 <_vfiprintf_r+0x6a>
 8005198:	f04f 30ff 	mov.w	r0, #4294967295
 800519c:	b01d      	add	sp, #116	; 0x74
 800519e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051a2:	4b7b      	ldr	r3, [pc, #492]	; (8005390 <_vfiprintf_r+0x244>)
 80051a4:	429d      	cmp	r5, r3
 80051a6:	d101      	bne.n	80051ac <_vfiprintf_r+0x60>
 80051a8:	68b5      	ldr	r5, [r6, #8]
 80051aa:	e7df      	b.n	800516c <_vfiprintf_r+0x20>
 80051ac:	4b79      	ldr	r3, [pc, #484]	; (8005394 <_vfiprintf_r+0x248>)
 80051ae:	429d      	cmp	r5, r3
 80051b0:	bf08      	it	eq
 80051b2:	68f5      	ldreq	r5, [r6, #12]
 80051b4:	e7da      	b.n	800516c <_vfiprintf_r+0x20>
 80051b6:	89ab      	ldrh	r3, [r5, #12]
 80051b8:	0598      	lsls	r0, r3, #22
 80051ba:	d4ed      	bmi.n	8005198 <_vfiprintf_r+0x4c>
 80051bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80051be:	f7ff fe54 	bl	8004e6a <__retarget_lock_release_recursive>
 80051c2:	e7e9      	b.n	8005198 <_vfiprintf_r+0x4c>
 80051c4:	2300      	movs	r3, #0
 80051c6:	9309      	str	r3, [sp, #36]	; 0x24
 80051c8:	2320      	movs	r3, #32
 80051ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80051ce:	f8cd 800c 	str.w	r8, [sp, #12]
 80051d2:	2330      	movs	r3, #48	; 0x30
 80051d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005398 <_vfiprintf_r+0x24c>
 80051d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80051dc:	f04f 0901 	mov.w	r9, #1
 80051e0:	4623      	mov	r3, r4
 80051e2:	469a      	mov	sl, r3
 80051e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80051e8:	b10a      	cbz	r2, 80051ee <_vfiprintf_r+0xa2>
 80051ea:	2a25      	cmp	r2, #37	; 0x25
 80051ec:	d1f9      	bne.n	80051e2 <_vfiprintf_r+0x96>
 80051ee:	ebba 0b04 	subs.w	fp, sl, r4
 80051f2:	d00b      	beq.n	800520c <_vfiprintf_r+0xc0>
 80051f4:	465b      	mov	r3, fp
 80051f6:	4622      	mov	r2, r4
 80051f8:	4629      	mov	r1, r5
 80051fa:	4630      	mov	r0, r6
 80051fc:	f7ff ff93 	bl	8005126 <__sfputs_r>
 8005200:	3001      	adds	r0, #1
 8005202:	f000 80aa 	beq.w	800535a <_vfiprintf_r+0x20e>
 8005206:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005208:	445a      	add	r2, fp
 800520a:	9209      	str	r2, [sp, #36]	; 0x24
 800520c:	f89a 3000 	ldrb.w	r3, [sl]
 8005210:	2b00      	cmp	r3, #0
 8005212:	f000 80a2 	beq.w	800535a <_vfiprintf_r+0x20e>
 8005216:	2300      	movs	r3, #0
 8005218:	f04f 32ff 	mov.w	r2, #4294967295
 800521c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005220:	f10a 0a01 	add.w	sl, sl, #1
 8005224:	9304      	str	r3, [sp, #16]
 8005226:	9307      	str	r3, [sp, #28]
 8005228:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800522c:	931a      	str	r3, [sp, #104]	; 0x68
 800522e:	4654      	mov	r4, sl
 8005230:	2205      	movs	r2, #5
 8005232:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005236:	4858      	ldr	r0, [pc, #352]	; (8005398 <_vfiprintf_r+0x24c>)
 8005238:	f7fa fff2 	bl	8000220 <memchr>
 800523c:	9a04      	ldr	r2, [sp, #16]
 800523e:	b9d8      	cbnz	r0, 8005278 <_vfiprintf_r+0x12c>
 8005240:	06d1      	lsls	r1, r2, #27
 8005242:	bf44      	itt	mi
 8005244:	2320      	movmi	r3, #32
 8005246:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800524a:	0713      	lsls	r3, r2, #28
 800524c:	bf44      	itt	mi
 800524e:	232b      	movmi	r3, #43	; 0x2b
 8005250:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005254:	f89a 3000 	ldrb.w	r3, [sl]
 8005258:	2b2a      	cmp	r3, #42	; 0x2a
 800525a:	d015      	beq.n	8005288 <_vfiprintf_r+0x13c>
 800525c:	9a07      	ldr	r2, [sp, #28]
 800525e:	4654      	mov	r4, sl
 8005260:	2000      	movs	r0, #0
 8005262:	f04f 0c0a 	mov.w	ip, #10
 8005266:	4621      	mov	r1, r4
 8005268:	f811 3b01 	ldrb.w	r3, [r1], #1
 800526c:	3b30      	subs	r3, #48	; 0x30
 800526e:	2b09      	cmp	r3, #9
 8005270:	d94e      	bls.n	8005310 <_vfiprintf_r+0x1c4>
 8005272:	b1b0      	cbz	r0, 80052a2 <_vfiprintf_r+0x156>
 8005274:	9207      	str	r2, [sp, #28]
 8005276:	e014      	b.n	80052a2 <_vfiprintf_r+0x156>
 8005278:	eba0 0308 	sub.w	r3, r0, r8
 800527c:	fa09 f303 	lsl.w	r3, r9, r3
 8005280:	4313      	orrs	r3, r2
 8005282:	9304      	str	r3, [sp, #16]
 8005284:	46a2      	mov	sl, r4
 8005286:	e7d2      	b.n	800522e <_vfiprintf_r+0xe2>
 8005288:	9b03      	ldr	r3, [sp, #12]
 800528a:	1d19      	adds	r1, r3, #4
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	9103      	str	r1, [sp, #12]
 8005290:	2b00      	cmp	r3, #0
 8005292:	bfbb      	ittet	lt
 8005294:	425b      	neglt	r3, r3
 8005296:	f042 0202 	orrlt.w	r2, r2, #2
 800529a:	9307      	strge	r3, [sp, #28]
 800529c:	9307      	strlt	r3, [sp, #28]
 800529e:	bfb8      	it	lt
 80052a0:	9204      	strlt	r2, [sp, #16]
 80052a2:	7823      	ldrb	r3, [r4, #0]
 80052a4:	2b2e      	cmp	r3, #46	; 0x2e
 80052a6:	d10c      	bne.n	80052c2 <_vfiprintf_r+0x176>
 80052a8:	7863      	ldrb	r3, [r4, #1]
 80052aa:	2b2a      	cmp	r3, #42	; 0x2a
 80052ac:	d135      	bne.n	800531a <_vfiprintf_r+0x1ce>
 80052ae:	9b03      	ldr	r3, [sp, #12]
 80052b0:	1d1a      	adds	r2, r3, #4
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	9203      	str	r2, [sp, #12]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	bfb8      	it	lt
 80052ba:	f04f 33ff 	movlt.w	r3, #4294967295
 80052be:	3402      	adds	r4, #2
 80052c0:	9305      	str	r3, [sp, #20]
 80052c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80053a8 <_vfiprintf_r+0x25c>
 80052c6:	7821      	ldrb	r1, [r4, #0]
 80052c8:	2203      	movs	r2, #3
 80052ca:	4650      	mov	r0, sl
 80052cc:	f7fa ffa8 	bl	8000220 <memchr>
 80052d0:	b140      	cbz	r0, 80052e4 <_vfiprintf_r+0x198>
 80052d2:	2340      	movs	r3, #64	; 0x40
 80052d4:	eba0 000a 	sub.w	r0, r0, sl
 80052d8:	fa03 f000 	lsl.w	r0, r3, r0
 80052dc:	9b04      	ldr	r3, [sp, #16]
 80052de:	4303      	orrs	r3, r0
 80052e0:	3401      	adds	r4, #1
 80052e2:	9304      	str	r3, [sp, #16]
 80052e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052e8:	482c      	ldr	r0, [pc, #176]	; (800539c <_vfiprintf_r+0x250>)
 80052ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80052ee:	2206      	movs	r2, #6
 80052f0:	f7fa ff96 	bl	8000220 <memchr>
 80052f4:	2800      	cmp	r0, #0
 80052f6:	d03f      	beq.n	8005378 <_vfiprintf_r+0x22c>
 80052f8:	4b29      	ldr	r3, [pc, #164]	; (80053a0 <_vfiprintf_r+0x254>)
 80052fa:	bb1b      	cbnz	r3, 8005344 <_vfiprintf_r+0x1f8>
 80052fc:	9b03      	ldr	r3, [sp, #12]
 80052fe:	3307      	adds	r3, #7
 8005300:	f023 0307 	bic.w	r3, r3, #7
 8005304:	3308      	adds	r3, #8
 8005306:	9303      	str	r3, [sp, #12]
 8005308:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800530a:	443b      	add	r3, r7
 800530c:	9309      	str	r3, [sp, #36]	; 0x24
 800530e:	e767      	b.n	80051e0 <_vfiprintf_r+0x94>
 8005310:	fb0c 3202 	mla	r2, ip, r2, r3
 8005314:	460c      	mov	r4, r1
 8005316:	2001      	movs	r0, #1
 8005318:	e7a5      	b.n	8005266 <_vfiprintf_r+0x11a>
 800531a:	2300      	movs	r3, #0
 800531c:	3401      	adds	r4, #1
 800531e:	9305      	str	r3, [sp, #20]
 8005320:	4619      	mov	r1, r3
 8005322:	f04f 0c0a 	mov.w	ip, #10
 8005326:	4620      	mov	r0, r4
 8005328:	f810 2b01 	ldrb.w	r2, [r0], #1
 800532c:	3a30      	subs	r2, #48	; 0x30
 800532e:	2a09      	cmp	r2, #9
 8005330:	d903      	bls.n	800533a <_vfiprintf_r+0x1ee>
 8005332:	2b00      	cmp	r3, #0
 8005334:	d0c5      	beq.n	80052c2 <_vfiprintf_r+0x176>
 8005336:	9105      	str	r1, [sp, #20]
 8005338:	e7c3      	b.n	80052c2 <_vfiprintf_r+0x176>
 800533a:	fb0c 2101 	mla	r1, ip, r1, r2
 800533e:	4604      	mov	r4, r0
 8005340:	2301      	movs	r3, #1
 8005342:	e7f0      	b.n	8005326 <_vfiprintf_r+0x1da>
 8005344:	ab03      	add	r3, sp, #12
 8005346:	9300      	str	r3, [sp, #0]
 8005348:	462a      	mov	r2, r5
 800534a:	4b16      	ldr	r3, [pc, #88]	; (80053a4 <_vfiprintf_r+0x258>)
 800534c:	a904      	add	r1, sp, #16
 800534e:	4630      	mov	r0, r6
 8005350:	f3af 8000 	nop.w
 8005354:	4607      	mov	r7, r0
 8005356:	1c78      	adds	r0, r7, #1
 8005358:	d1d6      	bne.n	8005308 <_vfiprintf_r+0x1bc>
 800535a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800535c:	07d9      	lsls	r1, r3, #31
 800535e:	d405      	bmi.n	800536c <_vfiprintf_r+0x220>
 8005360:	89ab      	ldrh	r3, [r5, #12]
 8005362:	059a      	lsls	r2, r3, #22
 8005364:	d402      	bmi.n	800536c <_vfiprintf_r+0x220>
 8005366:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005368:	f7ff fd7f 	bl	8004e6a <__retarget_lock_release_recursive>
 800536c:	89ab      	ldrh	r3, [r5, #12]
 800536e:	065b      	lsls	r3, r3, #25
 8005370:	f53f af12 	bmi.w	8005198 <_vfiprintf_r+0x4c>
 8005374:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005376:	e711      	b.n	800519c <_vfiprintf_r+0x50>
 8005378:	ab03      	add	r3, sp, #12
 800537a:	9300      	str	r3, [sp, #0]
 800537c:	462a      	mov	r2, r5
 800537e:	4b09      	ldr	r3, [pc, #36]	; (80053a4 <_vfiprintf_r+0x258>)
 8005380:	a904      	add	r1, sp, #16
 8005382:	4630      	mov	r0, r6
 8005384:	f000 f880 	bl	8005488 <_printf_i>
 8005388:	e7e4      	b.n	8005354 <_vfiprintf_r+0x208>
 800538a:	bf00      	nop
 800538c:	080059ac 	.word	0x080059ac
 8005390:	080059cc 	.word	0x080059cc
 8005394:	0800598c 	.word	0x0800598c
 8005398:	080059ec 	.word	0x080059ec
 800539c:	080059f6 	.word	0x080059f6
 80053a0:	00000000 	.word	0x00000000
 80053a4:	08005127 	.word	0x08005127
 80053a8:	080059f2 	.word	0x080059f2

080053ac <_printf_common>:
 80053ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053b0:	4616      	mov	r6, r2
 80053b2:	4699      	mov	r9, r3
 80053b4:	688a      	ldr	r2, [r1, #8]
 80053b6:	690b      	ldr	r3, [r1, #16]
 80053b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80053bc:	4293      	cmp	r3, r2
 80053be:	bfb8      	it	lt
 80053c0:	4613      	movlt	r3, r2
 80053c2:	6033      	str	r3, [r6, #0]
 80053c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80053c8:	4607      	mov	r7, r0
 80053ca:	460c      	mov	r4, r1
 80053cc:	b10a      	cbz	r2, 80053d2 <_printf_common+0x26>
 80053ce:	3301      	adds	r3, #1
 80053d0:	6033      	str	r3, [r6, #0]
 80053d2:	6823      	ldr	r3, [r4, #0]
 80053d4:	0699      	lsls	r1, r3, #26
 80053d6:	bf42      	ittt	mi
 80053d8:	6833      	ldrmi	r3, [r6, #0]
 80053da:	3302      	addmi	r3, #2
 80053dc:	6033      	strmi	r3, [r6, #0]
 80053de:	6825      	ldr	r5, [r4, #0]
 80053e0:	f015 0506 	ands.w	r5, r5, #6
 80053e4:	d106      	bne.n	80053f4 <_printf_common+0x48>
 80053e6:	f104 0a19 	add.w	sl, r4, #25
 80053ea:	68e3      	ldr	r3, [r4, #12]
 80053ec:	6832      	ldr	r2, [r6, #0]
 80053ee:	1a9b      	subs	r3, r3, r2
 80053f0:	42ab      	cmp	r3, r5
 80053f2:	dc26      	bgt.n	8005442 <_printf_common+0x96>
 80053f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80053f8:	1e13      	subs	r3, r2, #0
 80053fa:	6822      	ldr	r2, [r4, #0]
 80053fc:	bf18      	it	ne
 80053fe:	2301      	movne	r3, #1
 8005400:	0692      	lsls	r2, r2, #26
 8005402:	d42b      	bmi.n	800545c <_printf_common+0xb0>
 8005404:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005408:	4649      	mov	r1, r9
 800540a:	4638      	mov	r0, r7
 800540c:	47c0      	blx	r8
 800540e:	3001      	adds	r0, #1
 8005410:	d01e      	beq.n	8005450 <_printf_common+0xa4>
 8005412:	6823      	ldr	r3, [r4, #0]
 8005414:	68e5      	ldr	r5, [r4, #12]
 8005416:	6832      	ldr	r2, [r6, #0]
 8005418:	f003 0306 	and.w	r3, r3, #6
 800541c:	2b04      	cmp	r3, #4
 800541e:	bf08      	it	eq
 8005420:	1aad      	subeq	r5, r5, r2
 8005422:	68a3      	ldr	r3, [r4, #8]
 8005424:	6922      	ldr	r2, [r4, #16]
 8005426:	bf0c      	ite	eq
 8005428:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800542c:	2500      	movne	r5, #0
 800542e:	4293      	cmp	r3, r2
 8005430:	bfc4      	itt	gt
 8005432:	1a9b      	subgt	r3, r3, r2
 8005434:	18ed      	addgt	r5, r5, r3
 8005436:	2600      	movs	r6, #0
 8005438:	341a      	adds	r4, #26
 800543a:	42b5      	cmp	r5, r6
 800543c:	d11a      	bne.n	8005474 <_printf_common+0xc8>
 800543e:	2000      	movs	r0, #0
 8005440:	e008      	b.n	8005454 <_printf_common+0xa8>
 8005442:	2301      	movs	r3, #1
 8005444:	4652      	mov	r2, sl
 8005446:	4649      	mov	r1, r9
 8005448:	4638      	mov	r0, r7
 800544a:	47c0      	blx	r8
 800544c:	3001      	adds	r0, #1
 800544e:	d103      	bne.n	8005458 <_printf_common+0xac>
 8005450:	f04f 30ff 	mov.w	r0, #4294967295
 8005454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005458:	3501      	adds	r5, #1
 800545a:	e7c6      	b.n	80053ea <_printf_common+0x3e>
 800545c:	18e1      	adds	r1, r4, r3
 800545e:	1c5a      	adds	r2, r3, #1
 8005460:	2030      	movs	r0, #48	; 0x30
 8005462:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005466:	4422      	add	r2, r4
 8005468:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800546c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005470:	3302      	adds	r3, #2
 8005472:	e7c7      	b.n	8005404 <_printf_common+0x58>
 8005474:	2301      	movs	r3, #1
 8005476:	4622      	mov	r2, r4
 8005478:	4649      	mov	r1, r9
 800547a:	4638      	mov	r0, r7
 800547c:	47c0      	blx	r8
 800547e:	3001      	adds	r0, #1
 8005480:	d0e6      	beq.n	8005450 <_printf_common+0xa4>
 8005482:	3601      	adds	r6, #1
 8005484:	e7d9      	b.n	800543a <_printf_common+0x8e>
	...

08005488 <_printf_i>:
 8005488:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800548c:	7e0f      	ldrb	r7, [r1, #24]
 800548e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005490:	2f78      	cmp	r7, #120	; 0x78
 8005492:	4691      	mov	r9, r2
 8005494:	4680      	mov	r8, r0
 8005496:	460c      	mov	r4, r1
 8005498:	469a      	mov	sl, r3
 800549a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800549e:	d807      	bhi.n	80054b0 <_printf_i+0x28>
 80054a0:	2f62      	cmp	r7, #98	; 0x62
 80054a2:	d80a      	bhi.n	80054ba <_printf_i+0x32>
 80054a4:	2f00      	cmp	r7, #0
 80054a6:	f000 80d8 	beq.w	800565a <_printf_i+0x1d2>
 80054aa:	2f58      	cmp	r7, #88	; 0x58
 80054ac:	f000 80a3 	beq.w	80055f6 <_printf_i+0x16e>
 80054b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80054b8:	e03a      	b.n	8005530 <_printf_i+0xa8>
 80054ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80054be:	2b15      	cmp	r3, #21
 80054c0:	d8f6      	bhi.n	80054b0 <_printf_i+0x28>
 80054c2:	a101      	add	r1, pc, #4	; (adr r1, 80054c8 <_printf_i+0x40>)
 80054c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80054c8:	08005521 	.word	0x08005521
 80054cc:	08005535 	.word	0x08005535
 80054d0:	080054b1 	.word	0x080054b1
 80054d4:	080054b1 	.word	0x080054b1
 80054d8:	080054b1 	.word	0x080054b1
 80054dc:	080054b1 	.word	0x080054b1
 80054e0:	08005535 	.word	0x08005535
 80054e4:	080054b1 	.word	0x080054b1
 80054e8:	080054b1 	.word	0x080054b1
 80054ec:	080054b1 	.word	0x080054b1
 80054f0:	080054b1 	.word	0x080054b1
 80054f4:	08005641 	.word	0x08005641
 80054f8:	08005565 	.word	0x08005565
 80054fc:	08005623 	.word	0x08005623
 8005500:	080054b1 	.word	0x080054b1
 8005504:	080054b1 	.word	0x080054b1
 8005508:	08005663 	.word	0x08005663
 800550c:	080054b1 	.word	0x080054b1
 8005510:	08005565 	.word	0x08005565
 8005514:	080054b1 	.word	0x080054b1
 8005518:	080054b1 	.word	0x080054b1
 800551c:	0800562b 	.word	0x0800562b
 8005520:	682b      	ldr	r3, [r5, #0]
 8005522:	1d1a      	adds	r2, r3, #4
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	602a      	str	r2, [r5, #0]
 8005528:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800552c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005530:	2301      	movs	r3, #1
 8005532:	e0a3      	b.n	800567c <_printf_i+0x1f4>
 8005534:	6820      	ldr	r0, [r4, #0]
 8005536:	6829      	ldr	r1, [r5, #0]
 8005538:	0606      	lsls	r6, r0, #24
 800553a:	f101 0304 	add.w	r3, r1, #4
 800553e:	d50a      	bpl.n	8005556 <_printf_i+0xce>
 8005540:	680e      	ldr	r6, [r1, #0]
 8005542:	602b      	str	r3, [r5, #0]
 8005544:	2e00      	cmp	r6, #0
 8005546:	da03      	bge.n	8005550 <_printf_i+0xc8>
 8005548:	232d      	movs	r3, #45	; 0x2d
 800554a:	4276      	negs	r6, r6
 800554c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005550:	485e      	ldr	r0, [pc, #376]	; (80056cc <_printf_i+0x244>)
 8005552:	230a      	movs	r3, #10
 8005554:	e019      	b.n	800558a <_printf_i+0x102>
 8005556:	680e      	ldr	r6, [r1, #0]
 8005558:	602b      	str	r3, [r5, #0]
 800555a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800555e:	bf18      	it	ne
 8005560:	b236      	sxthne	r6, r6
 8005562:	e7ef      	b.n	8005544 <_printf_i+0xbc>
 8005564:	682b      	ldr	r3, [r5, #0]
 8005566:	6820      	ldr	r0, [r4, #0]
 8005568:	1d19      	adds	r1, r3, #4
 800556a:	6029      	str	r1, [r5, #0]
 800556c:	0601      	lsls	r1, r0, #24
 800556e:	d501      	bpl.n	8005574 <_printf_i+0xec>
 8005570:	681e      	ldr	r6, [r3, #0]
 8005572:	e002      	b.n	800557a <_printf_i+0xf2>
 8005574:	0646      	lsls	r6, r0, #25
 8005576:	d5fb      	bpl.n	8005570 <_printf_i+0xe8>
 8005578:	881e      	ldrh	r6, [r3, #0]
 800557a:	4854      	ldr	r0, [pc, #336]	; (80056cc <_printf_i+0x244>)
 800557c:	2f6f      	cmp	r7, #111	; 0x6f
 800557e:	bf0c      	ite	eq
 8005580:	2308      	moveq	r3, #8
 8005582:	230a      	movne	r3, #10
 8005584:	2100      	movs	r1, #0
 8005586:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800558a:	6865      	ldr	r5, [r4, #4]
 800558c:	60a5      	str	r5, [r4, #8]
 800558e:	2d00      	cmp	r5, #0
 8005590:	bfa2      	ittt	ge
 8005592:	6821      	ldrge	r1, [r4, #0]
 8005594:	f021 0104 	bicge.w	r1, r1, #4
 8005598:	6021      	strge	r1, [r4, #0]
 800559a:	b90e      	cbnz	r6, 80055a0 <_printf_i+0x118>
 800559c:	2d00      	cmp	r5, #0
 800559e:	d04d      	beq.n	800563c <_printf_i+0x1b4>
 80055a0:	4615      	mov	r5, r2
 80055a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80055a6:	fb03 6711 	mls	r7, r3, r1, r6
 80055aa:	5dc7      	ldrb	r7, [r0, r7]
 80055ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80055b0:	4637      	mov	r7, r6
 80055b2:	42bb      	cmp	r3, r7
 80055b4:	460e      	mov	r6, r1
 80055b6:	d9f4      	bls.n	80055a2 <_printf_i+0x11a>
 80055b8:	2b08      	cmp	r3, #8
 80055ba:	d10b      	bne.n	80055d4 <_printf_i+0x14c>
 80055bc:	6823      	ldr	r3, [r4, #0]
 80055be:	07de      	lsls	r6, r3, #31
 80055c0:	d508      	bpl.n	80055d4 <_printf_i+0x14c>
 80055c2:	6923      	ldr	r3, [r4, #16]
 80055c4:	6861      	ldr	r1, [r4, #4]
 80055c6:	4299      	cmp	r1, r3
 80055c8:	bfde      	ittt	le
 80055ca:	2330      	movle	r3, #48	; 0x30
 80055cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80055d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80055d4:	1b52      	subs	r2, r2, r5
 80055d6:	6122      	str	r2, [r4, #16]
 80055d8:	f8cd a000 	str.w	sl, [sp]
 80055dc:	464b      	mov	r3, r9
 80055de:	aa03      	add	r2, sp, #12
 80055e0:	4621      	mov	r1, r4
 80055e2:	4640      	mov	r0, r8
 80055e4:	f7ff fee2 	bl	80053ac <_printf_common>
 80055e8:	3001      	adds	r0, #1
 80055ea:	d14c      	bne.n	8005686 <_printf_i+0x1fe>
 80055ec:	f04f 30ff 	mov.w	r0, #4294967295
 80055f0:	b004      	add	sp, #16
 80055f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055f6:	4835      	ldr	r0, [pc, #212]	; (80056cc <_printf_i+0x244>)
 80055f8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80055fc:	6829      	ldr	r1, [r5, #0]
 80055fe:	6823      	ldr	r3, [r4, #0]
 8005600:	f851 6b04 	ldr.w	r6, [r1], #4
 8005604:	6029      	str	r1, [r5, #0]
 8005606:	061d      	lsls	r5, r3, #24
 8005608:	d514      	bpl.n	8005634 <_printf_i+0x1ac>
 800560a:	07df      	lsls	r7, r3, #31
 800560c:	bf44      	itt	mi
 800560e:	f043 0320 	orrmi.w	r3, r3, #32
 8005612:	6023      	strmi	r3, [r4, #0]
 8005614:	b91e      	cbnz	r6, 800561e <_printf_i+0x196>
 8005616:	6823      	ldr	r3, [r4, #0]
 8005618:	f023 0320 	bic.w	r3, r3, #32
 800561c:	6023      	str	r3, [r4, #0]
 800561e:	2310      	movs	r3, #16
 8005620:	e7b0      	b.n	8005584 <_printf_i+0xfc>
 8005622:	6823      	ldr	r3, [r4, #0]
 8005624:	f043 0320 	orr.w	r3, r3, #32
 8005628:	6023      	str	r3, [r4, #0]
 800562a:	2378      	movs	r3, #120	; 0x78
 800562c:	4828      	ldr	r0, [pc, #160]	; (80056d0 <_printf_i+0x248>)
 800562e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005632:	e7e3      	b.n	80055fc <_printf_i+0x174>
 8005634:	0659      	lsls	r1, r3, #25
 8005636:	bf48      	it	mi
 8005638:	b2b6      	uxthmi	r6, r6
 800563a:	e7e6      	b.n	800560a <_printf_i+0x182>
 800563c:	4615      	mov	r5, r2
 800563e:	e7bb      	b.n	80055b8 <_printf_i+0x130>
 8005640:	682b      	ldr	r3, [r5, #0]
 8005642:	6826      	ldr	r6, [r4, #0]
 8005644:	6961      	ldr	r1, [r4, #20]
 8005646:	1d18      	adds	r0, r3, #4
 8005648:	6028      	str	r0, [r5, #0]
 800564a:	0635      	lsls	r5, r6, #24
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	d501      	bpl.n	8005654 <_printf_i+0x1cc>
 8005650:	6019      	str	r1, [r3, #0]
 8005652:	e002      	b.n	800565a <_printf_i+0x1d2>
 8005654:	0670      	lsls	r0, r6, #25
 8005656:	d5fb      	bpl.n	8005650 <_printf_i+0x1c8>
 8005658:	8019      	strh	r1, [r3, #0]
 800565a:	2300      	movs	r3, #0
 800565c:	6123      	str	r3, [r4, #16]
 800565e:	4615      	mov	r5, r2
 8005660:	e7ba      	b.n	80055d8 <_printf_i+0x150>
 8005662:	682b      	ldr	r3, [r5, #0]
 8005664:	1d1a      	adds	r2, r3, #4
 8005666:	602a      	str	r2, [r5, #0]
 8005668:	681d      	ldr	r5, [r3, #0]
 800566a:	6862      	ldr	r2, [r4, #4]
 800566c:	2100      	movs	r1, #0
 800566e:	4628      	mov	r0, r5
 8005670:	f7fa fdd6 	bl	8000220 <memchr>
 8005674:	b108      	cbz	r0, 800567a <_printf_i+0x1f2>
 8005676:	1b40      	subs	r0, r0, r5
 8005678:	6060      	str	r0, [r4, #4]
 800567a:	6863      	ldr	r3, [r4, #4]
 800567c:	6123      	str	r3, [r4, #16]
 800567e:	2300      	movs	r3, #0
 8005680:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005684:	e7a8      	b.n	80055d8 <_printf_i+0x150>
 8005686:	6923      	ldr	r3, [r4, #16]
 8005688:	462a      	mov	r2, r5
 800568a:	4649      	mov	r1, r9
 800568c:	4640      	mov	r0, r8
 800568e:	47d0      	blx	sl
 8005690:	3001      	adds	r0, #1
 8005692:	d0ab      	beq.n	80055ec <_printf_i+0x164>
 8005694:	6823      	ldr	r3, [r4, #0]
 8005696:	079b      	lsls	r3, r3, #30
 8005698:	d413      	bmi.n	80056c2 <_printf_i+0x23a>
 800569a:	68e0      	ldr	r0, [r4, #12]
 800569c:	9b03      	ldr	r3, [sp, #12]
 800569e:	4298      	cmp	r0, r3
 80056a0:	bfb8      	it	lt
 80056a2:	4618      	movlt	r0, r3
 80056a4:	e7a4      	b.n	80055f0 <_printf_i+0x168>
 80056a6:	2301      	movs	r3, #1
 80056a8:	4632      	mov	r2, r6
 80056aa:	4649      	mov	r1, r9
 80056ac:	4640      	mov	r0, r8
 80056ae:	47d0      	blx	sl
 80056b0:	3001      	adds	r0, #1
 80056b2:	d09b      	beq.n	80055ec <_printf_i+0x164>
 80056b4:	3501      	adds	r5, #1
 80056b6:	68e3      	ldr	r3, [r4, #12]
 80056b8:	9903      	ldr	r1, [sp, #12]
 80056ba:	1a5b      	subs	r3, r3, r1
 80056bc:	42ab      	cmp	r3, r5
 80056be:	dcf2      	bgt.n	80056a6 <_printf_i+0x21e>
 80056c0:	e7eb      	b.n	800569a <_printf_i+0x212>
 80056c2:	2500      	movs	r5, #0
 80056c4:	f104 0619 	add.w	r6, r4, #25
 80056c8:	e7f5      	b.n	80056b6 <_printf_i+0x22e>
 80056ca:	bf00      	nop
 80056cc:	080059fd 	.word	0x080059fd
 80056d0:	08005a0e 	.word	0x08005a0e

080056d4 <_putc_r>:
 80056d4:	b570      	push	{r4, r5, r6, lr}
 80056d6:	460d      	mov	r5, r1
 80056d8:	4614      	mov	r4, r2
 80056da:	4606      	mov	r6, r0
 80056dc:	b118      	cbz	r0, 80056e6 <_putc_r+0x12>
 80056de:	6983      	ldr	r3, [r0, #24]
 80056e0:	b90b      	cbnz	r3, 80056e6 <_putc_r+0x12>
 80056e2:	f7ff fb23 	bl	8004d2c <__sinit>
 80056e6:	4b1c      	ldr	r3, [pc, #112]	; (8005758 <_putc_r+0x84>)
 80056e8:	429c      	cmp	r4, r3
 80056ea:	d124      	bne.n	8005736 <_putc_r+0x62>
 80056ec:	6874      	ldr	r4, [r6, #4]
 80056ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80056f0:	07d8      	lsls	r0, r3, #31
 80056f2:	d405      	bmi.n	8005700 <_putc_r+0x2c>
 80056f4:	89a3      	ldrh	r3, [r4, #12]
 80056f6:	0599      	lsls	r1, r3, #22
 80056f8:	d402      	bmi.n	8005700 <_putc_r+0x2c>
 80056fa:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80056fc:	f7ff fbb4 	bl	8004e68 <__retarget_lock_acquire_recursive>
 8005700:	68a3      	ldr	r3, [r4, #8]
 8005702:	3b01      	subs	r3, #1
 8005704:	2b00      	cmp	r3, #0
 8005706:	60a3      	str	r3, [r4, #8]
 8005708:	da05      	bge.n	8005716 <_putc_r+0x42>
 800570a:	69a2      	ldr	r2, [r4, #24]
 800570c:	4293      	cmp	r3, r2
 800570e:	db1c      	blt.n	800574a <_putc_r+0x76>
 8005710:	b2eb      	uxtb	r3, r5
 8005712:	2b0a      	cmp	r3, #10
 8005714:	d019      	beq.n	800574a <_putc_r+0x76>
 8005716:	6823      	ldr	r3, [r4, #0]
 8005718:	1c5a      	adds	r2, r3, #1
 800571a:	6022      	str	r2, [r4, #0]
 800571c:	701d      	strb	r5, [r3, #0]
 800571e:	b2ed      	uxtb	r5, r5
 8005720:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005722:	07da      	lsls	r2, r3, #31
 8005724:	d405      	bmi.n	8005732 <_putc_r+0x5e>
 8005726:	89a3      	ldrh	r3, [r4, #12]
 8005728:	059b      	lsls	r3, r3, #22
 800572a:	d402      	bmi.n	8005732 <_putc_r+0x5e>
 800572c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800572e:	f7ff fb9c 	bl	8004e6a <__retarget_lock_release_recursive>
 8005732:	4628      	mov	r0, r5
 8005734:	bd70      	pop	{r4, r5, r6, pc}
 8005736:	4b09      	ldr	r3, [pc, #36]	; (800575c <_putc_r+0x88>)
 8005738:	429c      	cmp	r4, r3
 800573a:	d101      	bne.n	8005740 <_putc_r+0x6c>
 800573c:	68b4      	ldr	r4, [r6, #8]
 800573e:	e7d6      	b.n	80056ee <_putc_r+0x1a>
 8005740:	4b07      	ldr	r3, [pc, #28]	; (8005760 <_putc_r+0x8c>)
 8005742:	429c      	cmp	r4, r3
 8005744:	bf08      	it	eq
 8005746:	68f4      	ldreq	r4, [r6, #12]
 8005748:	e7d1      	b.n	80056ee <_putc_r+0x1a>
 800574a:	4629      	mov	r1, r5
 800574c:	4622      	mov	r2, r4
 800574e:	4630      	mov	r0, r6
 8005750:	f7ff f912 	bl	8004978 <__swbuf_r>
 8005754:	4605      	mov	r5, r0
 8005756:	e7e3      	b.n	8005720 <_putc_r+0x4c>
 8005758:	080059ac 	.word	0x080059ac
 800575c:	080059cc 	.word	0x080059cc
 8005760:	0800598c 	.word	0x0800598c

08005764 <_sbrk_r>:
 8005764:	b538      	push	{r3, r4, r5, lr}
 8005766:	4d06      	ldr	r5, [pc, #24]	; (8005780 <_sbrk_r+0x1c>)
 8005768:	2300      	movs	r3, #0
 800576a:	4604      	mov	r4, r0
 800576c:	4608      	mov	r0, r1
 800576e:	602b      	str	r3, [r5, #0]
 8005770:	f7fb f9b6 	bl	8000ae0 <_sbrk>
 8005774:	1c43      	adds	r3, r0, #1
 8005776:	d102      	bne.n	800577e <_sbrk_r+0x1a>
 8005778:	682b      	ldr	r3, [r5, #0]
 800577a:	b103      	cbz	r3, 800577e <_sbrk_r+0x1a>
 800577c:	6023      	str	r3, [r4, #0]
 800577e:	bd38      	pop	{r3, r4, r5, pc}
 8005780:	20000f68 	.word	0x20000f68

08005784 <__sread>:
 8005784:	b510      	push	{r4, lr}
 8005786:	460c      	mov	r4, r1
 8005788:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800578c:	f000 f8a0 	bl	80058d0 <_read_r>
 8005790:	2800      	cmp	r0, #0
 8005792:	bfab      	itete	ge
 8005794:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005796:	89a3      	ldrhlt	r3, [r4, #12]
 8005798:	181b      	addge	r3, r3, r0
 800579a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800579e:	bfac      	ite	ge
 80057a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80057a2:	81a3      	strhlt	r3, [r4, #12]
 80057a4:	bd10      	pop	{r4, pc}

080057a6 <__swrite>:
 80057a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057aa:	461f      	mov	r7, r3
 80057ac:	898b      	ldrh	r3, [r1, #12]
 80057ae:	05db      	lsls	r3, r3, #23
 80057b0:	4605      	mov	r5, r0
 80057b2:	460c      	mov	r4, r1
 80057b4:	4616      	mov	r6, r2
 80057b6:	d505      	bpl.n	80057c4 <__swrite+0x1e>
 80057b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057bc:	2302      	movs	r3, #2
 80057be:	2200      	movs	r2, #0
 80057c0:	f000 f868 	bl	8005894 <_lseek_r>
 80057c4:	89a3      	ldrh	r3, [r4, #12]
 80057c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057ce:	81a3      	strh	r3, [r4, #12]
 80057d0:	4632      	mov	r2, r6
 80057d2:	463b      	mov	r3, r7
 80057d4:	4628      	mov	r0, r5
 80057d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057da:	f000 b817 	b.w	800580c <_write_r>

080057de <__sseek>:
 80057de:	b510      	push	{r4, lr}
 80057e0:	460c      	mov	r4, r1
 80057e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057e6:	f000 f855 	bl	8005894 <_lseek_r>
 80057ea:	1c43      	adds	r3, r0, #1
 80057ec:	89a3      	ldrh	r3, [r4, #12]
 80057ee:	bf15      	itete	ne
 80057f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80057f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80057f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80057fa:	81a3      	strheq	r3, [r4, #12]
 80057fc:	bf18      	it	ne
 80057fe:	81a3      	strhne	r3, [r4, #12]
 8005800:	bd10      	pop	{r4, pc}

08005802 <__sclose>:
 8005802:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005806:	f000 b813 	b.w	8005830 <_close_r>
	...

0800580c <_write_r>:
 800580c:	b538      	push	{r3, r4, r5, lr}
 800580e:	4d07      	ldr	r5, [pc, #28]	; (800582c <_write_r+0x20>)
 8005810:	4604      	mov	r4, r0
 8005812:	4608      	mov	r0, r1
 8005814:	4611      	mov	r1, r2
 8005816:	2200      	movs	r2, #0
 8005818:	602a      	str	r2, [r5, #0]
 800581a:	461a      	mov	r2, r3
 800581c:	f7fb f910 	bl	8000a40 <_write>
 8005820:	1c43      	adds	r3, r0, #1
 8005822:	d102      	bne.n	800582a <_write_r+0x1e>
 8005824:	682b      	ldr	r3, [r5, #0]
 8005826:	b103      	cbz	r3, 800582a <_write_r+0x1e>
 8005828:	6023      	str	r3, [r4, #0]
 800582a:	bd38      	pop	{r3, r4, r5, pc}
 800582c:	20000f68 	.word	0x20000f68

08005830 <_close_r>:
 8005830:	b538      	push	{r3, r4, r5, lr}
 8005832:	4d06      	ldr	r5, [pc, #24]	; (800584c <_close_r+0x1c>)
 8005834:	2300      	movs	r3, #0
 8005836:	4604      	mov	r4, r0
 8005838:	4608      	mov	r0, r1
 800583a:	602b      	str	r3, [r5, #0]
 800583c:	f7fb f91c 	bl	8000a78 <_close>
 8005840:	1c43      	adds	r3, r0, #1
 8005842:	d102      	bne.n	800584a <_close_r+0x1a>
 8005844:	682b      	ldr	r3, [r5, #0]
 8005846:	b103      	cbz	r3, 800584a <_close_r+0x1a>
 8005848:	6023      	str	r3, [r4, #0]
 800584a:	bd38      	pop	{r3, r4, r5, pc}
 800584c:	20000f68 	.word	0x20000f68

08005850 <_fstat_r>:
 8005850:	b538      	push	{r3, r4, r5, lr}
 8005852:	4d07      	ldr	r5, [pc, #28]	; (8005870 <_fstat_r+0x20>)
 8005854:	2300      	movs	r3, #0
 8005856:	4604      	mov	r4, r0
 8005858:	4608      	mov	r0, r1
 800585a:	4611      	mov	r1, r2
 800585c:	602b      	str	r3, [r5, #0]
 800585e:	f7fb f917 	bl	8000a90 <_fstat>
 8005862:	1c43      	adds	r3, r0, #1
 8005864:	d102      	bne.n	800586c <_fstat_r+0x1c>
 8005866:	682b      	ldr	r3, [r5, #0]
 8005868:	b103      	cbz	r3, 800586c <_fstat_r+0x1c>
 800586a:	6023      	str	r3, [r4, #0]
 800586c:	bd38      	pop	{r3, r4, r5, pc}
 800586e:	bf00      	nop
 8005870:	20000f68 	.word	0x20000f68

08005874 <_isatty_r>:
 8005874:	b538      	push	{r3, r4, r5, lr}
 8005876:	4d06      	ldr	r5, [pc, #24]	; (8005890 <_isatty_r+0x1c>)
 8005878:	2300      	movs	r3, #0
 800587a:	4604      	mov	r4, r0
 800587c:	4608      	mov	r0, r1
 800587e:	602b      	str	r3, [r5, #0]
 8005880:	f7fb f916 	bl	8000ab0 <_isatty>
 8005884:	1c43      	adds	r3, r0, #1
 8005886:	d102      	bne.n	800588e <_isatty_r+0x1a>
 8005888:	682b      	ldr	r3, [r5, #0]
 800588a:	b103      	cbz	r3, 800588e <_isatty_r+0x1a>
 800588c:	6023      	str	r3, [r4, #0]
 800588e:	bd38      	pop	{r3, r4, r5, pc}
 8005890:	20000f68 	.word	0x20000f68

08005894 <_lseek_r>:
 8005894:	b538      	push	{r3, r4, r5, lr}
 8005896:	4d07      	ldr	r5, [pc, #28]	; (80058b4 <_lseek_r+0x20>)
 8005898:	4604      	mov	r4, r0
 800589a:	4608      	mov	r0, r1
 800589c:	4611      	mov	r1, r2
 800589e:	2200      	movs	r2, #0
 80058a0:	602a      	str	r2, [r5, #0]
 80058a2:	461a      	mov	r2, r3
 80058a4:	f7fb f90f 	bl	8000ac6 <_lseek>
 80058a8:	1c43      	adds	r3, r0, #1
 80058aa:	d102      	bne.n	80058b2 <_lseek_r+0x1e>
 80058ac:	682b      	ldr	r3, [r5, #0]
 80058ae:	b103      	cbz	r3, 80058b2 <_lseek_r+0x1e>
 80058b0:	6023      	str	r3, [r4, #0]
 80058b2:	bd38      	pop	{r3, r4, r5, pc}
 80058b4:	20000f68 	.word	0x20000f68

080058b8 <__malloc_lock>:
 80058b8:	4801      	ldr	r0, [pc, #4]	; (80058c0 <__malloc_lock+0x8>)
 80058ba:	f7ff bad5 	b.w	8004e68 <__retarget_lock_acquire_recursive>
 80058be:	bf00      	nop
 80058c0:	20000f5c 	.word	0x20000f5c

080058c4 <__malloc_unlock>:
 80058c4:	4801      	ldr	r0, [pc, #4]	; (80058cc <__malloc_unlock+0x8>)
 80058c6:	f7ff bad0 	b.w	8004e6a <__retarget_lock_release_recursive>
 80058ca:	bf00      	nop
 80058cc:	20000f5c 	.word	0x20000f5c

080058d0 <_read_r>:
 80058d0:	b538      	push	{r3, r4, r5, lr}
 80058d2:	4d07      	ldr	r5, [pc, #28]	; (80058f0 <_read_r+0x20>)
 80058d4:	4604      	mov	r4, r0
 80058d6:	4608      	mov	r0, r1
 80058d8:	4611      	mov	r1, r2
 80058da:	2200      	movs	r2, #0
 80058dc:	602a      	str	r2, [r5, #0]
 80058de:	461a      	mov	r2, r3
 80058e0:	f7fb f891 	bl	8000a06 <_read>
 80058e4:	1c43      	adds	r3, r0, #1
 80058e6:	d102      	bne.n	80058ee <_read_r+0x1e>
 80058e8:	682b      	ldr	r3, [r5, #0]
 80058ea:	b103      	cbz	r3, 80058ee <_read_r+0x1e>
 80058ec:	6023      	str	r3, [r4, #0]
 80058ee:	bd38      	pop	{r3, r4, r5, pc}
 80058f0:	20000f68 	.word	0x20000f68

080058f4 <_init>:
 80058f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058f6:	bf00      	nop
 80058f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058fa:	bc08      	pop	{r3}
 80058fc:	469e      	mov	lr, r3
 80058fe:	4770      	bx	lr

08005900 <_fini>:
 8005900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005902:	bf00      	nop
 8005904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005906:	bc08      	pop	{r3}
 8005908:	469e      	mov	lr, r3
 800590a:	4770      	bx	lr
