
Capteurs-Chaines-de-Mesures.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056c0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  080058a0  080058a0  000158a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059b8  080059b8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080059b8  080059b8  000159b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059c0  080059c0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059c0  080059c0  000159c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059c4  080059c4  000159c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080059c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e68  20000074  08005a3c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000edc  08005a3c  00020edc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015172  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000328f  00000000  00000000  00035216  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f0  00000000  00000000  000384a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001088  00000000  00000000  00039698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000208c4  00000000  00000000  0003a720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001619a  00000000  00000000  0005afe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c4194  00000000  00000000  0007117e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00135312  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005080  00000000  00000000  00135364  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000074 	.word	0x20000074
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005888 	.word	0x08005888

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000078 	.word	0x20000078
 800021c:	08005888 	.word	0x08005888

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005c4:	b5b0      	push	{r4, r5, r7, lr}
 80005c6:	b086      	sub	sp, #24
 80005c8:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005ca:	4b09      	ldr	r3, [pc, #36]	; (80005f0 <MX_FREERTOS_Init+0x2c>)
 80005cc:	1d3c      	adds	r4, r7, #4
 80005ce:	461d      	mov	r5, r3
 80005d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d4:	682b      	ldr	r3, [r5, #0]
 80005d6:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005d8:	1d3b      	adds	r3, r7, #4
 80005da:	2100      	movs	r1, #0
 80005dc:	4618      	mov	r0, r3
 80005de:	f002 ff92 	bl	8003506 <osThreadCreate>
 80005e2:	4603      	mov	r3, r0
 80005e4:	4a03      	ldr	r2, [pc, #12]	; (80005f4 <MX_FREERTOS_Init+0x30>)
 80005e6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 80005e8:	bf00      	nop
 80005ea:	3718      	adds	r7, #24
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bdb0      	pop	{r4, r5, r7, pc}
 80005f0:	080058ac 	.word	0x080058ac
 80005f4:	20000090 	.word	0x20000090

080005f8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000600:	2001      	movs	r0, #1
 8000602:	f002 ffa7 	bl	8003554 <osDelay>
 8000606:	e7fb      	b.n	8000600 <StartDefaultTask+0x8>

08000608 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA3   ------> LPUART1_RX
*/
void MX_GPIO_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b08a      	sub	sp, #40	; 0x28
 800060c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060e:	f107 0314 	add.w	r3, r7, #20
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
 800061c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800061e:	4b34      	ldr	r3, [pc, #208]	; (80006f0 <MX_GPIO_Init+0xe8>)
 8000620:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000622:	4a33      	ldr	r2, [pc, #204]	; (80006f0 <MX_GPIO_Init+0xe8>)
 8000624:	f043 0304 	orr.w	r3, r3, #4
 8000628:	64d3      	str	r3, [r2, #76]	; 0x4c
 800062a:	4b31      	ldr	r3, [pc, #196]	; (80006f0 <MX_GPIO_Init+0xe8>)
 800062c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800062e:	f003 0304 	and.w	r3, r3, #4
 8000632:	613b      	str	r3, [r7, #16]
 8000634:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000636:	4b2e      	ldr	r3, [pc, #184]	; (80006f0 <MX_GPIO_Init+0xe8>)
 8000638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800063a:	4a2d      	ldr	r2, [pc, #180]	; (80006f0 <MX_GPIO_Init+0xe8>)
 800063c:	f043 0320 	orr.w	r3, r3, #32
 8000640:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000642:	4b2b      	ldr	r3, [pc, #172]	; (80006f0 <MX_GPIO_Init+0xe8>)
 8000644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000646:	f003 0320 	and.w	r3, r3, #32
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064e:	4b28      	ldr	r3, [pc, #160]	; (80006f0 <MX_GPIO_Init+0xe8>)
 8000650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000652:	4a27      	ldr	r2, [pc, #156]	; (80006f0 <MX_GPIO_Init+0xe8>)
 8000654:	f043 0301 	orr.w	r3, r3, #1
 8000658:	64d3      	str	r3, [r2, #76]	; 0x4c
 800065a:	4b25      	ldr	r3, [pc, #148]	; (80006f0 <MX_GPIO_Init+0xe8>)
 800065c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065e:	f003 0301 	and.w	r3, r3, #1
 8000662:	60bb      	str	r3, [r7, #8]
 8000664:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000666:	4b22      	ldr	r3, [pc, #136]	; (80006f0 <MX_GPIO_Init+0xe8>)
 8000668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066a:	4a21      	ldr	r2, [pc, #132]	; (80006f0 <MX_GPIO_Init+0xe8>)
 800066c:	f043 0302 	orr.w	r3, r3, #2
 8000670:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000672:	4b1f      	ldr	r3, [pc, #124]	; (80006f0 <MX_GPIO_Init+0xe8>)
 8000674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000676:	f003 0302 	and.w	r3, r3, #2
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800067e:	2200      	movs	r2, #0
 8000680:	2120      	movs	r1, #32
 8000682:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000686:	f000 fe57 	bl	8001338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800068a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800068e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000690:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000694:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000696:	2300      	movs	r3, #0
 8000698:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800069a:	f107 0314 	add.w	r3, r7, #20
 800069e:	4619      	mov	r1, r3
 80006a0:	4814      	ldr	r0, [pc, #80]	; (80006f4 <MX_GPIO_Init+0xec>)
 80006a2:	f000 fcc7 	bl	8001034 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LPUART1_RX_Pin;
 80006a6:	2308      	movs	r3, #8
 80006a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006aa:	2302      	movs	r3, #2
 80006ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ae:	2300      	movs	r3, #0
 80006b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b2:	2300      	movs	r3, #0
 80006b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80006b6:	230c      	movs	r3, #12
 80006b8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LPUART1_RX_GPIO_Port, &GPIO_InitStruct);
 80006ba:	f107 0314 	add.w	r3, r7, #20
 80006be:	4619      	mov	r1, r3
 80006c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c4:	f000 fcb6 	bl	8001034 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006c8:	2320      	movs	r3, #32
 80006ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006cc:	2301      	movs	r3, #1
 80006ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d0:	2300      	movs	r3, #0
 80006d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d4:	2300      	movs	r3, #0
 80006d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006d8:	f107 0314 	add.w	r3, r7, #20
 80006dc:	4619      	mov	r1, r3
 80006de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e2:	f000 fca7 	bl	8001034 <HAL_GPIO_Init>

}
 80006e6:	bf00      	nop
 80006e8:	3728      	adds	r7, #40	; 0x28
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40021000 	.word	0x40021000
 80006f4:	48000800 	.word	0x48000800

080006f8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006fc:	4b1b      	ldr	r3, [pc, #108]	; (800076c <MX_I2C1_Init+0x74>)
 80006fe:	4a1c      	ldr	r2, [pc, #112]	; (8000770 <MX_I2C1_Init+0x78>)
 8000700:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 8000702:	4b1a      	ldr	r3, [pc, #104]	; (800076c <MX_I2C1_Init+0x74>)
 8000704:	4a1b      	ldr	r2, [pc, #108]	; (8000774 <MX_I2C1_Init+0x7c>)
 8000706:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000708:	4b18      	ldr	r3, [pc, #96]	; (800076c <MX_I2C1_Init+0x74>)
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800070e:	4b17      	ldr	r3, [pc, #92]	; (800076c <MX_I2C1_Init+0x74>)
 8000710:	2201      	movs	r2, #1
 8000712:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000714:	4b15      	ldr	r3, [pc, #84]	; (800076c <MX_I2C1_Init+0x74>)
 8000716:	2200      	movs	r2, #0
 8000718:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800071a:	4b14      	ldr	r3, [pc, #80]	; (800076c <MX_I2C1_Init+0x74>)
 800071c:	2200      	movs	r2, #0
 800071e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000720:	4b12      	ldr	r3, [pc, #72]	; (800076c <MX_I2C1_Init+0x74>)
 8000722:	2200      	movs	r2, #0
 8000724:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000726:	4b11      	ldr	r3, [pc, #68]	; (800076c <MX_I2C1_Init+0x74>)
 8000728:	2200      	movs	r2, #0
 800072a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800072c:	4b0f      	ldr	r3, [pc, #60]	; (800076c <MX_I2C1_Init+0x74>)
 800072e:	2200      	movs	r2, #0
 8000730:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000732:	480e      	ldr	r0, [pc, #56]	; (800076c <MX_I2C1_Init+0x74>)
 8000734:	f000 fe18 	bl	8001368 <HAL_I2C_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800073e:	f000 f92c 	bl	800099a <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000742:	2100      	movs	r1, #0
 8000744:	4809      	ldr	r0, [pc, #36]	; (800076c <MX_I2C1_Init+0x74>)
 8000746:	f000 ffe5 	bl	8001714 <HAL_I2CEx_ConfigAnalogFilter>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000750:	f000 f923 	bl	800099a <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000754:	2100      	movs	r1, #0
 8000756:	4805      	ldr	r0, [pc, #20]	; (800076c <MX_I2C1_Init+0x74>)
 8000758:	f001 f827 	bl	80017aa <HAL_I2CEx_ConfigDigitalFilter>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000762:	f000 f91a 	bl	800099a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000766:	bf00      	nop
 8000768:	bd80      	pop	{r7, pc}
 800076a:	bf00      	nop
 800076c:	20000094 	.word	0x20000094
 8000770:	40005400 	.word	0x40005400
 8000774:	30a0a7fb 	.word	0x30a0a7fb

08000778 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b09a      	sub	sp, #104	; 0x68
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000780:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
 800078e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000790:	f107 0310 	add.w	r3, r7, #16
 8000794:	2244      	movs	r2, #68	; 0x44
 8000796:	2100      	movs	r1, #0
 8000798:	4618      	mov	r0, r3
 800079a:	f004 f869 	bl	8004870 <memset>
  if(i2cHandle->Instance==I2C1)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	4a1f      	ldr	r2, [pc, #124]	; (8000820 <HAL_I2C_MspInit+0xa8>)
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d136      	bne.n	8000816 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80007a8:	2340      	movs	r3, #64	; 0x40
 80007aa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80007ac:	2300      	movs	r3, #0
 80007ae:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007b0:	f107 0310 	add.w	r3, r7, #16
 80007b4:	4618      	mov	r0, r3
 80007b6:	f001 fe2d 	bl	8002414 <HAL_RCCEx_PeriphCLKConfig>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80007c0:	f000 f8eb 	bl	800099a <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c4:	4b17      	ldr	r3, [pc, #92]	; (8000824 <HAL_I2C_MspInit+0xac>)
 80007c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c8:	4a16      	ldr	r2, [pc, #88]	; (8000824 <HAL_I2C_MspInit+0xac>)
 80007ca:	f043 0302 	orr.w	r3, r3, #2
 80007ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007d0:	4b14      	ldr	r3, [pc, #80]	; (8000824 <HAL_I2C_MspInit+0xac>)
 80007d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d4:	f003 0302 	and.w	r3, r3, #2
 80007d8:	60fb      	str	r3, [r7, #12]
 80007da:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007dc:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007e0:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007e2:	2312      	movs	r3, #18
 80007e4:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ea:	2300      	movs	r3, #0
 80007ec:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007ee:	2304      	movs	r3, #4
 80007f0:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80007f6:	4619      	mov	r1, r3
 80007f8:	480b      	ldr	r0, [pc, #44]	; (8000828 <HAL_I2C_MspInit+0xb0>)
 80007fa:	f000 fc1b 	bl	8001034 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007fe:	4b09      	ldr	r3, [pc, #36]	; (8000824 <HAL_I2C_MspInit+0xac>)
 8000800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000802:	4a08      	ldr	r2, [pc, #32]	; (8000824 <HAL_I2C_MspInit+0xac>)
 8000804:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000808:	6593      	str	r3, [r2, #88]	; 0x58
 800080a:	4b06      	ldr	r3, [pc, #24]	; (8000824 <HAL_I2C_MspInit+0xac>)
 800080c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800080e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000816:	bf00      	nop
 8000818:	3768      	adds	r7, #104	; 0x68
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
 800081e:	bf00      	nop
 8000820:	40005400 	.word	0x40005400
 8000824:	40021000 	.word	0x40021000
 8000828:	48000400 	.word	0x48000400

0800082c <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000834:	1d39      	adds	r1, r7, #4
 8000836:	f04f 33ff 	mov.w	r3, #4294967295
 800083a:	2201      	movs	r2, #1
 800083c:	4803      	ldr	r0, [pc, #12]	; (800084c <__io_putchar+0x20>)
 800083e:	f002 f829 	bl	8002894 <HAL_UART_Transmit>
return ch;
 8000842:	687b      	ldr	r3, [r7, #4]
}
 8000844:	4618      	mov	r0, r3
 8000846:	3708      	adds	r7, #8
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	200000e4 	.word	0x200000e4

08000850 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	printf("Test\r\n");
 8000856:	4826      	ldr	r0, [pc, #152]	; (80008f0 <main+0xa0>)
 8000858:	f004 f898 	bl	800498c <puts>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800085c:	f000 fa73 	bl	8000d46 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000860:	f000 f850 	bl	8000904 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000864:	f7ff fed0 	bl	8000608 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000868:	f7ff ff46 	bl	80006f8 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800086c:	f000 f99e 	bl	8000bac <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 8000870:	2201      	movs	r2, #1
 8000872:	2120      	movs	r1, #32
 8000874:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000878:	f000 fd5e 	bl	8001338 <HAL_GPIO_WritePin>
    HAL_Delay(2000);
 800087c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000880:	f000 fad2 	bl	8000e28 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);
 8000884:	2200      	movs	r2, #0
 8000886:	2120      	movs	r1, #32
 8000888:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800088c:	f000 fd54 	bl	8001338 <HAL_GPIO_WritePin>
    BSP_LCD_DisplayStringAt(0, LINE(5), (uint8_t *)mess,CENTER_MODE);
    HAL_Delay(1000);
    BSP_LCD_Clear(LCD_COLOR_WHITE);
    */
    // Go through all possible i2c addresses
      for (uint8_t i = 0; i < 255; i++) {
 8000890:	2300      	movs	r3, #0
 8000892:	71fb      	strb	r3, [r7, #7]
 8000894:	e021      	b.n	80008da <main+0x8a>

    	  if (HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i), 3, 5) == HAL_OK) {
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	b299      	uxth	r1, r3
 800089a:	2305      	movs	r3, #5
 800089c:	2203      	movs	r2, #3
 800089e:	4815      	ldr	r0, [pc, #84]	; (80008f4 <main+0xa4>)
 80008a0:	f000 fdf1 	bl	8001486 <HAL_I2C_IsDeviceReady>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d105      	bne.n	80008b6 <main+0x66>
    		  // We got an ack
    		  printf("%2x ", i);
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	4619      	mov	r1, r3
 80008ae:	4812      	ldr	r0, [pc, #72]	; (80008f8 <main+0xa8>)
 80008b0:	f003 ffe6 	bl	8004880 <iprintf>
 80008b4:	e002      	b.n	80008bc <main+0x6c>
    	  } else {
    		  printf("-- ");
 80008b6:	4811      	ldr	r0, [pc, #68]	; (80008fc <main+0xac>)
 80008b8:	f003 ffe2 	bl	8004880 <iprintf>
    	  }

    	  if (i > 0 && (i + 1) % 16 == 0) printf("\n\r");
 80008bc:	79fb      	ldrb	r3, [r7, #7]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d008      	beq.n	80008d4 <main+0x84>
 80008c2:	79fb      	ldrb	r3, [r7, #7]
 80008c4:	3301      	adds	r3, #1
 80008c6:	f003 030f 	and.w	r3, r3, #15
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d102      	bne.n	80008d4 <main+0x84>
 80008ce:	480c      	ldr	r0, [pc, #48]	; (8000900 <main+0xb0>)
 80008d0:	f003 ffd6 	bl	8004880 <iprintf>
      for (uint8_t i = 0; i < 255; i++) {
 80008d4:	79fb      	ldrb	r3, [r7, #7]
 80008d6:	3301      	adds	r3, #1
 80008d8:	71fb      	strb	r3, [r7, #7]
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	2bff      	cmp	r3, #255	; 0xff
 80008de:	d1da      	bne.n	8000896 <main+0x46>

      }

      printf("\n\r");
 80008e0:	4807      	ldr	r0, [pc, #28]	; (8000900 <main+0xb0>)
 80008e2:	f003 ffcd 	bl	8004880 <iprintf>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80008e6:	f7ff fe6d 	bl	80005c4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80008ea:	f002 fe05 	bl	80034f8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008ee:	e7fe      	b.n	80008ee <main+0x9e>
 80008f0:	080058c0 	.word	0x080058c0
 80008f4:	20000094 	.word	0x20000094
 80008f8:	080058c8 	.word	0x080058c8
 80008fc:	080058d0 	.word	0x080058d0
 8000900:	080058d4 	.word	0x080058d4

08000904 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b094      	sub	sp, #80	; 0x50
 8000908:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800090a:	f107 0318 	add.w	r3, r7, #24
 800090e:	2238      	movs	r2, #56	; 0x38
 8000910:	2100      	movs	r1, #0
 8000912:	4618      	mov	r0, r3
 8000914:	f003 ffac 	bl	8004870 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000918:	1d3b      	adds	r3, r7, #4
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
 800091e:	605a      	str	r2, [r3, #4]
 8000920:	609a      	str	r2, [r3, #8]
 8000922:	60da      	str	r2, [r3, #12]
 8000924:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000926:	2000      	movs	r0, #0
 8000928:	f000 ff8c 	bl	8001844 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800092c:	2302      	movs	r3, #2
 800092e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000930:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000936:	2340      	movs	r3, #64	; 0x40
 8000938:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800093a:	2302      	movs	r3, #2
 800093c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800093e:	2302      	movs	r3, #2
 8000940:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000942:	2304      	movs	r3, #4
 8000944:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000946:	2355      	movs	r3, #85	; 0x55
 8000948:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800094a:	2302      	movs	r3, #2
 800094c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800094e:	2302      	movs	r3, #2
 8000950:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000952:	2302      	movs	r3, #2
 8000954:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000956:	f107 0318 	add.w	r3, r7, #24
 800095a:	4618      	mov	r0, r3
 800095c:	f001 f826 	bl	80019ac <HAL_RCC_OscConfig>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	d001      	beq.n	800096a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000966:	f000 f818 	bl	800099a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800096a:	230f      	movs	r3, #15
 800096c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800096e:	2303      	movs	r3, #3
 8000970:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000972:	2300      	movs	r3, #0
 8000974:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000976:	2300      	movs	r3, #0
 8000978:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800097a:	2300      	movs	r3, #0
 800097c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	2104      	movs	r1, #4
 8000982:	4618      	mov	r0, r3
 8000984:	f001 fb2a 	bl	8001fdc <HAL_RCC_ClockConfig>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800098e:	f000 f804 	bl	800099a <Error_Handler>
  }
}
 8000992:	bf00      	nop
 8000994:	3750      	adds	r7, #80	; 0x50
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}

0800099a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800099a:	b480      	push	{r7}
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800099e:	bf00      	nop
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b082      	sub	sp, #8
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ae:	4b12      	ldr	r3, [pc, #72]	; (80009f8 <HAL_MspInit+0x50>)
 80009b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009b2:	4a11      	ldr	r2, [pc, #68]	; (80009f8 <HAL_MspInit+0x50>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	6613      	str	r3, [r2, #96]	; 0x60
 80009ba:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <HAL_MspInit+0x50>)
 80009bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009be:	f003 0301 	and.w	r3, r3, #1
 80009c2:	607b      	str	r3, [r7, #4]
 80009c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c6:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <HAL_MspInit+0x50>)
 80009c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ca:	4a0b      	ldr	r2, [pc, #44]	; (80009f8 <HAL_MspInit+0x50>)
 80009cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d0:	6593      	str	r3, [r2, #88]	; 0x58
 80009d2:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <HAL_MspInit+0x50>)
 80009d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009da:	603b      	str	r3, [r7, #0]
 80009dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80009de:	2200      	movs	r2, #0
 80009e0:	210f      	movs	r1, #15
 80009e2:	f06f 0001 	mvn.w	r0, #1
 80009e6:	f000 fafe 	bl	8000fe6 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80009ea:	f000 ffcf 	bl	800198c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ee:	bf00      	nop
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40021000 	.word	0x40021000

080009fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <NMI_Handler+0x4>

08000a02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a06:	e7fe      	b.n	8000a06 <HardFault_Handler+0x4>

08000a08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <MemManage_Handler+0x4>

08000a0e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a12:	e7fe      	b.n	8000a12 <BusFault_Handler+0x4>

08000a14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a18:	e7fe      	b.n	8000a18 <UsageFault_Handler+0x4>

08000a1a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a2c:	f000 f9de 	bl	8000dec <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a30:	f003 fa7a 	bl	8003f28 <xTaskGetSchedulerState>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d001      	beq.n	8000a3e <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a3a:	f003 fcb5 	bl	80043a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a42:	b580      	push	{r7, lr}
 8000a44:	b086      	sub	sp, #24
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	60f8      	str	r0, [r7, #12]
 8000a4a:	60b9      	str	r1, [r7, #8]
 8000a4c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a4e:	2300      	movs	r3, #0
 8000a50:	617b      	str	r3, [r7, #20]
 8000a52:	e00a      	b.n	8000a6a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a54:	f3af 8000 	nop.w
 8000a58:	4601      	mov	r1, r0
 8000a5a:	68bb      	ldr	r3, [r7, #8]
 8000a5c:	1c5a      	adds	r2, r3, #1
 8000a5e:	60ba      	str	r2, [r7, #8]
 8000a60:	b2ca      	uxtb	r2, r1
 8000a62:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	3301      	adds	r3, #1
 8000a68:	617b      	str	r3, [r7, #20]
 8000a6a:	697a      	ldr	r2, [r7, #20]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	dbf0      	blt.n	8000a54 <_read+0x12>
	}

return len;
 8000a72:	687b      	ldr	r3, [r7, #4]
}
 8000a74:	4618      	mov	r0, r3
 8000a76:	3718      	adds	r7, #24
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b086      	sub	sp, #24
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	60f8      	str	r0, [r7, #12]
 8000a84:	60b9      	str	r1, [r7, #8]
 8000a86:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a88:	2300      	movs	r3, #0
 8000a8a:	617b      	str	r3, [r7, #20]
 8000a8c:	e009      	b.n	8000aa2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a8e:	68bb      	ldr	r3, [r7, #8]
 8000a90:	1c5a      	adds	r2, r3, #1
 8000a92:	60ba      	str	r2, [r7, #8]
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	4618      	mov	r0, r3
 8000a98:	f7ff fec8 	bl	800082c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	3301      	adds	r3, #1
 8000aa0:	617b      	str	r3, [r7, #20]
 8000aa2:	697a      	ldr	r2, [r7, #20]
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	429a      	cmp	r2, r3
 8000aa8:	dbf1      	blt.n	8000a8e <_write+0x12>
	}
	return len;
 8000aaa:	687b      	ldr	r3, [r7, #4]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3718      	adds	r7, #24
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <_close>:

int _close(int file)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
	return -1;
 8000abc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000adc:	605a      	str	r2, [r3, #4]
	return 0;
 8000ade:	2300      	movs	r3, #0
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <_isatty>:

int _isatty(int file)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
	return 1;
 8000af4:	2301      	movs	r3, #1
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	370c      	adds	r7, #12
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr

08000b02 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b02:	b480      	push	{r7}
 8000b04:	b085      	sub	sp, #20
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	60f8      	str	r0, [r7, #12]
 8000b0a:	60b9      	str	r1, [r7, #8]
 8000b0c:	607a      	str	r2, [r7, #4]
	return 0;
 8000b0e:	2300      	movs	r3, #0
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	3714      	adds	r7, #20
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr

08000b1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b24:	4a14      	ldr	r2, [pc, #80]	; (8000b78 <_sbrk+0x5c>)
 8000b26:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <_sbrk+0x60>)
 8000b28:	1ad3      	subs	r3, r2, r3
 8000b2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b30:	4b13      	ldr	r3, [pc, #76]	; (8000b80 <_sbrk+0x64>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d102      	bne.n	8000b3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b38:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <_sbrk+0x64>)
 8000b3a:	4a12      	ldr	r2, [pc, #72]	; (8000b84 <_sbrk+0x68>)
 8000b3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b3e:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <_sbrk+0x64>)
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4413      	add	r3, r2
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d207      	bcs.n	8000b5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b4c:	f003 fe66 	bl	800481c <__errno>
 8000b50:	4603      	mov	r3, r0
 8000b52:	220c      	movs	r2, #12
 8000b54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b56:	f04f 33ff 	mov.w	r3, #4294967295
 8000b5a:	e009      	b.n	8000b70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b5c:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <_sbrk+0x64>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b62:	4b07      	ldr	r3, [pc, #28]	; (8000b80 <_sbrk+0x64>)
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4413      	add	r3, r2
 8000b6a:	4a05      	ldr	r2, [pc, #20]	; (8000b80 <_sbrk+0x64>)
 8000b6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b6e:	68fb      	ldr	r3, [r7, #12]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3718      	adds	r7, #24
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20008000 	.word	0x20008000
 8000b7c:	00000400 	.word	0x00000400
 8000b80:	200000e0 	.word	0x200000e0
 8000b84:	20000ee0 	.word	0x20000ee0

08000b88 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b8c:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <SystemInit+0x20>)
 8000b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b92:	4a05      	ldr	r2, [pc, #20]	; (8000ba8 <SystemInit+0x20>)
 8000b94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	e000ed00 	.word	0xe000ed00

08000bac <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bb0:	4b22      	ldr	r3, [pc, #136]	; (8000c3c <MX_USART2_UART_Init+0x90>)
 8000bb2:	4a23      	ldr	r2, [pc, #140]	; (8000c40 <MX_USART2_UART_Init+0x94>)
 8000bb4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bb6:	4b21      	ldr	r3, [pc, #132]	; (8000c3c <MX_USART2_UART_Init+0x90>)
 8000bb8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bbc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bbe:	4b1f      	ldr	r3, [pc, #124]	; (8000c3c <MX_USART2_UART_Init+0x90>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bc4:	4b1d      	ldr	r3, [pc, #116]	; (8000c3c <MX_USART2_UART_Init+0x90>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bca:	4b1c      	ldr	r3, [pc, #112]	; (8000c3c <MX_USART2_UART_Init+0x90>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bd0:	4b1a      	ldr	r3, [pc, #104]	; (8000c3c <MX_USART2_UART_Init+0x90>)
 8000bd2:	220c      	movs	r2, #12
 8000bd4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bd6:	4b19      	ldr	r3, [pc, #100]	; (8000c3c <MX_USART2_UART_Init+0x90>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bdc:	4b17      	ldr	r3, [pc, #92]	; (8000c3c <MX_USART2_UART_Init+0x90>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000be2:	4b16      	ldr	r3, [pc, #88]	; (8000c3c <MX_USART2_UART_Init+0x90>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000be8:	4b14      	ldr	r3, [pc, #80]	; (8000c3c <MX_USART2_UART_Init+0x90>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bee:	4b13      	ldr	r3, [pc, #76]	; (8000c3c <MX_USART2_UART_Init+0x90>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bf4:	4811      	ldr	r0, [pc, #68]	; (8000c3c <MX_USART2_UART_Init+0x90>)
 8000bf6:	f001 fdfd 	bl	80027f4 <HAL_UART_Init>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000c00:	f7ff fecb 	bl	800099a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c04:	2100      	movs	r1, #0
 8000c06:	480d      	ldr	r0, [pc, #52]	; (8000c3c <MX_USART2_UART_Init+0x90>)
 8000c08:	f002 fb94 	bl	8003334 <HAL_UARTEx_SetTxFifoThreshold>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000c12:	f7ff fec2 	bl	800099a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000c16:	2100      	movs	r1, #0
 8000c18:	4808      	ldr	r0, [pc, #32]	; (8000c3c <MX_USART2_UART_Init+0x90>)
 8000c1a:	f002 fbc9 	bl	80033b0 <HAL_UARTEx_SetRxFifoThreshold>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000c24:	f7ff feb9 	bl	800099a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000c28:	4804      	ldr	r0, [pc, #16]	; (8000c3c <MX_USART2_UART_Init+0x90>)
 8000c2a:	f002 fb4a 	bl	80032c2 <HAL_UARTEx_DisableFifoMode>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000c34:	f7ff feb1 	bl	800099a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c38:	bf00      	nop
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	200000e4 	.word	0x200000e4
 8000c40:	40004400 	.word	0x40004400

08000c44 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b09a      	sub	sp, #104	; 0x68
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
 8000c56:	609a      	str	r2, [r3, #8]
 8000c58:	60da      	str	r2, [r3, #12]
 8000c5a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c5c:	f107 0310 	add.w	r3, r7, #16
 8000c60:	2244      	movs	r2, #68	; 0x44
 8000c62:	2100      	movs	r1, #0
 8000c64:	4618      	mov	r0, r3
 8000c66:	f003 fe03 	bl	8004870 <memset>
  if(uartHandle->Instance==USART2)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a1f      	ldr	r2, [pc, #124]	; (8000cec <HAL_UART_MspInit+0xa8>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d137      	bne.n	8000ce4 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c74:	2302      	movs	r3, #2
 8000c76:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c7c:	f107 0310 	add.w	r3, r7, #16
 8000c80:	4618      	mov	r0, r3
 8000c82:	f001 fbc7 	bl	8002414 <HAL_RCCEx_PeriphCLKConfig>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c8c:	f7ff fe85 	bl	800099a <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c90:	4b17      	ldr	r3, [pc, #92]	; (8000cf0 <HAL_UART_MspInit+0xac>)
 8000c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c94:	4a16      	ldr	r2, [pc, #88]	; (8000cf0 <HAL_UART_MspInit+0xac>)
 8000c96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c9a:	6593      	str	r3, [r2, #88]	; 0x58
 8000c9c:	4b14      	ldr	r3, [pc, #80]	; (8000cf0 <HAL_UART_MspInit+0xac>)
 8000c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca8:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <HAL_UART_MspInit+0xac>)
 8000caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cac:	4a10      	ldr	r2, [pc, #64]	; (8000cf0 <HAL_UART_MspInit+0xac>)
 8000cae:	f043 0301 	orr.w	r3, r3, #1
 8000cb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cb4:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <HAL_UART_MspInit+0xac>)
 8000cb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb8:	f003 0301 	and.w	r3, r3, #1
 8000cbc:	60bb      	str	r3, [r7, #8]
 8000cbe:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 8000cc0:	f248 0304 	movw	r3, #32772	; 0x8004
 8000cc4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cd2:	2307      	movs	r3, #7
 8000cd4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000cda:	4619      	mov	r1, r3
 8000cdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ce0:	f000 f9a8 	bl	8001034 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000ce4:	bf00      	nop
 8000ce6:	3768      	adds	r7, #104	; 0x68
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40004400 	.word	0x40004400
 8000cf0:	40021000 	.word	0x40021000

08000cf4 <Reset_Handler>:
 8000cf4:	480d      	ldr	r0, [pc, #52]	; (8000d2c <LoopForever+0x2>)
 8000cf6:	4685      	mov	sp, r0
 8000cf8:	480d      	ldr	r0, [pc, #52]	; (8000d30 <LoopForever+0x6>)
 8000cfa:	490e      	ldr	r1, [pc, #56]	; (8000d34 <LoopForever+0xa>)
 8000cfc:	4a0e      	ldr	r2, [pc, #56]	; (8000d38 <LoopForever+0xe>)
 8000cfe:	2300      	movs	r3, #0
 8000d00:	e002      	b.n	8000d08 <LoopCopyDataInit>

08000d02 <CopyDataInit>:
 8000d02:	58d4      	ldr	r4, [r2, r3]
 8000d04:	50c4      	str	r4, [r0, r3]
 8000d06:	3304      	adds	r3, #4

08000d08 <LoopCopyDataInit>:
 8000d08:	18c4      	adds	r4, r0, r3
 8000d0a:	428c      	cmp	r4, r1
 8000d0c:	d3f9      	bcc.n	8000d02 <CopyDataInit>
 8000d0e:	4a0b      	ldr	r2, [pc, #44]	; (8000d3c <LoopForever+0x12>)
 8000d10:	4c0b      	ldr	r4, [pc, #44]	; (8000d40 <LoopForever+0x16>)
 8000d12:	2300      	movs	r3, #0
 8000d14:	e001      	b.n	8000d1a <LoopFillZerobss>

08000d16 <FillZerobss>:
 8000d16:	6013      	str	r3, [r2, #0]
 8000d18:	3204      	adds	r2, #4

08000d1a <LoopFillZerobss>:
 8000d1a:	42a2      	cmp	r2, r4
 8000d1c:	d3fb      	bcc.n	8000d16 <FillZerobss>
 8000d1e:	f7ff ff33 	bl	8000b88 <SystemInit>
 8000d22:	f003 fd81 	bl	8004828 <__libc_init_array>
 8000d26:	f7ff fd93 	bl	8000850 <main>

08000d2a <LoopForever>:
 8000d2a:	e7fe      	b.n	8000d2a <LoopForever>
 8000d2c:	20008000 	.word	0x20008000
 8000d30:	20000000 	.word	0x20000000
 8000d34:	20000074 	.word	0x20000074
 8000d38:	080059c8 	.word	0x080059c8
 8000d3c:	20000074 	.word	0x20000074
 8000d40:	20000edc 	.word	0x20000edc

08000d44 <ADC1_2_IRQHandler>:
 8000d44:	e7fe      	b.n	8000d44 <ADC1_2_IRQHandler>

08000d46 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b082      	sub	sp, #8
 8000d4a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d50:	2003      	movs	r0, #3
 8000d52:	f000 f93d 	bl	8000fd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d56:	200f      	movs	r0, #15
 8000d58:	f000 f80e 	bl	8000d78 <HAL_InitTick>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d002      	beq.n	8000d68 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	71fb      	strb	r3, [r7, #7]
 8000d66:	e001      	b.n	8000d6c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d68:	f7ff fe1e 	bl	80009a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d6c:	79fb      	ldrb	r3, [r7, #7]

}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
	...

08000d78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d80:	2300      	movs	r3, #0
 8000d82:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000d84:	4b16      	ldr	r3, [pc, #88]	; (8000de0 <HAL_InitTick+0x68>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d022      	beq.n	8000dd2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000d8c:	4b15      	ldr	r3, [pc, #84]	; (8000de4 <HAL_InitTick+0x6c>)
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	4b13      	ldr	r3, [pc, #76]	; (8000de0 <HAL_InitTick+0x68>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d98:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000da0:	4618      	mov	r0, r3
 8000da2:	f000 f93a 	bl	800101a <HAL_SYSTICK_Config>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d10f      	bne.n	8000dcc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2b0f      	cmp	r3, #15
 8000db0:	d809      	bhi.n	8000dc6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000db2:	2200      	movs	r2, #0
 8000db4:	6879      	ldr	r1, [r7, #4]
 8000db6:	f04f 30ff 	mov.w	r0, #4294967295
 8000dba:	f000 f914 	bl	8000fe6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dbe:	4a0a      	ldr	r2, [pc, #40]	; (8000de8 <HAL_InitTick+0x70>)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6013      	str	r3, [r2, #0]
 8000dc4:	e007      	b.n	8000dd6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	73fb      	strb	r3, [r7, #15]
 8000dca:	e004      	b.n	8000dd6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	73fb      	strb	r3, [r7, #15]
 8000dd0:	e001      	b.n	8000dd6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000dd6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3710      	adds	r7, #16
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	20000008 	.word	0x20000008
 8000de4:	20000000 	.word	0x20000000
 8000de8:	20000004 	.word	0x20000004

08000dec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000df0:	4b05      	ldr	r3, [pc, #20]	; (8000e08 <HAL_IncTick+0x1c>)
 8000df2:	681a      	ldr	r2, [r3, #0]
 8000df4:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <HAL_IncTick+0x20>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4413      	add	r3, r2
 8000dfa:	4a03      	ldr	r2, [pc, #12]	; (8000e08 <HAL_IncTick+0x1c>)
 8000dfc:	6013      	str	r3, [r2, #0]
}
 8000dfe:	bf00      	nop
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr
 8000e08:	20000174 	.word	0x20000174
 8000e0c:	20000008 	.word	0x20000008

08000e10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  return uwTick;
 8000e14:	4b03      	ldr	r3, [pc, #12]	; (8000e24 <HAL_GetTick+0x14>)
 8000e16:	681b      	ldr	r3, [r3, #0]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	20000174 	.word	0x20000174

08000e28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e30:	f7ff ffee 	bl	8000e10 <HAL_GetTick>
 8000e34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e40:	d004      	beq.n	8000e4c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e42:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <HAL_Delay+0x40>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	68fa      	ldr	r2, [r7, #12]
 8000e48:	4413      	add	r3, r2
 8000e4a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e4c:	bf00      	nop
 8000e4e:	f7ff ffdf 	bl	8000e10 <HAL_GetTick>
 8000e52:	4602      	mov	r2, r0
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	1ad3      	subs	r3, r2, r3
 8000e58:	68fa      	ldr	r2, [r7, #12]
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	d8f7      	bhi.n	8000e4e <HAL_Delay+0x26>
  {
  }
}
 8000e5e:	bf00      	nop
 8000e60:	bf00      	nop
 8000e62:	3710      	adds	r7, #16
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	20000008 	.word	0x20000008

08000e6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b085      	sub	sp, #20
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f003 0307 	and.w	r3, r3, #7
 8000e7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e7c:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e82:	68ba      	ldr	r2, [r7, #8]
 8000e84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e88:	4013      	ands	r3, r2
 8000e8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e9e:	4a04      	ldr	r2, [pc, #16]	; (8000eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	60d3      	str	r3, [r2, #12]
}
 8000ea4:	bf00      	nop
 8000ea6:	3714      	adds	r7, #20
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	e000ed00 	.word	0xe000ed00

08000eb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000eb8:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <__NVIC_GetPriorityGrouping+0x18>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	0a1b      	lsrs	r3, r3, #8
 8000ebe:	f003 0307 	and.w	r3, r3, #7
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	e000ed00 	.word	0xe000ed00

08000ed0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	6039      	str	r1, [r7, #0]
 8000eda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000edc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	db0a      	blt.n	8000efa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	490c      	ldr	r1, [pc, #48]	; (8000f1c <__NVIC_SetPriority+0x4c>)
 8000eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eee:	0112      	lsls	r2, r2, #4
 8000ef0:	b2d2      	uxtb	r2, r2
 8000ef2:	440b      	add	r3, r1
 8000ef4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ef8:	e00a      	b.n	8000f10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	b2da      	uxtb	r2, r3
 8000efe:	4908      	ldr	r1, [pc, #32]	; (8000f20 <__NVIC_SetPriority+0x50>)
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	f003 030f 	and.w	r3, r3, #15
 8000f06:	3b04      	subs	r3, #4
 8000f08:	0112      	lsls	r2, r2, #4
 8000f0a:	b2d2      	uxtb	r2, r2
 8000f0c:	440b      	add	r3, r1
 8000f0e:	761a      	strb	r2, [r3, #24]
}
 8000f10:	bf00      	nop
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	e000e100 	.word	0xe000e100
 8000f20:	e000ed00 	.word	0xe000ed00

08000f24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b089      	sub	sp, #36	; 0x24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	f003 0307 	and.w	r3, r3, #7
 8000f36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	f1c3 0307 	rsb	r3, r3, #7
 8000f3e:	2b04      	cmp	r3, #4
 8000f40:	bf28      	it	cs
 8000f42:	2304      	movcs	r3, #4
 8000f44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	3304      	adds	r3, #4
 8000f4a:	2b06      	cmp	r3, #6
 8000f4c:	d902      	bls.n	8000f54 <NVIC_EncodePriority+0x30>
 8000f4e:	69fb      	ldr	r3, [r7, #28]
 8000f50:	3b03      	subs	r3, #3
 8000f52:	e000      	b.n	8000f56 <NVIC_EncodePriority+0x32>
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f58:	f04f 32ff 	mov.w	r2, #4294967295
 8000f5c:	69bb      	ldr	r3, [r7, #24]
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	43da      	mvns	r2, r3
 8000f64:	68bb      	ldr	r3, [r7, #8]
 8000f66:	401a      	ands	r2, r3
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	fa01 f303 	lsl.w	r3, r1, r3
 8000f76:	43d9      	mvns	r1, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f7c:	4313      	orrs	r3, r2
         );
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3724      	adds	r7, #36	; 0x24
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
	...

08000f8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3b01      	subs	r3, #1
 8000f98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f9c:	d301      	bcc.n	8000fa2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e00f      	b.n	8000fc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fa2:	4a0a      	ldr	r2, [pc, #40]	; (8000fcc <SysTick_Config+0x40>)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000faa:	210f      	movs	r1, #15
 8000fac:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb0:	f7ff ff8e 	bl	8000ed0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fb4:	4b05      	ldr	r3, [pc, #20]	; (8000fcc <SysTick_Config+0x40>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fba:	4b04      	ldr	r3, [pc, #16]	; (8000fcc <SysTick_Config+0x40>)
 8000fbc:	2207      	movs	r2, #7
 8000fbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fc0:	2300      	movs	r3, #0
}
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	3708      	adds	r7, #8
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	e000e010 	.word	0xe000e010

08000fd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fd8:	6878      	ldr	r0, [r7, #4]
 8000fda:	f7ff ff47 	bl	8000e6c <__NVIC_SetPriorityGrouping>
}
 8000fde:	bf00      	nop
 8000fe0:	3708      	adds	r7, #8
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b086      	sub	sp, #24
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	4603      	mov	r3, r0
 8000fee:	60b9      	str	r1, [r7, #8]
 8000ff0:	607a      	str	r2, [r7, #4]
 8000ff2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ff4:	f7ff ff5e 	bl	8000eb4 <__NVIC_GetPriorityGrouping>
 8000ff8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	68b9      	ldr	r1, [r7, #8]
 8000ffe:	6978      	ldr	r0, [r7, #20]
 8001000:	f7ff ff90 	bl	8000f24 <NVIC_EncodePriority>
 8001004:	4602      	mov	r2, r0
 8001006:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800100a:	4611      	mov	r1, r2
 800100c:	4618      	mov	r0, r3
 800100e:	f7ff ff5f 	bl	8000ed0 <__NVIC_SetPriority>
}
 8001012:	bf00      	nop
 8001014:	3718      	adds	r7, #24
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b082      	sub	sp, #8
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f7ff ffb2 	bl	8000f8c <SysTick_Config>
 8001028:	4603      	mov	r3, r0
}
 800102a:	4618      	mov	r0, r3
 800102c:	3708      	adds	r7, #8
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
	...

08001034 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001034:	b480      	push	{r7}
 8001036:	b087      	sub	sp, #28
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800103e:	2300      	movs	r3, #0
 8001040:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001042:	e15a      	b.n	80012fa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	681a      	ldr	r2, [r3, #0]
 8001048:	2101      	movs	r1, #1
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	fa01 f303 	lsl.w	r3, r1, r3
 8001050:	4013      	ands	r3, r2
 8001052:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	2b00      	cmp	r3, #0
 8001058:	f000 814c 	beq.w	80012f4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f003 0303 	and.w	r3, r3, #3
 8001064:	2b01      	cmp	r3, #1
 8001066:	d005      	beq.n	8001074 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685b      	ldr	r3, [r3, #4]
 800106c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001070:	2b02      	cmp	r3, #2
 8001072:	d130      	bne.n	80010d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	689b      	ldr	r3, [r3, #8]
 8001078:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	2203      	movs	r2, #3
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	43db      	mvns	r3, r3
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	4013      	ands	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	68da      	ldr	r2, [r3, #12]
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	4313      	orrs	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010aa:	2201      	movs	r2, #1
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	43db      	mvns	r3, r3
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	4013      	ands	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	091b      	lsrs	r3, r3, #4
 80010c0:	f003 0201 	and.w	r2, r3, #1
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f003 0303 	and.w	r3, r3, #3
 80010de:	2b03      	cmp	r3, #3
 80010e0:	d017      	beq.n	8001112 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	68db      	ldr	r3, [r3, #12]
 80010e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	2203      	movs	r2, #3
 80010ee:	fa02 f303 	lsl.w	r3, r2, r3
 80010f2:	43db      	mvns	r3, r3
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	4013      	ands	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	689a      	ldr	r2, [r3, #8]
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	4313      	orrs	r3, r2
 800110a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001112:	683b      	ldr	r3, [r7, #0]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	f003 0303 	and.w	r3, r3, #3
 800111a:	2b02      	cmp	r3, #2
 800111c:	d123      	bne.n	8001166 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	08da      	lsrs	r2, r3, #3
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	3208      	adds	r2, #8
 8001126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800112a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	220f      	movs	r2, #15
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	43db      	mvns	r3, r3
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	4013      	ands	r3, r2
 8001140:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	691a      	ldr	r2, [r3, #16]
 8001146:	697b      	ldr	r3, [r7, #20]
 8001148:	f003 0307 	and.w	r3, r3, #7
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	fa02 f303 	lsl.w	r3, r2, r3
 8001152:	693a      	ldr	r2, [r7, #16]
 8001154:	4313      	orrs	r3, r2
 8001156:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	08da      	lsrs	r2, r3, #3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3208      	adds	r2, #8
 8001160:	6939      	ldr	r1, [r7, #16]
 8001162:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	005b      	lsls	r3, r3, #1
 8001170:	2203      	movs	r2, #3
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	43db      	mvns	r3, r3
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	4013      	ands	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	f003 0203 	and.w	r2, r3, #3
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	fa02 f303 	lsl.w	r3, r2, r3
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	4313      	orrs	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	f000 80a6 	beq.w	80012f4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a8:	4b5b      	ldr	r3, [pc, #364]	; (8001318 <HAL_GPIO_Init+0x2e4>)
 80011aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ac:	4a5a      	ldr	r2, [pc, #360]	; (8001318 <HAL_GPIO_Init+0x2e4>)
 80011ae:	f043 0301 	orr.w	r3, r3, #1
 80011b2:	6613      	str	r3, [r2, #96]	; 0x60
 80011b4:	4b58      	ldr	r3, [pc, #352]	; (8001318 <HAL_GPIO_Init+0x2e4>)
 80011b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011b8:	f003 0301 	and.w	r3, r3, #1
 80011bc:	60bb      	str	r3, [r7, #8]
 80011be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011c0:	4a56      	ldr	r2, [pc, #344]	; (800131c <HAL_GPIO_Init+0x2e8>)
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	089b      	lsrs	r3, r3, #2
 80011c6:	3302      	adds	r3, #2
 80011c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	f003 0303 	and.w	r3, r3, #3
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	220f      	movs	r2, #15
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	43db      	mvns	r3, r3
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	4013      	ands	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011ea:	d01f      	beq.n	800122c <HAL_GPIO_Init+0x1f8>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4a4c      	ldr	r2, [pc, #304]	; (8001320 <HAL_GPIO_Init+0x2ec>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d019      	beq.n	8001228 <HAL_GPIO_Init+0x1f4>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4a4b      	ldr	r2, [pc, #300]	; (8001324 <HAL_GPIO_Init+0x2f0>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d013      	beq.n	8001224 <HAL_GPIO_Init+0x1f0>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4a4a      	ldr	r2, [pc, #296]	; (8001328 <HAL_GPIO_Init+0x2f4>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d00d      	beq.n	8001220 <HAL_GPIO_Init+0x1ec>
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	4a49      	ldr	r2, [pc, #292]	; (800132c <HAL_GPIO_Init+0x2f8>)
 8001208:	4293      	cmp	r3, r2
 800120a:	d007      	beq.n	800121c <HAL_GPIO_Init+0x1e8>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	4a48      	ldr	r2, [pc, #288]	; (8001330 <HAL_GPIO_Init+0x2fc>)
 8001210:	4293      	cmp	r3, r2
 8001212:	d101      	bne.n	8001218 <HAL_GPIO_Init+0x1e4>
 8001214:	2305      	movs	r3, #5
 8001216:	e00a      	b.n	800122e <HAL_GPIO_Init+0x1fa>
 8001218:	2306      	movs	r3, #6
 800121a:	e008      	b.n	800122e <HAL_GPIO_Init+0x1fa>
 800121c:	2304      	movs	r3, #4
 800121e:	e006      	b.n	800122e <HAL_GPIO_Init+0x1fa>
 8001220:	2303      	movs	r3, #3
 8001222:	e004      	b.n	800122e <HAL_GPIO_Init+0x1fa>
 8001224:	2302      	movs	r3, #2
 8001226:	e002      	b.n	800122e <HAL_GPIO_Init+0x1fa>
 8001228:	2301      	movs	r3, #1
 800122a:	e000      	b.n	800122e <HAL_GPIO_Init+0x1fa>
 800122c:	2300      	movs	r3, #0
 800122e:	697a      	ldr	r2, [r7, #20]
 8001230:	f002 0203 	and.w	r2, r2, #3
 8001234:	0092      	lsls	r2, r2, #2
 8001236:	4093      	lsls	r3, r2
 8001238:	693a      	ldr	r2, [r7, #16]
 800123a:	4313      	orrs	r3, r2
 800123c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800123e:	4937      	ldr	r1, [pc, #220]	; (800131c <HAL_GPIO_Init+0x2e8>)
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	089b      	lsrs	r3, r3, #2
 8001244:	3302      	adds	r3, #2
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800124c:	4b39      	ldr	r3, [pc, #228]	; (8001334 <HAL_GPIO_Init+0x300>)
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	43db      	mvns	r3, r3
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	4013      	ands	r3, r2
 800125a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001264:	2b00      	cmp	r3, #0
 8001266:	d003      	beq.n	8001270 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	4313      	orrs	r3, r2
 800126e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001270:	4a30      	ldr	r2, [pc, #192]	; (8001334 <HAL_GPIO_Init+0x300>)
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001276:	4b2f      	ldr	r3, [pc, #188]	; (8001334 <HAL_GPIO_Init+0x300>)
 8001278:	68db      	ldr	r3, [r3, #12]
 800127a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	43db      	mvns	r3, r3
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	4013      	ands	r3, r2
 8001284:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d003      	beq.n	800129a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	4313      	orrs	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800129a:	4a26      	ldr	r2, [pc, #152]	; (8001334 <HAL_GPIO_Init+0x300>)
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80012a0:	4b24      	ldr	r3, [pc, #144]	; (8001334 <HAL_GPIO_Init+0x300>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	43db      	mvns	r3, r3
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	4013      	ands	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d003      	beq.n	80012c4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012c4:	4a1b      	ldr	r2, [pc, #108]	; (8001334 <HAL_GPIO_Init+0x300>)
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80012ca:	4b1a      	ldr	r3, [pc, #104]	; (8001334 <HAL_GPIO_Init+0x300>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	43db      	mvns	r3, r3
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	4013      	ands	r3, r2
 80012d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012ee:	4a11      	ldr	r2, [pc, #68]	; (8001334 <HAL_GPIO_Init+0x300>)
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	3301      	adds	r3, #1
 80012f8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	fa22 f303 	lsr.w	r3, r2, r3
 8001304:	2b00      	cmp	r3, #0
 8001306:	f47f ae9d 	bne.w	8001044 <HAL_GPIO_Init+0x10>
  }
}
 800130a:	bf00      	nop
 800130c:	bf00      	nop
 800130e:	371c      	adds	r7, #28
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	40021000 	.word	0x40021000
 800131c:	40010000 	.word	0x40010000
 8001320:	48000400 	.word	0x48000400
 8001324:	48000800 	.word	0x48000800
 8001328:	48000c00 	.word	0x48000c00
 800132c:	48001000 	.word	0x48001000
 8001330:	48001400 	.word	0x48001400
 8001334:	40010400 	.word	0x40010400

08001338 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
 8001340:	460b      	mov	r3, r1
 8001342:	807b      	strh	r3, [r7, #2]
 8001344:	4613      	mov	r3, r2
 8001346:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001348:	787b      	ldrb	r3, [r7, #1]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d003      	beq.n	8001356 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800134e:	887a      	ldrh	r2, [r7, #2]
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001354:	e002      	b.n	800135c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001356:	887a      	ldrh	r2, [r7, #2]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800135c:	bf00      	nop
 800135e:	370c      	adds	r7, #12
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d101      	bne.n	800137a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e081      	b.n	800147e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001380:	b2db      	uxtb	r3, r3
 8001382:	2b00      	cmp	r3, #0
 8001384:	d106      	bne.n	8001394 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f7ff f9f2 	bl	8000778 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2224      	movs	r2, #36	; 0x24
 8001398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f022 0201 	bic.w	r2, r2, #1
 80013aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	685a      	ldr	r2, [r3, #4]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	689a      	ldr	r2, [r3, #8]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013c8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	68db      	ldr	r3, [r3, #12]
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d107      	bne.n	80013e2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	689a      	ldr	r2, [r3, #8]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	e006      	b.n	80013f0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	689a      	ldr	r2, [r3, #8]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80013ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	68db      	ldr	r3, [r3, #12]
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d104      	bne.n	8001402 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001400:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	6812      	ldr	r2, [r2, #0]
 800140c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001410:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001414:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	68da      	ldr	r2, [r3, #12]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001424:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	691a      	ldr	r2, [r3, #16]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	695b      	ldr	r3, [r3, #20]
 800142e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	699b      	ldr	r3, [r3, #24]
 8001436:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	430a      	orrs	r2, r1
 800143e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	69d9      	ldr	r1, [r3, #28]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a1a      	ldr	r2, [r3, #32]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	430a      	orrs	r2, r1
 800144e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681a      	ldr	r2, [r3, #0]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f042 0201 	orr.w	r2, r2, #1
 800145e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2200      	movs	r2, #0
 8001464:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2220      	movs	r2, #32
 800146a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b08a      	sub	sp, #40	; 0x28
 800148a:	af02      	add	r7, sp, #8
 800148c:	60f8      	str	r0, [r7, #12]
 800148e:	607a      	str	r2, [r7, #4]
 8001490:	603b      	str	r3, [r7, #0]
 8001492:	460b      	mov	r3, r1
 8001494:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8001496:	2300      	movs	r3, #0
 8001498:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	2b20      	cmp	r3, #32
 80014a4:	f040 80f1 	bne.w	800168a <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	699b      	ldr	r3, [r3, #24]
 80014ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80014b6:	d101      	bne.n	80014bc <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80014b8:	2302      	movs	r3, #2
 80014ba:	e0e7      	b.n	800168c <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d101      	bne.n	80014ca <HAL_I2C_IsDeviceReady+0x44>
 80014c6:	2302      	movs	r3, #2
 80014c8:	e0e0      	b.n	800168c <HAL_I2C_IsDeviceReady+0x206>
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	2201      	movs	r2, #1
 80014ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	2224      	movs	r2, #36	; 0x24
 80014d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2200      	movs	r2, #0
 80014de:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d107      	bne.n	80014f8 <HAL_I2C_IsDeviceReady+0x72>
 80014e8:	897b      	ldrh	r3, [r7, #10]
 80014ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014ee:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80014f2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80014f6:	e004      	b.n	8001502 <HAL_I2C_IsDeviceReady+0x7c>
 80014f8:	897b      	ldrh	r3, [r7, #10]
 80014fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014fe:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8001502:	68fa      	ldr	r2, [r7, #12]
 8001504:	6812      	ldr	r2, [r2, #0]
 8001506:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001508:	f7ff fc82 	bl	8000e10 <HAL_GetTick>
 800150c:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	699b      	ldr	r3, [r3, #24]
 8001514:	f003 0320 	and.w	r3, r3, #32
 8001518:	2b20      	cmp	r3, #32
 800151a:	bf0c      	ite	eq
 800151c:	2301      	moveq	r3, #1
 800151e:	2300      	movne	r3, #0
 8001520:	b2db      	uxtb	r3, r3
 8001522:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	699b      	ldr	r3, [r3, #24]
 800152a:	f003 0310 	and.w	r3, r3, #16
 800152e:	2b10      	cmp	r3, #16
 8001530:	bf0c      	ite	eq
 8001532:	2301      	moveq	r3, #1
 8001534:	2300      	movne	r3, #0
 8001536:	b2db      	uxtb	r3, r3
 8001538:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 800153a:	e034      	b.n	80015a6 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001542:	d01a      	beq.n	800157a <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001544:	f7ff fc64 	bl	8000e10 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	683a      	ldr	r2, [r7, #0]
 8001550:	429a      	cmp	r2, r3
 8001552:	d302      	bcc.n	800155a <HAL_I2C_IsDeviceReady+0xd4>
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d10f      	bne.n	800157a <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	2220      	movs	r2, #32
 800155e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001566:	f043 0220 	orr.w	r2, r3, #32
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	2200      	movs	r2, #0
 8001572:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e088      	b.n	800168c <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	699b      	ldr	r3, [r3, #24]
 8001580:	f003 0320 	and.w	r3, r3, #32
 8001584:	2b20      	cmp	r3, #32
 8001586:	bf0c      	ite	eq
 8001588:	2301      	moveq	r3, #1
 800158a:	2300      	movne	r3, #0
 800158c:	b2db      	uxtb	r3, r3
 800158e:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	699b      	ldr	r3, [r3, #24]
 8001596:	f003 0310 	and.w	r3, r3, #16
 800159a:	2b10      	cmp	r3, #16
 800159c:	bf0c      	ite	eq
 800159e:	2301      	moveq	r3, #1
 80015a0:	2300      	movne	r3, #0
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80015a6:	7ffb      	ldrb	r3, [r7, #31]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d102      	bne.n	80015b2 <HAL_I2C_IsDeviceReady+0x12c>
 80015ac:	7fbb      	ldrb	r3, [r7, #30]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d0c4      	beq.n	800153c <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	699b      	ldr	r3, [r3, #24]
 80015b8:	f003 0310 	and.w	r3, r3, #16
 80015bc:	2b10      	cmp	r3, #16
 80015be:	d01a      	beq.n	80015f6 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	9300      	str	r3, [sp, #0]
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	2200      	movs	r2, #0
 80015c8:	2120      	movs	r1, #32
 80015ca:	68f8      	ldr	r0, [r7, #12]
 80015cc:	f000 f862 	bl	8001694 <I2C_WaitOnFlagUntilTimeout>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80015d6:	2301      	movs	r3, #1
 80015d8:	e058      	b.n	800168c <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	2220      	movs	r2, #32
 80015e0:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	2220      	movs	r2, #32
 80015e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80015f2:	2300      	movs	r3, #0
 80015f4:	e04a      	b.n	800168c <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	9300      	str	r3, [sp, #0]
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	2200      	movs	r2, #0
 80015fe:	2120      	movs	r1, #32
 8001600:	68f8      	ldr	r0, [r7, #12]
 8001602:	f000 f847 	bl	8001694 <I2C_WaitOnFlagUntilTimeout>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e03d      	b.n	800168c <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	2210      	movs	r2, #16
 8001616:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2220      	movs	r2, #32
 800161e:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	429a      	cmp	r2, r3
 8001626:	d118      	bne.n	800165a <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	685a      	ldr	r2, [r3, #4]
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001636:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001638:	69bb      	ldr	r3, [r7, #24]
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	2200      	movs	r2, #0
 8001640:	2120      	movs	r1, #32
 8001642:	68f8      	ldr	r0, [r7, #12]
 8001644:	f000 f826 	bl	8001694 <I2C_WaitOnFlagUntilTimeout>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e01c      	b.n	800168c <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	2220      	movs	r2, #32
 8001658:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	3301      	adds	r3, #1
 800165e:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	429a      	cmp	r2, r3
 8001666:	f63f af3b 	bhi.w	80014e0 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	2220      	movs	r2, #32
 800166e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001676:	f043 0220 	orr.w	r2, r3, #32
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	2200      	movs	r2, #0
 8001682:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	e000      	b.n	800168c <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 800168a:	2302      	movs	r3, #2
  }
}
 800168c:	4618      	mov	r0, r3
 800168e:	3720      	adds	r7, #32
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	603b      	str	r3, [r7, #0]
 80016a0:	4613      	mov	r3, r2
 80016a2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80016a4:	e022      	b.n	80016ec <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016ac:	d01e      	beq.n	80016ec <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80016ae:	f7ff fbaf 	bl	8000e10 <HAL_GetTick>
 80016b2:	4602      	mov	r2, r0
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	683a      	ldr	r2, [r7, #0]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	d302      	bcc.n	80016c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d113      	bne.n	80016ec <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c8:	f043 0220 	orr.w	r2, r3, #32
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	2220      	movs	r2, #32
 80016d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2200      	movs	r2, #0
 80016dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	2200      	movs	r2, #0
 80016e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e00f      	b.n	800170c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	699a      	ldr	r2, [r3, #24]
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	4013      	ands	r3, r2
 80016f6:	68ba      	ldr	r2, [r7, #8]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	bf0c      	ite	eq
 80016fc:	2301      	moveq	r3, #1
 80016fe:	2300      	movne	r3, #0
 8001700:	b2db      	uxtb	r3, r3
 8001702:	461a      	mov	r2, r3
 8001704:	79fb      	ldrb	r3, [r7, #7]
 8001706:	429a      	cmp	r2, r3
 8001708:	d0cd      	beq.n	80016a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800170a:	2300      	movs	r3, #0
}
 800170c:	4618      	mov	r0, r3
 800170e:	3710      	adds	r7, #16
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}

08001714 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001714:	b480      	push	{r7}
 8001716:	b083      	sub	sp, #12
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2b20      	cmp	r3, #32
 8001728:	d138      	bne.n	800179c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001730:	2b01      	cmp	r3, #1
 8001732:	d101      	bne.n	8001738 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001734:	2302      	movs	r3, #2
 8001736:	e032      	b.n	800179e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2201      	movs	r2, #1
 800173c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2224      	movs	r2, #36	; 0x24
 8001744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	681a      	ldr	r2, [r3, #0]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f022 0201 	bic.w	r2, r2, #1
 8001756:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001766:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6819      	ldr	r1, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	683a      	ldr	r2, [r7, #0]
 8001774:	430a      	orrs	r2, r1
 8001776:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f042 0201 	orr.w	r2, r2, #1
 8001786:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2220      	movs	r2, #32
 800178c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001798:	2300      	movs	r3, #0
 800179a:	e000      	b.n	800179e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800179c:	2302      	movs	r3, #2
  }
}
 800179e:	4618      	mov	r0, r3
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr

080017aa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80017aa:	b480      	push	{r7}
 80017ac:	b085      	sub	sp, #20
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
 80017b2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	2b20      	cmp	r3, #32
 80017be:	d139      	bne.n	8001834 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d101      	bne.n	80017ce <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80017ca:	2302      	movs	r3, #2
 80017cc:	e033      	b.n	8001836 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2201      	movs	r2, #1
 80017d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2224      	movs	r2, #36	; 0x24
 80017da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f022 0201 	bic.w	r2, r2, #1
 80017ec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80017fc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	021b      	lsls	r3, r3, #8
 8001802:	68fa      	ldr	r2, [r7, #12]
 8001804:	4313      	orrs	r3, r2
 8001806:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	68fa      	ldr	r2, [r7, #12]
 800180e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f042 0201 	orr.w	r2, r2, #1
 800181e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2220      	movs	r2, #32
 8001824:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001830:	2300      	movs	r3, #0
 8001832:	e000      	b.n	8001836 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001834:	2302      	movs	r3, #2
  }
}
 8001836:	4618      	mov	r0, r3
 8001838:	3714      	adds	r7, #20
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
	...

08001844 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d141      	bne.n	80018d6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001852:	4b4b      	ldr	r3, [pc, #300]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800185a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800185e:	d131      	bne.n	80018c4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001860:	4b47      	ldr	r3, [pc, #284]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001862:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001866:	4a46      	ldr	r2, [pc, #280]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001868:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800186c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001870:	4b43      	ldr	r3, [pc, #268]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001878:	4a41      	ldr	r2, [pc, #260]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800187a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800187e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001880:	4b40      	ldr	r3, [pc, #256]	; (8001984 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	2232      	movs	r2, #50	; 0x32
 8001886:	fb02 f303 	mul.w	r3, r2, r3
 800188a:	4a3f      	ldr	r2, [pc, #252]	; (8001988 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800188c:	fba2 2303 	umull	r2, r3, r2, r3
 8001890:	0c9b      	lsrs	r3, r3, #18
 8001892:	3301      	adds	r3, #1
 8001894:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001896:	e002      	b.n	800189e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	3b01      	subs	r3, #1
 800189c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800189e:	4b38      	ldr	r3, [pc, #224]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018a0:	695b      	ldr	r3, [r3, #20]
 80018a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018aa:	d102      	bne.n	80018b2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1f2      	bne.n	8001898 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018b2:	4b33      	ldr	r3, [pc, #204]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018b4:	695b      	ldr	r3, [r3, #20]
 80018b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018be:	d158      	bne.n	8001972 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e057      	b.n	8001974 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018c4:	4b2e      	ldr	r3, [pc, #184]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018ca:	4a2d      	ldr	r2, [pc, #180]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80018d4:	e04d      	b.n	8001972 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018dc:	d141      	bne.n	8001962 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80018de:	4b28      	ldr	r3, [pc, #160]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018ea:	d131      	bne.n	8001950 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80018ec:	4b24      	ldr	r3, [pc, #144]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80018f2:	4a23      	ldr	r2, [pc, #140]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80018fc:	4b20      	ldr	r3, [pc, #128]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001904:	4a1e      	ldr	r2, [pc, #120]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001906:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800190a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800190c:	4b1d      	ldr	r3, [pc, #116]	; (8001984 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2232      	movs	r2, #50	; 0x32
 8001912:	fb02 f303 	mul.w	r3, r2, r3
 8001916:	4a1c      	ldr	r2, [pc, #112]	; (8001988 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001918:	fba2 2303 	umull	r2, r3, r2, r3
 800191c:	0c9b      	lsrs	r3, r3, #18
 800191e:	3301      	adds	r3, #1
 8001920:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001922:	e002      	b.n	800192a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	3b01      	subs	r3, #1
 8001928:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800192a:	4b15      	ldr	r3, [pc, #84]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800192c:	695b      	ldr	r3, [r3, #20]
 800192e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001932:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001936:	d102      	bne.n	800193e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d1f2      	bne.n	8001924 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800193e:	4b10      	ldr	r3, [pc, #64]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001940:	695b      	ldr	r3, [r3, #20]
 8001942:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001946:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800194a:	d112      	bne.n	8001972 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800194c:	2303      	movs	r3, #3
 800194e:	e011      	b.n	8001974 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001950:	4b0b      	ldr	r3, [pc, #44]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001952:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001956:	4a0a      	ldr	r2, [pc, #40]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001958:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800195c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001960:	e007      	b.n	8001972 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001962:	4b07      	ldr	r3, [pc, #28]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800196a:	4a05      	ldr	r2, [pc, #20]	; (8001980 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800196c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001970:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001972:	2300      	movs	r3, #0
}
 8001974:	4618      	mov	r0, r3
 8001976:	3714      	adds	r7, #20
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr
 8001980:	40007000 	.word	0x40007000
 8001984:	20000000 	.word	0x20000000
 8001988:	431bde83 	.word	0x431bde83

0800198c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001990:	4b05      	ldr	r3, [pc, #20]	; (80019a8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	4a04      	ldr	r2, [pc, #16]	; (80019a8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001996:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800199a:	6093      	str	r3, [r2, #8]
}
 800199c:	bf00      	nop
 800199e:	46bd      	mov	sp, r7
 80019a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a4:	4770      	bx	lr
 80019a6:	bf00      	nop
 80019a8:	40007000 	.word	0x40007000

080019ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b088      	sub	sp, #32
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d101      	bne.n	80019be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e306      	b.n	8001fcc <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0301 	and.w	r3, r3, #1
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d075      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80019ca:	4b97      	ldr	r3, [pc, #604]	; (8001c28 <HAL_RCC_OscConfig+0x27c>)
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	f003 030c 	and.w	r3, r3, #12
 80019d2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80019d4:	4b94      	ldr	r3, [pc, #592]	; (8001c28 <HAL_RCC_OscConfig+0x27c>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	f003 0303 	and.w	r3, r3, #3
 80019dc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	2b0c      	cmp	r3, #12
 80019e2:	d102      	bne.n	80019ea <HAL_RCC_OscConfig+0x3e>
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	2b03      	cmp	r3, #3
 80019e8:	d002      	beq.n	80019f0 <HAL_RCC_OscConfig+0x44>
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	2b08      	cmp	r3, #8
 80019ee:	d10b      	bne.n	8001a08 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019f0:	4b8d      	ldr	r3, [pc, #564]	; (8001c28 <HAL_RCC_OscConfig+0x27c>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d05b      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x108>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d157      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e2e1      	b.n	8001fcc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a10:	d106      	bne.n	8001a20 <HAL_RCC_OscConfig+0x74>
 8001a12:	4b85      	ldr	r3, [pc, #532]	; (8001c28 <HAL_RCC_OscConfig+0x27c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a84      	ldr	r2, [pc, #528]	; (8001c28 <HAL_RCC_OscConfig+0x27c>)
 8001a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a1c:	6013      	str	r3, [r2, #0]
 8001a1e:	e01d      	b.n	8001a5c <HAL_RCC_OscConfig+0xb0>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a28:	d10c      	bne.n	8001a44 <HAL_RCC_OscConfig+0x98>
 8001a2a:	4b7f      	ldr	r3, [pc, #508]	; (8001c28 <HAL_RCC_OscConfig+0x27c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a7e      	ldr	r2, [pc, #504]	; (8001c28 <HAL_RCC_OscConfig+0x27c>)
 8001a30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a34:	6013      	str	r3, [r2, #0]
 8001a36:	4b7c      	ldr	r3, [pc, #496]	; (8001c28 <HAL_RCC_OscConfig+0x27c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a7b      	ldr	r2, [pc, #492]	; (8001c28 <HAL_RCC_OscConfig+0x27c>)
 8001a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a40:	6013      	str	r3, [r2, #0]
 8001a42:	e00b      	b.n	8001a5c <HAL_RCC_OscConfig+0xb0>
 8001a44:	4b78      	ldr	r3, [pc, #480]	; (8001c28 <HAL_RCC_OscConfig+0x27c>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a77      	ldr	r2, [pc, #476]	; (8001c28 <HAL_RCC_OscConfig+0x27c>)
 8001a4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a4e:	6013      	str	r3, [r2, #0]
 8001a50:	4b75      	ldr	r3, [pc, #468]	; (8001c28 <HAL_RCC_OscConfig+0x27c>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a74      	ldr	r2, [pc, #464]	; (8001c28 <HAL_RCC_OscConfig+0x27c>)
 8001a56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d013      	beq.n	8001a8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a64:	f7ff f9d4 	bl	8000e10 <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a6c:	f7ff f9d0 	bl	8000e10 <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b64      	cmp	r3, #100	; 0x64
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e2a6      	b.n	8001fcc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a7e:	4b6a      	ldr	r3, [pc, #424]	; (8001c28 <HAL_RCC_OscConfig+0x27c>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d0f0      	beq.n	8001a6c <HAL_RCC_OscConfig+0xc0>
 8001a8a:	e014      	b.n	8001ab6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a8c:	f7ff f9c0 	bl	8000e10 <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a94:	f7ff f9bc 	bl	8000e10 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b64      	cmp	r3, #100	; 0x64
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e292      	b.n	8001fcc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001aa6:	4b60      	ldr	r3, [pc, #384]	; (8001c28 <HAL_RCC_OscConfig+0x27c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d1f0      	bne.n	8001a94 <HAL_RCC_OscConfig+0xe8>
 8001ab2:	e000      	b.n	8001ab6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ab4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d075      	beq.n	8001bae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ac2:	4b59      	ldr	r3, [pc, #356]	; (8001c28 <HAL_RCC_OscConfig+0x27c>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f003 030c 	and.w	r3, r3, #12
 8001aca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001acc:	4b56      	ldr	r3, [pc, #344]	; (8001c28 <HAL_RCC_OscConfig+0x27c>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	f003 0303 	and.w	r3, r3, #3
 8001ad4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	2b0c      	cmp	r3, #12
 8001ada:	d102      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x136>
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d002      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x13c>
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	2b04      	cmp	r3, #4
 8001ae6:	d11f      	bne.n	8001b28 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ae8:	4b4f      	ldr	r3, [pc, #316]	; (8001c28 <HAL_RCC_OscConfig+0x27c>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d005      	beq.n	8001b00 <HAL_RCC_OscConfig+0x154>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d101      	bne.n	8001b00 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e265      	b.n	8001fcc <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b00:	4b49      	ldr	r3, [pc, #292]	; (8001c28 <HAL_RCC_OscConfig+0x27c>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	691b      	ldr	r3, [r3, #16]
 8001b0c:	061b      	lsls	r3, r3, #24
 8001b0e:	4946      	ldr	r1, [pc, #280]	; (8001c28 <HAL_RCC_OscConfig+0x27c>)
 8001b10:	4313      	orrs	r3, r2
 8001b12:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001b14:	4b45      	ldr	r3, [pc, #276]	; (8001c2c <HAL_RCC_OscConfig+0x280>)
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff f92d 	bl	8000d78 <HAL_InitTick>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d043      	beq.n	8001bac <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e251      	b.n	8001fcc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d023      	beq.n	8001b78 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b30:	4b3d      	ldr	r3, [pc, #244]	; (8001c28 <HAL_RCC_OscConfig+0x27c>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a3c      	ldr	r2, [pc, #240]	; (8001c28 <HAL_RCC_OscConfig+0x27c>)
 8001b36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b3c:	f7ff f968 	bl	8000e10 <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b44:	f7ff f964 	bl	8000e10 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b02      	cmp	r3, #2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e23a      	b.n	8001fcc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b56:	4b34      	ldr	r3, [pc, #208]	; (8001c28 <HAL_RCC_OscConfig+0x27c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d0f0      	beq.n	8001b44 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b62:	4b31      	ldr	r3, [pc, #196]	; (8001c28 <HAL_RCC_OscConfig+0x27c>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	061b      	lsls	r3, r3, #24
 8001b70:	492d      	ldr	r1, [pc, #180]	; (8001c28 <HAL_RCC_OscConfig+0x27c>)
 8001b72:	4313      	orrs	r3, r2
 8001b74:	604b      	str	r3, [r1, #4]
 8001b76:	e01a      	b.n	8001bae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b78:	4b2b      	ldr	r3, [pc, #172]	; (8001c28 <HAL_RCC_OscConfig+0x27c>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a2a      	ldr	r2, [pc, #168]	; (8001c28 <HAL_RCC_OscConfig+0x27c>)
 8001b7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b84:	f7ff f944 	bl	8000e10 <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b8a:	e008      	b.n	8001b9e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b8c:	f7ff f940 	bl	8000e10 <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	2b02      	cmp	r3, #2
 8001b98:	d901      	bls.n	8001b9e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001b9a:	2303      	movs	r3, #3
 8001b9c:	e216      	b.n	8001fcc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b9e:	4b22      	ldr	r3, [pc, #136]	; (8001c28 <HAL_RCC_OscConfig+0x27c>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d1f0      	bne.n	8001b8c <HAL_RCC_OscConfig+0x1e0>
 8001baa:	e000      	b.n	8001bae <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0308 	and.w	r3, r3, #8
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d041      	beq.n	8001c3e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	695b      	ldr	r3, [r3, #20]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d01c      	beq.n	8001bfc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001bc2:	4b19      	ldr	r3, [pc, #100]	; (8001c28 <HAL_RCC_OscConfig+0x27c>)
 8001bc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bc8:	4a17      	ldr	r2, [pc, #92]	; (8001c28 <HAL_RCC_OscConfig+0x27c>)
 8001bca:	f043 0301 	orr.w	r3, r3, #1
 8001bce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bd2:	f7ff f91d 	bl	8000e10 <HAL_GetTick>
 8001bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bd8:	e008      	b.n	8001bec <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bda:	f7ff f919 	bl	8000e10 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e1ef      	b.n	8001fcc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001bec:	4b0e      	ldr	r3, [pc, #56]	; (8001c28 <HAL_RCC_OscConfig+0x27c>)
 8001bee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d0ef      	beq.n	8001bda <HAL_RCC_OscConfig+0x22e>
 8001bfa:	e020      	b.n	8001c3e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bfc:	4b0a      	ldr	r3, [pc, #40]	; (8001c28 <HAL_RCC_OscConfig+0x27c>)
 8001bfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c02:	4a09      	ldr	r2, [pc, #36]	; (8001c28 <HAL_RCC_OscConfig+0x27c>)
 8001c04:	f023 0301 	bic.w	r3, r3, #1
 8001c08:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c0c:	f7ff f900 	bl	8000e10 <HAL_GetTick>
 8001c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c12:	e00d      	b.n	8001c30 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c14:	f7ff f8fc 	bl	8000e10 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d906      	bls.n	8001c30 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e1d2      	b.n	8001fcc <HAL_RCC_OscConfig+0x620>
 8001c26:	bf00      	nop
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c30:	4b8c      	ldr	r3, [pc, #560]	; (8001e64 <HAL_RCC_OscConfig+0x4b8>)
 8001c32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1ea      	bne.n	8001c14 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0304 	and.w	r3, r3, #4
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	f000 80a6 	beq.w	8001d98 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001c50:	4b84      	ldr	r3, [pc, #528]	; (8001e64 <HAL_RCC_OscConfig+0x4b8>)
 8001c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d101      	bne.n	8001c60 <HAL_RCC_OscConfig+0x2b4>
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e000      	b.n	8001c62 <HAL_RCC_OscConfig+0x2b6>
 8001c60:	2300      	movs	r3, #0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d00d      	beq.n	8001c82 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c66:	4b7f      	ldr	r3, [pc, #508]	; (8001e64 <HAL_RCC_OscConfig+0x4b8>)
 8001c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c6a:	4a7e      	ldr	r2, [pc, #504]	; (8001e64 <HAL_RCC_OscConfig+0x4b8>)
 8001c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c70:	6593      	str	r3, [r2, #88]	; 0x58
 8001c72:	4b7c      	ldr	r3, [pc, #496]	; (8001e64 <HAL_RCC_OscConfig+0x4b8>)
 8001c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c82:	4b79      	ldr	r3, [pc, #484]	; (8001e68 <HAL_RCC_OscConfig+0x4bc>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d118      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c8e:	4b76      	ldr	r3, [pc, #472]	; (8001e68 <HAL_RCC_OscConfig+0x4bc>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a75      	ldr	r2, [pc, #468]	; (8001e68 <HAL_RCC_OscConfig+0x4bc>)
 8001c94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c9a:	f7ff f8b9 	bl	8000e10 <HAL_GetTick>
 8001c9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ca0:	e008      	b.n	8001cb4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ca2:	f7ff f8b5 	bl	8000e10 <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e18b      	b.n	8001fcc <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cb4:	4b6c      	ldr	r3, [pc, #432]	; (8001e68 <HAL_RCC_OscConfig+0x4bc>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d0f0      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d108      	bne.n	8001cda <HAL_RCC_OscConfig+0x32e>
 8001cc8:	4b66      	ldr	r3, [pc, #408]	; (8001e64 <HAL_RCC_OscConfig+0x4b8>)
 8001cca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cce:	4a65      	ldr	r2, [pc, #404]	; (8001e64 <HAL_RCC_OscConfig+0x4b8>)
 8001cd0:	f043 0301 	orr.w	r3, r3, #1
 8001cd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cd8:	e024      	b.n	8001d24 <HAL_RCC_OscConfig+0x378>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	2b05      	cmp	r3, #5
 8001ce0:	d110      	bne.n	8001d04 <HAL_RCC_OscConfig+0x358>
 8001ce2:	4b60      	ldr	r3, [pc, #384]	; (8001e64 <HAL_RCC_OscConfig+0x4b8>)
 8001ce4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ce8:	4a5e      	ldr	r2, [pc, #376]	; (8001e64 <HAL_RCC_OscConfig+0x4b8>)
 8001cea:	f043 0304 	orr.w	r3, r3, #4
 8001cee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001cf2:	4b5c      	ldr	r3, [pc, #368]	; (8001e64 <HAL_RCC_OscConfig+0x4b8>)
 8001cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cf8:	4a5a      	ldr	r2, [pc, #360]	; (8001e64 <HAL_RCC_OscConfig+0x4b8>)
 8001cfa:	f043 0301 	orr.w	r3, r3, #1
 8001cfe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d02:	e00f      	b.n	8001d24 <HAL_RCC_OscConfig+0x378>
 8001d04:	4b57      	ldr	r3, [pc, #348]	; (8001e64 <HAL_RCC_OscConfig+0x4b8>)
 8001d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d0a:	4a56      	ldr	r2, [pc, #344]	; (8001e64 <HAL_RCC_OscConfig+0x4b8>)
 8001d0c:	f023 0301 	bic.w	r3, r3, #1
 8001d10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d14:	4b53      	ldr	r3, [pc, #332]	; (8001e64 <HAL_RCC_OscConfig+0x4b8>)
 8001d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d1a:	4a52      	ldr	r2, [pc, #328]	; (8001e64 <HAL_RCC_OscConfig+0x4b8>)
 8001d1c:	f023 0304 	bic.w	r3, r3, #4
 8001d20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	689b      	ldr	r3, [r3, #8]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d016      	beq.n	8001d5a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d2c:	f7ff f870 	bl	8000e10 <HAL_GetTick>
 8001d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d32:	e00a      	b.n	8001d4a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d34:	f7ff f86c 	bl	8000e10 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d901      	bls.n	8001d4a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001d46:	2303      	movs	r3, #3
 8001d48:	e140      	b.n	8001fcc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d4a:	4b46      	ldr	r3, [pc, #280]	; (8001e64 <HAL_RCC_OscConfig+0x4b8>)
 8001d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d0ed      	beq.n	8001d34 <HAL_RCC_OscConfig+0x388>
 8001d58:	e015      	b.n	8001d86 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d5a:	f7ff f859 	bl	8000e10 <HAL_GetTick>
 8001d5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d60:	e00a      	b.n	8001d78 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d62:	f7ff f855 	bl	8000e10 <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d901      	bls.n	8001d78 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e129      	b.n	8001fcc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001d78:	4b3a      	ldr	r3, [pc, #232]	; (8001e64 <HAL_RCC_OscConfig+0x4b8>)
 8001d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1ed      	bne.n	8001d62 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d86:	7ffb      	ldrb	r3, [r7, #31]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d105      	bne.n	8001d98 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d8c:	4b35      	ldr	r3, [pc, #212]	; (8001e64 <HAL_RCC_OscConfig+0x4b8>)
 8001d8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d90:	4a34      	ldr	r2, [pc, #208]	; (8001e64 <HAL_RCC_OscConfig+0x4b8>)
 8001d92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d96:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0320 	and.w	r3, r3, #32
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d03c      	beq.n	8001e1e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	699b      	ldr	r3, [r3, #24]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d01c      	beq.n	8001de6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001dac:	4b2d      	ldr	r3, [pc, #180]	; (8001e64 <HAL_RCC_OscConfig+0x4b8>)
 8001dae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001db2:	4a2c      	ldr	r2, [pc, #176]	; (8001e64 <HAL_RCC_OscConfig+0x4b8>)
 8001db4:	f043 0301 	orr.w	r3, r3, #1
 8001db8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dbc:	f7ff f828 	bl	8000e10 <HAL_GetTick>
 8001dc0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001dc4:	f7ff f824 	bl	8000e10 <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e0fa      	b.n	8001fcc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001dd6:	4b23      	ldr	r3, [pc, #140]	; (8001e64 <HAL_RCC_OscConfig+0x4b8>)
 8001dd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ddc:	f003 0302 	and.w	r3, r3, #2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d0ef      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x418>
 8001de4:	e01b      	b.n	8001e1e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001de6:	4b1f      	ldr	r3, [pc, #124]	; (8001e64 <HAL_RCC_OscConfig+0x4b8>)
 8001de8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001dec:	4a1d      	ldr	r2, [pc, #116]	; (8001e64 <HAL_RCC_OscConfig+0x4b8>)
 8001dee:	f023 0301 	bic.w	r3, r3, #1
 8001df2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df6:	f7ff f80b 	bl	8000e10 <HAL_GetTick>
 8001dfa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001dfc:	e008      	b.n	8001e10 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001dfe:	f7ff f807 	bl	8000e10 <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d901      	bls.n	8001e10 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e0dd      	b.n	8001fcc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e10:	4b14      	ldr	r3, [pc, #80]	; (8001e64 <HAL_RCC_OscConfig+0x4b8>)
 8001e12:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d1ef      	bne.n	8001dfe <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	69db      	ldr	r3, [r3, #28]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f000 80d1 	beq.w	8001fca <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001e28:	4b0e      	ldr	r3, [pc, #56]	; (8001e64 <HAL_RCC_OscConfig+0x4b8>)
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f003 030c 	and.w	r3, r3, #12
 8001e30:	2b0c      	cmp	r3, #12
 8001e32:	f000 808b 	beq.w	8001f4c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d15e      	bne.n	8001efc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e3e:	4b09      	ldr	r3, [pc, #36]	; (8001e64 <HAL_RCC_OscConfig+0x4b8>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a08      	ldr	r2, [pc, #32]	; (8001e64 <HAL_RCC_OscConfig+0x4b8>)
 8001e44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e4a:	f7fe ffe1 	bl	8000e10 <HAL_GetTick>
 8001e4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e50:	e00c      	b.n	8001e6c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e52:	f7fe ffdd 	bl	8000e10 <HAL_GetTick>
 8001e56:	4602      	mov	r2, r0
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d905      	bls.n	8001e6c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001e60:	2303      	movs	r3, #3
 8001e62:	e0b3      	b.n	8001fcc <HAL_RCC_OscConfig+0x620>
 8001e64:	40021000 	.word	0x40021000
 8001e68:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e6c:	4b59      	ldr	r3, [pc, #356]	; (8001fd4 <HAL_RCC_OscConfig+0x628>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d1ec      	bne.n	8001e52 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e78:	4b56      	ldr	r3, [pc, #344]	; (8001fd4 <HAL_RCC_OscConfig+0x628>)
 8001e7a:	68da      	ldr	r2, [r3, #12]
 8001e7c:	4b56      	ldr	r3, [pc, #344]	; (8001fd8 <HAL_RCC_OscConfig+0x62c>)
 8001e7e:	4013      	ands	r3, r2
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	6a11      	ldr	r1, [r2, #32]
 8001e84:	687a      	ldr	r2, [r7, #4]
 8001e86:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e88:	3a01      	subs	r2, #1
 8001e8a:	0112      	lsls	r2, r2, #4
 8001e8c:	4311      	orrs	r1, r2
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001e92:	0212      	lsls	r2, r2, #8
 8001e94:	4311      	orrs	r1, r2
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e9a:	0852      	lsrs	r2, r2, #1
 8001e9c:	3a01      	subs	r2, #1
 8001e9e:	0552      	lsls	r2, r2, #21
 8001ea0:	4311      	orrs	r1, r2
 8001ea2:	687a      	ldr	r2, [r7, #4]
 8001ea4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ea6:	0852      	lsrs	r2, r2, #1
 8001ea8:	3a01      	subs	r2, #1
 8001eaa:	0652      	lsls	r2, r2, #25
 8001eac:	4311      	orrs	r1, r2
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001eb2:	06d2      	lsls	r2, r2, #27
 8001eb4:	430a      	orrs	r2, r1
 8001eb6:	4947      	ldr	r1, [pc, #284]	; (8001fd4 <HAL_RCC_OscConfig+0x628>)
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ebc:	4b45      	ldr	r3, [pc, #276]	; (8001fd4 <HAL_RCC_OscConfig+0x628>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a44      	ldr	r2, [pc, #272]	; (8001fd4 <HAL_RCC_OscConfig+0x628>)
 8001ec2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ec6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ec8:	4b42      	ldr	r3, [pc, #264]	; (8001fd4 <HAL_RCC_OscConfig+0x628>)
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	4a41      	ldr	r2, [pc, #260]	; (8001fd4 <HAL_RCC_OscConfig+0x628>)
 8001ece:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ed2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed4:	f7fe ff9c 	bl	8000e10 <HAL_GetTick>
 8001ed8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eda:	e008      	b.n	8001eee <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001edc:	f7fe ff98 	bl	8000e10 <HAL_GetTick>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e06e      	b.n	8001fcc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eee:	4b39      	ldr	r3, [pc, #228]	; (8001fd4 <HAL_RCC_OscConfig+0x628>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d0f0      	beq.n	8001edc <HAL_RCC_OscConfig+0x530>
 8001efa:	e066      	b.n	8001fca <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001efc:	4b35      	ldr	r3, [pc, #212]	; (8001fd4 <HAL_RCC_OscConfig+0x628>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a34      	ldr	r2, [pc, #208]	; (8001fd4 <HAL_RCC_OscConfig+0x628>)
 8001f02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f06:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001f08:	4b32      	ldr	r3, [pc, #200]	; (8001fd4 <HAL_RCC_OscConfig+0x628>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	4a31      	ldr	r2, [pc, #196]	; (8001fd4 <HAL_RCC_OscConfig+0x628>)
 8001f0e:	f023 0303 	bic.w	r3, r3, #3
 8001f12:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001f14:	4b2f      	ldr	r3, [pc, #188]	; (8001fd4 <HAL_RCC_OscConfig+0x628>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	4a2e      	ldr	r2, [pc, #184]	; (8001fd4 <HAL_RCC_OscConfig+0x628>)
 8001f1a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001f1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f22:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f24:	f7fe ff74 	bl	8000e10 <HAL_GetTick>
 8001f28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f2a:	e008      	b.n	8001f3e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f2c:	f7fe ff70 	bl	8000e10 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b02      	cmp	r3, #2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e046      	b.n	8001fcc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f3e:	4b25      	ldr	r3, [pc, #148]	; (8001fd4 <HAL_RCC_OscConfig+0x628>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1f0      	bne.n	8001f2c <HAL_RCC_OscConfig+0x580>
 8001f4a:	e03e      	b.n	8001fca <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	69db      	ldr	r3, [r3, #28]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d101      	bne.n	8001f58 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e039      	b.n	8001fcc <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001f58:	4b1e      	ldr	r3, [pc, #120]	; (8001fd4 <HAL_RCC_OscConfig+0x628>)
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	f003 0203 	and.w	r2, r3, #3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a1b      	ldr	r3, [r3, #32]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d12c      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f76:	3b01      	subs	r3, #1
 8001f78:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f7a:	429a      	cmp	r2, r3
 8001f7c:	d123      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f88:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d11b      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f98:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d113      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa8:	085b      	lsrs	r3, r3, #1
 8001faa:	3b01      	subs	r3, #1
 8001fac:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d109      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fbc:	085b      	lsrs	r3, r3, #1
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d001      	beq.n	8001fca <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e000      	b.n	8001fcc <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3720      	adds	r7, #32
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	019f800c 	.word	0x019f800c

08001fdc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b086      	sub	sp, #24
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d101      	bne.n	8001ff4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	e11e      	b.n	8002232 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ff4:	4b91      	ldr	r3, [pc, #580]	; (800223c <HAL_RCC_ClockConfig+0x260>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 030f 	and.w	r3, r3, #15
 8001ffc:	683a      	ldr	r2, [r7, #0]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d910      	bls.n	8002024 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002002:	4b8e      	ldr	r3, [pc, #568]	; (800223c <HAL_RCC_ClockConfig+0x260>)
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f023 020f 	bic.w	r2, r3, #15
 800200a:	498c      	ldr	r1, [pc, #560]	; (800223c <HAL_RCC_ClockConfig+0x260>)
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	4313      	orrs	r3, r2
 8002010:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002012:	4b8a      	ldr	r3, [pc, #552]	; (800223c <HAL_RCC_ClockConfig+0x260>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	683a      	ldr	r2, [r7, #0]
 800201c:	429a      	cmp	r2, r3
 800201e:	d001      	beq.n	8002024 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002020:	2301      	movs	r3, #1
 8002022:	e106      	b.n	8002232 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0301 	and.w	r3, r3, #1
 800202c:	2b00      	cmp	r3, #0
 800202e:	d073      	beq.n	8002118 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	2b03      	cmp	r3, #3
 8002036:	d129      	bne.n	800208c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002038:	4b81      	ldr	r3, [pc, #516]	; (8002240 <HAL_RCC_ClockConfig+0x264>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002040:	2b00      	cmp	r3, #0
 8002042:	d101      	bne.n	8002048 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e0f4      	b.n	8002232 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002048:	f000 f99e 	bl	8002388 <RCC_GetSysClockFreqFromPLLSource>
 800204c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	4a7c      	ldr	r2, [pc, #496]	; (8002244 <HAL_RCC_ClockConfig+0x268>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d93f      	bls.n	80020d6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002056:	4b7a      	ldr	r3, [pc, #488]	; (8002240 <HAL_RCC_ClockConfig+0x264>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d009      	beq.n	8002076 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800206a:	2b00      	cmp	r3, #0
 800206c:	d033      	beq.n	80020d6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002072:	2b00      	cmp	r3, #0
 8002074:	d12f      	bne.n	80020d6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002076:	4b72      	ldr	r3, [pc, #456]	; (8002240 <HAL_RCC_ClockConfig+0x264>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800207e:	4a70      	ldr	r2, [pc, #448]	; (8002240 <HAL_RCC_ClockConfig+0x264>)
 8002080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002084:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002086:	2380      	movs	r3, #128	; 0x80
 8002088:	617b      	str	r3, [r7, #20]
 800208a:	e024      	b.n	80020d6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	2b02      	cmp	r3, #2
 8002092:	d107      	bne.n	80020a4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002094:	4b6a      	ldr	r3, [pc, #424]	; (8002240 <HAL_RCC_ClockConfig+0x264>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d109      	bne.n	80020b4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e0c6      	b.n	8002232 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020a4:	4b66      	ldr	r3, [pc, #408]	; (8002240 <HAL_RCC_ClockConfig+0x264>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d101      	bne.n	80020b4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e0be      	b.n	8002232 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80020b4:	f000 f8ce 	bl	8002254 <HAL_RCC_GetSysClockFreq>
 80020b8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	4a61      	ldr	r2, [pc, #388]	; (8002244 <HAL_RCC_ClockConfig+0x268>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d909      	bls.n	80020d6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80020c2:	4b5f      	ldr	r3, [pc, #380]	; (8002240 <HAL_RCC_ClockConfig+0x264>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80020ca:	4a5d      	ldr	r2, [pc, #372]	; (8002240 <HAL_RCC_ClockConfig+0x264>)
 80020cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020d0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80020d2:	2380      	movs	r3, #128	; 0x80
 80020d4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020d6:	4b5a      	ldr	r3, [pc, #360]	; (8002240 <HAL_RCC_ClockConfig+0x264>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f023 0203 	bic.w	r2, r3, #3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	4957      	ldr	r1, [pc, #348]	; (8002240 <HAL_RCC_ClockConfig+0x264>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020e8:	f7fe fe92 	bl	8000e10 <HAL_GetTick>
 80020ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ee:	e00a      	b.n	8002106 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020f0:	f7fe fe8e 	bl	8000e10 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80020fe:	4293      	cmp	r3, r2
 8002100:	d901      	bls.n	8002106 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e095      	b.n	8002232 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002106:	4b4e      	ldr	r3, [pc, #312]	; (8002240 <HAL_RCC_ClockConfig+0x264>)
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	f003 020c 	and.w	r2, r3, #12
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	429a      	cmp	r2, r3
 8002116:	d1eb      	bne.n	80020f0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0302 	and.w	r3, r3, #2
 8002120:	2b00      	cmp	r3, #0
 8002122:	d023      	beq.n	800216c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0304 	and.w	r3, r3, #4
 800212c:	2b00      	cmp	r3, #0
 800212e:	d005      	beq.n	800213c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002130:	4b43      	ldr	r3, [pc, #268]	; (8002240 <HAL_RCC_ClockConfig+0x264>)
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	4a42      	ldr	r2, [pc, #264]	; (8002240 <HAL_RCC_ClockConfig+0x264>)
 8002136:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800213a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0308 	and.w	r3, r3, #8
 8002144:	2b00      	cmp	r3, #0
 8002146:	d007      	beq.n	8002158 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002148:	4b3d      	ldr	r3, [pc, #244]	; (8002240 <HAL_RCC_ClockConfig+0x264>)
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002150:	4a3b      	ldr	r2, [pc, #236]	; (8002240 <HAL_RCC_ClockConfig+0x264>)
 8002152:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002156:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002158:	4b39      	ldr	r3, [pc, #228]	; (8002240 <HAL_RCC_ClockConfig+0x264>)
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	4936      	ldr	r1, [pc, #216]	; (8002240 <HAL_RCC_ClockConfig+0x264>)
 8002166:	4313      	orrs	r3, r2
 8002168:	608b      	str	r3, [r1, #8]
 800216a:	e008      	b.n	800217e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	2b80      	cmp	r3, #128	; 0x80
 8002170:	d105      	bne.n	800217e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002172:	4b33      	ldr	r3, [pc, #204]	; (8002240 <HAL_RCC_ClockConfig+0x264>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	4a32      	ldr	r2, [pc, #200]	; (8002240 <HAL_RCC_ClockConfig+0x264>)
 8002178:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800217c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800217e:	4b2f      	ldr	r3, [pc, #188]	; (800223c <HAL_RCC_ClockConfig+0x260>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 030f 	and.w	r3, r3, #15
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	429a      	cmp	r2, r3
 800218a:	d21d      	bcs.n	80021c8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800218c:	4b2b      	ldr	r3, [pc, #172]	; (800223c <HAL_RCC_ClockConfig+0x260>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f023 020f 	bic.w	r2, r3, #15
 8002194:	4929      	ldr	r1, [pc, #164]	; (800223c <HAL_RCC_ClockConfig+0x260>)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	4313      	orrs	r3, r2
 800219a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800219c:	f7fe fe38 	bl	8000e10 <HAL_GetTick>
 80021a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021a2:	e00a      	b.n	80021ba <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021a4:	f7fe fe34 	bl	8000e10 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e03b      	b.n	8002232 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ba:	4b20      	ldr	r3, [pc, #128]	; (800223c <HAL_RCC_ClockConfig+0x260>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 030f 	and.w	r3, r3, #15
 80021c2:	683a      	ldr	r2, [r7, #0]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d1ed      	bne.n	80021a4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0304 	and.w	r3, r3, #4
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d008      	beq.n	80021e6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021d4:	4b1a      	ldr	r3, [pc, #104]	; (8002240 <HAL_RCC_ClockConfig+0x264>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	4917      	ldr	r1, [pc, #92]	; (8002240 <HAL_RCC_ClockConfig+0x264>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0308 	and.w	r3, r3, #8
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d009      	beq.n	8002206 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80021f2:	4b13      	ldr	r3, [pc, #76]	; (8002240 <HAL_RCC_ClockConfig+0x264>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	00db      	lsls	r3, r3, #3
 8002200:	490f      	ldr	r1, [pc, #60]	; (8002240 <HAL_RCC_ClockConfig+0x264>)
 8002202:	4313      	orrs	r3, r2
 8002204:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002206:	f000 f825 	bl	8002254 <HAL_RCC_GetSysClockFreq>
 800220a:	4602      	mov	r2, r0
 800220c:	4b0c      	ldr	r3, [pc, #48]	; (8002240 <HAL_RCC_ClockConfig+0x264>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	091b      	lsrs	r3, r3, #4
 8002212:	f003 030f 	and.w	r3, r3, #15
 8002216:	490c      	ldr	r1, [pc, #48]	; (8002248 <HAL_RCC_ClockConfig+0x26c>)
 8002218:	5ccb      	ldrb	r3, [r1, r3]
 800221a:	f003 031f 	and.w	r3, r3, #31
 800221e:	fa22 f303 	lsr.w	r3, r2, r3
 8002222:	4a0a      	ldr	r2, [pc, #40]	; (800224c <HAL_RCC_ClockConfig+0x270>)
 8002224:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002226:	4b0a      	ldr	r3, [pc, #40]	; (8002250 <HAL_RCC_ClockConfig+0x274>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4618      	mov	r0, r3
 800222c:	f7fe fda4 	bl	8000d78 <HAL_InitTick>
 8002230:	4603      	mov	r3, r0
}
 8002232:	4618      	mov	r0, r3
 8002234:	3718      	adds	r7, #24
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	40022000 	.word	0x40022000
 8002240:	40021000 	.word	0x40021000
 8002244:	04c4b400 	.word	0x04c4b400
 8002248:	080058e0 	.word	0x080058e0
 800224c:	20000000 	.word	0x20000000
 8002250:	20000004 	.word	0x20000004

08002254 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002254:	b480      	push	{r7}
 8002256:	b087      	sub	sp, #28
 8002258:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800225a:	4b2c      	ldr	r3, [pc, #176]	; (800230c <HAL_RCC_GetSysClockFreq+0xb8>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f003 030c 	and.w	r3, r3, #12
 8002262:	2b04      	cmp	r3, #4
 8002264:	d102      	bne.n	800226c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002266:	4b2a      	ldr	r3, [pc, #168]	; (8002310 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002268:	613b      	str	r3, [r7, #16]
 800226a:	e047      	b.n	80022fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800226c:	4b27      	ldr	r3, [pc, #156]	; (800230c <HAL_RCC_GetSysClockFreq+0xb8>)
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f003 030c 	and.w	r3, r3, #12
 8002274:	2b08      	cmp	r3, #8
 8002276:	d102      	bne.n	800227e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002278:	4b26      	ldr	r3, [pc, #152]	; (8002314 <HAL_RCC_GetSysClockFreq+0xc0>)
 800227a:	613b      	str	r3, [r7, #16]
 800227c:	e03e      	b.n	80022fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800227e:	4b23      	ldr	r3, [pc, #140]	; (800230c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f003 030c 	and.w	r3, r3, #12
 8002286:	2b0c      	cmp	r3, #12
 8002288:	d136      	bne.n	80022f8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800228a:	4b20      	ldr	r3, [pc, #128]	; (800230c <HAL_RCC_GetSysClockFreq+0xb8>)
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	f003 0303 	and.w	r3, r3, #3
 8002292:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002294:	4b1d      	ldr	r3, [pc, #116]	; (800230c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	091b      	lsrs	r3, r3, #4
 800229a:	f003 030f 	and.w	r3, r3, #15
 800229e:	3301      	adds	r3, #1
 80022a0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2b03      	cmp	r3, #3
 80022a6:	d10c      	bne.n	80022c2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80022a8:	4a1a      	ldr	r2, [pc, #104]	; (8002314 <HAL_RCC_GetSysClockFreq+0xc0>)
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80022b0:	4a16      	ldr	r2, [pc, #88]	; (800230c <HAL_RCC_GetSysClockFreq+0xb8>)
 80022b2:	68d2      	ldr	r2, [r2, #12]
 80022b4:	0a12      	lsrs	r2, r2, #8
 80022b6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80022ba:	fb02 f303 	mul.w	r3, r2, r3
 80022be:	617b      	str	r3, [r7, #20]
      break;
 80022c0:	e00c      	b.n	80022dc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80022c2:	4a13      	ldr	r2, [pc, #76]	; (8002310 <HAL_RCC_GetSysClockFreq+0xbc>)
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ca:	4a10      	ldr	r2, [pc, #64]	; (800230c <HAL_RCC_GetSysClockFreq+0xb8>)
 80022cc:	68d2      	ldr	r2, [r2, #12]
 80022ce:	0a12      	lsrs	r2, r2, #8
 80022d0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80022d4:	fb02 f303 	mul.w	r3, r2, r3
 80022d8:	617b      	str	r3, [r7, #20]
      break;
 80022da:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80022dc:	4b0b      	ldr	r3, [pc, #44]	; (800230c <HAL_RCC_GetSysClockFreq+0xb8>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	0e5b      	lsrs	r3, r3, #25
 80022e2:	f003 0303 	and.w	r3, r3, #3
 80022e6:	3301      	adds	r3, #1
 80022e8:	005b      	lsls	r3, r3, #1
 80022ea:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80022ec:	697a      	ldr	r2, [r7, #20]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80022f4:	613b      	str	r3, [r7, #16]
 80022f6:	e001      	b.n	80022fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80022f8:	2300      	movs	r3, #0
 80022fa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80022fc:	693b      	ldr	r3, [r7, #16]
}
 80022fe:	4618      	mov	r0, r3
 8002300:	371c      	adds	r7, #28
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	40021000 	.word	0x40021000
 8002310:	00f42400 	.word	0x00f42400
 8002314:	016e3600 	.word	0x016e3600

08002318 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800231c:	4b03      	ldr	r3, [pc, #12]	; (800232c <HAL_RCC_GetHCLKFreq+0x14>)
 800231e:	681b      	ldr	r3, [r3, #0]
}
 8002320:	4618      	mov	r0, r3
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	20000000 	.word	0x20000000

08002330 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002334:	f7ff fff0 	bl	8002318 <HAL_RCC_GetHCLKFreq>
 8002338:	4602      	mov	r2, r0
 800233a:	4b06      	ldr	r3, [pc, #24]	; (8002354 <HAL_RCC_GetPCLK1Freq+0x24>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	0a1b      	lsrs	r3, r3, #8
 8002340:	f003 0307 	and.w	r3, r3, #7
 8002344:	4904      	ldr	r1, [pc, #16]	; (8002358 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002346:	5ccb      	ldrb	r3, [r1, r3]
 8002348:	f003 031f 	and.w	r3, r3, #31
 800234c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002350:	4618      	mov	r0, r3
 8002352:	bd80      	pop	{r7, pc}
 8002354:	40021000 	.word	0x40021000
 8002358:	080058f0 	.word	0x080058f0

0800235c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002360:	f7ff ffda 	bl	8002318 <HAL_RCC_GetHCLKFreq>
 8002364:	4602      	mov	r2, r0
 8002366:	4b06      	ldr	r3, [pc, #24]	; (8002380 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	0adb      	lsrs	r3, r3, #11
 800236c:	f003 0307 	and.w	r3, r3, #7
 8002370:	4904      	ldr	r1, [pc, #16]	; (8002384 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002372:	5ccb      	ldrb	r3, [r1, r3]
 8002374:	f003 031f 	and.w	r3, r3, #31
 8002378:	fa22 f303 	lsr.w	r3, r2, r3
}
 800237c:	4618      	mov	r0, r3
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40021000 	.word	0x40021000
 8002384:	080058f0 	.word	0x080058f0

08002388 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002388:	b480      	push	{r7}
 800238a:	b087      	sub	sp, #28
 800238c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800238e:	4b1e      	ldr	r3, [pc, #120]	; (8002408 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002398:	4b1b      	ldr	r3, [pc, #108]	; (8002408 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	091b      	lsrs	r3, r3, #4
 800239e:	f003 030f 	and.w	r3, r3, #15
 80023a2:	3301      	adds	r3, #1
 80023a4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	2b03      	cmp	r3, #3
 80023aa:	d10c      	bne.n	80023c6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80023ac:	4a17      	ldr	r2, [pc, #92]	; (800240c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b4:	4a14      	ldr	r2, [pc, #80]	; (8002408 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80023b6:	68d2      	ldr	r2, [r2, #12]
 80023b8:	0a12      	lsrs	r2, r2, #8
 80023ba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80023be:	fb02 f303 	mul.w	r3, r2, r3
 80023c2:	617b      	str	r3, [r7, #20]
    break;
 80023c4:	e00c      	b.n	80023e0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80023c6:	4a12      	ldr	r2, [pc, #72]	; (8002410 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ce:	4a0e      	ldr	r2, [pc, #56]	; (8002408 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80023d0:	68d2      	ldr	r2, [r2, #12]
 80023d2:	0a12      	lsrs	r2, r2, #8
 80023d4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80023d8:	fb02 f303 	mul.w	r3, r2, r3
 80023dc:	617b      	str	r3, [r7, #20]
    break;
 80023de:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80023e0:	4b09      	ldr	r3, [pc, #36]	; (8002408 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80023e2:	68db      	ldr	r3, [r3, #12]
 80023e4:	0e5b      	lsrs	r3, r3, #25
 80023e6:	f003 0303 	and.w	r3, r3, #3
 80023ea:	3301      	adds	r3, #1
 80023ec:	005b      	lsls	r3, r3, #1
 80023ee:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80023f0:	697a      	ldr	r2, [r7, #20]
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023f8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80023fa:	687b      	ldr	r3, [r7, #4]
}
 80023fc:	4618      	mov	r0, r3
 80023fe:	371c      	adds	r7, #28
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr
 8002408:	40021000 	.word	0x40021000
 800240c:	016e3600 	.word	0x016e3600
 8002410:	00f42400 	.word	0x00f42400

08002414 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b086      	sub	sp, #24
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800241c:	2300      	movs	r3, #0
 800241e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002420:	2300      	movs	r3, #0
 8002422:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800242c:	2b00      	cmp	r3, #0
 800242e:	f000 8098 	beq.w	8002562 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002432:	2300      	movs	r3, #0
 8002434:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002436:	4b43      	ldr	r3, [pc, #268]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800243a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d10d      	bne.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002442:	4b40      	ldr	r3, [pc, #256]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002446:	4a3f      	ldr	r2, [pc, #252]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800244c:	6593      	str	r3, [r2, #88]	; 0x58
 800244e:	4b3d      	ldr	r3, [pc, #244]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002450:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002456:	60bb      	str	r3, [r7, #8]
 8002458:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800245a:	2301      	movs	r3, #1
 800245c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800245e:	4b3a      	ldr	r3, [pc, #232]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a39      	ldr	r2, [pc, #228]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002468:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800246a:	f7fe fcd1 	bl	8000e10 <HAL_GetTick>
 800246e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002470:	e009      	b.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002472:	f7fe fccd 	bl	8000e10 <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d902      	bls.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	74fb      	strb	r3, [r7, #19]
        break;
 8002484:	e005      	b.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002486:	4b30      	ldr	r3, [pc, #192]	; (8002548 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800248e:	2b00      	cmp	r3, #0
 8002490:	d0ef      	beq.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002492:	7cfb      	ldrb	r3, [r7, #19]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d159      	bne.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002498:	4b2a      	ldr	r3, [pc, #168]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800249a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800249e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024a2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d01e      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ae:	697a      	ldr	r2, [r7, #20]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d019      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80024b4:	4b23      	ldr	r3, [pc, #140]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024be:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80024c0:	4b20      	ldr	r3, [pc, #128]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024c6:	4a1f      	ldr	r2, [pc, #124]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80024d0:	4b1c      	ldr	r3, [pc, #112]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024d6:	4a1b      	ldr	r2, [pc, #108]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80024e0:	4a18      	ldr	r2, [pc, #96]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d016      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024f2:	f7fe fc8d 	bl	8000e10 <HAL_GetTick>
 80024f6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024f8:	e00b      	b.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024fa:	f7fe fc89 	bl	8000e10 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	f241 3288 	movw	r2, #5000	; 0x1388
 8002508:	4293      	cmp	r3, r2
 800250a:	d902      	bls.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	74fb      	strb	r3, [r7, #19]
            break;
 8002510:	e006      	b.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002512:	4b0c      	ldr	r3, [pc, #48]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002514:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002518:	f003 0302 	and.w	r3, r3, #2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d0ec      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002520:	7cfb      	ldrb	r3, [r7, #19]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d10b      	bne.n	800253e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002526:	4b07      	ldr	r3, [pc, #28]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800252c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002534:	4903      	ldr	r1, [pc, #12]	; (8002544 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002536:	4313      	orrs	r3, r2
 8002538:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800253c:	e008      	b.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800253e:	7cfb      	ldrb	r3, [r7, #19]
 8002540:	74bb      	strb	r3, [r7, #18]
 8002542:	e005      	b.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002544:	40021000 	.word	0x40021000
 8002548:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800254c:	7cfb      	ldrb	r3, [r7, #19]
 800254e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002550:	7c7b      	ldrb	r3, [r7, #17]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d105      	bne.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002556:	4ba6      	ldr	r3, [pc, #664]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002558:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800255a:	4aa5      	ldr	r2, [pc, #660]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800255c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002560:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00a      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800256e:	4ba0      	ldr	r3, [pc, #640]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002574:	f023 0203 	bic.w	r2, r3, #3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	499c      	ldr	r1, [pc, #624]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800257e:	4313      	orrs	r3, r2
 8002580:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d00a      	beq.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002590:	4b97      	ldr	r3, [pc, #604]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002596:	f023 020c 	bic.w	r2, r3, #12
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	4994      	ldr	r1, [pc, #592]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025a0:	4313      	orrs	r3, r2
 80025a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0304 	and.w	r3, r3, #4
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00a      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025b2:	4b8f      	ldr	r3, [pc, #572]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025b8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	498b      	ldr	r1, [pc, #556]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025c2:	4313      	orrs	r3, r2
 80025c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0308 	and.w	r3, r3, #8
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d00a      	beq.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80025d4:	4b86      	ldr	r3, [pc, #536]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025da:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	4983      	ldr	r1, [pc, #524]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025e4:	4313      	orrs	r3, r2
 80025e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0320 	and.w	r3, r3, #32
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d00a      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025f6:	4b7e      	ldr	r3, [pc, #504]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025fc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	695b      	ldr	r3, [r3, #20]
 8002604:	497a      	ldr	r1, [pc, #488]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002606:	4313      	orrs	r3, r2
 8002608:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002614:	2b00      	cmp	r3, #0
 8002616:	d00a      	beq.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002618:	4b75      	ldr	r3, [pc, #468]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800261a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800261e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	699b      	ldr	r3, [r3, #24]
 8002626:	4972      	ldr	r1, [pc, #456]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002628:	4313      	orrs	r3, r2
 800262a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00a      	beq.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800263a:	4b6d      	ldr	r3, [pc, #436]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800263c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002640:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	69db      	ldr	r3, [r3, #28]
 8002648:	4969      	ldr	r1, [pc, #420]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800264a:	4313      	orrs	r3, r2
 800264c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002658:	2b00      	cmp	r3, #0
 800265a:	d00a      	beq.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800265c:	4b64      	ldr	r3, [pc, #400]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800265e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002662:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6a1b      	ldr	r3, [r3, #32]
 800266a:	4961      	ldr	r1, [pc, #388]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800266c:	4313      	orrs	r3, r2
 800266e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800267a:	2b00      	cmp	r3, #0
 800267c:	d00a      	beq.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800267e:	4b5c      	ldr	r3, [pc, #368]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002684:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268c:	4958      	ldr	r1, [pc, #352]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800268e:	4313      	orrs	r3, r2
 8002690:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800269c:	2b00      	cmp	r3, #0
 800269e:	d015      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80026a0:	4b53      	ldr	r3, [pc, #332]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ae:	4950      	ldr	r1, [pc, #320]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026be:	d105      	bne.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026c0:	4b4b      	ldr	r3, [pc, #300]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	4a4a      	ldr	r2, [pc, #296]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026ca:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d015      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80026d8:	4b45      	ldr	r3, [pc, #276]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026e6:	4942      	ldr	r1, [pc, #264]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80026f6:	d105      	bne.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026f8:	4b3d      	ldr	r3, [pc, #244]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	4a3c      	ldr	r2, [pc, #240]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80026fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002702:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d015      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002710:	4b37      	ldr	r3, [pc, #220]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002716:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271e:	4934      	ldr	r1, [pc, #208]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002720:	4313      	orrs	r3, r2
 8002722:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800272e:	d105      	bne.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002730:	4b2f      	ldr	r3, [pc, #188]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	4a2e      	ldr	r2, [pc, #184]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002736:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800273a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d015      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002748:	4b29      	ldr	r3, [pc, #164]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800274a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800274e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002756:	4926      	ldr	r1, [pc, #152]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002758:	4313      	orrs	r3, r2
 800275a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002762:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002766:	d105      	bne.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002768:	4b21      	ldr	r3, [pc, #132]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	4a20      	ldr	r2, [pc, #128]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800276e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002772:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d015      	beq.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002780:	4b1b      	ldr	r3, [pc, #108]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002786:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800278e:	4918      	ldr	r1, [pc, #96]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002790:	4313      	orrs	r3, r2
 8002792:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800279a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800279e:	d105      	bne.n	80027ac <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027a0:	4b13      	ldr	r3, [pc, #76]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	4a12      	ldr	r2, [pc, #72]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027aa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d015      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80027b8:	4b0d      	ldr	r3, [pc, #52]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027be:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027c6:	490a      	ldr	r1, [pc, #40]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027d6:	d105      	bne.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80027d8:	4b05      	ldr	r3, [pc, #20]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	4a04      	ldr	r2, [pc, #16]	; (80027f0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80027de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027e2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80027e4:	7cbb      	ldrb	r3, [r7, #18]
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3718      	adds	r7, #24
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	40021000 	.word	0x40021000

080027f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b082      	sub	sp, #8
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e042      	b.n	800288c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800280c:	2b00      	cmp	r3, #0
 800280e:	d106      	bne.n	800281e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f7fe fa13 	bl	8000c44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2224      	movs	r2, #36	; 0x24
 8002822:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f022 0201 	bic.w	r2, r2, #1
 8002834:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f000 f8c2 	bl	80029c0 <UART_SetConfig>
 800283c:	4603      	mov	r3, r0
 800283e:	2b01      	cmp	r3, #1
 8002840:	d101      	bne.n	8002846 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e022      	b.n	800288c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800284a:	2b00      	cmp	r3, #0
 800284c:	d002      	beq.n	8002854 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f000 fb82 	bl	8002f58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	685a      	ldr	r2, [r3, #4]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002862:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	689a      	ldr	r2, [r3, #8]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002872:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f042 0201 	orr.w	r2, r2, #1
 8002882:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f000 fc09 	bl	800309c <UART_CheckIdleState>
 800288a:	4603      	mov	r3, r0
}
 800288c:	4618      	mov	r0, r3
 800288e:	3708      	adds	r7, #8
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}

08002894 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b08a      	sub	sp, #40	; 0x28
 8002898:	af02      	add	r7, sp, #8
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	603b      	str	r3, [r7, #0]
 80028a0:	4613      	mov	r3, r2
 80028a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028aa:	2b20      	cmp	r3, #32
 80028ac:	f040 8083 	bne.w	80029b6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d002      	beq.n	80028bc <HAL_UART_Transmit+0x28>
 80028b6:	88fb      	ldrh	r3, [r7, #6]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d101      	bne.n	80028c0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e07b      	b.n	80029b8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d101      	bne.n	80028ce <HAL_UART_Transmit+0x3a>
 80028ca:	2302      	movs	r3, #2
 80028cc:	e074      	b.n	80029b8 <HAL_UART_Transmit+0x124>
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2201      	movs	r2, #1
 80028d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2200      	movs	r2, #0
 80028da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2221      	movs	r2, #33	; 0x21
 80028e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80028e6:	f7fe fa93 	bl	8000e10 <HAL_GetTick>
 80028ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	88fa      	ldrh	r2, [r7, #6]
 80028f0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	88fa      	ldrh	r2, [r7, #6]
 80028f8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002904:	d108      	bne.n	8002918 <HAL_UART_Transmit+0x84>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d104      	bne.n	8002918 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800290e:	2300      	movs	r3, #0
 8002910:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	61bb      	str	r3, [r7, #24]
 8002916:	e003      	b.n	8002920 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800291c:	2300      	movs	r3, #0
 800291e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2200      	movs	r2, #0
 8002924:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8002928:	e02c      	b.n	8002984 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	9300      	str	r3, [sp, #0]
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	2200      	movs	r2, #0
 8002932:	2180      	movs	r1, #128	; 0x80
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	f000 fbfc 	bl	8003132 <UART_WaitOnFlagUntilTimeout>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d001      	beq.n	8002944 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e039      	b.n	80029b8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d10b      	bne.n	8002962 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800294a:	69bb      	ldr	r3, [r7, #24]
 800294c:	881b      	ldrh	r3, [r3, #0]
 800294e:	461a      	mov	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002958:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800295a:	69bb      	ldr	r3, [r7, #24]
 800295c:	3302      	adds	r3, #2
 800295e:	61bb      	str	r3, [r7, #24]
 8002960:	e007      	b.n	8002972 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	781a      	ldrb	r2, [r3, #0]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	3301      	adds	r3, #1
 8002970:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002978:	b29b      	uxth	r3, r3
 800297a:	3b01      	subs	r3, #1
 800297c:	b29a      	uxth	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800298a:	b29b      	uxth	r3, r3
 800298c:	2b00      	cmp	r3, #0
 800298e:	d1cc      	bne.n	800292a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	9300      	str	r3, [sp, #0]
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	2200      	movs	r2, #0
 8002998:	2140      	movs	r1, #64	; 0x40
 800299a:	68f8      	ldr	r0, [r7, #12]
 800299c:	f000 fbc9 	bl	8003132 <UART_WaitOnFlagUntilTimeout>
 80029a0:	4603      	mov	r3, r0
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d001      	beq.n	80029aa <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e006      	b.n	80029b8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2220      	movs	r2, #32
 80029ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80029b2:	2300      	movs	r3, #0
 80029b4:	e000      	b.n	80029b8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80029b6:	2302      	movs	r3, #2
  }
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3720      	adds	r7, #32
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029c4:	b08c      	sub	sp, #48	; 0x30
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80029ca:	2300      	movs	r3, #0
 80029cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	689a      	ldr	r2, [r3, #8]
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	691b      	ldr	r3, [r3, #16]
 80029d8:	431a      	orrs	r2, r3
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	695b      	ldr	r3, [r3, #20]
 80029de:	431a      	orrs	r2, r3
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	69db      	ldr	r3, [r3, #28]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	4bab      	ldr	r3, [pc, #684]	; (8002c9c <UART_SetConfig+0x2dc>)
 80029f0:	4013      	ands	r3, r2
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	6812      	ldr	r2, [r2, #0]
 80029f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80029f8:	430b      	orrs	r3, r1
 80029fa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	68da      	ldr	r2, [r3, #12]
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	430a      	orrs	r2, r1
 8002a10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002a18:	697b      	ldr	r3, [r7, #20]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4aa0      	ldr	r2, [pc, #640]	; (8002ca0 <UART_SetConfig+0x2e0>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d004      	beq.n	8002a2c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	6a1b      	ldr	r3, [r3, #32]
 8002a26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002a36:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002a3a:	697a      	ldr	r2, [r7, #20]
 8002a3c:	6812      	ldr	r2, [r2, #0]
 8002a3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002a40:	430b      	orrs	r3, r1
 8002a42:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a4a:	f023 010f 	bic.w	r1, r3, #15
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	430a      	orrs	r2, r1
 8002a58:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a91      	ldr	r2, [pc, #580]	; (8002ca4 <UART_SetConfig+0x2e4>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d125      	bne.n	8002ab0 <UART_SetConfig+0xf0>
 8002a64:	4b90      	ldr	r3, [pc, #576]	; (8002ca8 <UART_SetConfig+0x2e8>)
 8002a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a6a:	f003 0303 	and.w	r3, r3, #3
 8002a6e:	2b03      	cmp	r3, #3
 8002a70:	d81a      	bhi.n	8002aa8 <UART_SetConfig+0xe8>
 8002a72:	a201      	add	r2, pc, #4	; (adr r2, 8002a78 <UART_SetConfig+0xb8>)
 8002a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a78:	08002a89 	.word	0x08002a89
 8002a7c:	08002a99 	.word	0x08002a99
 8002a80:	08002a91 	.word	0x08002a91
 8002a84:	08002aa1 	.word	0x08002aa1
 8002a88:	2301      	movs	r3, #1
 8002a8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002a8e:	e0d6      	b.n	8002c3e <UART_SetConfig+0x27e>
 8002a90:	2302      	movs	r3, #2
 8002a92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002a96:	e0d2      	b.n	8002c3e <UART_SetConfig+0x27e>
 8002a98:	2304      	movs	r3, #4
 8002a9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002a9e:	e0ce      	b.n	8002c3e <UART_SetConfig+0x27e>
 8002aa0:	2308      	movs	r3, #8
 8002aa2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002aa6:	e0ca      	b.n	8002c3e <UART_SetConfig+0x27e>
 8002aa8:	2310      	movs	r3, #16
 8002aaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002aae:	e0c6      	b.n	8002c3e <UART_SetConfig+0x27e>
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a7d      	ldr	r2, [pc, #500]	; (8002cac <UART_SetConfig+0x2ec>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d138      	bne.n	8002b2c <UART_SetConfig+0x16c>
 8002aba:	4b7b      	ldr	r3, [pc, #492]	; (8002ca8 <UART_SetConfig+0x2e8>)
 8002abc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac0:	f003 030c 	and.w	r3, r3, #12
 8002ac4:	2b0c      	cmp	r3, #12
 8002ac6:	d82d      	bhi.n	8002b24 <UART_SetConfig+0x164>
 8002ac8:	a201      	add	r2, pc, #4	; (adr r2, 8002ad0 <UART_SetConfig+0x110>)
 8002aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ace:	bf00      	nop
 8002ad0:	08002b05 	.word	0x08002b05
 8002ad4:	08002b25 	.word	0x08002b25
 8002ad8:	08002b25 	.word	0x08002b25
 8002adc:	08002b25 	.word	0x08002b25
 8002ae0:	08002b15 	.word	0x08002b15
 8002ae4:	08002b25 	.word	0x08002b25
 8002ae8:	08002b25 	.word	0x08002b25
 8002aec:	08002b25 	.word	0x08002b25
 8002af0:	08002b0d 	.word	0x08002b0d
 8002af4:	08002b25 	.word	0x08002b25
 8002af8:	08002b25 	.word	0x08002b25
 8002afc:	08002b25 	.word	0x08002b25
 8002b00:	08002b1d 	.word	0x08002b1d
 8002b04:	2300      	movs	r3, #0
 8002b06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b0a:	e098      	b.n	8002c3e <UART_SetConfig+0x27e>
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b12:	e094      	b.n	8002c3e <UART_SetConfig+0x27e>
 8002b14:	2304      	movs	r3, #4
 8002b16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b1a:	e090      	b.n	8002c3e <UART_SetConfig+0x27e>
 8002b1c:	2308      	movs	r3, #8
 8002b1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b22:	e08c      	b.n	8002c3e <UART_SetConfig+0x27e>
 8002b24:	2310      	movs	r3, #16
 8002b26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b2a:	e088      	b.n	8002c3e <UART_SetConfig+0x27e>
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a5f      	ldr	r2, [pc, #380]	; (8002cb0 <UART_SetConfig+0x2f0>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d125      	bne.n	8002b82 <UART_SetConfig+0x1c2>
 8002b36:	4b5c      	ldr	r3, [pc, #368]	; (8002ca8 <UART_SetConfig+0x2e8>)
 8002b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b3c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002b40:	2b30      	cmp	r3, #48	; 0x30
 8002b42:	d016      	beq.n	8002b72 <UART_SetConfig+0x1b2>
 8002b44:	2b30      	cmp	r3, #48	; 0x30
 8002b46:	d818      	bhi.n	8002b7a <UART_SetConfig+0x1ba>
 8002b48:	2b20      	cmp	r3, #32
 8002b4a:	d00a      	beq.n	8002b62 <UART_SetConfig+0x1a2>
 8002b4c:	2b20      	cmp	r3, #32
 8002b4e:	d814      	bhi.n	8002b7a <UART_SetConfig+0x1ba>
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d002      	beq.n	8002b5a <UART_SetConfig+0x19a>
 8002b54:	2b10      	cmp	r3, #16
 8002b56:	d008      	beq.n	8002b6a <UART_SetConfig+0x1aa>
 8002b58:	e00f      	b.n	8002b7a <UART_SetConfig+0x1ba>
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b60:	e06d      	b.n	8002c3e <UART_SetConfig+0x27e>
 8002b62:	2302      	movs	r3, #2
 8002b64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b68:	e069      	b.n	8002c3e <UART_SetConfig+0x27e>
 8002b6a:	2304      	movs	r3, #4
 8002b6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b70:	e065      	b.n	8002c3e <UART_SetConfig+0x27e>
 8002b72:	2308      	movs	r3, #8
 8002b74:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b78:	e061      	b.n	8002c3e <UART_SetConfig+0x27e>
 8002b7a:	2310      	movs	r3, #16
 8002b7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002b80:	e05d      	b.n	8002c3e <UART_SetConfig+0x27e>
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a4b      	ldr	r2, [pc, #300]	; (8002cb4 <UART_SetConfig+0x2f4>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d125      	bne.n	8002bd8 <UART_SetConfig+0x218>
 8002b8c:	4b46      	ldr	r3, [pc, #280]	; (8002ca8 <UART_SetConfig+0x2e8>)
 8002b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b92:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002b96:	2bc0      	cmp	r3, #192	; 0xc0
 8002b98:	d016      	beq.n	8002bc8 <UART_SetConfig+0x208>
 8002b9a:	2bc0      	cmp	r3, #192	; 0xc0
 8002b9c:	d818      	bhi.n	8002bd0 <UART_SetConfig+0x210>
 8002b9e:	2b80      	cmp	r3, #128	; 0x80
 8002ba0:	d00a      	beq.n	8002bb8 <UART_SetConfig+0x1f8>
 8002ba2:	2b80      	cmp	r3, #128	; 0x80
 8002ba4:	d814      	bhi.n	8002bd0 <UART_SetConfig+0x210>
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d002      	beq.n	8002bb0 <UART_SetConfig+0x1f0>
 8002baa:	2b40      	cmp	r3, #64	; 0x40
 8002bac:	d008      	beq.n	8002bc0 <UART_SetConfig+0x200>
 8002bae:	e00f      	b.n	8002bd0 <UART_SetConfig+0x210>
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002bb6:	e042      	b.n	8002c3e <UART_SetConfig+0x27e>
 8002bb8:	2302      	movs	r3, #2
 8002bba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002bbe:	e03e      	b.n	8002c3e <UART_SetConfig+0x27e>
 8002bc0:	2304      	movs	r3, #4
 8002bc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002bc6:	e03a      	b.n	8002c3e <UART_SetConfig+0x27e>
 8002bc8:	2308      	movs	r3, #8
 8002bca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002bce:	e036      	b.n	8002c3e <UART_SetConfig+0x27e>
 8002bd0:	2310      	movs	r3, #16
 8002bd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002bd6:	e032      	b.n	8002c3e <UART_SetConfig+0x27e>
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a30      	ldr	r2, [pc, #192]	; (8002ca0 <UART_SetConfig+0x2e0>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d12a      	bne.n	8002c38 <UART_SetConfig+0x278>
 8002be2:	4b31      	ldr	r3, [pc, #196]	; (8002ca8 <UART_SetConfig+0x2e8>)
 8002be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002bec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002bf0:	d01a      	beq.n	8002c28 <UART_SetConfig+0x268>
 8002bf2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002bf6:	d81b      	bhi.n	8002c30 <UART_SetConfig+0x270>
 8002bf8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002bfc:	d00c      	beq.n	8002c18 <UART_SetConfig+0x258>
 8002bfe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c02:	d815      	bhi.n	8002c30 <UART_SetConfig+0x270>
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d003      	beq.n	8002c10 <UART_SetConfig+0x250>
 8002c08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c0c:	d008      	beq.n	8002c20 <UART_SetConfig+0x260>
 8002c0e:	e00f      	b.n	8002c30 <UART_SetConfig+0x270>
 8002c10:	2300      	movs	r3, #0
 8002c12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c16:	e012      	b.n	8002c3e <UART_SetConfig+0x27e>
 8002c18:	2302      	movs	r3, #2
 8002c1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c1e:	e00e      	b.n	8002c3e <UART_SetConfig+0x27e>
 8002c20:	2304      	movs	r3, #4
 8002c22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c26:	e00a      	b.n	8002c3e <UART_SetConfig+0x27e>
 8002c28:	2308      	movs	r3, #8
 8002c2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c2e:	e006      	b.n	8002c3e <UART_SetConfig+0x27e>
 8002c30:	2310      	movs	r3, #16
 8002c32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002c36:	e002      	b.n	8002c3e <UART_SetConfig+0x27e>
 8002c38:	2310      	movs	r3, #16
 8002c3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a17      	ldr	r2, [pc, #92]	; (8002ca0 <UART_SetConfig+0x2e0>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	f040 80a8 	bne.w	8002d9a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002c4a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002c4e:	2b08      	cmp	r3, #8
 8002c50:	d834      	bhi.n	8002cbc <UART_SetConfig+0x2fc>
 8002c52:	a201      	add	r2, pc, #4	; (adr r2, 8002c58 <UART_SetConfig+0x298>)
 8002c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c58:	08002c7d 	.word	0x08002c7d
 8002c5c:	08002cbd 	.word	0x08002cbd
 8002c60:	08002c85 	.word	0x08002c85
 8002c64:	08002cbd 	.word	0x08002cbd
 8002c68:	08002c8b 	.word	0x08002c8b
 8002c6c:	08002cbd 	.word	0x08002cbd
 8002c70:	08002cbd 	.word	0x08002cbd
 8002c74:	08002cbd 	.word	0x08002cbd
 8002c78:	08002c93 	.word	0x08002c93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c7c:	f7ff fb58 	bl	8002330 <HAL_RCC_GetPCLK1Freq>
 8002c80:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002c82:	e021      	b.n	8002cc8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c84:	4b0c      	ldr	r3, [pc, #48]	; (8002cb8 <UART_SetConfig+0x2f8>)
 8002c86:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002c88:	e01e      	b.n	8002cc8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c8a:	f7ff fae3 	bl	8002254 <HAL_RCC_GetSysClockFreq>
 8002c8e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002c90:	e01a      	b.n	8002cc8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c96:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002c98:	e016      	b.n	8002cc8 <UART_SetConfig+0x308>
 8002c9a:	bf00      	nop
 8002c9c:	cfff69f3 	.word	0xcfff69f3
 8002ca0:	40008000 	.word	0x40008000
 8002ca4:	40013800 	.word	0x40013800
 8002ca8:	40021000 	.word	0x40021000
 8002cac:	40004400 	.word	0x40004400
 8002cb0:	40004800 	.word	0x40004800
 8002cb4:	40004c00 	.word	0x40004c00
 8002cb8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002cc6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	f000 812a 	beq.w	8002f24 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd4:	4a9e      	ldr	r2, [pc, #632]	; (8002f50 <UART_SetConfig+0x590>)
 8002cd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002cda:	461a      	mov	r2, r3
 8002cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cde:	fbb3 f3f2 	udiv	r3, r3, r2
 8002ce2:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	685a      	ldr	r2, [r3, #4]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	4413      	add	r3, r2
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d305      	bcc.n	8002d00 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d903      	bls.n	8002d08 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002d06:	e10d      	b.n	8002f24 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	60bb      	str	r3, [r7, #8]
 8002d0e:	60fa      	str	r2, [r7, #12]
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d14:	4a8e      	ldr	r2, [pc, #568]	; (8002f50 <UART_SetConfig+0x590>)
 8002d16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	603b      	str	r3, [r7, #0]
 8002d20:	607a      	str	r2, [r7, #4]
 8002d22:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002d26:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002d2a:	f7fd fac9 	bl	80002c0 <__aeabi_uldivmod>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	460b      	mov	r3, r1
 8002d32:	4610      	mov	r0, r2
 8002d34:	4619      	mov	r1, r3
 8002d36:	f04f 0200 	mov.w	r2, #0
 8002d3a:	f04f 0300 	mov.w	r3, #0
 8002d3e:	020b      	lsls	r3, r1, #8
 8002d40:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002d44:	0202      	lsls	r2, r0, #8
 8002d46:	6979      	ldr	r1, [r7, #20]
 8002d48:	6849      	ldr	r1, [r1, #4]
 8002d4a:	0849      	lsrs	r1, r1, #1
 8002d4c:	2000      	movs	r0, #0
 8002d4e:	460c      	mov	r4, r1
 8002d50:	4605      	mov	r5, r0
 8002d52:	eb12 0804 	adds.w	r8, r2, r4
 8002d56:	eb43 0905 	adc.w	r9, r3, r5
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	2200      	movs	r2, #0
 8002d60:	469a      	mov	sl, r3
 8002d62:	4693      	mov	fp, r2
 8002d64:	4652      	mov	r2, sl
 8002d66:	465b      	mov	r3, fp
 8002d68:	4640      	mov	r0, r8
 8002d6a:	4649      	mov	r1, r9
 8002d6c:	f7fd faa8 	bl	80002c0 <__aeabi_uldivmod>
 8002d70:	4602      	mov	r2, r0
 8002d72:	460b      	mov	r3, r1
 8002d74:	4613      	mov	r3, r2
 8002d76:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002d78:	6a3b      	ldr	r3, [r7, #32]
 8002d7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d7e:	d308      	bcc.n	8002d92 <UART_SetConfig+0x3d2>
 8002d80:	6a3b      	ldr	r3, [r7, #32]
 8002d82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d86:	d204      	bcs.n	8002d92 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	6a3a      	ldr	r2, [r7, #32]
 8002d8e:	60da      	str	r2, [r3, #12]
 8002d90:	e0c8      	b.n	8002f24 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002d98:	e0c4      	b.n	8002f24 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	69db      	ldr	r3, [r3, #28]
 8002d9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002da2:	d167      	bne.n	8002e74 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8002da4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002da8:	2b08      	cmp	r3, #8
 8002daa:	d828      	bhi.n	8002dfe <UART_SetConfig+0x43e>
 8002dac:	a201      	add	r2, pc, #4	; (adr r2, 8002db4 <UART_SetConfig+0x3f4>)
 8002dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db2:	bf00      	nop
 8002db4:	08002dd9 	.word	0x08002dd9
 8002db8:	08002de1 	.word	0x08002de1
 8002dbc:	08002de9 	.word	0x08002de9
 8002dc0:	08002dff 	.word	0x08002dff
 8002dc4:	08002def 	.word	0x08002def
 8002dc8:	08002dff 	.word	0x08002dff
 8002dcc:	08002dff 	.word	0x08002dff
 8002dd0:	08002dff 	.word	0x08002dff
 8002dd4:	08002df7 	.word	0x08002df7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002dd8:	f7ff faaa 	bl	8002330 <HAL_RCC_GetPCLK1Freq>
 8002ddc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002dde:	e014      	b.n	8002e0a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002de0:	f7ff fabc 	bl	800235c <HAL_RCC_GetPCLK2Freq>
 8002de4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002de6:	e010      	b.n	8002e0a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002de8:	4b5a      	ldr	r3, [pc, #360]	; (8002f54 <UART_SetConfig+0x594>)
 8002dea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002dec:	e00d      	b.n	8002e0a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002dee:	f7ff fa31 	bl	8002254 <HAL_RCC_GetSysClockFreq>
 8002df2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002df4:	e009      	b.n	8002e0a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002df6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dfa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002dfc:	e005      	b.n	8002e0a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002e08:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	f000 8089 	beq.w	8002f24 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e16:	4a4e      	ldr	r2, [pc, #312]	; (8002f50 <UART_SetConfig+0x590>)
 8002e18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e20:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e24:	005a      	lsls	r2, r3, #1
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	085b      	lsrs	r3, r3, #1
 8002e2c:	441a      	add	r2, r3
 8002e2e:	697b      	ldr	r3, [r7, #20]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e36:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e38:	6a3b      	ldr	r3, [r7, #32]
 8002e3a:	2b0f      	cmp	r3, #15
 8002e3c:	d916      	bls.n	8002e6c <UART_SetConfig+0x4ac>
 8002e3e:	6a3b      	ldr	r3, [r7, #32]
 8002e40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e44:	d212      	bcs.n	8002e6c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e46:	6a3b      	ldr	r3, [r7, #32]
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	f023 030f 	bic.w	r3, r3, #15
 8002e4e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e50:	6a3b      	ldr	r3, [r7, #32]
 8002e52:	085b      	lsrs	r3, r3, #1
 8002e54:	b29b      	uxth	r3, r3
 8002e56:	f003 0307 	and.w	r3, r3, #7
 8002e5a:	b29a      	uxth	r2, r3
 8002e5c:	8bfb      	ldrh	r3, [r7, #30]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	8bfa      	ldrh	r2, [r7, #30]
 8002e68:	60da      	str	r2, [r3, #12]
 8002e6a:	e05b      	b.n	8002f24 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002e72:	e057      	b.n	8002f24 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002e74:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002e78:	2b08      	cmp	r3, #8
 8002e7a:	d828      	bhi.n	8002ece <UART_SetConfig+0x50e>
 8002e7c:	a201      	add	r2, pc, #4	; (adr r2, 8002e84 <UART_SetConfig+0x4c4>)
 8002e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e82:	bf00      	nop
 8002e84:	08002ea9 	.word	0x08002ea9
 8002e88:	08002eb1 	.word	0x08002eb1
 8002e8c:	08002eb9 	.word	0x08002eb9
 8002e90:	08002ecf 	.word	0x08002ecf
 8002e94:	08002ebf 	.word	0x08002ebf
 8002e98:	08002ecf 	.word	0x08002ecf
 8002e9c:	08002ecf 	.word	0x08002ecf
 8002ea0:	08002ecf 	.word	0x08002ecf
 8002ea4:	08002ec7 	.word	0x08002ec7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ea8:	f7ff fa42 	bl	8002330 <HAL_RCC_GetPCLK1Freq>
 8002eac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002eae:	e014      	b.n	8002eda <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002eb0:	f7ff fa54 	bl	800235c <HAL_RCC_GetPCLK2Freq>
 8002eb4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002eb6:	e010      	b.n	8002eda <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002eb8:	4b26      	ldr	r3, [pc, #152]	; (8002f54 <UART_SetConfig+0x594>)
 8002eba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002ebc:	e00d      	b.n	8002eda <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ebe:	f7ff f9c9 	bl	8002254 <HAL_RCC_GetSysClockFreq>
 8002ec2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002ec4:	e009      	b.n	8002eda <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ec6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002eca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002ecc:	e005      	b.n	8002eda <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8002ece:	2300      	movs	r3, #0
 8002ed0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002ed8:	bf00      	nop
    }

    if (pclk != 0U)
 8002eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d021      	beq.n	8002f24 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee4:	4a1a      	ldr	r2, [pc, #104]	; (8002f50 <UART_SetConfig+0x590>)
 8002ee6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002eea:	461a      	mov	r2, r3
 8002eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eee:	fbb3 f2f2 	udiv	r2, r3, r2
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	085b      	lsrs	r3, r3, #1
 8002ef8:	441a      	add	r2, r3
 8002efa:	697b      	ldr	r3, [r7, #20]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f02:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f04:	6a3b      	ldr	r3, [r7, #32]
 8002f06:	2b0f      	cmp	r3, #15
 8002f08:	d909      	bls.n	8002f1e <UART_SetConfig+0x55e>
 8002f0a:	6a3b      	ldr	r3, [r7, #32]
 8002f0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f10:	d205      	bcs.n	8002f1e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002f12:	6a3b      	ldr	r3, [r7, #32]
 8002f14:	b29a      	uxth	r2, r3
 8002f16:	697b      	ldr	r3, [r7, #20]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	60da      	str	r2, [r3, #12]
 8002f1c:	e002      	b.n	8002f24 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	2200      	movs	r2, #0
 8002f38:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8002f40:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3730      	adds	r7, #48	; 0x30
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f4e:	bf00      	nop
 8002f50:	080058f8 	.word	0x080058f8
 8002f54:	00f42400 	.word	0x00f42400

08002f58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f64:	f003 0301 	and.w	r3, r3, #1
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00a      	beq.n	8002f82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	685b      	ldr	r3, [r3, #4]
 8002f72:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	430a      	orrs	r2, r1
 8002f80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00a      	beq.n	8002fa4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	430a      	orrs	r2, r1
 8002fa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa8:	f003 0304 	and.w	r3, r3, #4
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d00a      	beq.n	8002fc6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fca:	f003 0308 	and.w	r3, r3, #8
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d00a      	beq.n	8002fe8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	430a      	orrs	r2, r1
 8002fe6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fec:	f003 0310 	and.w	r3, r3, #16
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d00a      	beq.n	800300a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	430a      	orrs	r2, r1
 8003008:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300e:	f003 0320 	and.w	r3, r3, #32
 8003012:	2b00      	cmp	r3, #0
 8003014:	d00a      	beq.n	800302c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	430a      	orrs	r2, r1
 800302a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003034:	2b00      	cmp	r3, #0
 8003036:	d01a      	beq.n	800306e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	430a      	orrs	r2, r1
 800304c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003052:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003056:	d10a      	bne.n	800306e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	430a      	orrs	r2, r1
 800306c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00a      	beq.n	8003090 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	430a      	orrs	r2, r1
 800308e:	605a      	str	r2, [r3, #4]
  }
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b086      	sub	sp, #24
 80030a0:	af02      	add	r7, sp, #8
 80030a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2200      	movs	r2, #0
 80030a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80030ac:	f7fd feb0 	bl	8000e10 <HAL_GetTick>
 80030b0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0308 	and.w	r3, r3, #8
 80030bc:	2b08      	cmp	r3, #8
 80030be:	d10e      	bne.n	80030de <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80030c4:	9300      	str	r3, [sp, #0]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2200      	movs	r2, #0
 80030ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 f82f 	bl	8003132 <UART_WaitOnFlagUntilTimeout>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e025      	b.n	800312a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0304 	and.w	r3, r3, #4
 80030e8:	2b04      	cmp	r3, #4
 80030ea:	d10e      	bne.n	800310a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80030f0:	9300      	str	r3, [sp, #0]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f000 f819 	bl	8003132 <UART_WaitOnFlagUntilTimeout>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e00f      	b.n	800312a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2220      	movs	r2, #32
 800310e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2220      	movs	r2, #32
 8003116:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3710      	adds	r7, #16
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b09c      	sub	sp, #112	; 0x70
 8003136:	af00      	add	r7, sp, #0
 8003138:	60f8      	str	r0, [r7, #12]
 800313a:	60b9      	str	r1, [r7, #8]
 800313c:	603b      	str	r3, [r7, #0]
 800313e:	4613      	mov	r3, r2
 8003140:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003142:	e0a9      	b.n	8003298 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003144:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003146:	f1b3 3fff 	cmp.w	r3, #4294967295
 800314a:	f000 80a5 	beq.w	8003298 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800314e:	f7fd fe5f 	bl	8000e10 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800315a:	429a      	cmp	r2, r3
 800315c:	d302      	bcc.n	8003164 <UART_WaitOnFlagUntilTimeout+0x32>
 800315e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003160:	2b00      	cmp	r3, #0
 8003162:	d140      	bne.n	80031e6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800316a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800316c:	e853 3f00 	ldrex	r3, [r3]
 8003170:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003172:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003174:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003178:	667b      	str	r3, [r7, #100]	; 0x64
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	461a      	mov	r2, r3
 8003180:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003182:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003184:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003186:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003188:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800318a:	e841 2300 	strex	r3, r2, [r1]
 800318e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003190:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003192:	2b00      	cmp	r3, #0
 8003194:	d1e6      	bne.n	8003164 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	3308      	adds	r3, #8
 800319c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800319e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031a0:	e853 3f00 	ldrex	r3, [r3]
 80031a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80031a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031a8:	f023 0301 	bic.w	r3, r3, #1
 80031ac:	663b      	str	r3, [r7, #96]	; 0x60
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	3308      	adds	r3, #8
 80031b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80031b6:	64ba      	str	r2, [r7, #72]	; 0x48
 80031b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80031bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80031be:	e841 2300 	strex	r3, r2, [r1]
 80031c2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80031c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d1e5      	bne.n	8003196 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2220      	movs	r2, #32
 80031ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2220      	movs	r2, #32
 80031d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	2200      	movs	r2, #0
 80031de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e069      	b.n	80032ba <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0304 	and.w	r3, r3, #4
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d051      	beq.n	8003298 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003202:	d149      	bne.n	8003298 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800320c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003216:	e853 3f00 	ldrex	r3, [r3]
 800321a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800321c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003222:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	461a      	mov	r2, r3
 800322a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800322c:	637b      	str	r3, [r7, #52]	; 0x34
 800322e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003230:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003232:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003234:	e841 2300 	strex	r3, r2, [r1]
 8003238:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800323a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800323c:	2b00      	cmp	r3, #0
 800323e:	d1e6      	bne.n	800320e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	3308      	adds	r3, #8
 8003246:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	e853 3f00 	ldrex	r3, [r3]
 800324e:	613b      	str	r3, [r7, #16]
   return(result);
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	f023 0301 	bic.w	r3, r3, #1
 8003256:	66bb      	str	r3, [r7, #104]	; 0x68
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	3308      	adds	r3, #8
 800325e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003260:	623a      	str	r2, [r7, #32]
 8003262:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003264:	69f9      	ldr	r1, [r7, #28]
 8003266:	6a3a      	ldr	r2, [r7, #32]
 8003268:	e841 2300 	strex	r3, r2, [r1]
 800326c:	61bb      	str	r3, [r7, #24]
   return(result);
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d1e5      	bne.n	8003240 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2220      	movs	r2, #32
 8003278:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2220      	movs	r2, #32
 8003280:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2220      	movs	r2, #32
 8003288:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e010      	b.n	80032ba <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	69da      	ldr	r2, [r3, #28]
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	4013      	ands	r3, r2
 80032a2:	68ba      	ldr	r2, [r7, #8]
 80032a4:	429a      	cmp	r2, r3
 80032a6:	bf0c      	ite	eq
 80032a8:	2301      	moveq	r3, #1
 80032aa:	2300      	movne	r3, #0
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	461a      	mov	r2, r3
 80032b0:	79fb      	ldrb	r3, [r7, #7]
 80032b2:	429a      	cmp	r2, r3
 80032b4:	f43f af46 	beq.w	8003144 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	3770      	adds	r7, #112	; 0x70
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}

080032c2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80032c2:	b480      	push	{r7}
 80032c4:	b085      	sub	sp, #20
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d101      	bne.n	80032d8 <HAL_UARTEx_DisableFifoMode+0x16>
 80032d4:	2302      	movs	r3, #2
 80032d6:	e027      	b.n	8003328 <HAL_UARTEx_DisableFifoMode+0x66>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2224      	movs	r2, #36	; 0x24
 80032e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f022 0201 	bic.w	r2, r2, #1
 80032fe:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003306:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2220      	movs	r2, #32
 800331a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003326:	2300      	movs	r3, #0
}
 8003328:	4618      	mov	r0, r3
 800332a:	3714      	adds	r7, #20
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003344:	2b01      	cmp	r3, #1
 8003346:	d101      	bne.n	800334c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003348:	2302      	movs	r3, #2
 800334a:	e02d      	b.n	80033a8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2224      	movs	r2, #36	; 0x24
 8003358:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f022 0201 	bic.w	r2, r2, #1
 8003372:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	683a      	ldr	r2, [r7, #0]
 8003384:	430a      	orrs	r2, r1
 8003386:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f000 f84f 	bl	800342c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2220      	movs	r2, #32
 800339a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3710      	adds	r7, #16
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}

080033b0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d101      	bne.n	80033c8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80033c4:	2302      	movs	r3, #2
 80033c6:	e02d      	b.n	8003424 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2224      	movs	r2, #36	; 0x24
 80033d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	681a      	ldr	r2, [r3, #0]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f022 0201 	bic.w	r2, r2, #1
 80033ee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	683a      	ldr	r2, [r7, #0]
 8003400:	430a      	orrs	r2, r1
 8003402:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 f811 	bl	800342c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2220      	movs	r2, #32
 8003416:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003422:	2300      	movs	r3, #0
}
 8003424:	4618      	mov	r0, r3
 8003426:	3710      	adds	r7, #16
 8003428:	46bd      	mov	sp, r7
 800342a:	bd80      	pop	{r7, pc}

0800342c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003438:	2b00      	cmp	r3, #0
 800343a:	d108      	bne.n	800344e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800344c:	e031      	b.n	80034b2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800344e:	2308      	movs	r3, #8
 8003450:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003452:	2308      	movs	r3, #8
 8003454:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	0e5b      	lsrs	r3, r3, #25
 800345e:	b2db      	uxtb	r3, r3
 8003460:	f003 0307 	and.w	r3, r3, #7
 8003464:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	0f5b      	lsrs	r3, r3, #29
 800346e:	b2db      	uxtb	r3, r3
 8003470:	f003 0307 	and.w	r3, r3, #7
 8003474:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003476:	7bbb      	ldrb	r3, [r7, #14]
 8003478:	7b3a      	ldrb	r2, [r7, #12]
 800347a:	4911      	ldr	r1, [pc, #68]	; (80034c0 <UARTEx_SetNbDataToProcess+0x94>)
 800347c:	5c8a      	ldrb	r2, [r1, r2]
 800347e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003482:	7b3a      	ldrb	r2, [r7, #12]
 8003484:	490f      	ldr	r1, [pc, #60]	; (80034c4 <UARTEx_SetNbDataToProcess+0x98>)
 8003486:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003488:	fb93 f3f2 	sdiv	r3, r3, r2
 800348c:	b29a      	uxth	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003494:	7bfb      	ldrb	r3, [r7, #15]
 8003496:	7b7a      	ldrb	r2, [r7, #13]
 8003498:	4909      	ldr	r1, [pc, #36]	; (80034c0 <UARTEx_SetNbDataToProcess+0x94>)
 800349a:	5c8a      	ldrb	r2, [r1, r2]
 800349c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80034a0:	7b7a      	ldrb	r2, [r7, #13]
 80034a2:	4908      	ldr	r1, [pc, #32]	; (80034c4 <UARTEx_SetNbDataToProcess+0x98>)
 80034a4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80034a6:	fb93 f3f2 	sdiv	r3, r3, r2
 80034aa:	b29a      	uxth	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80034b2:	bf00      	nop
 80034b4:	3714      	adds	r7, #20
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	08005910 	.word	0x08005910
 80034c4:	08005918 	.word	0x08005918

080034c8 <makeFreeRtosPriority>:
 80034c8:	b480      	push	{r7}
 80034ca:	b085      	sub	sp, #20
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	4603      	mov	r3, r0
 80034d0:	80fb      	strh	r3, [r7, #6]
 80034d2:	2300      	movs	r3, #0
 80034d4:	60fb      	str	r3, [r7, #12]
 80034d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034da:	2b84      	cmp	r3, #132	; 0x84
 80034dc:	d005      	beq.n	80034ea <makeFreeRtosPriority+0x22>
 80034de:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	4413      	add	r3, r2
 80034e6:	3303      	adds	r3, #3
 80034e8:	60fb      	str	r3, [r7, #12]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	4618      	mov	r0, r3
 80034ee:	3714      	adds	r7, #20
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <osKernelStart>:
 80034f8:	b580      	push	{r7, lr}
 80034fa:	af00      	add	r7, sp, #0
 80034fc:	f000 fa58 	bl	80039b0 <vTaskStartScheduler>
 8003500:	2300      	movs	r3, #0
 8003502:	4618      	mov	r0, r3
 8003504:	bd80      	pop	{r7, pc}

08003506 <osThreadCreate>:
 8003506:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003508:	b087      	sub	sp, #28
 800350a:	af02      	add	r7, sp, #8
 800350c:	6078      	str	r0, [r7, #4]
 800350e:	6039      	str	r1, [r7, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685c      	ldr	r4, [r3, #4]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681d      	ldr	r5, [r3, #0]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	b29e      	uxth	r6, r3
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003524:	4618      	mov	r0, r3
 8003526:	f7ff ffcf 	bl	80034c8 <makeFreeRtosPriority>
 800352a:	4602      	mov	r2, r0
 800352c:	f107 030c 	add.w	r3, r7, #12
 8003530:	9301      	str	r3, [sp, #4]
 8003532:	9200      	str	r2, [sp, #0]
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	4632      	mov	r2, r6
 8003538:	4629      	mov	r1, r5
 800353a:	4620      	mov	r0, r4
 800353c:	f000 f8d2 	bl	80036e4 <xTaskCreate>
 8003540:	4603      	mov	r3, r0
 8003542:	2b01      	cmp	r3, #1
 8003544:	d001      	beq.n	800354a <osThreadCreate+0x44>
 8003546:	2300      	movs	r3, #0
 8003548:	e000      	b.n	800354c <osThreadCreate+0x46>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	4618      	mov	r0, r3
 800354e:	3714      	adds	r7, #20
 8003550:	46bd      	mov	sp, r7
 8003552:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003554 <osDelay>:
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	60fb      	str	r3, [r7, #12]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2b00      	cmp	r3, #0
 8003564:	d001      	beq.n	800356a <osDelay+0x16>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	e000      	b.n	800356c <osDelay+0x18>
 800356a:	2301      	movs	r3, #1
 800356c:	4618      	mov	r0, r3
 800356e:	f000 f9eb 	bl	8003948 <vTaskDelay>
 8003572:	2300      	movs	r3, #0
 8003574:	4618      	mov	r0, r3
 8003576:	3710      	adds	r7, #16
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}

0800357c <vListInitialise>:
 800357c:	b480      	push	{r7}
 800357e:	b083      	sub	sp, #12
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f103 0208 	add.w	r2, r3, #8
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	605a      	str	r2, [r3, #4]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f04f 32ff 	mov.w	r2, #4294967295
 8003594:	609a      	str	r2, [r3, #8]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f103 0208 	add.w	r2, r3, #8
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	60da      	str	r2, [r3, #12]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f103 0208 	add.w	r2, r3, #8
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	611a      	str	r2, [r3, #16]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2200      	movs	r2, #0
 80035ae:	601a      	str	r2, [r3, #0]
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <vListInitialiseItem>:
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	611a      	str	r2, [r3, #16]
 80035ca:	bf00      	nop
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d4:	4770      	bx	lr

080035d6 <vListInsertEnd>:
 80035d6:	b480      	push	{r7}
 80035d8:	b085      	sub	sp, #20
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
 80035de:	6039      	str	r1, [r7, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	60fb      	str	r3, [r7, #12]
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	68fa      	ldr	r2, [r7, #12]
 80035ea:	605a      	str	r2, [r3, #4]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	689a      	ldr	r2, [r3, #8]
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	609a      	str	r2, [r3, #8]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	683a      	ldr	r2, [r7, #0]
 80035fa:	605a      	str	r2, [r3, #4]
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	683a      	ldr	r2, [r7, #0]
 8003600:	609a      	str	r2, [r3, #8]
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	611a      	str	r2, [r3, #16]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	1c5a      	adds	r2, r3, #1
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	601a      	str	r2, [r3, #0]
 8003612:	bf00      	nop
 8003614:	3714      	adds	r7, #20
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr

0800361e <vListInsert>:
 800361e:	b480      	push	{r7}
 8003620:	b085      	sub	sp, #20
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
 8003626:	6039      	str	r1, [r7, #0]
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	60bb      	str	r3, [r7, #8]
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003634:	d103      	bne.n	800363e <vListInsert+0x20>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	691b      	ldr	r3, [r3, #16]
 800363a:	60fb      	str	r3, [r7, #12]
 800363c:	e00c      	b.n	8003658 <vListInsert+0x3a>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	3308      	adds	r3, #8
 8003642:	60fb      	str	r3, [r7, #12]
 8003644:	e002      	b.n	800364c <vListInsert+0x2e>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	60fb      	str	r3, [r7, #12]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68ba      	ldr	r2, [r7, #8]
 8003654:	429a      	cmp	r2, r3
 8003656:	d2f6      	bcs.n	8003646 <vListInsert+0x28>
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	685a      	ldr	r2, [r3, #4]
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	605a      	str	r2, [r3, #4]
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	683a      	ldr	r2, [r7, #0]
 8003666:	609a      	str	r2, [r3, #8]
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	609a      	str	r2, [r3, #8]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	683a      	ldr	r2, [r7, #0]
 8003672:	605a      	str	r2, [r3, #4]
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	611a      	str	r2, [r3, #16]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	1c5a      	adds	r2, r3, #1
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	601a      	str	r2, [r3, #0]
 8003684:	bf00      	nop
 8003686:	3714      	adds	r7, #20
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <uxListRemove>:
 8003690:	b480      	push	{r7}
 8003692:	b085      	sub	sp, #20
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	691b      	ldr	r3, [r3, #16]
 800369c:	60fb      	str	r3, [r7, #12]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	6892      	ldr	r2, [r2, #8]
 80036a6:	609a      	str	r2, [r3, #8]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	6852      	ldr	r2, [r2, #4]
 80036b0:	605a      	str	r2, [r3, #4]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d103      	bne.n	80036c4 <uxListRemove+0x34>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	689a      	ldr	r2, [r3, #8]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	605a      	str	r2, [r3, #4]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2200      	movs	r2, #0
 80036c8:	611a      	str	r2, [r3, #16]
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	1e5a      	subs	r2, r3, #1
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	601a      	str	r2, [r3, #0]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4618      	mov	r0, r3
 80036da:	3714      	adds	r7, #20
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr

080036e4 <xTaskCreate>:
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b08c      	sub	sp, #48	; 0x30
 80036e8:	af04      	add	r7, sp, #16
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	60b9      	str	r1, [r7, #8]
 80036ee:	603b      	str	r3, [r7, #0]
 80036f0:	4613      	mov	r3, r2
 80036f2:	80fb      	strh	r3, [r7, #6]
 80036f4:	88fb      	ldrh	r3, [r7, #6]
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	4618      	mov	r0, r3
 80036fa:	f000 fea5 	bl	8004448 <pvPortMalloc>
 80036fe:	6178      	str	r0, [r7, #20]
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00e      	beq.n	8003724 <xTaskCreate+0x40>
 8003706:	2054      	movs	r0, #84	; 0x54
 8003708:	f000 fe9e 	bl	8004448 <pvPortMalloc>
 800370c:	61f8      	str	r0, [r7, #28]
 800370e:	69fb      	ldr	r3, [r7, #28]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d003      	beq.n	800371c <xTaskCreate+0x38>
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	631a      	str	r2, [r3, #48]	; 0x30
 800371a:	e005      	b.n	8003728 <xTaskCreate+0x44>
 800371c:	6978      	ldr	r0, [r7, #20]
 800371e:	f000 ff5f 	bl	80045e0 <vPortFree>
 8003722:	e001      	b.n	8003728 <xTaskCreate+0x44>
 8003724:	2300      	movs	r3, #0
 8003726:	61fb      	str	r3, [r7, #28]
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d013      	beq.n	8003756 <xTaskCreate+0x72>
 800372e:	88fa      	ldrh	r2, [r7, #6]
 8003730:	2300      	movs	r3, #0
 8003732:	9303      	str	r3, [sp, #12]
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	9302      	str	r3, [sp, #8]
 8003738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800373a:	9301      	str	r3, [sp, #4]
 800373c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800373e:	9300      	str	r3, [sp, #0]
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	68b9      	ldr	r1, [r7, #8]
 8003744:	68f8      	ldr	r0, [r7, #12]
 8003746:	f000 f80e 	bl	8003766 <prvInitialiseNewTask>
 800374a:	69f8      	ldr	r0, [r7, #28]
 800374c:	f000 f892 	bl	8003874 <prvAddNewTaskToReadyList>
 8003750:	2301      	movs	r3, #1
 8003752:	61bb      	str	r3, [r7, #24]
 8003754:	e002      	b.n	800375c <xTaskCreate+0x78>
 8003756:	f04f 33ff 	mov.w	r3, #4294967295
 800375a:	61bb      	str	r3, [r7, #24]
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	4618      	mov	r0, r3
 8003760:	3720      	adds	r7, #32
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}

08003766 <prvInitialiseNewTask>:
 8003766:	b580      	push	{r7, lr}
 8003768:	b088      	sub	sp, #32
 800376a:	af00      	add	r7, sp, #0
 800376c:	60f8      	str	r0, [r7, #12]
 800376e:	60b9      	str	r1, [r7, #8]
 8003770:	607a      	str	r2, [r7, #4]
 8003772:	603b      	str	r3, [r7, #0]
 8003774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003776:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800377e:	3b01      	subs	r3, #1
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	4413      	add	r3, r2
 8003784:	61bb      	str	r3, [r7, #24]
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	f023 0307 	bic.w	r3, r3, #7
 800378c:	61bb      	str	r3, [r7, #24]
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	f003 0307 	and.w	r3, r3, #7
 8003794:	2b00      	cmp	r3, #0
 8003796:	d00a      	beq.n	80037ae <prvInitialiseNewTask+0x48>
 8003798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800379c:	f383 8811 	msr	BASEPRI, r3
 80037a0:	f3bf 8f6f 	isb	sy
 80037a4:	f3bf 8f4f 	dsb	sy
 80037a8:	617b      	str	r3, [r7, #20]
 80037aa:	bf00      	nop
 80037ac:	e7fe      	b.n	80037ac <prvInitialiseNewTask+0x46>
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d01f      	beq.n	80037f4 <prvInitialiseNewTask+0x8e>
 80037b4:	2300      	movs	r3, #0
 80037b6:	61fb      	str	r3, [r7, #28]
 80037b8:	e012      	b.n	80037e0 <prvInitialiseNewTask+0x7a>
 80037ba:	68ba      	ldr	r2, [r7, #8]
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	4413      	add	r3, r2
 80037c0:	7819      	ldrb	r1, [r3, #0]
 80037c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	4413      	add	r3, r2
 80037c8:	3334      	adds	r3, #52	; 0x34
 80037ca:	460a      	mov	r2, r1
 80037cc:	701a      	strb	r2, [r3, #0]
 80037ce:	68ba      	ldr	r2, [r7, #8]
 80037d0:	69fb      	ldr	r3, [r7, #28]
 80037d2:	4413      	add	r3, r2
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d006      	beq.n	80037e8 <prvInitialiseNewTask+0x82>
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	3301      	adds	r3, #1
 80037de:	61fb      	str	r3, [r7, #28]
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	2b0f      	cmp	r3, #15
 80037e4:	d9e9      	bls.n	80037ba <prvInitialiseNewTask+0x54>
 80037e6:	e000      	b.n	80037ea <prvInitialiseNewTask+0x84>
 80037e8:	bf00      	nop
 80037ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037f2:	e003      	b.n	80037fc <prvInitialiseNewTask+0x96>
 80037f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f6:	2200      	movs	r2, #0
 80037f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 80037fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037fe:	2b06      	cmp	r3, #6
 8003800:	d901      	bls.n	8003806 <prvInitialiseNewTask+0xa0>
 8003802:	2306      	movs	r3, #6
 8003804:	62bb      	str	r3, [r7, #40]	; 0x28
 8003806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003808:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800380a:	62da      	str	r2, [r3, #44]	; 0x2c
 800380c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800380e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003810:	645a      	str	r2, [r3, #68]	; 0x44
 8003812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003814:	2200      	movs	r2, #0
 8003816:	649a      	str	r2, [r3, #72]	; 0x48
 8003818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800381a:	3304      	adds	r3, #4
 800381c:	4618      	mov	r0, r3
 800381e:	f7ff fecd 	bl	80035bc <vListInitialiseItem>
 8003822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003824:	3318      	adds	r3, #24
 8003826:	4618      	mov	r0, r3
 8003828:	f7ff fec8 	bl	80035bc <vListInitialiseItem>
 800382c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800382e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003830:	611a      	str	r2, [r3, #16]
 8003832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003834:	f1c3 0207 	rsb	r2, r3, #7
 8003838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800383a:	619a      	str	r2, [r3, #24]
 800383c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800383e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003840:	625a      	str	r2, [r3, #36]	; 0x24
 8003842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003844:	2200      	movs	r2, #0
 8003846:	64da      	str	r2, [r3, #76]	; 0x4c
 8003848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800384a:	2200      	movs	r2, #0
 800384c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003850:	683a      	ldr	r2, [r7, #0]
 8003852:	68f9      	ldr	r1, [r7, #12]
 8003854:	69b8      	ldr	r0, [r7, #24]
 8003856:	f000 fbeb 	bl	8004030 <pxPortInitialiseStack>
 800385a:	4602      	mov	r2, r0
 800385c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800385e:	601a      	str	r2, [r3, #0]
 8003860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003862:	2b00      	cmp	r3, #0
 8003864:	d002      	beq.n	800386c <prvInitialiseNewTask+0x106>
 8003866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003868:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800386a:	601a      	str	r2, [r3, #0]
 800386c:	bf00      	nop
 800386e:	3720      	adds	r7, #32
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <prvAddNewTaskToReadyList>:
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	f000 fd02 	bl	8004284 <vPortEnterCritical>
 8003880:	4b2a      	ldr	r3, [pc, #168]	; (800392c <prvAddNewTaskToReadyList+0xb8>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	3301      	adds	r3, #1
 8003886:	4a29      	ldr	r2, [pc, #164]	; (800392c <prvAddNewTaskToReadyList+0xb8>)
 8003888:	6013      	str	r3, [r2, #0]
 800388a:	4b29      	ldr	r3, [pc, #164]	; (8003930 <prvAddNewTaskToReadyList+0xbc>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d109      	bne.n	80038a6 <prvAddNewTaskToReadyList+0x32>
 8003892:	4a27      	ldr	r2, [pc, #156]	; (8003930 <prvAddNewTaskToReadyList+0xbc>)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6013      	str	r3, [r2, #0]
 8003898:	4b24      	ldr	r3, [pc, #144]	; (800392c <prvAddNewTaskToReadyList+0xb8>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2b01      	cmp	r3, #1
 800389e:	d110      	bne.n	80038c2 <prvAddNewTaskToReadyList+0x4e>
 80038a0:	f000 faa4 	bl	8003dec <prvInitialiseTaskLists>
 80038a4:	e00d      	b.n	80038c2 <prvAddNewTaskToReadyList+0x4e>
 80038a6:	4b23      	ldr	r3, [pc, #140]	; (8003934 <prvAddNewTaskToReadyList+0xc0>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d109      	bne.n	80038c2 <prvAddNewTaskToReadyList+0x4e>
 80038ae:	4b20      	ldr	r3, [pc, #128]	; (8003930 <prvAddNewTaskToReadyList+0xbc>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d802      	bhi.n	80038c2 <prvAddNewTaskToReadyList+0x4e>
 80038bc:	4a1c      	ldr	r2, [pc, #112]	; (8003930 <prvAddNewTaskToReadyList+0xbc>)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6013      	str	r3, [r2, #0]
 80038c2:	4b1d      	ldr	r3, [pc, #116]	; (8003938 <prvAddNewTaskToReadyList+0xc4>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	3301      	adds	r3, #1
 80038c8:	4a1b      	ldr	r2, [pc, #108]	; (8003938 <prvAddNewTaskToReadyList+0xc4>)
 80038ca:	6013      	str	r3, [r2, #0]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d0:	2201      	movs	r2, #1
 80038d2:	409a      	lsls	r2, r3
 80038d4:	4b19      	ldr	r3, [pc, #100]	; (800393c <prvAddNewTaskToReadyList+0xc8>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4313      	orrs	r3, r2
 80038da:	4a18      	ldr	r2, [pc, #96]	; (800393c <prvAddNewTaskToReadyList+0xc8>)
 80038dc:	6013      	str	r3, [r2, #0]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038e2:	4613      	mov	r3, r2
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	4413      	add	r3, r2
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	4a15      	ldr	r2, [pc, #84]	; (8003940 <prvAddNewTaskToReadyList+0xcc>)
 80038ec:	441a      	add	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	3304      	adds	r3, #4
 80038f2:	4619      	mov	r1, r3
 80038f4:	4610      	mov	r0, r2
 80038f6:	f7ff fe6e 	bl	80035d6 <vListInsertEnd>
 80038fa:	f000 fcf3 	bl	80042e4 <vPortExitCritical>
 80038fe:	4b0d      	ldr	r3, [pc, #52]	; (8003934 <prvAddNewTaskToReadyList+0xc0>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d00e      	beq.n	8003924 <prvAddNewTaskToReadyList+0xb0>
 8003906:	4b0a      	ldr	r3, [pc, #40]	; (8003930 <prvAddNewTaskToReadyList+0xbc>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003910:	429a      	cmp	r2, r3
 8003912:	d207      	bcs.n	8003924 <prvAddNewTaskToReadyList+0xb0>
 8003914:	4b0b      	ldr	r3, [pc, #44]	; (8003944 <prvAddNewTaskToReadyList+0xd0>)
 8003916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800391a:	601a      	str	r2, [r3, #0]
 800391c:	f3bf 8f4f 	dsb	sy
 8003920:	f3bf 8f6f 	isb	sy
 8003924:	bf00      	nop
 8003926:	3708      	adds	r7, #8
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	20000278 	.word	0x20000278
 8003930:	20000178 	.word	0x20000178
 8003934:	20000284 	.word	0x20000284
 8003938:	20000294 	.word	0x20000294
 800393c:	20000280 	.word	0x20000280
 8003940:	2000017c 	.word	0x2000017c
 8003944:	e000ed04 	.word	0xe000ed04

08003948 <vTaskDelay>:
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	2300      	movs	r3, #0
 8003952:	60fb      	str	r3, [r7, #12]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d017      	beq.n	800398a <vTaskDelay+0x42>
 800395a:	4b13      	ldr	r3, [pc, #76]	; (80039a8 <vTaskDelay+0x60>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00a      	beq.n	8003978 <vTaskDelay+0x30>
 8003962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003966:	f383 8811 	msr	BASEPRI, r3
 800396a:	f3bf 8f6f 	isb	sy
 800396e:	f3bf 8f4f 	dsb	sy
 8003972:	60bb      	str	r3, [r7, #8]
 8003974:	bf00      	nop
 8003976:	e7fe      	b.n	8003976 <vTaskDelay+0x2e>
 8003978:	f000 f862 	bl	8003a40 <vTaskSuspendAll>
 800397c:	2100      	movs	r1, #0
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 faf0 	bl	8003f64 <prvAddCurrentTaskToDelayedList>
 8003984:	f000 f86a 	bl	8003a5c <xTaskResumeAll>
 8003988:	60f8      	str	r0, [r7, #12]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d107      	bne.n	80039a0 <vTaskDelay+0x58>
 8003990:	4b06      	ldr	r3, [pc, #24]	; (80039ac <vTaskDelay+0x64>)
 8003992:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003996:	601a      	str	r2, [r3, #0]
 8003998:	f3bf 8f4f 	dsb	sy
 800399c:	f3bf 8f6f 	isb	sy
 80039a0:	bf00      	nop
 80039a2:	3710      	adds	r7, #16
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	200002a0 	.word	0x200002a0
 80039ac:	e000ed04 	.word	0xe000ed04

080039b0 <vTaskStartScheduler>:
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b086      	sub	sp, #24
 80039b4:	af02      	add	r7, sp, #8
 80039b6:	4b1c      	ldr	r3, [pc, #112]	; (8003a28 <vTaskStartScheduler+0x78>)
 80039b8:	9301      	str	r3, [sp, #4]
 80039ba:	2300      	movs	r3, #0
 80039bc:	9300      	str	r3, [sp, #0]
 80039be:	2300      	movs	r3, #0
 80039c0:	2280      	movs	r2, #128	; 0x80
 80039c2:	491a      	ldr	r1, [pc, #104]	; (8003a2c <vTaskStartScheduler+0x7c>)
 80039c4:	481a      	ldr	r0, [pc, #104]	; (8003a30 <vTaskStartScheduler+0x80>)
 80039c6:	f7ff fe8d 	bl	80036e4 <xTaskCreate>
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d116      	bne.n	8003a00 <vTaskStartScheduler+0x50>
 80039d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d6:	f383 8811 	msr	BASEPRI, r3
 80039da:	f3bf 8f6f 	isb	sy
 80039de:	f3bf 8f4f 	dsb	sy
 80039e2:	60bb      	str	r3, [r7, #8]
 80039e4:	bf00      	nop
 80039e6:	4b13      	ldr	r3, [pc, #76]	; (8003a34 <vTaskStartScheduler+0x84>)
 80039e8:	f04f 32ff 	mov.w	r2, #4294967295
 80039ec:	601a      	str	r2, [r3, #0]
 80039ee:	4b12      	ldr	r3, [pc, #72]	; (8003a38 <vTaskStartScheduler+0x88>)
 80039f0:	2201      	movs	r2, #1
 80039f2:	601a      	str	r2, [r3, #0]
 80039f4:	4b11      	ldr	r3, [pc, #68]	; (8003a3c <vTaskStartScheduler+0x8c>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	601a      	str	r2, [r3, #0]
 80039fa:	f000 fba1 	bl	8004140 <xPortStartScheduler>
 80039fe:	e00e      	b.n	8003a1e <vTaskStartScheduler+0x6e>
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a06:	d10a      	bne.n	8003a1e <vTaskStartScheduler+0x6e>
 8003a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a0c:	f383 8811 	msr	BASEPRI, r3
 8003a10:	f3bf 8f6f 	isb	sy
 8003a14:	f3bf 8f4f 	dsb	sy
 8003a18:	607b      	str	r3, [r7, #4]
 8003a1a:	bf00      	nop
 8003a1c:	e7fe      	b.n	8003a1c <vTaskStartScheduler+0x6c>
 8003a1e:	bf00      	nop
 8003a20:	3710      	adds	r7, #16
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	2000029c 	.word	0x2000029c
 8003a2c:	080058d8 	.word	0x080058d8
 8003a30:	08003dbd 	.word	0x08003dbd
 8003a34:	20000298 	.word	0x20000298
 8003a38:	20000284 	.word	0x20000284
 8003a3c:	2000027c 	.word	0x2000027c

08003a40 <vTaskSuspendAll>:
 8003a40:	b480      	push	{r7}
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	4b04      	ldr	r3, [pc, #16]	; (8003a58 <vTaskSuspendAll+0x18>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	3301      	adds	r3, #1
 8003a4a:	4a03      	ldr	r2, [pc, #12]	; (8003a58 <vTaskSuspendAll+0x18>)
 8003a4c:	6013      	str	r3, [r2, #0]
 8003a4e:	bf00      	nop
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr
 8003a58:	200002a0 	.word	0x200002a0

08003a5c <xTaskResumeAll>:
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b084      	sub	sp, #16
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	2300      	movs	r3, #0
 8003a64:	60fb      	str	r3, [r7, #12]
 8003a66:	2300      	movs	r3, #0
 8003a68:	60bb      	str	r3, [r7, #8]
 8003a6a:	4b41      	ldr	r3, [pc, #260]	; (8003b70 <xTaskResumeAll+0x114>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d10a      	bne.n	8003a88 <xTaskResumeAll+0x2c>
 8003a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a76:	f383 8811 	msr	BASEPRI, r3
 8003a7a:	f3bf 8f6f 	isb	sy
 8003a7e:	f3bf 8f4f 	dsb	sy
 8003a82:	603b      	str	r3, [r7, #0]
 8003a84:	bf00      	nop
 8003a86:	e7fe      	b.n	8003a86 <xTaskResumeAll+0x2a>
 8003a88:	f000 fbfc 	bl	8004284 <vPortEnterCritical>
 8003a8c:	4b38      	ldr	r3, [pc, #224]	; (8003b70 <xTaskResumeAll+0x114>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	3b01      	subs	r3, #1
 8003a92:	4a37      	ldr	r2, [pc, #220]	; (8003b70 <xTaskResumeAll+0x114>)
 8003a94:	6013      	str	r3, [r2, #0]
 8003a96:	4b36      	ldr	r3, [pc, #216]	; (8003b70 <xTaskResumeAll+0x114>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d161      	bne.n	8003b62 <xTaskResumeAll+0x106>
 8003a9e:	4b35      	ldr	r3, [pc, #212]	; (8003b74 <xTaskResumeAll+0x118>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d05d      	beq.n	8003b62 <xTaskResumeAll+0x106>
 8003aa6:	e02e      	b.n	8003b06 <xTaskResumeAll+0xaa>
 8003aa8:	4b33      	ldr	r3, [pc, #204]	; (8003b78 <xTaskResumeAll+0x11c>)
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	68db      	ldr	r3, [r3, #12]
 8003aae:	60fb      	str	r3, [r7, #12]
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	3318      	adds	r3, #24
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7ff fdeb 	bl	8003690 <uxListRemove>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	3304      	adds	r3, #4
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7ff fde6 	bl	8003690 <uxListRemove>
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac8:	2201      	movs	r2, #1
 8003aca:	409a      	lsls	r2, r3
 8003acc:	4b2b      	ldr	r3, [pc, #172]	; (8003b7c <xTaskResumeAll+0x120>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	4a2a      	ldr	r2, [pc, #168]	; (8003b7c <xTaskResumeAll+0x120>)
 8003ad4:	6013      	str	r3, [r2, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ada:	4613      	mov	r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	4413      	add	r3, r2
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	4a27      	ldr	r2, [pc, #156]	; (8003b80 <xTaskResumeAll+0x124>)
 8003ae4:	441a      	add	r2, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	3304      	adds	r3, #4
 8003aea:	4619      	mov	r1, r3
 8003aec:	4610      	mov	r0, r2
 8003aee:	f7ff fd72 	bl	80035d6 <vListInsertEnd>
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003af6:	4b23      	ldr	r3, [pc, #140]	; (8003b84 <xTaskResumeAll+0x128>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d302      	bcc.n	8003b06 <xTaskResumeAll+0xaa>
 8003b00:	4b21      	ldr	r3, [pc, #132]	; (8003b88 <xTaskResumeAll+0x12c>)
 8003b02:	2201      	movs	r2, #1
 8003b04:	601a      	str	r2, [r3, #0]
 8003b06:	4b1c      	ldr	r3, [pc, #112]	; (8003b78 <xTaskResumeAll+0x11c>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d1cc      	bne.n	8003aa8 <xTaskResumeAll+0x4c>
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d001      	beq.n	8003b18 <xTaskResumeAll+0xbc>
 8003b14:	f000 f9e8 	bl	8003ee8 <prvResetNextTaskUnblockTime>
 8003b18:	4b1c      	ldr	r3, [pc, #112]	; (8003b8c <xTaskResumeAll+0x130>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	607b      	str	r3, [r7, #4]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d010      	beq.n	8003b46 <xTaskResumeAll+0xea>
 8003b24:	f000 f836 	bl	8003b94 <xTaskIncrementTick>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d002      	beq.n	8003b34 <xTaskResumeAll+0xd8>
 8003b2e:	4b16      	ldr	r3, [pc, #88]	; (8003b88 <xTaskResumeAll+0x12c>)
 8003b30:	2201      	movs	r2, #1
 8003b32:	601a      	str	r2, [r3, #0]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	3b01      	subs	r3, #1
 8003b38:	607b      	str	r3, [r7, #4]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d1f1      	bne.n	8003b24 <xTaskResumeAll+0xc8>
 8003b40:	4b12      	ldr	r3, [pc, #72]	; (8003b8c <xTaskResumeAll+0x130>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	601a      	str	r2, [r3, #0]
 8003b46:	4b10      	ldr	r3, [pc, #64]	; (8003b88 <xTaskResumeAll+0x12c>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d009      	beq.n	8003b62 <xTaskResumeAll+0x106>
 8003b4e:	2301      	movs	r3, #1
 8003b50:	60bb      	str	r3, [r7, #8]
 8003b52:	4b0f      	ldr	r3, [pc, #60]	; (8003b90 <xTaskResumeAll+0x134>)
 8003b54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b58:	601a      	str	r2, [r3, #0]
 8003b5a:	f3bf 8f4f 	dsb	sy
 8003b5e:	f3bf 8f6f 	isb	sy
 8003b62:	f000 fbbf 	bl	80042e4 <vPortExitCritical>
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	4618      	mov	r0, r3
 8003b6a:	3710      	adds	r7, #16
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	200002a0 	.word	0x200002a0
 8003b74:	20000278 	.word	0x20000278
 8003b78:	20000238 	.word	0x20000238
 8003b7c:	20000280 	.word	0x20000280
 8003b80:	2000017c 	.word	0x2000017c
 8003b84:	20000178 	.word	0x20000178
 8003b88:	2000028c 	.word	0x2000028c
 8003b8c:	20000288 	.word	0x20000288
 8003b90:	e000ed04 	.word	0xe000ed04

08003b94 <xTaskIncrementTick>:
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	617b      	str	r3, [r7, #20]
 8003b9e:	4b4e      	ldr	r3, [pc, #312]	; (8003cd8 <xTaskIncrementTick+0x144>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	f040 808e 	bne.w	8003cc4 <xTaskIncrementTick+0x130>
 8003ba8:	4b4c      	ldr	r3, [pc, #304]	; (8003cdc <xTaskIncrementTick+0x148>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	3301      	adds	r3, #1
 8003bae:	613b      	str	r3, [r7, #16]
 8003bb0:	4a4a      	ldr	r2, [pc, #296]	; (8003cdc <xTaskIncrementTick+0x148>)
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	6013      	str	r3, [r2, #0]
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d120      	bne.n	8003bfe <xTaskIncrementTick+0x6a>
 8003bbc:	4b48      	ldr	r3, [pc, #288]	; (8003ce0 <xTaskIncrementTick+0x14c>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00a      	beq.n	8003bdc <xTaskIncrementTick+0x48>
 8003bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bca:	f383 8811 	msr	BASEPRI, r3
 8003bce:	f3bf 8f6f 	isb	sy
 8003bd2:	f3bf 8f4f 	dsb	sy
 8003bd6:	603b      	str	r3, [r7, #0]
 8003bd8:	bf00      	nop
 8003bda:	e7fe      	b.n	8003bda <xTaskIncrementTick+0x46>
 8003bdc:	4b40      	ldr	r3, [pc, #256]	; (8003ce0 <xTaskIncrementTick+0x14c>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	60fb      	str	r3, [r7, #12]
 8003be2:	4b40      	ldr	r3, [pc, #256]	; (8003ce4 <xTaskIncrementTick+0x150>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a3e      	ldr	r2, [pc, #248]	; (8003ce0 <xTaskIncrementTick+0x14c>)
 8003be8:	6013      	str	r3, [r2, #0]
 8003bea:	4a3e      	ldr	r2, [pc, #248]	; (8003ce4 <xTaskIncrementTick+0x150>)
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6013      	str	r3, [r2, #0]
 8003bf0:	4b3d      	ldr	r3, [pc, #244]	; (8003ce8 <xTaskIncrementTick+0x154>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	3301      	adds	r3, #1
 8003bf6:	4a3c      	ldr	r2, [pc, #240]	; (8003ce8 <xTaskIncrementTick+0x154>)
 8003bf8:	6013      	str	r3, [r2, #0]
 8003bfa:	f000 f975 	bl	8003ee8 <prvResetNextTaskUnblockTime>
 8003bfe:	4b3b      	ldr	r3, [pc, #236]	; (8003cec <xTaskIncrementTick+0x158>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d348      	bcc.n	8003c9a <xTaskIncrementTick+0x106>
 8003c08:	4b35      	ldr	r3, [pc, #212]	; (8003ce0 <xTaskIncrementTick+0x14c>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d104      	bne.n	8003c1c <xTaskIncrementTick+0x88>
 8003c12:	4b36      	ldr	r3, [pc, #216]	; (8003cec <xTaskIncrementTick+0x158>)
 8003c14:	f04f 32ff 	mov.w	r2, #4294967295
 8003c18:	601a      	str	r2, [r3, #0]
 8003c1a:	e03e      	b.n	8003c9a <xTaskIncrementTick+0x106>
 8003c1c:	4b30      	ldr	r3, [pc, #192]	; (8003ce0 <xTaskIncrementTick+0x14c>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68db      	ldr	r3, [r3, #12]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	60bb      	str	r3, [r7, #8]
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	607b      	str	r3, [r7, #4]
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d203      	bcs.n	8003c3c <xTaskIncrementTick+0xa8>
 8003c34:	4a2d      	ldr	r2, [pc, #180]	; (8003cec <xTaskIncrementTick+0x158>)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6013      	str	r3, [r2, #0]
 8003c3a:	e02e      	b.n	8003c9a <xTaskIncrementTick+0x106>
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	3304      	adds	r3, #4
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7ff fd25 	bl	8003690 <uxListRemove>
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d004      	beq.n	8003c58 <xTaskIncrementTick+0xc4>
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	3318      	adds	r3, #24
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7ff fd1c 	bl	8003690 <uxListRemove>
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	409a      	lsls	r2, r3
 8003c60:	4b23      	ldr	r3, [pc, #140]	; (8003cf0 <xTaskIncrementTick+0x15c>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4313      	orrs	r3, r2
 8003c66:	4a22      	ldr	r2, [pc, #136]	; (8003cf0 <xTaskIncrementTick+0x15c>)
 8003c68:	6013      	str	r3, [r2, #0]
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c6e:	4613      	mov	r3, r2
 8003c70:	009b      	lsls	r3, r3, #2
 8003c72:	4413      	add	r3, r2
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	4a1f      	ldr	r2, [pc, #124]	; (8003cf4 <xTaskIncrementTick+0x160>)
 8003c78:	441a      	add	r2, r3
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	3304      	adds	r3, #4
 8003c7e:	4619      	mov	r1, r3
 8003c80:	4610      	mov	r0, r2
 8003c82:	f7ff fca8 	bl	80035d6 <vListInsertEnd>
 8003c86:	68bb      	ldr	r3, [r7, #8]
 8003c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c8a:	4b1b      	ldr	r3, [pc, #108]	; (8003cf8 <xTaskIncrementTick+0x164>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d3b9      	bcc.n	8003c08 <xTaskIncrementTick+0x74>
 8003c94:	2301      	movs	r3, #1
 8003c96:	617b      	str	r3, [r7, #20]
 8003c98:	e7b6      	b.n	8003c08 <xTaskIncrementTick+0x74>
 8003c9a:	4b17      	ldr	r3, [pc, #92]	; (8003cf8 <xTaskIncrementTick+0x164>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ca0:	4914      	ldr	r1, [pc, #80]	; (8003cf4 <xTaskIncrementTick+0x160>)
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	4413      	add	r3, r2
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	440b      	add	r3, r1
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d901      	bls.n	8003cb6 <xTaskIncrementTick+0x122>
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	617b      	str	r3, [r7, #20]
 8003cb6:	4b11      	ldr	r3, [pc, #68]	; (8003cfc <xTaskIncrementTick+0x168>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d007      	beq.n	8003cce <xTaskIncrementTick+0x13a>
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	617b      	str	r3, [r7, #20]
 8003cc2:	e004      	b.n	8003cce <xTaskIncrementTick+0x13a>
 8003cc4:	4b0e      	ldr	r3, [pc, #56]	; (8003d00 <xTaskIncrementTick+0x16c>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	3301      	adds	r3, #1
 8003cca:	4a0d      	ldr	r2, [pc, #52]	; (8003d00 <xTaskIncrementTick+0x16c>)
 8003ccc:	6013      	str	r3, [r2, #0]
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3718      	adds	r7, #24
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	200002a0 	.word	0x200002a0
 8003cdc:	2000027c 	.word	0x2000027c
 8003ce0:	20000230 	.word	0x20000230
 8003ce4:	20000234 	.word	0x20000234
 8003ce8:	20000290 	.word	0x20000290
 8003cec:	20000298 	.word	0x20000298
 8003cf0:	20000280 	.word	0x20000280
 8003cf4:	2000017c 	.word	0x2000017c
 8003cf8:	20000178 	.word	0x20000178
 8003cfc:	2000028c 	.word	0x2000028c
 8003d00:	20000288 	.word	0x20000288

08003d04 <vTaskSwitchContext>:
 8003d04:	b480      	push	{r7}
 8003d06:	b087      	sub	sp, #28
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	4b27      	ldr	r3, [pc, #156]	; (8003da8 <vTaskSwitchContext+0xa4>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d003      	beq.n	8003d1a <vTaskSwitchContext+0x16>
 8003d12:	4b26      	ldr	r3, [pc, #152]	; (8003dac <vTaskSwitchContext+0xa8>)
 8003d14:	2201      	movs	r2, #1
 8003d16:	601a      	str	r2, [r3, #0]
 8003d18:	e03f      	b.n	8003d9a <vTaskSwitchContext+0x96>
 8003d1a:	4b24      	ldr	r3, [pc, #144]	; (8003dac <vTaskSwitchContext+0xa8>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	601a      	str	r2, [r3, #0]
 8003d20:	4b23      	ldr	r3, [pc, #140]	; (8003db0 <vTaskSwitchContext+0xac>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	60fb      	str	r3, [r7, #12]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	fab3 f383 	clz	r3, r3
 8003d2c:	72fb      	strb	r3, [r7, #11]
 8003d2e:	7afb      	ldrb	r3, [r7, #11]
 8003d30:	f1c3 031f 	rsb	r3, r3, #31
 8003d34:	617b      	str	r3, [r7, #20]
 8003d36:	491f      	ldr	r1, [pc, #124]	; (8003db4 <vTaskSwitchContext+0xb0>)
 8003d38:	697a      	ldr	r2, [r7, #20]
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	4413      	add	r3, r2
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	440b      	add	r3, r1
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d10a      	bne.n	8003d60 <vTaskSwitchContext+0x5c>
 8003d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d4e:	f383 8811 	msr	BASEPRI, r3
 8003d52:	f3bf 8f6f 	isb	sy
 8003d56:	f3bf 8f4f 	dsb	sy
 8003d5a:	607b      	str	r3, [r7, #4]
 8003d5c:	bf00      	nop
 8003d5e:	e7fe      	b.n	8003d5e <vTaskSwitchContext+0x5a>
 8003d60:	697a      	ldr	r2, [r7, #20]
 8003d62:	4613      	mov	r3, r2
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	4413      	add	r3, r2
 8003d68:	009b      	lsls	r3, r3, #2
 8003d6a:	4a12      	ldr	r2, [pc, #72]	; (8003db4 <vTaskSwitchContext+0xb0>)
 8003d6c:	4413      	add	r3, r2
 8003d6e:	613b      	str	r3, [r7, #16]
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	685a      	ldr	r2, [r3, #4]
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	605a      	str	r2, [r3, #4]
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	685a      	ldr	r2, [r3, #4]
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	3308      	adds	r3, #8
 8003d82:	429a      	cmp	r2, r3
 8003d84:	d104      	bne.n	8003d90 <vTaskSwitchContext+0x8c>
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	685a      	ldr	r2, [r3, #4]
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	605a      	str	r2, [r3, #4]
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	4a08      	ldr	r2, [pc, #32]	; (8003db8 <vTaskSwitchContext+0xb4>)
 8003d98:	6013      	str	r3, [r2, #0]
 8003d9a:	bf00      	nop
 8003d9c:	371c      	adds	r7, #28
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da4:	4770      	bx	lr
 8003da6:	bf00      	nop
 8003da8:	200002a0 	.word	0x200002a0
 8003dac:	2000028c 	.word	0x2000028c
 8003db0:	20000280 	.word	0x20000280
 8003db4:	2000017c 	.word	0x2000017c
 8003db8:	20000178 	.word	0x20000178

08003dbc <prvIdleTask>:
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b082      	sub	sp, #8
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	f000 f852 	bl	8003e6c <prvCheckTasksWaitingTermination>
 8003dc8:	4b06      	ldr	r3, [pc, #24]	; (8003de4 <prvIdleTask+0x28>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d9f9      	bls.n	8003dc4 <prvIdleTask+0x8>
 8003dd0:	4b05      	ldr	r3, [pc, #20]	; (8003de8 <prvIdleTask+0x2c>)
 8003dd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dd6:	601a      	str	r2, [r3, #0]
 8003dd8:	f3bf 8f4f 	dsb	sy
 8003ddc:	f3bf 8f6f 	isb	sy
 8003de0:	e7f0      	b.n	8003dc4 <prvIdleTask+0x8>
 8003de2:	bf00      	nop
 8003de4:	2000017c 	.word	0x2000017c
 8003de8:	e000ed04 	.word	0xe000ed04

08003dec <prvInitialiseTaskLists>:
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	2300      	movs	r3, #0
 8003df4:	607b      	str	r3, [r7, #4]
 8003df6:	e00c      	b.n	8003e12 <prvInitialiseTaskLists+0x26>
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	4413      	add	r3, r2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	4a12      	ldr	r2, [pc, #72]	; (8003e4c <prvInitialiseTaskLists+0x60>)
 8003e04:	4413      	add	r3, r2
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7ff fbb8 	bl	800357c <vListInitialise>
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	3301      	adds	r3, #1
 8003e10:	607b      	str	r3, [r7, #4]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2b06      	cmp	r3, #6
 8003e16:	d9ef      	bls.n	8003df8 <prvInitialiseTaskLists+0xc>
 8003e18:	480d      	ldr	r0, [pc, #52]	; (8003e50 <prvInitialiseTaskLists+0x64>)
 8003e1a:	f7ff fbaf 	bl	800357c <vListInitialise>
 8003e1e:	480d      	ldr	r0, [pc, #52]	; (8003e54 <prvInitialiseTaskLists+0x68>)
 8003e20:	f7ff fbac 	bl	800357c <vListInitialise>
 8003e24:	480c      	ldr	r0, [pc, #48]	; (8003e58 <prvInitialiseTaskLists+0x6c>)
 8003e26:	f7ff fba9 	bl	800357c <vListInitialise>
 8003e2a:	480c      	ldr	r0, [pc, #48]	; (8003e5c <prvInitialiseTaskLists+0x70>)
 8003e2c:	f7ff fba6 	bl	800357c <vListInitialise>
 8003e30:	480b      	ldr	r0, [pc, #44]	; (8003e60 <prvInitialiseTaskLists+0x74>)
 8003e32:	f7ff fba3 	bl	800357c <vListInitialise>
 8003e36:	4b0b      	ldr	r3, [pc, #44]	; (8003e64 <prvInitialiseTaskLists+0x78>)
 8003e38:	4a05      	ldr	r2, [pc, #20]	; (8003e50 <prvInitialiseTaskLists+0x64>)
 8003e3a:	601a      	str	r2, [r3, #0]
 8003e3c:	4b0a      	ldr	r3, [pc, #40]	; (8003e68 <prvInitialiseTaskLists+0x7c>)
 8003e3e:	4a05      	ldr	r2, [pc, #20]	; (8003e54 <prvInitialiseTaskLists+0x68>)
 8003e40:	601a      	str	r2, [r3, #0]
 8003e42:	bf00      	nop
 8003e44:	3708      	adds	r7, #8
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	2000017c 	.word	0x2000017c
 8003e50:	20000208 	.word	0x20000208
 8003e54:	2000021c 	.word	0x2000021c
 8003e58:	20000238 	.word	0x20000238
 8003e5c:	2000024c 	.word	0x2000024c
 8003e60:	20000264 	.word	0x20000264
 8003e64:	20000230 	.word	0x20000230
 8003e68:	20000234 	.word	0x20000234

08003e6c <prvCheckTasksWaitingTermination>:
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	e019      	b.n	8003ea8 <prvCheckTasksWaitingTermination+0x3c>
 8003e74:	f000 fa06 	bl	8004284 <vPortEnterCritical>
 8003e78:	4b10      	ldr	r3, [pc, #64]	; (8003ebc <prvCheckTasksWaitingTermination+0x50>)
 8003e7a:	68db      	ldr	r3, [r3, #12]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	607b      	str	r3, [r7, #4]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	3304      	adds	r3, #4
 8003e84:	4618      	mov	r0, r3
 8003e86:	f7ff fc03 	bl	8003690 <uxListRemove>
 8003e8a:	4b0d      	ldr	r3, [pc, #52]	; (8003ec0 <prvCheckTasksWaitingTermination+0x54>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	4a0b      	ldr	r2, [pc, #44]	; (8003ec0 <prvCheckTasksWaitingTermination+0x54>)
 8003e92:	6013      	str	r3, [r2, #0]
 8003e94:	4b0b      	ldr	r3, [pc, #44]	; (8003ec4 <prvCheckTasksWaitingTermination+0x58>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	3b01      	subs	r3, #1
 8003e9a:	4a0a      	ldr	r2, [pc, #40]	; (8003ec4 <prvCheckTasksWaitingTermination+0x58>)
 8003e9c:	6013      	str	r3, [r2, #0]
 8003e9e:	f000 fa21 	bl	80042e4 <vPortExitCritical>
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	f000 f810 	bl	8003ec8 <prvDeleteTCB>
 8003ea8:	4b06      	ldr	r3, [pc, #24]	; (8003ec4 <prvCheckTasksWaitingTermination+0x58>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d1e1      	bne.n	8003e74 <prvCheckTasksWaitingTermination+0x8>
 8003eb0:	bf00      	nop
 8003eb2:	bf00      	nop
 8003eb4:	3708      	adds	r7, #8
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	2000024c 	.word	0x2000024c
 8003ec0:	20000278 	.word	0x20000278
 8003ec4:	20000260 	.word	0x20000260

08003ec8 <prvDeleteTCB>:
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b082      	sub	sp, #8
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f000 fb83 	bl	80045e0 <vPortFree>
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 fb80 	bl	80045e0 <vPortFree>
 8003ee0:	bf00      	nop
 8003ee2:	3708      	adds	r7, #8
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}

08003ee8 <prvResetNextTaskUnblockTime>:
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	4b0c      	ldr	r3, [pc, #48]	; (8003f20 <prvResetNextTaskUnblockTime+0x38>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d104      	bne.n	8003f02 <prvResetNextTaskUnblockTime+0x1a>
 8003ef8:	4b0a      	ldr	r3, [pc, #40]	; (8003f24 <prvResetNextTaskUnblockTime+0x3c>)
 8003efa:	f04f 32ff 	mov.w	r2, #4294967295
 8003efe:	601a      	str	r2, [r3, #0]
 8003f00:	e008      	b.n	8003f14 <prvResetNextTaskUnblockTime+0x2c>
 8003f02:	4b07      	ldr	r3, [pc, #28]	; (8003f20 <prvResetNextTaskUnblockTime+0x38>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	607b      	str	r3, [r7, #4]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	4a04      	ldr	r2, [pc, #16]	; (8003f24 <prvResetNextTaskUnblockTime+0x3c>)
 8003f12:	6013      	str	r3, [r2, #0]
 8003f14:	bf00      	nop
 8003f16:	370c      	adds	r7, #12
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr
 8003f20:	20000230 	.word	0x20000230
 8003f24:	20000298 	.word	0x20000298

08003f28 <xTaskGetSchedulerState>:
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	4b0b      	ldr	r3, [pc, #44]	; (8003f5c <xTaskGetSchedulerState+0x34>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d102      	bne.n	8003f3c <xTaskGetSchedulerState+0x14>
 8003f36:	2301      	movs	r3, #1
 8003f38:	607b      	str	r3, [r7, #4]
 8003f3a:	e008      	b.n	8003f4e <xTaskGetSchedulerState+0x26>
 8003f3c:	4b08      	ldr	r3, [pc, #32]	; (8003f60 <xTaskGetSchedulerState+0x38>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d102      	bne.n	8003f4a <xTaskGetSchedulerState+0x22>
 8003f44:	2302      	movs	r3, #2
 8003f46:	607b      	str	r3, [r7, #4]
 8003f48:	e001      	b.n	8003f4e <xTaskGetSchedulerState+0x26>
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	607b      	str	r3, [r7, #4]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4618      	mov	r0, r3
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr
 8003f5c:	20000284 	.word	0x20000284
 8003f60:	200002a0 	.word	0x200002a0

08003f64 <prvAddCurrentTaskToDelayedList>:
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
 8003f6e:	4b29      	ldr	r3, [pc, #164]	; (8004014 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	60fb      	str	r3, [r7, #12]
 8003f74:	4b28      	ldr	r3, [pc, #160]	; (8004018 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	3304      	adds	r3, #4
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7ff fb88 	bl	8003690 <uxListRemove>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d10b      	bne.n	8003f9e <prvAddCurrentTaskToDelayedList+0x3a>
 8003f86:	4b24      	ldr	r3, [pc, #144]	; (8004018 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f92:	43da      	mvns	r2, r3
 8003f94:	4b21      	ldr	r3, [pc, #132]	; (800401c <prvAddCurrentTaskToDelayedList+0xb8>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4013      	ands	r3, r2
 8003f9a:	4a20      	ldr	r2, [pc, #128]	; (800401c <prvAddCurrentTaskToDelayedList+0xb8>)
 8003f9c:	6013      	str	r3, [r2, #0]
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fa4:	d10a      	bne.n	8003fbc <prvAddCurrentTaskToDelayedList+0x58>
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d007      	beq.n	8003fbc <prvAddCurrentTaskToDelayedList+0x58>
 8003fac:	4b1a      	ldr	r3, [pc, #104]	; (8004018 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	3304      	adds	r3, #4
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	481a      	ldr	r0, [pc, #104]	; (8004020 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003fb6:	f7ff fb0e 	bl	80035d6 <vListInsertEnd>
 8003fba:	e026      	b.n	800400a <prvAddCurrentTaskToDelayedList+0xa6>
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	60bb      	str	r3, [r7, #8]
 8003fc4:	4b14      	ldr	r3, [pc, #80]	; (8004018 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68ba      	ldr	r2, [r7, #8]
 8003fca:	605a      	str	r2, [r3, #4]
 8003fcc:	68ba      	ldr	r2, [r7, #8]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	429a      	cmp	r2, r3
 8003fd2:	d209      	bcs.n	8003fe8 <prvAddCurrentTaskToDelayedList+0x84>
 8003fd4:	4b13      	ldr	r3, [pc, #76]	; (8004024 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	4b0f      	ldr	r3, [pc, #60]	; (8004018 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	3304      	adds	r3, #4
 8003fde:	4619      	mov	r1, r3
 8003fe0:	4610      	mov	r0, r2
 8003fe2:	f7ff fb1c 	bl	800361e <vListInsert>
 8003fe6:	e010      	b.n	800400a <prvAddCurrentTaskToDelayedList+0xa6>
 8003fe8:	4b0f      	ldr	r3, [pc, #60]	; (8004028 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003fea:	681a      	ldr	r2, [r3, #0]
 8003fec:	4b0a      	ldr	r3, [pc, #40]	; (8004018 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	3304      	adds	r3, #4
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	4610      	mov	r0, r2
 8003ff6:	f7ff fb12 	bl	800361e <vListInsert>
 8003ffa:	4b0c      	ldr	r3, [pc, #48]	; (800402c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68ba      	ldr	r2, [r7, #8]
 8004000:	429a      	cmp	r2, r3
 8004002:	d202      	bcs.n	800400a <prvAddCurrentTaskToDelayedList+0xa6>
 8004004:	4a09      	ldr	r2, [pc, #36]	; (800402c <prvAddCurrentTaskToDelayedList+0xc8>)
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	6013      	str	r3, [r2, #0]
 800400a:	bf00      	nop
 800400c:	3710      	adds	r7, #16
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	2000027c 	.word	0x2000027c
 8004018:	20000178 	.word	0x20000178
 800401c:	20000280 	.word	0x20000280
 8004020:	20000264 	.word	0x20000264
 8004024:	20000234 	.word	0x20000234
 8004028:	20000230 	.word	0x20000230
 800402c:	20000298 	.word	0x20000298

08004030 <pxPortInitialiseStack>:
 8004030:	b480      	push	{r7}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
 8004036:	60f8      	str	r0, [r7, #12]
 8004038:	60b9      	str	r1, [r7, #8]
 800403a:	607a      	str	r2, [r7, #4]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	3b04      	subs	r3, #4
 8004040:	60fb      	str	r3, [r7, #12]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004048:	601a      	str	r2, [r3, #0]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	3b04      	subs	r3, #4
 800404e:	60fb      	str	r3, [r7, #12]
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	f023 0201 	bic.w	r2, r3, #1
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	601a      	str	r2, [r3, #0]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	3b04      	subs	r3, #4
 800405e:	60fb      	str	r3, [r7, #12]
 8004060:	4a0c      	ldr	r2, [pc, #48]	; (8004094 <pxPortInitialiseStack+0x64>)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	601a      	str	r2, [r3, #0]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	3b14      	subs	r3, #20
 800406a:	60fb      	str	r3, [r7, #12]
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	601a      	str	r2, [r3, #0]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	3b04      	subs	r3, #4
 8004076:	60fb      	str	r3, [r7, #12]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	f06f 0202 	mvn.w	r2, #2
 800407e:	601a      	str	r2, [r3, #0]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	3b20      	subs	r3, #32
 8004084:	60fb      	str	r3, [r7, #12]
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	4618      	mov	r0, r3
 800408a:	3714      	adds	r7, #20
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr
 8004094:	08004099 	.word	0x08004099

08004098 <prvTaskExitError>:
 8004098:	b480      	push	{r7}
 800409a:	b085      	sub	sp, #20
 800409c:	af00      	add	r7, sp, #0
 800409e:	2300      	movs	r3, #0
 80040a0:	607b      	str	r3, [r7, #4]
 80040a2:	4b12      	ldr	r3, [pc, #72]	; (80040ec <prvTaskExitError+0x54>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040aa:	d00a      	beq.n	80040c2 <prvTaskExitError+0x2a>
 80040ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b0:	f383 8811 	msr	BASEPRI, r3
 80040b4:	f3bf 8f6f 	isb	sy
 80040b8:	f3bf 8f4f 	dsb	sy
 80040bc:	60fb      	str	r3, [r7, #12]
 80040be:	bf00      	nop
 80040c0:	e7fe      	b.n	80040c0 <prvTaskExitError+0x28>
 80040c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c6:	f383 8811 	msr	BASEPRI, r3
 80040ca:	f3bf 8f6f 	isb	sy
 80040ce:	f3bf 8f4f 	dsb	sy
 80040d2:	60bb      	str	r3, [r7, #8]
 80040d4:	bf00      	nop
 80040d6:	bf00      	nop
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d0fc      	beq.n	80040d8 <prvTaskExitError+0x40>
 80040de:	bf00      	nop
 80040e0:	bf00      	nop
 80040e2:	3714      	adds	r7, #20
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr
 80040ec:	2000000c 	.word	0x2000000c

080040f0 <SVC_Handler>:
 80040f0:	4b07      	ldr	r3, [pc, #28]	; (8004110 <pxCurrentTCBConst2>)
 80040f2:	6819      	ldr	r1, [r3, #0]
 80040f4:	6808      	ldr	r0, [r1, #0]
 80040f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040fa:	f380 8809 	msr	PSP, r0
 80040fe:	f3bf 8f6f 	isb	sy
 8004102:	f04f 0000 	mov.w	r0, #0
 8004106:	f380 8811 	msr	BASEPRI, r0
 800410a:	4770      	bx	lr
 800410c:	f3af 8000 	nop.w

08004110 <pxCurrentTCBConst2>:
 8004110:	20000178 	.word	0x20000178
 8004114:	bf00      	nop
 8004116:	bf00      	nop

08004118 <prvPortStartFirstTask>:
 8004118:	4808      	ldr	r0, [pc, #32]	; (800413c <prvPortStartFirstTask+0x24>)
 800411a:	6800      	ldr	r0, [r0, #0]
 800411c:	6800      	ldr	r0, [r0, #0]
 800411e:	f380 8808 	msr	MSP, r0
 8004122:	f04f 0000 	mov.w	r0, #0
 8004126:	f380 8814 	msr	CONTROL, r0
 800412a:	b662      	cpsie	i
 800412c:	b661      	cpsie	f
 800412e:	f3bf 8f4f 	dsb	sy
 8004132:	f3bf 8f6f 	isb	sy
 8004136:	df00      	svc	0
 8004138:	bf00      	nop
 800413a:	bf00      	nop
 800413c:	e000ed08 	.word	0xe000ed08

08004140 <xPortStartScheduler>:
 8004140:	b580      	push	{r7, lr}
 8004142:	b086      	sub	sp, #24
 8004144:	af00      	add	r7, sp, #0
 8004146:	4b46      	ldr	r3, [pc, #280]	; (8004260 <xPortStartScheduler+0x120>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a46      	ldr	r2, [pc, #280]	; (8004264 <xPortStartScheduler+0x124>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d10a      	bne.n	8004166 <xPortStartScheduler+0x26>
 8004150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004154:	f383 8811 	msr	BASEPRI, r3
 8004158:	f3bf 8f6f 	isb	sy
 800415c:	f3bf 8f4f 	dsb	sy
 8004160:	613b      	str	r3, [r7, #16]
 8004162:	bf00      	nop
 8004164:	e7fe      	b.n	8004164 <xPortStartScheduler+0x24>
 8004166:	4b3e      	ldr	r3, [pc, #248]	; (8004260 <xPortStartScheduler+0x120>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a3f      	ldr	r2, [pc, #252]	; (8004268 <xPortStartScheduler+0x128>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d10a      	bne.n	8004186 <xPortStartScheduler+0x46>
 8004170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004174:	f383 8811 	msr	BASEPRI, r3
 8004178:	f3bf 8f6f 	isb	sy
 800417c:	f3bf 8f4f 	dsb	sy
 8004180:	60fb      	str	r3, [r7, #12]
 8004182:	bf00      	nop
 8004184:	e7fe      	b.n	8004184 <xPortStartScheduler+0x44>
 8004186:	4b39      	ldr	r3, [pc, #228]	; (800426c <xPortStartScheduler+0x12c>)
 8004188:	617b      	str	r3, [r7, #20]
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	b2db      	uxtb	r3, r3
 8004190:	607b      	str	r3, [r7, #4]
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	22ff      	movs	r2, #255	; 0xff
 8004196:	701a      	strb	r2, [r3, #0]
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	b2db      	uxtb	r3, r3
 800419e:	70fb      	strb	r3, [r7, #3]
 80041a0:	78fb      	ldrb	r3, [r7, #3]
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80041a8:	b2da      	uxtb	r2, r3
 80041aa:	4b31      	ldr	r3, [pc, #196]	; (8004270 <xPortStartScheduler+0x130>)
 80041ac:	701a      	strb	r2, [r3, #0]
 80041ae:	4b31      	ldr	r3, [pc, #196]	; (8004274 <xPortStartScheduler+0x134>)
 80041b0:	2207      	movs	r2, #7
 80041b2:	601a      	str	r2, [r3, #0]
 80041b4:	e009      	b.n	80041ca <xPortStartScheduler+0x8a>
 80041b6:	4b2f      	ldr	r3, [pc, #188]	; (8004274 <xPortStartScheduler+0x134>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	3b01      	subs	r3, #1
 80041bc:	4a2d      	ldr	r2, [pc, #180]	; (8004274 <xPortStartScheduler+0x134>)
 80041be:	6013      	str	r3, [r2, #0]
 80041c0:	78fb      	ldrb	r3, [r7, #3]
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	005b      	lsls	r3, r3, #1
 80041c6:	b2db      	uxtb	r3, r3
 80041c8:	70fb      	strb	r3, [r7, #3]
 80041ca:	78fb      	ldrb	r3, [r7, #3]
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041d2:	2b80      	cmp	r3, #128	; 0x80
 80041d4:	d0ef      	beq.n	80041b6 <xPortStartScheduler+0x76>
 80041d6:	4b27      	ldr	r3, [pc, #156]	; (8004274 <xPortStartScheduler+0x134>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f1c3 0307 	rsb	r3, r3, #7
 80041de:	2b04      	cmp	r3, #4
 80041e0:	d00a      	beq.n	80041f8 <xPortStartScheduler+0xb8>
 80041e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e6:	f383 8811 	msr	BASEPRI, r3
 80041ea:	f3bf 8f6f 	isb	sy
 80041ee:	f3bf 8f4f 	dsb	sy
 80041f2:	60bb      	str	r3, [r7, #8]
 80041f4:	bf00      	nop
 80041f6:	e7fe      	b.n	80041f6 <xPortStartScheduler+0xb6>
 80041f8:	4b1e      	ldr	r3, [pc, #120]	; (8004274 <xPortStartScheduler+0x134>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	021b      	lsls	r3, r3, #8
 80041fe:	4a1d      	ldr	r2, [pc, #116]	; (8004274 <xPortStartScheduler+0x134>)
 8004200:	6013      	str	r3, [r2, #0]
 8004202:	4b1c      	ldr	r3, [pc, #112]	; (8004274 <xPortStartScheduler+0x134>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800420a:	4a1a      	ldr	r2, [pc, #104]	; (8004274 <xPortStartScheduler+0x134>)
 800420c:	6013      	str	r3, [r2, #0]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	b2da      	uxtb	r2, r3
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	701a      	strb	r2, [r3, #0]
 8004216:	4b18      	ldr	r3, [pc, #96]	; (8004278 <xPortStartScheduler+0x138>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a17      	ldr	r2, [pc, #92]	; (8004278 <xPortStartScheduler+0x138>)
 800421c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004220:	6013      	str	r3, [r2, #0]
 8004222:	4b15      	ldr	r3, [pc, #84]	; (8004278 <xPortStartScheduler+0x138>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a14      	ldr	r2, [pc, #80]	; (8004278 <xPortStartScheduler+0x138>)
 8004228:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800422c:	6013      	str	r3, [r2, #0]
 800422e:	f000 f8dd 	bl	80043ec <vPortSetupTimerInterrupt>
 8004232:	4b12      	ldr	r3, [pc, #72]	; (800427c <xPortStartScheduler+0x13c>)
 8004234:	2200      	movs	r2, #0
 8004236:	601a      	str	r2, [r3, #0]
 8004238:	f000 f8fc 	bl	8004434 <vPortEnableVFP>
 800423c:	4b10      	ldr	r3, [pc, #64]	; (8004280 <xPortStartScheduler+0x140>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a0f      	ldr	r2, [pc, #60]	; (8004280 <xPortStartScheduler+0x140>)
 8004242:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004246:	6013      	str	r3, [r2, #0]
 8004248:	f7ff ff66 	bl	8004118 <prvPortStartFirstTask>
 800424c:	f7ff fd5a 	bl	8003d04 <vTaskSwitchContext>
 8004250:	f7ff ff22 	bl	8004098 <prvTaskExitError>
 8004254:	2300      	movs	r3, #0
 8004256:	4618      	mov	r0, r3
 8004258:	3718      	adds	r7, #24
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}
 800425e:	bf00      	nop
 8004260:	e000ed00 	.word	0xe000ed00
 8004264:	410fc271 	.word	0x410fc271
 8004268:	410fc270 	.word	0x410fc270
 800426c:	e000e400 	.word	0xe000e400
 8004270:	200002a4 	.word	0x200002a4
 8004274:	200002a8 	.word	0x200002a8
 8004278:	e000ed20 	.word	0xe000ed20
 800427c:	2000000c 	.word	0x2000000c
 8004280:	e000ef34 	.word	0xe000ef34

08004284 <vPortEnterCritical>:
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800428e:	f383 8811 	msr	BASEPRI, r3
 8004292:	f3bf 8f6f 	isb	sy
 8004296:	f3bf 8f4f 	dsb	sy
 800429a:	607b      	str	r3, [r7, #4]
 800429c:	bf00      	nop
 800429e:	4b0f      	ldr	r3, [pc, #60]	; (80042dc <vPortEnterCritical+0x58>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	3301      	adds	r3, #1
 80042a4:	4a0d      	ldr	r2, [pc, #52]	; (80042dc <vPortEnterCritical+0x58>)
 80042a6:	6013      	str	r3, [r2, #0]
 80042a8:	4b0c      	ldr	r3, [pc, #48]	; (80042dc <vPortEnterCritical+0x58>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d10f      	bne.n	80042d0 <vPortEnterCritical+0x4c>
 80042b0:	4b0b      	ldr	r3, [pc, #44]	; (80042e0 <vPortEnterCritical+0x5c>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d00a      	beq.n	80042d0 <vPortEnterCritical+0x4c>
 80042ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042be:	f383 8811 	msr	BASEPRI, r3
 80042c2:	f3bf 8f6f 	isb	sy
 80042c6:	f3bf 8f4f 	dsb	sy
 80042ca:	603b      	str	r3, [r7, #0]
 80042cc:	bf00      	nop
 80042ce:	e7fe      	b.n	80042ce <vPortEnterCritical+0x4a>
 80042d0:	bf00      	nop
 80042d2:	370c      	adds	r7, #12
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr
 80042dc:	2000000c 	.word	0x2000000c
 80042e0:	e000ed04 	.word	0xe000ed04

080042e4 <vPortExitCritical>:
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	4b12      	ldr	r3, [pc, #72]	; (8004334 <vPortExitCritical+0x50>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d10a      	bne.n	8004308 <vPortExitCritical+0x24>
 80042f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042f6:	f383 8811 	msr	BASEPRI, r3
 80042fa:	f3bf 8f6f 	isb	sy
 80042fe:	f3bf 8f4f 	dsb	sy
 8004302:	607b      	str	r3, [r7, #4]
 8004304:	bf00      	nop
 8004306:	e7fe      	b.n	8004306 <vPortExitCritical+0x22>
 8004308:	4b0a      	ldr	r3, [pc, #40]	; (8004334 <vPortExitCritical+0x50>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	3b01      	subs	r3, #1
 800430e:	4a09      	ldr	r2, [pc, #36]	; (8004334 <vPortExitCritical+0x50>)
 8004310:	6013      	str	r3, [r2, #0]
 8004312:	4b08      	ldr	r3, [pc, #32]	; (8004334 <vPortExitCritical+0x50>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d105      	bne.n	8004326 <vPortExitCritical+0x42>
 800431a:	2300      	movs	r3, #0
 800431c:	603b      	str	r3, [r7, #0]
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	f383 8811 	msr	BASEPRI, r3
 8004324:	bf00      	nop
 8004326:	bf00      	nop
 8004328:	370c      	adds	r7, #12
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	2000000c 	.word	0x2000000c
	...

08004340 <PendSV_Handler>:
 8004340:	f3ef 8009 	mrs	r0, PSP
 8004344:	f3bf 8f6f 	isb	sy
 8004348:	4b15      	ldr	r3, [pc, #84]	; (80043a0 <pxCurrentTCBConst>)
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	f01e 0f10 	tst.w	lr, #16
 8004350:	bf08      	it	eq
 8004352:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004356:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800435a:	6010      	str	r0, [r2, #0]
 800435c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004360:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004364:	f380 8811 	msr	BASEPRI, r0
 8004368:	f3bf 8f4f 	dsb	sy
 800436c:	f3bf 8f6f 	isb	sy
 8004370:	f7ff fcc8 	bl	8003d04 <vTaskSwitchContext>
 8004374:	f04f 0000 	mov.w	r0, #0
 8004378:	f380 8811 	msr	BASEPRI, r0
 800437c:	bc09      	pop	{r0, r3}
 800437e:	6819      	ldr	r1, [r3, #0]
 8004380:	6808      	ldr	r0, [r1, #0]
 8004382:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004386:	f01e 0f10 	tst.w	lr, #16
 800438a:	bf08      	it	eq
 800438c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004390:	f380 8809 	msr	PSP, r0
 8004394:	f3bf 8f6f 	isb	sy
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	f3af 8000 	nop.w

080043a0 <pxCurrentTCBConst>:
 80043a0:	20000178 	.word	0x20000178
 80043a4:	bf00      	nop
 80043a6:	bf00      	nop

080043a8 <xPortSysTickHandler>:
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b2:	f383 8811 	msr	BASEPRI, r3
 80043b6:	f3bf 8f6f 	isb	sy
 80043ba:	f3bf 8f4f 	dsb	sy
 80043be:	607b      	str	r3, [r7, #4]
 80043c0:	bf00      	nop
 80043c2:	f7ff fbe7 	bl	8003b94 <xTaskIncrementTick>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d003      	beq.n	80043d4 <xPortSysTickHandler+0x2c>
 80043cc:	4b06      	ldr	r3, [pc, #24]	; (80043e8 <xPortSysTickHandler+0x40>)
 80043ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043d2:	601a      	str	r2, [r3, #0]
 80043d4:	2300      	movs	r3, #0
 80043d6:	603b      	str	r3, [r7, #0]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	f383 8811 	msr	BASEPRI, r3
 80043de:	bf00      	nop
 80043e0:	bf00      	nop
 80043e2:	3708      	adds	r7, #8
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}
 80043e8:	e000ed04 	.word	0xe000ed04

080043ec <vPortSetupTimerInterrupt>:
 80043ec:	b480      	push	{r7}
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	4b0b      	ldr	r3, [pc, #44]	; (8004420 <vPortSetupTimerInterrupt+0x34>)
 80043f2:	2200      	movs	r2, #0
 80043f4:	601a      	str	r2, [r3, #0]
 80043f6:	4b0b      	ldr	r3, [pc, #44]	; (8004424 <vPortSetupTimerInterrupt+0x38>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	601a      	str	r2, [r3, #0]
 80043fc:	4b0a      	ldr	r3, [pc, #40]	; (8004428 <vPortSetupTimerInterrupt+0x3c>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a0a      	ldr	r2, [pc, #40]	; (800442c <vPortSetupTimerInterrupt+0x40>)
 8004402:	fba2 2303 	umull	r2, r3, r2, r3
 8004406:	099b      	lsrs	r3, r3, #6
 8004408:	4a09      	ldr	r2, [pc, #36]	; (8004430 <vPortSetupTimerInterrupt+0x44>)
 800440a:	3b01      	subs	r3, #1
 800440c:	6013      	str	r3, [r2, #0]
 800440e:	4b04      	ldr	r3, [pc, #16]	; (8004420 <vPortSetupTimerInterrupt+0x34>)
 8004410:	2207      	movs	r2, #7
 8004412:	601a      	str	r2, [r3, #0]
 8004414:	bf00      	nop
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	e000e010 	.word	0xe000e010
 8004424:	e000e018 	.word	0xe000e018
 8004428:	20000000 	.word	0x20000000
 800442c:	10624dd3 	.word	0x10624dd3
 8004430:	e000e014 	.word	0xe000e014

08004434 <vPortEnableVFP>:
 8004434:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004444 <vPortEnableVFP+0x10>
 8004438:	6801      	ldr	r1, [r0, #0]
 800443a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800443e:	6001      	str	r1, [r0, #0]
 8004440:	4770      	bx	lr
 8004442:	bf00      	nop
 8004444:	e000ed88 	.word	0xe000ed88

08004448 <pvPortMalloc>:
 8004448:	b580      	push	{r7, lr}
 800444a:	b08a      	sub	sp, #40	; 0x28
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	2300      	movs	r3, #0
 8004452:	61fb      	str	r3, [r7, #28]
 8004454:	f7ff faf4 	bl	8003a40 <vTaskSuspendAll>
 8004458:	4b5b      	ldr	r3, [pc, #364]	; (80045c8 <pvPortMalloc+0x180>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d101      	bne.n	8004464 <pvPortMalloc+0x1c>
 8004460:	f000 f920 	bl	80046a4 <prvHeapInit>
 8004464:	4b59      	ldr	r3, [pc, #356]	; (80045cc <pvPortMalloc+0x184>)
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4013      	ands	r3, r2
 800446c:	2b00      	cmp	r3, #0
 800446e:	f040 8093 	bne.w	8004598 <pvPortMalloc+0x150>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d01d      	beq.n	80044b4 <pvPortMalloc+0x6c>
 8004478:	2208      	movs	r2, #8
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4413      	add	r3, r2
 800447e:	607b      	str	r3, [r7, #4]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	f003 0307 	and.w	r3, r3, #7
 8004486:	2b00      	cmp	r3, #0
 8004488:	d014      	beq.n	80044b4 <pvPortMalloc+0x6c>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f023 0307 	bic.w	r3, r3, #7
 8004490:	3308      	adds	r3, #8
 8004492:	607b      	str	r3, [r7, #4]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f003 0307 	and.w	r3, r3, #7
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00a      	beq.n	80044b4 <pvPortMalloc+0x6c>
 800449e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044a2:	f383 8811 	msr	BASEPRI, r3
 80044a6:	f3bf 8f6f 	isb	sy
 80044aa:	f3bf 8f4f 	dsb	sy
 80044ae:	617b      	str	r3, [r7, #20]
 80044b0:	bf00      	nop
 80044b2:	e7fe      	b.n	80044b2 <pvPortMalloc+0x6a>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d06e      	beq.n	8004598 <pvPortMalloc+0x150>
 80044ba:	4b45      	ldr	r3, [pc, #276]	; (80045d0 <pvPortMalloc+0x188>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	d869      	bhi.n	8004598 <pvPortMalloc+0x150>
 80044c4:	4b43      	ldr	r3, [pc, #268]	; (80045d4 <pvPortMalloc+0x18c>)
 80044c6:	623b      	str	r3, [r7, #32]
 80044c8:	4b42      	ldr	r3, [pc, #264]	; (80045d4 <pvPortMalloc+0x18c>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	627b      	str	r3, [r7, #36]	; 0x24
 80044ce:	e004      	b.n	80044da <pvPortMalloc+0x92>
 80044d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d2:	623b      	str	r3, [r7, #32]
 80044d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	627b      	str	r3, [r7, #36]	; 0x24
 80044da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d903      	bls.n	80044ec <pvPortMalloc+0xa4>
 80044e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d1f1      	bne.n	80044d0 <pvPortMalloc+0x88>
 80044ec:	4b36      	ldr	r3, [pc, #216]	; (80045c8 <pvPortMalloc+0x180>)
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d050      	beq.n	8004598 <pvPortMalloc+0x150>
 80044f6:	6a3b      	ldr	r3, [r7, #32]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2208      	movs	r2, #8
 80044fc:	4413      	add	r3, r2
 80044fe:	61fb      	str	r3, [r7, #28]
 8004500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	6a3b      	ldr	r3, [r7, #32]
 8004506:	601a      	str	r2, [r3, #0]
 8004508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450a:	685a      	ldr	r2, [r3, #4]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	1ad2      	subs	r2, r2, r3
 8004510:	2308      	movs	r3, #8
 8004512:	005b      	lsls	r3, r3, #1
 8004514:	429a      	cmp	r2, r3
 8004516:	d91f      	bls.n	8004558 <pvPortMalloc+0x110>
 8004518:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4413      	add	r3, r2
 800451e:	61bb      	str	r3, [r7, #24]
 8004520:	69bb      	ldr	r3, [r7, #24]
 8004522:	f003 0307 	and.w	r3, r3, #7
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00a      	beq.n	8004540 <pvPortMalloc+0xf8>
 800452a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800452e:	f383 8811 	msr	BASEPRI, r3
 8004532:	f3bf 8f6f 	isb	sy
 8004536:	f3bf 8f4f 	dsb	sy
 800453a:	613b      	str	r3, [r7, #16]
 800453c:	bf00      	nop
 800453e:	e7fe      	b.n	800453e <pvPortMalloc+0xf6>
 8004540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004542:	685a      	ldr	r2, [r3, #4]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	1ad2      	subs	r2, r2, r3
 8004548:	69bb      	ldr	r3, [r7, #24]
 800454a:	605a      	str	r2, [r3, #4]
 800454c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	605a      	str	r2, [r3, #4]
 8004552:	69b8      	ldr	r0, [r7, #24]
 8004554:	f000 f908 	bl	8004768 <prvInsertBlockIntoFreeList>
 8004558:	4b1d      	ldr	r3, [pc, #116]	; (80045d0 <pvPortMalloc+0x188>)
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	1ad3      	subs	r3, r2, r3
 8004562:	4a1b      	ldr	r2, [pc, #108]	; (80045d0 <pvPortMalloc+0x188>)
 8004564:	6013      	str	r3, [r2, #0]
 8004566:	4b1a      	ldr	r3, [pc, #104]	; (80045d0 <pvPortMalloc+0x188>)
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	4b1b      	ldr	r3, [pc, #108]	; (80045d8 <pvPortMalloc+0x190>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	429a      	cmp	r2, r3
 8004570:	d203      	bcs.n	800457a <pvPortMalloc+0x132>
 8004572:	4b17      	ldr	r3, [pc, #92]	; (80045d0 <pvPortMalloc+0x188>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a18      	ldr	r2, [pc, #96]	; (80045d8 <pvPortMalloc+0x190>)
 8004578:	6013      	str	r3, [r2, #0]
 800457a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457c:	685a      	ldr	r2, [r3, #4]
 800457e:	4b13      	ldr	r3, [pc, #76]	; (80045cc <pvPortMalloc+0x184>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	431a      	orrs	r2, r3
 8004584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004586:	605a      	str	r2, [r3, #4]
 8004588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458a:	2200      	movs	r2, #0
 800458c:	601a      	str	r2, [r3, #0]
 800458e:	4b13      	ldr	r3, [pc, #76]	; (80045dc <pvPortMalloc+0x194>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	3301      	adds	r3, #1
 8004594:	4a11      	ldr	r2, [pc, #68]	; (80045dc <pvPortMalloc+0x194>)
 8004596:	6013      	str	r3, [r2, #0]
 8004598:	f7ff fa60 	bl	8003a5c <xTaskResumeAll>
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	f003 0307 	and.w	r3, r3, #7
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d00a      	beq.n	80045bc <pvPortMalloc+0x174>
 80045a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045aa:	f383 8811 	msr	BASEPRI, r3
 80045ae:	f3bf 8f6f 	isb	sy
 80045b2:	f3bf 8f4f 	dsb	sy
 80045b6:	60fb      	str	r3, [r7, #12]
 80045b8:	bf00      	nop
 80045ba:	e7fe      	b.n	80045ba <pvPortMalloc+0x172>
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	4618      	mov	r0, r3
 80045c0:	3728      	adds	r7, #40	; 0x28
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	20000eb4 	.word	0x20000eb4
 80045cc:	20000ec8 	.word	0x20000ec8
 80045d0:	20000eb8 	.word	0x20000eb8
 80045d4:	20000eac 	.word	0x20000eac
 80045d8:	20000ebc 	.word	0x20000ebc
 80045dc:	20000ec0 	.word	0x20000ec0

080045e0 <vPortFree>:
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b086      	sub	sp, #24
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	617b      	str	r3, [r7, #20]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d04d      	beq.n	800468e <vPortFree+0xae>
 80045f2:	2308      	movs	r3, #8
 80045f4:	425b      	negs	r3, r3
 80045f6:	697a      	ldr	r2, [r7, #20]
 80045f8:	4413      	add	r3, r2
 80045fa:	617b      	str	r3, [r7, #20]
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	613b      	str	r3, [r7, #16]
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	685a      	ldr	r2, [r3, #4]
 8004604:	4b24      	ldr	r3, [pc, #144]	; (8004698 <vPortFree+0xb8>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4013      	ands	r3, r2
 800460a:	2b00      	cmp	r3, #0
 800460c:	d10a      	bne.n	8004624 <vPortFree+0x44>
 800460e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004612:	f383 8811 	msr	BASEPRI, r3
 8004616:	f3bf 8f6f 	isb	sy
 800461a:	f3bf 8f4f 	dsb	sy
 800461e:	60fb      	str	r3, [r7, #12]
 8004620:	bf00      	nop
 8004622:	e7fe      	b.n	8004622 <vPortFree+0x42>
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d00a      	beq.n	8004642 <vPortFree+0x62>
 800462c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004630:	f383 8811 	msr	BASEPRI, r3
 8004634:	f3bf 8f6f 	isb	sy
 8004638:	f3bf 8f4f 	dsb	sy
 800463c:	60bb      	str	r3, [r7, #8]
 800463e:	bf00      	nop
 8004640:	e7fe      	b.n	8004640 <vPortFree+0x60>
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	685a      	ldr	r2, [r3, #4]
 8004646:	4b14      	ldr	r3, [pc, #80]	; (8004698 <vPortFree+0xb8>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4013      	ands	r3, r2
 800464c:	2b00      	cmp	r3, #0
 800464e:	d01e      	beq.n	800468e <vPortFree+0xae>
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d11a      	bne.n	800468e <vPortFree+0xae>
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	685a      	ldr	r2, [r3, #4]
 800465c:	4b0e      	ldr	r3, [pc, #56]	; (8004698 <vPortFree+0xb8>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	43db      	mvns	r3, r3
 8004662:	401a      	ands	r2, r3
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	605a      	str	r2, [r3, #4]
 8004668:	f7ff f9ea 	bl	8003a40 <vTaskSuspendAll>
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	685a      	ldr	r2, [r3, #4]
 8004670:	4b0a      	ldr	r3, [pc, #40]	; (800469c <vPortFree+0xbc>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4413      	add	r3, r2
 8004676:	4a09      	ldr	r2, [pc, #36]	; (800469c <vPortFree+0xbc>)
 8004678:	6013      	str	r3, [r2, #0]
 800467a:	6938      	ldr	r0, [r7, #16]
 800467c:	f000 f874 	bl	8004768 <prvInsertBlockIntoFreeList>
 8004680:	4b07      	ldr	r3, [pc, #28]	; (80046a0 <vPortFree+0xc0>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	3301      	adds	r3, #1
 8004686:	4a06      	ldr	r2, [pc, #24]	; (80046a0 <vPortFree+0xc0>)
 8004688:	6013      	str	r3, [r2, #0]
 800468a:	f7ff f9e7 	bl	8003a5c <xTaskResumeAll>
 800468e:	bf00      	nop
 8004690:	3718      	adds	r7, #24
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	20000ec8 	.word	0x20000ec8
 800469c:	20000eb8 	.word	0x20000eb8
 80046a0:	20000ec4 	.word	0x20000ec4

080046a4 <prvHeapInit>:
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80046ae:	60bb      	str	r3, [r7, #8]
 80046b0:	4b27      	ldr	r3, [pc, #156]	; (8004750 <prvHeapInit+0xac>)
 80046b2:	60fb      	str	r3, [r7, #12]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f003 0307 	and.w	r3, r3, #7
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d00c      	beq.n	80046d8 <prvHeapInit+0x34>
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	3307      	adds	r3, #7
 80046c2:	60fb      	str	r3, [r7, #12]
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f023 0307 	bic.w	r3, r3, #7
 80046ca:	60fb      	str	r3, [r7, #12]
 80046cc:	68ba      	ldr	r2, [r7, #8]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	1ad3      	subs	r3, r2, r3
 80046d2:	4a1f      	ldr	r2, [pc, #124]	; (8004750 <prvHeapInit+0xac>)
 80046d4:	4413      	add	r3, r2
 80046d6:	60bb      	str	r3, [r7, #8]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	607b      	str	r3, [r7, #4]
 80046dc:	4a1d      	ldr	r2, [pc, #116]	; (8004754 <prvHeapInit+0xb0>)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6013      	str	r3, [r2, #0]
 80046e2:	4b1c      	ldr	r3, [pc, #112]	; (8004754 <prvHeapInit+0xb0>)
 80046e4:	2200      	movs	r2, #0
 80046e6:	605a      	str	r2, [r3, #4]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	68ba      	ldr	r2, [r7, #8]
 80046ec:	4413      	add	r3, r2
 80046ee:	60fb      	str	r3, [r7, #12]
 80046f0:	2208      	movs	r2, #8
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	1a9b      	subs	r3, r3, r2
 80046f6:	60fb      	str	r3, [r7, #12]
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f023 0307 	bic.w	r3, r3, #7
 80046fe:	60fb      	str	r3, [r7, #12]
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	4a15      	ldr	r2, [pc, #84]	; (8004758 <prvHeapInit+0xb4>)
 8004704:	6013      	str	r3, [r2, #0]
 8004706:	4b14      	ldr	r3, [pc, #80]	; (8004758 <prvHeapInit+0xb4>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2200      	movs	r2, #0
 800470c:	605a      	str	r2, [r3, #4]
 800470e:	4b12      	ldr	r3, [pc, #72]	; (8004758 <prvHeapInit+0xb4>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	2200      	movs	r2, #0
 8004714:	601a      	str	r2, [r3, #0]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	603b      	str	r3, [r7, #0]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	68fa      	ldr	r2, [r7, #12]
 800471e:	1ad2      	subs	r2, r2, r3
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	605a      	str	r2, [r3, #4]
 8004724:	4b0c      	ldr	r3, [pc, #48]	; (8004758 <prvHeapInit+0xb4>)
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	601a      	str	r2, [r3, #0]
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	4a0a      	ldr	r2, [pc, #40]	; (800475c <prvHeapInit+0xb8>)
 8004732:	6013      	str	r3, [r2, #0]
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	4a09      	ldr	r2, [pc, #36]	; (8004760 <prvHeapInit+0xbc>)
 800473a:	6013      	str	r3, [r2, #0]
 800473c:	4b09      	ldr	r3, [pc, #36]	; (8004764 <prvHeapInit+0xc0>)
 800473e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004742:	601a      	str	r2, [r3, #0]
 8004744:	bf00      	nop
 8004746:	3714      	adds	r7, #20
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr
 8004750:	200002ac 	.word	0x200002ac
 8004754:	20000eac 	.word	0x20000eac
 8004758:	20000eb4 	.word	0x20000eb4
 800475c:	20000ebc 	.word	0x20000ebc
 8004760:	20000eb8 	.word	0x20000eb8
 8004764:	20000ec8 	.word	0x20000ec8

08004768 <prvInsertBlockIntoFreeList>:
 8004768:	b480      	push	{r7}
 800476a:	b085      	sub	sp, #20
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	4b28      	ldr	r3, [pc, #160]	; (8004814 <prvInsertBlockIntoFreeList+0xac>)
 8004772:	60fb      	str	r3, [r7, #12]
 8004774:	e002      	b.n	800477c <prvInsertBlockIntoFreeList+0x14>
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	60fb      	str	r3, [r7, #12]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	429a      	cmp	r2, r3
 8004784:	d8f7      	bhi.n	8004776 <prvInsertBlockIntoFreeList+0xe>
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	60bb      	str	r3, [r7, #8]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	68ba      	ldr	r2, [r7, #8]
 8004790:	4413      	add	r3, r2
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	429a      	cmp	r2, r3
 8004796:	d108      	bne.n	80047aa <prvInsertBlockIntoFreeList+0x42>
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	685a      	ldr	r2, [r3, #4]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	441a      	add	r2, r3
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	605a      	str	r2, [r3, #4]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	607b      	str	r3, [r7, #4]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	60bb      	str	r3, [r7, #8]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	68ba      	ldr	r2, [r7, #8]
 80047b4:	441a      	add	r2, r3
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d118      	bne.n	80047f0 <prvInsertBlockIntoFreeList+0x88>
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	4b15      	ldr	r3, [pc, #84]	; (8004818 <prvInsertBlockIntoFreeList+0xb0>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d00d      	beq.n	80047e6 <prvInsertBlockIntoFreeList+0x7e>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	685a      	ldr	r2, [r3, #4]
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	441a      	add	r2, r3
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	605a      	str	r2, [r3, #4]
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	601a      	str	r2, [r3, #0]
 80047e4:	e008      	b.n	80047f8 <prvInsertBlockIntoFreeList+0x90>
 80047e6:	4b0c      	ldr	r3, [pc, #48]	; (8004818 <prvInsertBlockIntoFreeList+0xb0>)
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	601a      	str	r2, [r3, #0]
 80047ee:	e003      	b.n	80047f8 <prvInsertBlockIntoFreeList+0x90>
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	601a      	str	r2, [r3, #0]
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d002      	beq.n	8004806 <prvInsertBlockIntoFreeList+0x9e>
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	687a      	ldr	r2, [r7, #4]
 8004804:	601a      	str	r2, [r3, #0]
 8004806:	bf00      	nop
 8004808:	3714      	adds	r7, #20
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop
 8004814:	20000eac 	.word	0x20000eac
 8004818:	20000eb4 	.word	0x20000eb4

0800481c <__errno>:
 800481c:	4b01      	ldr	r3, [pc, #4]	; (8004824 <__errno+0x8>)
 800481e:	6818      	ldr	r0, [r3, #0]
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	20000010 	.word	0x20000010

08004828 <__libc_init_array>:
 8004828:	b570      	push	{r4, r5, r6, lr}
 800482a:	4d0d      	ldr	r5, [pc, #52]	; (8004860 <__libc_init_array+0x38>)
 800482c:	4c0d      	ldr	r4, [pc, #52]	; (8004864 <__libc_init_array+0x3c>)
 800482e:	1b64      	subs	r4, r4, r5
 8004830:	10a4      	asrs	r4, r4, #2
 8004832:	2600      	movs	r6, #0
 8004834:	42a6      	cmp	r6, r4
 8004836:	d109      	bne.n	800484c <__libc_init_array+0x24>
 8004838:	4d0b      	ldr	r5, [pc, #44]	; (8004868 <__libc_init_array+0x40>)
 800483a:	4c0c      	ldr	r4, [pc, #48]	; (800486c <__libc_init_array+0x44>)
 800483c:	f001 f824 	bl	8005888 <_init>
 8004840:	1b64      	subs	r4, r4, r5
 8004842:	10a4      	asrs	r4, r4, #2
 8004844:	2600      	movs	r6, #0
 8004846:	42a6      	cmp	r6, r4
 8004848:	d105      	bne.n	8004856 <__libc_init_array+0x2e>
 800484a:	bd70      	pop	{r4, r5, r6, pc}
 800484c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004850:	4798      	blx	r3
 8004852:	3601      	adds	r6, #1
 8004854:	e7ee      	b.n	8004834 <__libc_init_array+0xc>
 8004856:	f855 3b04 	ldr.w	r3, [r5], #4
 800485a:	4798      	blx	r3
 800485c:	3601      	adds	r6, #1
 800485e:	e7f2      	b.n	8004846 <__libc_init_array+0x1e>
 8004860:	080059c0 	.word	0x080059c0
 8004864:	080059c0 	.word	0x080059c0
 8004868:	080059c0 	.word	0x080059c0
 800486c:	080059c4 	.word	0x080059c4

08004870 <memset>:
 8004870:	4402      	add	r2, r0
 8004872:	4603      	mov	r3, r0
 8004874:	4293      	cmp	r3, r2
 8004876:	d100      	bne.n	800487a <memset+0xa>
 8004878:	4770      	bx	lr
 800487a:	f803 1b01 	strb.w	r1, [r3], #1
 800487e:	e7f9      	b.n	8004874 <memset+0x4>

08004880 <iprintf>:
 8004880:	b40f      	push	{r0, r1, r2, r3}
 8004882:	4b0a      	ldr	r3, [pc, #40]	; (80048ac <iprintf+0x2c>)
 8004884:	b513      	push	{r0, r1, r4, lr}
 8004886:	681c      	ldr	r4, [r3, #0]
 8004888:	b124      	cbz	r4, 8004894 <iprintf+0x14>
 800488a:	69a3      	ldr	r3, [r4, #24]
 800488c:	b913      	cbnz	r3, 8004894 <iprintf+0x14>
 800488e:	4620      	mov	r0, r4
 8004890:	f000 fa5e 	bl	8004d50 <__sinit>
 8004894:	ab05      	add	r3, sp, #20
 8004896:	9a04      	ldr	r2, [sp, #16]
 8004898:	68a1      	ldr	r1, [r4, #8]
 800489a:	9301      	str	r3, [sp, #4]
 800489c:	4620      	mov	r0, r4
 800489e:	f000 fc67 	bl	8005170 <_vfiprintf_r>
 80048a2:	b002      	add	sp, #8
 80048a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80048a8:	b004      	add	sp, #16
 80048aa:	4770      	bx	lr
 80048ac:	20000010 	.word	0x20000010

080048b0 <_puts_r>:
 80048b0:	b570      	push	{r4, r5, r6, lr}
 80048b2:	460e      	mov	r6, r1
 80048b4:	4605      	mov	r5, r0
 80048b6:	b118      	cbz	r0, 80048c0 <_puts_r+0x10>
 80048b8:	6983      	ldr	r3, [r0, #24]
 80048ba:	b90b      	cbnz	r3, 80048c0 <_puts_r+0x10>
 80048bc:	f000 fa48 	bl	8004d50 <__sinit>
 80048c0:	69ab      	ldr	r3, [r5, #24]
 80048c2:	68ac      	ldr	r4, [r5, #8]
 80048c4:	b913      	cbnz	r3, 80048cc <_puts_r+0x1c>
 80048c6:	4628      	mov	r0, r5
 80048c8:	f000 fa42 	bl	8004d50 <__sinit>
 80048cc:	4b2c      	ldr	r3, [pc, #176]	; (8004980 <_puts_r+0xd0>)
 80048ce:	429c      	cmp	r4, r3
 80048d0:	d120      	bne.n	8004914 <_puts_r+0x64>
 80048d2:	686c      	ldr	r4, [r5, #4]
 80048d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80048d6:	07db      	lsls	r3, r3, #31
 80048d8:	d405      	bmi.n	80048e6 <_puts_r+0x36>
 80048da:	89a3      	ldrh	r3, [r4, #12]
 80048dc:	0598      	lsls	r0, r3, #22
 80048de:	d402      	bmi.n	80048e6 <_puts_r+0x36>
 80048e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048e2:	f000 fad3 	bl	8004e8c <__retarget_lock_acquire_recursive>
 80048e6:	89a3      	ldrh	r3, [r4, #12]
 80048e8:	0719      	lsls	r1, r3, #28
 80048ea:	d51d      	bpl.n	8004928 <_puts_r+0x78>
 80048ec:	6923      	ldr	r3, [r4, #16]
 80048ee:	b1db      	cbz	r3, 8004928 <_puts_r+0x78>
 80048f0:	3e01      	subs	r6, #1
 80048f2:	68a3      	ldr	r3, [r4, #8]
 80048f4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80048f8:	3b01      	subs	r3, #1
 80048fa:	60a3      	str	r3, [r4, #8]
 80048fc:	bb39      	cbnz	r1, 800494e <_puts_r+0x9e>
 80048fe:	2b00      	cmp	r3, #0
 8004900:	da38      	bge.n	8004974 <_puts_r+0xc4>
 8004902:	4622      	mov	r2, r4
 8004904:	210a      	movs	r1, #10
 8004906:	4628      	mov	r0, r5
 8004908:	f000 f848 	bl	800499c <__swbuf_r>
 800490c:	3001      	adds	r0, #1
 800490e:	d011      	beq.n	8004934 <_puts_r+0x84>
 8004910:	250a      	movs	r5, #10
 8004912:	e011      	b.n	8004938 <_puts_r+0x88>
 8004914:	4b1b      	ldr	r3, [pc, #108]	; (8004984 <_puts_r+0xd4>)
 8004916:	429c      	cmp	r4, r3
 8004918:	d101      	bne.n	800491e <_puts_r+0x6e>
 800491a:	68ac      	ldr	r4, [r5, #8]
 800491c:	e7da      	b.n	80048d4 <_puts_r+0x24>
 800491e:	4b1a      	ldr	r3, [pc, #104]	; (8004988 <_puts_r+0xd8>)
 8004920:	429c      	cmp	r4, r3
 8004922:	bf08      	it	eq
 8004924:	68ec      	ldreq	r4, [r5, #12]
 8004926:	e7d5      	b.n	80048d4 <_puts_r+0x24>
 8004928:	4621      	mov	r1, r4
 800492a:	4628      	mov	r0, r5
 800492c:	f000 f888 	bl	8004a40 <__swsetup_r>
 8004930:	2800      	cmp	r0, #0
 8004932:	d0dd      	beq.n	80048f0 <_puts_r+0x40>
 8004934:	f04f 35ff 	mov.w	r5, #4294967295
 8004938:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800493a:	07da      	lsls	r2, r3, #31
 800493c:	d405      	bmi.n	800494a <_puts_r+0x9a>
 800493e:	89a3      	ldrh	r3, [r4, #12]
 8004940:	059b      	lsls	r3, r3, #22
 8004942:	d402      	bmi.n	800494a <_puts_r+0x9a>
 8004944:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004946:	f000 faa2 	bl	8004e8e <__retarget_lock_release_recursive>
 800494a:	4628      	mov	r0, r5
 800494c:	bd70      	pop	{r4, r5, r6, pc}
 800494e:	2b00      	cmp	r3, #0
 8004950:	da04      	bge.n	800495c <_puts_r+0xac>
 8004952:	69a2      	ldr	r2, [r4, #24]
 8004954:	429a      	cmp	r2, r3
 8004956:	dc06      	bgt.n	8004966 <_puts_r+0xb6>
 8004958:	290a      	cmp	r1, #10
 800495a:	d004      	beq.n	8004966 <_puts_r+0xb6>
 800495c:	6823      	ldr	r3, [r4, #0]
 800495e:	1c5a      	adds	r2, r3, #1
 8004960:	6022      	str	r2, [r4, #0]
 8004962:	7019      	strb	r1, [r3, #0]
 8004964:	e7c5      	b.n	80048f2 <_puts_r+0x42>
 8004966:	4622      	mov	r2, r4
 8004968:	4628      	mov	r0, r5
 800496a:	f000 f817 	bl	800499c <__swbuf_r>
 800496e:	3001      	adds	r0, #1
 8004970:	d1bf      	bne.n	80048f2 <_puts_r+0x42>
 8004972:	e7df      	b.n	8004934 <_puts_r+0x84>
 8004974:	6823      	ldr	r3, [r4, #0]
 8004976:	250a      	movs	r5, #10
 8004978:	1c5a      	adds	r2, r3, #1
 800497a:	6022      	str	r2, [r4, #0]
 800497c:	701d      	strb	r5, [r3, #0]
 800497e:	e7db      	b.n	8004938 <_puts_r+0x88>
 8004980:	08005944 	.word	0x08005944
 8004984:	08005964 	.word	0x08005964
 8004988:	08005924 	.word	0x08005924

0800498c <puts>:
 800498c:	4b02      	ldr	r3, [pc, #8]	; (8004998 <puts+0xc>)
 800498e:	4601      	mov	r1, r0
 8004990:	6818      	ldr	r0, [r3, #0]
 8004992:	f7ff bf8d 	b.w	80048b0 <_puts_r>
 8004996:	bf00      	nop
 8004998:	20000010 	.word	0x20000010

0800499c <__swbuf_r>:
 800499c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800499e:	460e      	mov	r6, r1
 80049a0:	4614      	mov	r4, r2
 80049a2:	4605      	mov	r5, r0
 80049a4:	b118      	cbz	r0, 80049ae <__swbuf_r+0x12>
 80049a6:	6983      	ldr	r3, [r0, #24]
 80049a8:	b90b      	cbnz	r3, 80049ae <__swbuf_r+0x12>
 80049aa:	f000 f9d1 	bl	8004d50 <__sinit>
 80049ae:	4b21      	ldr	r3, [pc, #132]	; (8004a34 <__swbuf_r+0x98>)
 80049b0:	429c      	cmp	r4, r3
 80049b2:	d12b      	bne.n	8004a0c <__swbuf_r+0x70>
 80049b4:	686c      	ldr	r4, [r5, #4]
 80049b6:	69a3      	ldr	r3, [r4, #24]
 80049b8:	60a3      	str	r3, [r4, #8]
 80049ba:	89a3      	ldrh	r3, [r4, #12]
 80049bc:	071a      	lsls	r2, r3, #28
 80049be:	d52f      	bpl.n	8004a20 <__swbuf_r+0x84>
 80049c0:	6923      	ldr	r3, [r4, #16]
 80049c2:	b36b      	cbz	r3, 8004a20 <__swbuf_r+0x84>
 80049c4:	6923      	ldr	r3, [r4, #16]
 80049c6:	6820      	ldr	r0, [r4, #0]
 80049c8:	1ac0      	subs	r0, r0, r3
 80049ca:	6963      	ldr	r3, [r4, #20]
 80049cc:	b2f6      	uxtb	r6, r6
 80049ce:	4283      	cmp	r3, r0
 80049d0:	4637      	mov	r7, r6
 80049d2:	dc04      	bgt.n	80049de <__swbuf_r+0x42>
 80049d4:	4621      	mov	r1, r4
 80049d6:	4628      	mov	r0, r5
 80049d8:	f000 f926 	bl	8004c28 <_fflush_r>
 80049dc:	bb30      	cbnz	r0, 8004a2c <__swbuf_r+0x90>
 80049de:	68a3      	ldr	r3, [r4, #8]
 80049e0:	3b01      	subs	r3, #1
 80049e2:	60a3      	str	r3, [r4, #8]
 80049e4:	6823      	ldr	r3, [r4, #0]
 80049e6:	1c5a      	adds	r2, r3, #1
 80049e8:	6022      	str	r2, [r4, #0]
 80049ea:	701e      	strb	r6, [r3, #0]
 80049ec:	6963      	ldr	r3, [r4, #20]
 80049ee:	3001      	adds	r0, #1
 80049f0:	4283      	cmp	r3, r0
 80049f2:	d004      	beq.n	80049fe <__swbuf_r+0x62>
 80049f4:	89a3      	ldrh	r3, [r4, #12]
 80049f6:	07db      	lsls	r3, r3, #31
 80049f8:	d506      	bpl.n	8004a08 <__swbuf_r+0x6c>
 80049fa:	2e0a      	cmp	r6, #10
 80049fc:	d104      	bne.n	8004a08 <__swbuf_r+0x6c>
 80049fe:	4621      	mov	r1, r4
 8004a00:	4628      	mov	r0, r5
 8004a02:	f000 f911 	bl	8004c28 <_fflush_r>
 8004a06:	b988      	cbnz	r0, 8004a2c <__swbuf_r+0x90>
 8004a08:	4638      	mov	r0, r7
 8004a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a0c:	4b0a      	ldr	r3, [pc, #40]	; (8004a38 <__swbuf_r+0x9c>)
 8004a0e:	429c      	cmp	r4, r3
 8004a10:	d101      	bne.n	8004a16 <__swbuf_r+0x7a>
 8004a12:	68ac      	ldr	r4, [r5, #8]
 8004a14:	e7cf      	b.n	80049b6 <__swbuf_r+0x1a>
 8004a16:	4b09      	ldr	r3, [pc, #36]	; (8004a3c <__swbuf_r+0xa0>)
 8004a18:	429c      	cmp	r4, r3
 8004a1a:	bf08      	it	eq
 8004a1c:	68ec      	ldreq	r4, [r5, #12]
 8004a1e:	e7ca      	b.n	80049b6 <__swbuf_r+0x1a>
 8004a20:	4621      	mov	r1, r4
 8004a22:	4628      	mov	r0, r5
 8004a24:	f000 f80c 	bl	8004a40 <__swsetup_r>
 8004a28:	2800      	cmp	r0, #0
 8004a2a:	d0cb      	beq.n	80049c4 <__swbuf_r+0x28>
 8004a2c:	f04f 37ff 	mov.w	r7, #4294967295
 8004a30:	e7ea      	b.n	8004a08 <__swbuf_r+0x6c>
 8004a32:	bf00      	nop
 8004a34:	08005944 	.word	0x08005944
 8004a38:	08005964 	.word	0x08005964
 8004a3c:	08005924 	.word	0x08005924

08004a40 <__swsetup_r>:
 8004a40:	4b32      	ldr	r3, [pc, #200]	; (8004b0c <__swsetup_r+0xcc>)
 8004a42:	b570      	push	{r4, r5, r6, lr}
 8004a44:	681d      	ldr	r5, [r3, #0]
 8004a46:	4606      	mov	r6, r0
 8004a48:	460c      	mov	r4, r1
 8004a4a:	b125      	cbz	r5, 8004a56 <__swsetup_r+0x16>
 8004a4c:	69ab      	ldr	r3, [r5, #24]
 8004a4e:	b913      	cbnz	r3, 8004a56 <__swsetup_r+0x16>
 8004a50:	4628      	mov	r0, r5
 8004a52:	f000 f97d 	bl	8004d50 <__sinit>
 8004a56:	4b2e      	ldr	r3, [pc, #184]	; (8004b10 <__swsetup_r+0xd0>)
 8004a58:	429c      	cmp	r4, r3
 8004a5a:	d10f      	bne.n	8004a7c <__swsetup_r+0x3c>
 8004a5c:	686c      	ldr	r4, [r5, #4]
 8004a5e:	89a3      	ldrh	r3, [r4, #12]
 8004a60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004a64:	0719      	lsls	r1, r3, #28
 8004a66:	d42c      	bmi.n	8004ac2 <__swsetup_r+0x82>
 8004a68:	06dd      	lsls	r5, r3, #27
 8004a6a:	d411      	bmi.n	8004a90 <__swsetup_r+0x50>
 8004a6c:	2309      	movs	r3, #9
 8004a6e:	6033      	str	r3, [r6, #0]
 8004a70:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004a74:	81a3      	strh	r3, [r4, #12]
 8004a76:	f04f 30ff 	mov.w	r0, #4294967295
 8004a7a:	e03e      	b.n	8004afa <__swsetup_r+0xba>
 8004a7c:	4b25      	ldr	r3, [pc, #148]	; (8004b14 <__swsetup_r+0xd4>)
 8004a7e:	429c      	cmp	r4, r3
 8004a80:	d101      	bne.n	8004a86 <__swsetup_r+0x46>
 8004a82:	68ac      	ldr	r4, [r5, #8]
 8004a84:	e7eb      	b.n	8004a5e <__swsetup_r+0x1e>
 8004a86:	4b24      	ldr	r3, [pc, #144]	; (8004b18 <__swsetup_r+0xd8>)
 8004a88:	429c      	cmp	r4, r3
 8004a8a:	bf08      	it	eq
 8004a8c:	68ec      	ldreq	r4, [r5, #12]
 8004a8e:	e7e6      	b.n	8004a5e <__swsetup_r+0x1e>
 8004a90:	0758      	lsls	r0, r3, #29
 8004a92:	d512      	bpl.n	8004aba <__swsetup_r+0x7a>
 8004a94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a96:	b141      	cbz	r1, 8004aaa <__swsetup_r+0x6a>
 8004a98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a9c:	4299      	cmp	r1, r3
 8004a9e:	d002      	beq.n	8004aa6 <__swsetup_r+0x66>
 8004aa0:	4630      	mov	r0, r6
 8004aa2:	f000 fa5b 	bl	8004f5c <_free_r>
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	6363      	str	r3, [r4, #52]	; 0x34
 8004aaa:	89a3      	ldrh	r3, [r4, #12]
 8004aac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004ab0:	81a3      	strh	r3, [r4, #12]
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	6063      	str	r3, [r4, #4]
 8004ab6:	6923      	ldr	r3, [r4, #16]
 8004ab8:	6023      	str	r3, [r4, #0]
 8004aba:	89a3      	ldrh	r3, [r4, #12]
 8004abc:	f043 0308 	orr.w	r3, r3, #8
 8004ac0:	81a3      	strh	r3, [r4, #12]
 8004ac2:	6923      	ldr	r3, [r4, #16]
 8004ac4:	b94b      	cbnz	r3, 8004ada <__swsetup_r+0x9a>
 8004ac6:	89a3      	ldrh	r3, [r4, #12]
 8004ac8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004acc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ad0:	d003      	beq.n	8004ada <__swsetup_r+0x9a>
 8004ad2:	4621      	mov	r1, r4
 8004ad4:	4630      	mov	r0, r6
 8004ad6:	f000 fa01 	bl	8004edc <__smakebuf_r>
 8004ada:	89a0      	ldrh	r0, [r4, #12]
 8004adc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004ae0:	f010 0301 	ands.w	r3, r0, #1
 8004ae4:	d00a      	beq.n	8004afc <__swsetup_r+0xbc>
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	60a3      	str	r3, [r4, #8]
 8004aea:	6963      	ldr	r3, [r4, #20]
 8004aec:	425b      	negs	r3, r3
 8004aee:	61a3      	str	r3, [r4, #24]
 8004af0:	6923      	ldr	r3, [r4, #16]
 8004af2:	b943      	cbnz	r3, 8004b06 <__swsetup_r+0xc6>
 8004af4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004af8:	d1ba      	bne.n	8004a70 <__swsetup_r+0x30>
 8004afa:	bd70      	pop	{r4, r5, r6, pc}
 8004afc:	0781      	lsls	r1, r0, #30
 8004afe:	bf58      	it	pl
 8004b00:	6963      	ldrpl	r3, [r4, #20]
 8004b02:	60a3      	str	r3, [r4, #8]
 8004b04:	e7f4      	b.n	8004af0 <__swsetup_r+0xb0>
 8004b06:	2000      	movs	r0, #0
 8004b08:	e7f7      	b.n	8004afa <__swsetup_r+0xba>
 8004b0a:	bf00      	nop
 8004b0c:	20000010 	.word	0x20000010
 8004b10:	08005944 	.word	0x08005944
 8004b14:	08005964 	.word	0x08005964
 8004b18:	08005924 	.word	0x08005924

08004b1c <__sflush_r>:
 8004b1c:	898a      	ldrh	r2, [r1, #12]
 8004b1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b22:	4605      	mov	r5, r0
 8004b24:	0710      	lsls	r0, r2, #28
 8004b26:	460c      	mov	r4, r1
 8004b28:	d458      	bmi.n	8004bdc <__sflush_r+0xc0>
 8004b2a:	684b      	ldr	r3, [r1, #4]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	dc05      	bgt.n	8004b3c <__sflush_r+0x20>
 8004b30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	dc02      	bgt.n	8004b3c <__sflush_r+0x20>
 8004b36:	2000      	movs	r0, #0
 8004b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b3e:	2e00      	cmp	r6, #0
 8004b40:	d0f9      	beq.n	8004b36 <__sflush_r+0x1a>
 8004b42:	2300      	movs	r3, #0
 8004b44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004b48:	682f      	ldr	r7, [r5, #0]
 8004b4a:	602b      	str	r3, [r5, #0]
 8004b4c:	d032      	beq.n	8004bb4 <__sflush_r+0x98>
 8004b4e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004b50:	89a3      	ldrh	r3, [r4, #12]
 8004b52:	075a      	lsls	r2, r3, #29
 8004b54:	d505      	bpl.n	8004b62 <__sflush_r+0x46>
 8004b56:	6863      	ldr	r3, [r4, #4]
 8004b58:	1ac0      	subs	r0, r0, r3
 8004b5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004b5c:	b10b      	cbz	r3, 8004b62 <__sflush_r+0x46>
 8004b5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b60:	1ac0      	subs	r0, r0, r3
 8004b62:	2300      	movs	r3, #0
 8004b64:	4602      	mov	r2, r0
 8004b66:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004b68:	6a21      	ldr	r1, [r4, #32]
 8004b6a:	4628      	mov	r0, r5
 8004b6c:	47b0      	blx	r6
 8004b6e:	1c43      	adds	r3, r0, #1
 8004b70:	89a3      	ldrh	r3, [r4, #12]
 8004b72:	d106      	bne.n	8004b82 <__sflush_r+0x66>
 8004b74:	6829      	ldr	r1, [r5, #0]
 8004b76:	291d      	cmp	r1, #29
 8004b78:	d82c      	bhi.n	8004bd4 <__sflush_r+0xb8>
 8004b7a:	4a2a      	ldr	r2, [pc, #168]	; (8004c24 <__sflush_r+0x108>)
 8004b7c:	40ca      	lsrs	r2, r1
 8004b7e:	07d6      	lsls	r6, r2, #31
 8004b80:	d528      	bpl.n	8004bd4 <__sflush_r+0xb8>
 8004b82:	2200      	movs	r2, #0
 8004b84:	6062      	str	r2, [r4, #4]
 8004b86:	04d9      	lsls	r1, r3, #19
 8004b88:	6922      	ldr	r2, [r4, #16]
 8004b8a:	6022      	str	r2, [r4, #0]
 8004b8c:	d504      	bpl.n	8004b98 <__sflush_r+0x7c>
 8004b8e:	1c42      	adds	r2, r0, #1
 8004b90:	d101      	bne.n	8004b96 <__sflush_r+0x7a>
 8004b92:	682b      	ldr	r3, [r5, #0]
 8004b94:	b903      	cbnz	r3, 8004b98 <__sflush_r+0x7c>
 8004b96:	6560      	str	r0, [r4, #84]	; 0x54
 8004b98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004b9a:	602f      	str	r7, [r5, #0]
 8004b9c:	2900      	cmp	r1, #0
 8004b9e:	d0ca      	beq.n	8004b36 <__sflush_r+0x1a>
 8004ba0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ba4:	4299      	cmp	r1, r3
 8004ba6:	d002      	beq.n	8004bae <__sflush_r+0x92>
 8004ba8:	4628      	mov	r0, r5
 8004baa:	f000 f9d7 	bl	8004f5c <_free_r>
 8004bae:	2000      	movs	r0, #0
 8004bb0:	6360      	str	r0, [r4, #52]	; 0x34
 8004bb2:	e7c1      	b.n	8004b38 <__sflush_r+0x1c>
 8004bb4:	6a21      	ldr	r1, [r4, #32]
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	4628      	mov	r0, r5
 8004bba:	47b0      	blx	r6
 8004bbc:	1c41      	adds	r1, r0, #1
 8004bbe:	d1c7      	bne.n	8004b50 <__sflush_r+0x34>
 8004bc0:	682b      	ldr	r3, [r5, #0]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d0c4      	beq.n	8004b50 <__sflush_r+0x34>
 8004bc6:	2b1d      	cmp	r3, #29
 8004bc8:	d001      	beq.n	8004bce <__sflush_r+0xb2>
 8004bca:	2b16      	cmp	r3, #22
 8004bcc:	d101      	bne.n	8004bd2 <__sflush_r+0xb6>
 8004bce:	602f      	str	r7, [r5, #0]
 8004bd0:	e7b1      	b.n	8004b36 <__sflush_r+0x1a>
 8004bd2:	89a3      	ldrh	r3, [r4, #12]
 8004bd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bd8:	81a3      	strh	r3, [r4, #12]
 8004bda:	e7ad      	b.n	8004b38 <__sflush_r+0x1c>
 8004bdc:	690f      	ldr	r7, [r1, #16]
 8004bde:	2f00      	cmp	r7, #0
 8004be0:	d0a9      	beq.n	8004b36 <__sflush_r+0x1a>
 8004be2:	0793      	lsls	r3, r2, #30
 8004be4:	680e      	ldr	r6, [r1, #0]
 8004be6:	bf08      	it	eq
 8004be8:	694b      	ldreq	r3, [r1, #20]
 8004bea:	600f      	str	r7, [r1, #0]
 8004bec:	bf18      	it	ne
 8004bee:	2300      	movne	r3, #0
 8004bf0:	eba6 0807 	sub.w	r8, r6, r7
 8004bf4:	608b      	str	r3, [r1, #8]
 8004bf6:	f1b8 0f00 	cmp.w	r8, #0
 8004bfa:	dd9c      	ble.n	8004b36 <__sflush_r+0x1a>
 8004bfc:	6a21      	ldr	r1, [r4, #32]
 8004bfe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004c00:	4643      	mov	r3, r8
 8004c02:	463a      	mov	r2, r7
 8004c04:	4628      	mov	r0, r5
 8004c06:	47b0      	blx	r6
 8004c08:	2800      	cmp	r0, #0
 8004c0a:	dc06      	bgt.n	8004c1a <__sflush_r+0xfe>
 8004c0c:	89a3      	ldrh	r3, [r4, #12]
 8004c0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c12:	81a3      	strh	r3, [r4, #12]
 8004c14:	f04f 30ff 	mov.w	r0, #4294967295
 8004c18:	e78e      	b.n	8004b38 <__sflush_r+0x1c>
 8004c1a:	4407      	add	r7, r0
 8004c1c:	eba8 0800 	sub.w	r8, r8, r0
 8004c20:	e7e9      	b.n	8004bf6 <__sflush_r+0xda>
 8004c22:	bf00      	nop
 8004c24:	20400001 	.word	0x20400001

08004c28 <_fflush_r>:
 8004c28:	b538      	push	{r3, r4, r5, lr}
 8004c2a:	690b      	ldr	r3, [r1, #16]
 8004c2c:	4605      	mov	r5, r0
 8004c2e:	460c      	mov	r4, r1
 8004c30:	b913      	cbnz	r3, 8004c38 <_fflush_r+0x10>
 8004c32:	2500      	movs	r5, #0
 8004c34:	4628      	mov	r0, r5
 8004c36:	bd38      	pop	{r3, r4, r5, pc}
 8004c38:	b118      	cbz	r0, 8004c42 <_fflush_r+0x1a>
 8004c3a:	6983      	ldr	r3, [r0, #24]
 8004c3c:	b90b      	cbnz	r3, 8004c42 <_fflush_r+0x1a>
 8004c3e:	f000 f887 	bl	8004d50 <__sinit>
 8004c42:	4b14      	ldr	r3, [pc, #80]	; (8004c94 <_fflush_r+0x6c>)
 8004c44:	429c      	cmp	r4, r3
 8004c46:	d11b      	bne.n	8004c80 <_fflush_r+0x58>
 8004c48:	686c      	ldr	r4, [r5, #4]
 8004c4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d0ef      	beq.n	8004c32 <_fflush_r+0xa>
 8004c52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004c54:	07d0      	lsls	r0, r2, #31
 8004c56:	d404      	bmi.n	8004c62 <_fflush_r+0x3a>
 8004c58:	0599      	lsls	r1, r3, #22
 8004c5a:	d402      	bmi.n	8004c62 <_fflush_r+0x3a>
 8004c5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c5e:	f000 f915 	bl	8004e8c <__retarget_lock_acquire_recursive>
 8004c62:	4628      	mov	r0, r5
 8004c64:	4621      	mov	r1, r4
 8004c66:	f7ff ff59 	bl	8004b1c <__sflush_r>
 8004c6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004c6c:	07da      	lsls	r2, r3, #31
 8004c6e:	4605      	mov	r5, r0
 8004c70:	d4e0      	bmi.n	8004c34 <_fflush_r+0xc>
 8004c72:	89a3      	ldrh	r3, [r4, #12]
 8004c74:	059b      	lsls	r3, r3, #22
 8004c76:	d4dd      	bmi.n	8004c34 <_fflush_r+0xc>
 8004c78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004c7a:	f000 f908 	bl	8004e8e <__retarget_lock_release_recursive>
 8004c7e:	e7d9      	b.n	8004c34 <_fflush_r+0xc>
 8004c80:	4b05      	ldr	r3, [pc, #20]	; (8004c98 <_fflush_r+0x70>)
 8004c82:	429c      	cmp	r4, r3
 8004c84:	d101      	bne.n	8004c8a <_fflush_r+0x62>
 8004c86:	68ac      	ldr	r4, [r5, #8]
 8004c88:	e7df      	b.n	8004c4a <_fflush_r+0x22>
 8004c8a:	4b04      	ldr	r3, [pc, #16]	; (8004c9c <_fflush_r+0x74>)
 8004c8c:	429c      	cmp	r4, r3
 8004c8e:	bf08      	it	eq
 8004c90:	68ec      	ldreq	r4, [r5, #12]
 8004c92:	e7da      	b.n	8004c4a <_fflush_r+0x22>
 8004c94:	08005944 	.word	0x08005944
 8004c98:	08005964 	.word	0x08005964
 8004c9c:	08005924 	.word	0x08005924

08004ca0 <std>:
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	b510      	push	{r4, lr}
 8004ca4:	4604      	mov	r4, r0
 8004ca6:	e9c0 3300 	strd	r3, r3, [r0]
 8004caa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004cae:	6083      	str	r3, [r0, #8]
 8004cb0:	8181      	strh	r1, [r0, #12]
 8004cb2:	6643      	str	r3, [r0, #100]	; 0x64
 8004cb4:	81c2      	strh	r2, [r0, #14]
 8004cb6:	6183      	str	r3, [r0, #24]
 8004cb8:	4619      	mov	r1, r3
 8004cba:	2208      	movs	r2, #8
 8004cbc:	305c      	adds	r0, #92	; 0x5c
 8004cbe:	f7ff fdd7 	bl	8004870 <memset>
 8004cc2:	4b05      	ldr	r3, [pc, #20]	; (8004cd8 <std+0x38>)
 8004cc4:	6263      	str	r3, [r4, #36]	; 0x24
 8004cc6:	4b05      	ldr	r3, [pc, #20]	; (8004cdc <std+0x3c>)
 8004cc8:	62a3      	str	r3, [r4, #40]	; 0x28
 8004cca:	4b05      	ldr	r3, [pc, #20]	; (8004ce0 <std+0x40>)
 8004ccc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004cce:	4b05      	ldr	r3, [pc, #20]	; (8004ce4 <std+0x44>)
 8004cd0:	6224      	str	r4, [r4, #32]
 8004cd2:	6323      	str	r3, [r4, #48]	; 0x30
 8004cd4:	bd10      	pop	{r4, pc}
 8004cd6:	bf00      	nop
 8004cd8:	08005719 	.word	0x08005719
 8004cdc:	0800573b 	.word	0x0800573b
 8004ce0:	08005773 	.word	0x08005773
 8004ce4:	08005797 	.word	0x08005797

08004ce8 <_cleanup_r>:
 8004ce8:	4901      	ldr	r1, [pc, #4]	; (8004cf0 <_cleanup_r+0x8>)
 8004cea:	f000 b8af 	b.w	8004e4c <_fwalk_reent>
 8004cee:	bf00      	nop
 8004cf0:	08004c29 	.word	0x08004c29

08004cf4 <__sfmoreglue>:
 8004cf4:	b570      	push	{r4, r5, r6, lr}
 8004cf6:	2268      	movs	r2, #104	; 0x68
 8004cf8:	1e4d      	subs	r5, r1, #1
 8004cfa:	4355      	muls	r5, r2
 8004cfc:	460e      	mov	r6, r1
 8004cfe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004d02:	f000 f997 	bl	8005034 <_malloc_r>
 8004d06:	4604      	mov	r4, r0
 8004d08:	b140      	cbz	r0, 8004d1c <__sfmoreglue+0x28>
 8004d0a:	2100      	movs	r1, #0
 8004d0c:	e9c0 1600 	strd	r1, r6, [r0]
 8004d10:	300c      	adds	r0, #12
 8004d12:	60a0      	str	r0, [r4, #8]
 8004d14:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004d18:	f7ff fdaa 	bl	8004870 <memset>
 8004d1c:	4620      	mov	r0, r4
 8004d1e:	bd70      	pop	{r4, r5, r6, pc}

08004d20 <__sfp_lock_acquire>:
 8004d20:	4801      	ldr	r0, [pc, #4]	; (8004d28 <__sfp_lock_acquire+0x8>)
 8004d22:	f000 b8b3 	b.w	8004e8c <__retarget_lock_acquire_recursive>
 8004d26:	bf00      	nop
 8004d28:	20000ecd 	.word	0x20000ecd

08004d2c <__sfp_lock_release>:
 8004d2c:	4801      	ldr	r0, [pc, #4]	; (8004d34 <__sfp_lock_release+0x8>)
 8004d2e:	f000 b8ae 	b.w	8004e8e <__retarget_lock_release_recursive>
 8004d32:	bf00      	nop
 8004d34:	20000ecd 	.word	0x20000ecd

08004d38 <__sinit_lock_acquire>:
 8004d38:	4801      	ldr	r0, [pc, #4]	; (8004d40 <__sinit_lock_acquire+0x8>)
 8004d3a:	f000 b8a7 	b.w	8004e8c <__retarget_lock_acquire_recursive>
 8004d3e:	bf00      	nop
 8004d40:	20000ece 	.word	0x20000ece

08004d44 <__sinit_lock_release>:
 8004d44:	4801      	ldr	r0, [pc, #4]	; (8004d4c <__sinit_lock_release+0x8>)
 8004d46:	f000 b8a2 	b.w	8004e8e <__retarget_lock_release_recursive>
 8004d4a:	bf00      	nop
 8004d4c:	20000ece 	.word	0x20000ece

08004d50 <__sinit>:
 8004d50:	b510      	push	{r4, lr}
 8004d52:	4604      	mov	r4, r0
 8004d54:	f7ff fff0 	bl	8004d38 <__sinit_lock_acquire>
 8004d58:	69a3      	ldr	r3, [r4, #24]
 8004d5a:	b11b      	cbz	r3, 8004d64 <__sinit+0x14>
 8004d5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d60:	f7ff bff0 	b.w	8004d44 <__sinit_lock_release>
 8004d64:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004d68:	6523      	str	r3, [r4, #80]	; 0x50
 8004d6a:	4b13      	ldr	r3, [pc, #76]	; (8004db8 <__sinit+0x68>)
 8004d6c:	4a13      	ldr	r2, [pc, #76]	; (8004dbc <__sinit+0x6c>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	62a2      	str	r2, [r4, #40]	; 0x28
 8004d72:	42a3      	cmp	r3, r4
 8004d74:	bf04      	itt	eq
 8004d76:	2301      	moveq	r3, #1
 8004d78:	61a3      	streq	r3, [r4, #24]
 8004d7a:	4620      	mov	r0, r4
 8004d7c:	f000 f820 	bl	8004dc0 <__sfp>
 8004d80:	6060      	str	r0, [r4, #4]
 8004d82:	4620      	mov	r0, r4
 8004d84:	f000 f81c 	bl	8004dc0 <__sfp>
 8004d88:	60a0      	str	r0, [r4, #8]
 8004d8a:	4620      	mov	r0, r4
 8004d8c:	f000 f818 	bl	8004dc0 <__sfp>
 8004d90:	2200      	movs	r2, #0
 8004d92:	60e0      	str	r0, [r4, #12]
 8004d94:	2104      	movs	r1, #4
 8004d96:	6860      	ldr	r0, [r4, #4]
 8004d98:	f7ff ff82 	bl	8004ca0 <std>
 8004d9c:	68a0      	ldr	r0, [r4, #8]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	2109      	movs	r1, #9
 8004da2:	f7ff ff7d 	bl	8004ca0 <std>
 8004da6:	68e0      	ldr	r0, [r4, #12]
 8004da8:	2202      	movs	r2, #2
 8004daa:	2112      	movs	r1, #18
 8004dac:	f7ff ff78 	bl	8004ca0 <std>
 8004db0:	2301      	movs	r3, #1
 8004db2:	61a3      	str	r3, [r4, #24]
 8004db4:	e7d2      	b.n	8004d5c <__sinit+0xc>
 8004db6:	bf00      	nop
 8004db8:	08005920 	.word	0x08005920
 8004dbc:	08004ce9 	.word	0x08004ce9

08004dc0 <__sfp>:
 8004dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dc2:	4607      	mov	r7, r0
 8004dc4:	f7ff ffac 	bl	8004d20 <__sfp_lock_acquire>
 8004dc8:	4b1e      	ldr	r3, [pc, #120]	; (8004e44 <__sfp+0x84>)
 8004dca:	681e      	ldr	r6, [r3, #0]
 8004dcc:	69b3      	ldr	r3, [r6, #24]
 8004dce:	b913      	cbnz	r3, 8004dd6 <__sfp+0x16>
 8004dd0:	4630      	mov	r0, r6
 8004dd2:	f7ff ffbd 	bl	8004d50 <__sinit>
 8004dd6:	3648      	adds	r6, #72	; 0x48
 8004dd8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	d503      	bpl.n	8004de8 <__sfp+0x28>
 8004de0:	6833      	ldr	r3, [r6, #0]
 8004de2:	b30b      	cbz	r3, 8004e28 <__sfp+0x68>
 8004de4:	6836      	ldr	r6, [r6, #0]
 8004de6:	e7f7      	b.n	8004dd8 <__sfp+0x18>
 8004de8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004dec:	b9d5      	cbnz	r5, 8004e24 <__sfp+0x64>
 8004dee:	4b16      	ldr	r3, [pc, #88]	; (8004e48 <__sfp+0x88>)
 8004df0:	60e3      	str	r3, [r4, #12]
 8004df2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004df6:	6665      	str	r5, [r4, #100]	; 0x64
 8004df8:	f000 f847 	bl	8004e8a <__retarget_lock_init_recursive>
 8004dfc:	f7ff ff96 	bl	8004d2c <__sfp_lock_release>
 8004e00:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004e04:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004e08:	6025      	str	r5, [r4, #0]
 8004e0a:	61a5      	str	r5, [r4, #24]
 8004e0c:	2208      	movs	r2, #8
 8004e0e:	4629      	mov	r1, r5
 8004e10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004e14:	f7ff fd2c 	bl	8004870 <memset>
 8004e18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004e1c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004e20:	4620      	mov	r0, r4
 8004e22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e24:	3468      	adds	r4, #104	; 0x68
 8004e26:	e7d9      	b.n	8004ddc <__sfp+0x1c>
 8004e28:	2104      	movs	r1, #4
 8004e2a:	4638      	mov	r0, r7
 8004e2c:	f7ff ff62 	bl	8004cf4 <__sfmoreglue>
 8004e30:	4604      	mov	r4, r0
 8004e32:	6030      	str	r0, [r6, #0]
 8004e34:	2800      	cmp	r0, #0
 8004e36:	d1d5      	bne.n	8004de4 <__sfp+0x24>
 8004e38:	f7ff ff78 	bl	8004d2c <__sfp_lock_release>
 8004e3c:	230c      	movs	r3, #12
 8004e3e:	603b      	str	r3, [r7, #0]
 8004e40:	e7ee      	b.n	8004e20 <__sfp+0x60>
 8004e42:	bf00      	nop
 8004e44:	08005920 	.word	0x08005920
 8004e48:	ffff0001 	.word	0xffff0001

08004e4c <_fwalk_reent>:
 8004e4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004e50:	4606      	mov	r6, r0
 8004e52:	4688      	mov	r8, r1
 8004e54:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004e58:	2700      	movs	r7, #0
 8004e5a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004e5e:	f1b9 0901 	subs.w	r9, r9, #1
 8004e62:	d505      	bpl.n	8004e70 <_fwalk_reent+0x24>
 8004e64:	6824      	ldr	r4, [r4, #0]
 8004e66:	2c00      	cmp	r4, #0
 8004e68:	d1f7      	bne.n	8004e5a <_fwalk_reent+0xe>
 8004e6a:	4638      	mov	r0, r7
 8004e6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e70:	89ab      	ldrh	r3, [r5, #12]
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d907      	bls.n	8004e86 <_fwalk_reent+0x3a>
 8004e76:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004e7a:	3301      	adds	r3, #1
 8004e7c:	d003      	beq.n	8004e86 <_fwalk_reent+0x3a>
 8004e7e:	4629      	mov	r1, r5
 8004e80:	4630      	mov	r0, r6
 8004e82:	47c0      	blx	r8
 8004e84:	4307      	orrs	r7, r0
 8004e86:	3568      	adds	r5, #104	; 0x68
 8004e88:	e7e9      	b.n	8004e5e <_fwalk_reent+0x12>

08004e8a <__retarget_lock_init_recursive>:
 8004e8a:	4770      	bx	lr

08004e8c <__retarget_lock_acquire_recursive>:
 8004e8c:	4770      	bx	lr

08004e8e <__retarget_lock_release_recursive>:
 8004e8e:	4770      	bx	lr

08004e90 <__swhatbuf_r>:
 8004e90:	b570      	push	{r4, r5, r6, lr}
 8004e92:	460e      	mov	r6, r1
 8004e94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e98:	2900      	cmp	r1, #0
 8004e9a:	b096      	sub	sp, #88	; 0x58
 8004e9c:	4614      	mov	r4, r2
 8004e9e:	461d      	mov	r5, r3
 8004ea0:	da08      	bge.n	8004eb4 <__swhatbuf_r+0x24>
 8004ea2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	602a      	str	r2, [r5, #0]
 8004eaa:	061a      	lsls	r2, r3, #24
 8004eac:	d410      	bmi.n	8004ed0 <__swhatbuf_r+0x40>
 8004eae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004eb2:	e00e      	b.n	8004ed2 <__swhatbuf_r+0x42>
 8004eb4:	466a      	mov	r2, sp
 8004eb6:	f000 fc95 	bl	80057e4 <_fstat_r>
 8004eba:	2800      	cmp	r0, #0
 8004ebc:	dbf1      	blt.n	8004ea2 <__swhatbuf_r+0x12>
 8004ebe:	9a01      	ldr	r2, [sp, #4]
 8004ec0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004ec4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004ec8:	425a      	negs	r2, r3
 8004eca:	415a      	adcs	r2, r3
 8004ecc:	602a      	str	r2, [r5, #0]
 8004ece:	e7ee      	b.n	8004eae <__swhatbuf_r+0x1e>
 8004ed0:	2340      	movs	r3, #64	; 0x40
 8004ed2:	2000      	movs	r0, #0
 8004ed4:	6023      	str	r3, [r4, #0]
 8004ed6:	b016      	add	sp, #88	; 0x58
 8004ed8:	bd70      	pop	{r4, r5, r6, pc}
	...

08004edc <__smakebuf_r>:
 8004edc:	898b      	ldrh	r3, [r1, #12]
 8004ede:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004ee0:	079d      	lsls	r5, r3, #30
 8004ee2:	4606      	mov	r6, r0
 8004ee4:	460c      	mov	r4, r1
 8004ee6:	d507      	bpl.n	8004ef8 <__smakebuf_r+0x1c>
 8004ee8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004eec:	6023      	str	r3, [r4, #0]
 8004eee:	6123      	str	r3, [r4, #16]
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	6163      	str	r3, [r4, #20]
 8004ef4:	b002      	add	sp, #8
 8004ef6:	bd70      	pop	{r4, r5, r6, pc}
 8004ef8:	ab01      	add	r3, sp, #4
 8004efa:	466a      	mov	r2, sp
 8004efc:	f7ff ffc8 	bl	8004e90 <__swhatbuf_r>
 8004f00:	9900      	ldr	r1, [sp, #0]
 8004f02:	4605      	mov	r5, r0
 8004f04:	4630      	mov	r0, r6
 8004f06:	f000 f895 	bl	8005034 <_malloc_r>
 8004f0a:	b948      	cbnz	r0, 8004f20 <__smakebuf_r+0x44>
 8004f0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004f10:	059a      	lsls	r2, r3, #22
 8004f12:	d4ef      	bmi.n	8004ef4 <__smakebuf_r+0x18>
 8004f14:	f023 0303 	bic.w	r3, r3, #3
 8004f18:	f043 0302 	orr.w	r3, r3, #2
 8004f1c:	81a3      	strh	r3, [r4, #12]
 8004f1e:	e7e3      	b.n	8004ee8 <__smakebuf_r+0xc>
 8004f20:	4b0d      	ldr	r3, [pc, #52]	; (8004f58 <__smakebuf_r+0x7c>)
 8004f22:	62b3      	str	r3, [r6, #40]	; 0x28
 8004f24:	89a3      	ldrh	r3, [r4, #12]
 8004f26:	6020      	str	r0, [r4, #0]
 8004f28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f2c:	81a3      	strh	r3, [r4, #12]
 8004f2e:	9b00      	ldr	r3, [sp, #0]
 8004f30:	6163      	str	r3, [r4, #20]
 8004f32:	9b01      	ldr	r3, [sp, #4]
 8004f34:	6120      	str	r0, [r4, #16]
 8004f36:	b15b      	cbz	r3, 8004f50 <__smakebuf_r+0x74>
 8004f38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004f3c:	4630      	mov	r0, r6
 8004f3e:	f000 fc63 	bl	8005808 <_isatty_r>
 8004f42:	b128      	cbz	r0, 8004f50 <__smakebuf_r+0x74>
 8004f44:	89a3      	ldrh	r3, [r4, #12]
 8004f46:	f023 0303 	bic.w	r3, r3, #3
 8004f4a:	f043 0301 	orr.w	r3, r3, #1
 8004f4e:	81a3      	strh	r3, [r4, #12]
 8004f50:	89a0      	ldrh	r0, [r4, #12]
 8004f52:	4305      	orrs	r5, r0
 8004f54:	81a5      	strh	r5, [r4, #12]
 8004f56:	e7cd      	b.n	8004ef4 <__smakebuf_r+0x18>
 8004f58:	08004ce9 	.word	0x08004ce9

08004f5c <_free_r>:
 8004f5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f5e:	2900      	cmp	r1, #0
 8004f60:	d044      	beq.n	8004fec <_free_r+0x90>
 8004f62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f66:	9001      	str	r0, [sp, #4]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	f1a1 0404 	sub.w	r4, r1, #4
 8004f6e:	bfb8      	it	lt
 8004f70:	18e4      	addlt	r4, r4, r3
 8004f72:	f000 fc6b 	bl	800584c <__malloc_lock>
 8004f76:	4a1e      	ldr	r2, [pc, #120]	; (8004ff0 <_free_r+0x94>)
 8004f78:	9801      	ldr	r0, [sp, #4]
 8004f7a:	6813      	ldr	r3, [r2, #0]
 8004f7c:	b933      	cbnz	r3, 8004f8c <_free_r+0x30>
 8004f7e:	6063      	str	r3, [r4, #4]
 8004f80:	6014      	str	r4, [r2, #0]
 8004f82:	b003      	add	sp, #12
 8004f84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004f88:	f000 bc66 	b.w	8005858 <__malloc_unlock>
 8004f8c:	42a3      	cmp	r3, r4
 8004f8e:	d908      	bls.n	8004fa2 <_free_r+0x46>
 8004f90:	6825      	ldr	r5, [r4, #0]
 8004f92:	1961      	adds	r1, r4, r5
 8004f94:	428b      	cmp	r3, r1
 8004f96:	bf01      	itttt	eq
 8004f98:	6819      	ldreq	r1, [r3, #0]
 8004f9a:	685b      	ldreq	r3, [r3, #4]
 8004f9c:	1949      	addeq	r1, r1, r5
 8004f9e:	6021      	streq	r1, [r4, #0]
 8004fa0:	e7ed      	b.n	8004f7e <_free_r+0x22>
 8004fa2:	461a      	mov	r2, r3
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	b10b      	cbz	r3, 8004fac <_free_r+0x50>
 8004fa8:	42a3      	cmp	r3, r4
 8004faa:	d9fa      	bls.n	8004fa2 <_free_r+0x46>
 8004fac:	6811      	ldr	r1, [r2, #0]
 8004fae:	1855      	adds	r5, r2, r1
 8004fb0:	42a5      	cmp	r5, r4
 8004fb2:	d10b      	bne.n	8004fcc <_free_r+0x70>
 8004fb4:	6824      	ldr	r4, [r4, #0]
 8004fb6:	4421      	add	r1, r4
 8004fb8:	1854      	adds	r4, r2, r1
 8004fba:	42a3      	cmp	r3, r4
 8004fbc:	6011      	str	r1, [r2, #0]
 8004fbe:	d1e0      	bne.n	8004f82 <_free_r+0x26>
 8004fc0:	681c      	ldr	r4, [r3, #0]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	6053      	str	r3, [r2, #4]
 8004fc6:	4421      	add	r1, r4
 8004fc8:	6011      	str	r1, [r2, #0]
 8004fca:	e7da      	b.n	8004f82 <_free_r+0x26>
 8004fcc:	d902      	bls.n	8004fd4 <_free_r+0x78>
 8004fce:	230c      	movs	r3, #12
 8004fd0:	6003      	str	r3, [r0, #0]
 8004fd2:	e7d6      	b.n	8004f82 <_free_r+0x26>
 8004fd4:	6825      	ldr	r5, [r4, #0]
 8004fd6:	1961      	adds	r1, r4, r5
 8004fd8:	428b      	cmp	r3, r1
 8004fda:	bf04      	itt	eq
 8004fdc:	6819      	ldreq	r1, [r3, #0]
 8004fde:	685b      	ldreq	r3, [r3, #4]
 8004fe0:	6063      	str	r3, [r4, #4]
 8004fe2:	bf04      	itt	eq
 8004fe4:	1949      	addeq	r1, r1, r5
 8004fe6:	6021      	streq	r1, [r4, #0]
 8004fe8:	6054      	str	r4, [r2, #4]
 8004fea:	e7ca      	b.n	8004f82 <_free_r+0x26>
 8004fec:	b003      	add	sp, #12
 8004fee:	bd30      	pop	{r4, r5, pc}
 8004ff0:	20000ed0 	.word	0x20000ed0

08004ff4 <sbrk_aligned>:
 8004ff4:	b570      	push	{r4, r5, r6, lr}
 8004ff6:	4e0e      	ldr	r6, [pc, #56]	; (8005030 <sbrk_aligned+0x3c>)
 8004ff8:	460c      	mov	r4, r1
 8004ffa:	6831      	ldr	r1, [r6, #0]
 8004ffc:	4605      	mov	r5, r0
 8004ffe:	b911      	cbnz	r1, 8005006 <sbrk_aligned+0x12>
 8005000:	f000 fb7a 	bl	80056f8 <_sbrk_r>
 8005004:	6030      	str	r0, [r6, #0]
 8005006:	4621      	mov	r1, r4
 8005008:	4628      	mov	r0, r5
 800500a:	f000 fb75 	bl	80056f8 <_sbrk_r>
 800500e:	1c43      	adds	r3, r0, #1
 8005010:	d00a      	beq.n	8005028 <sbrk_aligned+0x34>
 8005012:	1cc4      	adds	r4, r0, #3
 8005014:	f024 0403 	bic.w	r4, r4, #3
 8005018:	42a0      	cmp	r0, r4
 800501a:	d007      	beq.n	800502c <sbrk_aligned+0x38>
 800501c:	1a21      	subs	r1, r4, r0
 800501e:	4628      	mov	r0, r5
 8005020:	f000 fb6a 	bl	80056f8 <_sbrk_r>
 8005024:	3001      	adds	r0, #1
 8005026:	d101      	bne.n	800502c <sbrk_aligned+0x38>
 8005028:	f04f 34ff 	mov.w	r4, #4294967295
 800502c:	4620      	mov	r0, r4
 800502e:	bd70      	pop	{r4, r5, r6, pc}
 8005030:	20000ed4 	.word	0x20000ed4

08005034 <_malloc_r>:
 8005034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005038:	1ccd      	adds	r5, r1, #3
 800503a:	f025 0503 	bic.w	r5, r5, #3
 800503e:	3508      	adds	r5, #8
 8005040:	2d0c      	cmp	r5, #12
 8005042:	bf38      	it	cc
 8005044:	250c      	movcc	r5, #12
 8005046:	2d00      	cmp	r5, #0
 8005048:	4607      	mov	r7, r0
 800504a:	db01      	blt.n	8005050 <_malloc_r+0x1c>
 800504c:	42a9      	cmp	r1, r5
 800504e:	d905      	bls.n	800505c <_malloc_r+0x28>
 8005050:	230c      	movs	r3, #12
 8005052:	603b      	str	r3, [r7, #0]
 8005054:	2600      	movs	r6, #0
 8005056:	4630      	mov	r0, r6
 8005058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800505c:	4e2e      	ldr	r6, [pc, #184]	; (8005118 <_malloc_r+0xe4>)
 800505e:	f000 fbf5 	bl	800584c <__malloc_lock>
 8005062:	6833      	ldr	r3, [r6, #0]
 8005064:	461c      	mov	r4, r3
 8005066:	bb34      	cbnz	r4, 80050b6 <_malloc_r+0x82>
 8005068:	4629      	mov	r1, r5
 800506a:	4638      	mov	r0, r7
 800506c:	f7ff ffc2 	bl	8004ff4 <sbrk_aligned>
 8005070:	1c43      	adds	r3, r0, #1
 8005072:	4604      	mov	r4, r0
 8005074:	d14d      	bne.n	8005112 <_malloc_r+0xde>
 8005076:	6834      	ldr	r4, [r6, #0]
 8005078:	4626      	mov	r6, r4
 800507a:	2e00      	cmp	r6, #0
 800507c:	d140      	bne.n	8005100 <_malloc_r+0xcc>
 800507e:	6823      	ldr	r3, [r4, #0]
 8005080:	4631      	mov	r1, r6
 8005082:	4638      	mov	r0, r7
 8005084:	eb04 0803 	add.w	r8, r4, r3
 8005088:	f000 fb36 	bl	80056f8 <_sbrk_r>
 800508c:	4580      	cmp	r8, r0
 800508e:	d13a      	bne.n	8005106 <_malloc_r+0xd2>
 8005090:	6821      	ldr	r1, [r4, #0]
 8005092:	3503      	adds	r5, #3
 8005094:	1a6d      	subs	r5, r5, r1
 8005096:	f025 0503 	bic.w	r5, r5, #3
 800509a:	3508      	adds	r5, #8
 800509c:	2d0c      	cmp	r5, #12
 800509e:	bf38      	it	cc
 80050a0:	250c      	movcc	r5, #12
 80050a2:	4629      	mov	r1, r5
 80050a4:	4638      	mov	r0, r7
 80050a6:	f7ff ffa5 	bl	8004ff4 <sbrk_aligned>
 80050aa:	3001      	adds	r0, #1
 80050ac:	d02b      	beq.n	8005106 <_malloc_r+0xd2>
 80050ae:	6823      	ldr	r3, [r4, #0]
 80050b0:	442b      	add	r3, r5
 80050b2:	6023      	str	r3, [r4, #0]
 80050b4:	e00e      	b.n	80050d4 <_malloc_r+0xa0>
 80050b6:	6822      	ldr	r2, [r4, #0]
 80050b8:	1b52      	subs	r2, r2, r5
 80050ba:	d41e      	bmi.n	80050fa <_malloc_r+0xc6>
 80050bc:	2a0b      	cmp	r2, #11
 80050be:	d916      	bls.n	80050ee <_malloc_r+0xba>
 80050c0:	1961      	adds	r1, r4, r5
 80050c2:	42a3      	cmp	r3, r4
 80050c4:	6025      	str	r5, [r4, #0]
 80050c6:	bf18      	it	ne
 80050c8:	6059      	strne	r1, [r3, #4]
 80050ca:	6863      	ldr	r3, [r4, #4]
 80050cc:	bf08      	it	eq
 80050ce:	6031      	streq	r1, [r6, #0]
 80050d0:	5162      	str	r2, [r4, r5]
 80050d2:	604b      	str	r3, [r1, #4]
 80050d4:	4638      	mov	r0, r7
 80050d6:	f104 060b 	add.w	r6, r4, #11
 80050da:	f000 fbbd 	bl	8005858 <__malloc_unlock>
 80050de:	f026 0607 	bic.w	r6, r6, #7
 80050e2:	1d23      	adds	r3, r4, #4
 80050e4:	1af2      	subs	r2, r6, r3
 80050e6:	d0b6      	beq.n	8005056 <_malloc_r+0x22>
 80050e8:	1b9b      	subs	r3, r3, r6
 80050ea:	50a3      	str	r3, [r4, r2]
 80050ec:	e7b3      	b.n	8005056 <_malloc_r+0x22>
 80050ee:	6862      	ldr	r2, [r4, #4]
 80050f0:	42a3      	cmp	r3, r4
 80050f2:	bf0c      	ite	eq
 80050f4:	6032      	streq	r2, [r6, #0]
 80050f6:	605a      	strne	r2, [r3, #4]
 80050f8:	e7ec      	b.n	80050d4 <_malloc_r+0xa0>
 80050fa:	4623      	mov	r3, r4
 80050fc:	6864      	ldr	r4, [r4, #4]
 80050fe:	e7b2      	b.n	8005066 <_malloc_r+0x32>
 8005100:	4634      	mov	r4, r6
 8005102:	6876      	ldr	r6, [r6, #4]
 8005104:	e7b9      	b.n	800507a <_malloc_r+0x46>
 8005106:	230c      	movs	r3, #12
 8005108:	603b      	str	r3, [r7, #0]
 800510a:	4638      	mov	r0, r7
 800510c:	f000 fba4 	bl	8005858 <__malloc_unlock>
 8005110:	e7a1      	b.n	8005056 <_malloc_r+0x22>
 8005112:	6025      	str	r5, [r4, #0]
 8005114:	e7de      	b.n	80050d4 <_malloc_r+0xa0>
 8005116:	bf00      	nop
 8005118:	20000ed0 	.word	0x20000ed0

0800511c <__sfputc_r>:
 800511c:	6893      	ldr	r3, [r2, #8]
 800511e:	3b01      	subs	r3, #1
 8005120:	2b00      	cmp	r3, #0
 8005122:	b410      	push	{r4}
 8005124:	6093      	str	r3, [r2, #8]
 8005126:	da08      	bge.n	800513a <__sfputc_r+0x1e>
 8005128:	6994      	ldr	r4, [r2, #24]
 800512a:	42a3      	cmp	r3, r4
 800512c:	db01      	blt.n	8005132 <__sfputc_r+0x16>
 800512e:	290a      	cmp	r1, #10
 8005130:	d103      	bne.n	800513a <__sfputc_r+0x1e>
 8005132:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005136:	f7ff bc31 	b.w	800499c <__swbuf_r>
 800513a:	6813      	ldr	r3, [r2, #0]
 800513c:	1c58      	adds	r0, r3, #1
 800513e:	6010      	str	r0, [r2, #0]
 8005140:	7019      	strb	r1, [r3, #0]
 8005142:	4608      	mov	r0, r1
 8005144:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005148:	4770      	bx	lr

0800514a <__sfputs_r>:
 800514a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800514c:	4606      	mov	r6, r0
 800514e:	460f      	mov	r7, r1
 8005150:	4614      	mov	r4, r2
 8005152:	18d5      	adds	r5, r2, r3
 8005154:	42ac      	cmp	r4, r5
 8005156:	d101      	bne.n	800515c <__sfputs_r+0x12>
 8005158:	2000      	movs	r0, #0
 800515a:	e007      	b.n	800516c <__sfputs_r+0x22>
 800515c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005160:	463a      	mov	r2, r7
 8005162:	4630      	mov	r0, r6
 8005164:	f7ff ffda 	bl	800511c <__sfputc_r>
 8005168:	1c43      	adds	r3, r0, #1
 800516a:	d1f3      	bne.n	8005154 <__sfputs_r+0xa>
 800516c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005170 <_vfiprintf_r>:
 8005170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005174:	460d      	mov	r5, r1
 8005176:	b09d      	sub	sp, #116	; 0x74
 8005178:	4614      	mov	r4, r2
 800517a:	4698      	mov	r8, r3
 800517c:	4606      	mov	r6, r0
 800517e:	b118      	cbz	r0, 8005188 <_vfiprintf_r+0x18>
 8005180:	6983      	ldr	r3, [r0, #24]
 8005182:	b90b      	cbnz	r3, 8005188 <_vfiprintf_r+0x18>
 8005184:	f7ff fde4 	bl	8004d50 <__sinit>
 8005188:	4b89      	ldr	r3, [pc, #548]	; (80053b0 <_vfiprintf_r+0x240>)
 800518a:	429d      	cmp	r5, r3
 800518c:	d11b      	bne.n	80051c6 <_vfiprintf_r+0x56>
 800518e:	6875      	ldr	r5, [r6, #4]
 8005190:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005192:	07d9      	lsls	r1, r3, #31
 8005194:	d405      	bmi.n	80051a2 <_vfiprintf_r+0x32>
 8005196:	89ab      	ldrh	r3, [r5, #12]
 8005198:	059a      	lsls	r2, r3, #22
 800519a:	d402      	bmi.n	80051a2 <_vfiprintf_r+0x32>
 800519c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800519e:	f7ff fe75 	bl	8004e8c <__retarget_lock_acquire_recursive>
 80051a2:	89ab      	ldrh	r3, [r5, #12]
 80051a4:	071b      	lsls	r3, r3, #28
 80051a6:	d501      	bpl.n	80051ac <_vfiprintf_r+0x3c>
 80051a8:	692b      	ldr	r3, [r5, #16]
 80051aa:	b9eb      	cbnz	r3, 80051e8 <_vfiprintf_r+0x78>
 80051ac:	4629      	mov	r1, r5
 80051ae:	4630      	mov	r0, r6
 80051b0:	f7ff fc46 	bl	8004a40 <__swsetup_r>
 80051b4:	b1c0      	cbz	r0, 80051e8 <_vfiprintf_r+0x78>
 80051b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80051b8:	07dc      	lsls	r4, r3, #31
 80051ba:	d50e      	bpl.n	80051da <_vfiprintf_r+0x6a>
 80051bc:	f04f 30ff 	mov.w	r0, #4294967295
 80051c0:	b01d      	add	sp, #116	; 0x74
 80051c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051c6:	4b7b      	ldr	r3, [pc, #492]	; (80053b4 <_vfiprintf_r+0x244>)
 80051c8:	429d      	cmp	r5, r3
 80051ca:	d101      	bne.n	80051d0 <_vfiprintf_r+0x60>
 80051cc:	68b5      	ldr	r5, [r6, #8]
 80051ce:	e7df      	b.n	8005190 <_vfiprintf_r+0x20>
 80051d0:	4b79      	ldr	r3, [pc, #484]	; (80053b8 <_vfiprintf_r+0x248>)
 80051d2:	429d      	cmp	r5, r3
 80051d4:	bf08      	it	eq
 80051d6:	68f5      	ldreq	r5, [r6, #12]
 80051d8:	e7da      	b.n	8005190 <_vfiprintf_r+0x20>
 80051da:	89ab      	ldrh	r3, [r5, #12]
 80051dc:	0598      	lsls	r0, r3, #22
 80051de:	d4ed      	bmi.n	80051bc <_vfiprintf_r+0x4c>
 80051e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80051e2:	f7ff fe54 	bl	8004e8e <__retarget_lock_release_recursive>
 80051e6:	e7e9      	b.n	80051bc <_vfiprintf_r+0x4c>
 80051e8:	2300      	movs	r3, #0
 80051ea:	9309      	str	r3, [sp, #36]	; 0x24
 80051ec:	2320      	movs	r3, #32
 80051ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80051f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80051f6:	2330      	movs	r3, #48	; 0x30
 80051f8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80053bc <_vfiprintf_r+0x24c>
 80051fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005200:	f04f 0901 	mov.w	r9, #1
 8005204:	4623      	mov	r3, r4
 8005206:	469a      	mov	sl, r3
 8005208:	f813 2b01 	ldrb.w	r2, [r3], #1
 800520c:	b10a      	cbz	r2, 8005212 <_vfiprintf_r+0xa2>
 800520e:	2a25      	cmp	r2, #37	; 0x25
 8005210:	d1f9      	bne.n	8005206 <_vfiprintf_r+0x96>
 8005212:	ebba 0b04 	subs.w	fp, sl, r4
 8005216:	d00b      	beq.n	8005230 <_vfiprintf_r+0xc0>
 8005218:	465b      	mov	r3, fp
 800521a:	4622      	mov	r2, r4
 800521c:	4629      	mov	r1, r5
 800521e:	4630      	mov	r0, r6
 8005220:	f7ff ff93 	bl	800514a <__sfputs_r>
 8005224:	3001      	adds	r0, #1
 8005226:	f000 80aa 	beq.w	800537e <_vfiprintf_r+0x20e>
 800522a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800522c:	445a      	add	r2, fp
 800522e:	9209      	str	r2, [sp, #36]	; 0x24
 8005230:	f89a 3000 	ldrb.w	r3, [sl]
 8005234:	2b00      	cmp	r3, #0
 8005236:	f000 80a2 	beq.w	800537e <_vfiprintf_r+0x20e>
 800523a:	2300      	movs	r3, #0
 800523c:	f04f 32ff 	mov.w	r2, #4294967295
 8005240:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005244:	f10a 0a01 	add.w	sl, sl, #1
 8005248:	9304      	str	r3, [sp, #16]
 800524a:	9307      	str	r3, [sp, #28]
 800524c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005250:	931a      	str	r3, [sp, #104]	; 0x68
 8005252:	4654      	mov	r4, sl
 8005254:	2205      	movs	r2, #5
 8005256:	f814 1b01 	ldrb.w	r1, [r4], #1
 800525a:	4858      	ldr	r0, [pc, #352]	; (80053bc <_vfiprintf_r+0x24c>)
 800525c:	f7fa ffe0 	bl	8000220 <memchr>
 8005260:	9a04      	ldr	r2, [sp, #16]
 8005262:	b9d8      	cbnz	r0, 800529c <_vfiprintf_r+0x12c>
 8005264:	06d1      	lsls	r1, r2, #27
 8005266:	bf44      	itt	mi
 8005268:	2320      	movmi	r3, #32
 800526a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800526e:	0713      	lsls	r3, r2, #28
 8005270:	bf44      	itt	mi
 8005272:	232b      	movmi	r3, #43	; 0x2b
 8005274:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005278:	f89a 3000 	ldrb.w	r3, [sl]
 800527c:	2b2a      	cmp	r3, #42	; 0x2a
 800527e:	d015      	beq.n	80052ac <_vfiprintf_r+0x13c>
 8005280:	9a07      	ldr	r2, [sp, #28]
 8005282:	4654      	mov	r4, sl
 8005284:	2000      	movs	r0, #0
 8005286:	f04f 0c0a 	mov.w	ip, #10
 800528a:	4621      	mov	r1, r4
 800528c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005290:	3b30      	subs	r3, #48	; 0x30
 8005292:	2b09      	cmp	r3, #9
 8005294:	d94e      	bls.n	8005334 <_vfiprintf_r+0x1c4>
 8005296:	b1b0      	cbz	r0, 80052c6 <_vfiprintf_r+0x156>
 8005298:	9207      	str	r2, [sp, #28]
 800529a:	e014      	b.n	80052c6 <_vfiprintf_r+0x156>
 800529c:	eba0 0308 	sub.w	r3, r0, r8
 80052a0:	fa09 f303 	lsl.w	r3, r9, r3
 80052a4:	4313      	orrs	r3, r2
 80052a6:	9304      	str	r3, [sp, #16]
 80052a8:	46a2      	mov	sl, r4
 80052aa:	e7d2      	b.n	8005252 <_vfiprintf_r+0xe2>
 80052ac:	9b03      	ldr	r3, [sp, #12]
 80052ae:	1d19      	adds	r1, r3, #4
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	9103      	str	r1, [sp, #12]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	bfbb      	ittet	lt
 80052b8:	425b      	neglt	r3, r3
 80052ba:	f042 0202 	orrlt.w	r2, r2, #2
 80052be:	9307      	strge	r3, [sp, #28]
 80052c0:	9307      	strlt	r3, [sp, #28]
 80052c2:	bfb8      	it	lt
 80052c4:	9204      	strlt	r2, [sp, #16]
 80052c6:	7823      	ldrb	r3, [r4, #0]
 80052c8:	2b2e      	cmp	r3, #46	; 0x2e
 80052ca:	d10c      	bne.n	80052e6 <_vfiprintf_r+0x176>
 80052cc:	7863      	ldrb	r3, [r4, #1]
 80052ce:	2b2a      	cmp	r3, #42	; 0x2a
 80052d0:	d135      	bne.n	800533e <_vfiprintf_r+0x1ce>
 80052d2:	9b03      	ldr	r3, [sp, #12]
 80052d4:	1d1a      	adds	r2, r3, #4
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	9203      	str	r2, [sp, #12]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	bfb8      	it	lt
 80052de:	f04f 33ff 	movlt.w	r3, #4294967295
 80052e2:	3402      	adds	r4, #2
 80052e4:	9305      	str	r3, [sp, #20]
 80052e6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80053cc <_vfiprintf_r+0x25c>
 80052ea:	7821      	ldrb	r1, [r4, #0]
 80052ec:	2203      	movs	r2, #3
 80052ee:	4650      	mov	r0, sl
 80052f0:	f7fa ff96 	bl	8000220 <memchr>
 80052f4:	b140      	cbz	r0, 8005308 <_vfiprintf_r+0x198>
 80052f6:	2340      	movs	r3, #64	; 0x40
 80052f8:	eba0 000a 	sub.w	r0, r0, sl
 80052fc:	fa03 f000 	lsl.w	r0, r3, r0
 8005300:	9b04      	ldr	r3, [sp, #16]
 8005302:	4303      	orrs	r3, r0
 8005304:	3401      	adds	r4, #1
 8005306:	9304      	str	r3, [sp, #16]
 8005308:	f814 1b01 	ldrb.w	r1, [r4], #1
 800530c:	482c      	ldr	r0, [pc, #176]	; (80053c0 <_vfiprintf_r+0x250>)
 800530e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005312:	2206      	movs	r2, #6
 8005314:	f7fa ff84 	bl	8000220 <memchr>
 8005318:	2800      	cmp	r0, #0
 800531a:	d03f      	beq.n	800539c <_vfiprintf_r+0x22c>
 800531c:	4b29      	ldr	r3, [pc, #164]	; (80053c4 <_vfiprintf_r+0x254>)
 800531e:	bb1b      	cbnz	r3, 8005368 <_vfiprintf_r+0x1f8>
 8005320:	9b03      	ldr	r3, [sp, #12]
 8005322:	3307      	adds	r3, #7
 8005324:	f023 0307 	bic.w	r3, r3, #7
 8005328:	3308      	adds	r3, #8
 800532a:	9303      	str	r3, [sp, #12]
 800532c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800532e:	443b      	add	r3, r7
 8005330:	9309      	str	r3, [sp, #36]	; 0x24
 8005332:	e767      	b.n	8005204 <_vfiprintf_r+0x94>
 8005334:	fb0c 3202 	mla	r2, ip, r2, r3
 8005338:	460c      	mov	r4, r1
 800533a:	2001      	movs	r0, #1
 800533c:	e7a5      	b.n	800528a <_vfiprintf_r+0x11a>
 800533e:	2300      	movs	r3, #0
 8005340:	3401      	adds	r4, #1
 8005342:	9305      	str	r3, [sp, #20]
 8005344:	4619      	mov	r1, r3
 8005346:	f04f 0c0a 	mov.w	ip, #10
 800534a:	4620      	mov	r0, r4
 800534c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005350:	3a30      	subs	r2, #48	; 0x30
 8005352:	2a09      	cmp	r2, #9
 8005354:	d903      	bls.n	800535e <_vfiprintf_r+0x1ee>
 8005356:	2b00      	cmp	r3, #0
 8005358:	d0c5      	beq.n	80052e6 <_vfiprintf_r+0x176>
 800535a:	9105      	str	r1, [sp, #20]
 800535c:	e7c3      	b.n	80052e6 <_vfiprintf_r+0x176>
 800535e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005362:	4604      	mov	r4, r0
 8005364:	2301      	movs	r3, #1
 8005366:	e7f0      	b.n	800534a <_vfiprintf_r+0x1da>
 8005368:	ab03      	add	r3, sp, #12
 800536a:	9300      	str	r3, [sp, #0]
 800536c:	462a      	mov	r2, r5
 800536e:	4b16      	ldr	r3, [pc, #88]	; (80053c8 <_vfiprintf_r+0x258>)
 8005370:	a904      	add	r1, sp, #16
 8005372:	4630      	mov	r0, r6
 8005374:	f3af 8000 	nop.w
 8005378:	4607      	mov	r7, r0
 800537a:	1c78      	adds	r0, r7, #1
 800537c:	d1d6      	bne.n	800532c <_vfiprintf_r+0x1bc>
 800537e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005380:	07d9      	lsls	r1, r3, #31
 8005382:	d405      	bmi.n	8005390 <_vfiprintf_r+0x220>
 8005384:	89ab      	ldrh	r3, [r5, #12]
 8005386:	059a      	lsls	r2, r3, #22
 8005388:	d402      	bmi.n	8005390 <_vfiprintf_r+0x220>
 800538a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800538c:	f7ff fd7f 	bl	8004e8e <__retarget_lock_release_recursive>
 8005390:	89ab      	ldrh	r3, [r5, #12]
 8005392:	065b      	lsls	r3, r3, #25
 8005394:	f53f af12 	bmi.w	80051bc <_vfiprintf_r+0x4c>
 8005398:	9809      	ldr	r0, [sp, #36]	; 0x24
 800539a:	e711      	b.n	80051c0 <_vfiprintf_r+0x50>
 800539c:	ab03      	add	r3, sp, #12
 800539e:	9300      	str	r3, [sp, #0]
 80053a0:	462a      	mov	r2, r5
 80053a2:	4b09      	ldr	r3, [pc, #36]	; (80053c8 <_vfiprintf_r+0x258>)
 80053a4:	a904      	add	r1, sp, #16
 80053a6:	4630      	mov	r0, r6
 80053a8:	f000 f880 	bl	80054ac <_printf_i>
 80053ac:	e7e4      	b.n	8005378 <_vfiprintf_r+0x208>
 80053ae:	bf00      	nop
 80053b0:	08005944 	.word	0x08005944
 80053b4:	08005964 	.word	0x08005964
 80053b8:	08005924 	.word	0x08005924
 80053bc:	08005984 	.word	0x08005984
 80053c0:	0800598e 	.word	0x0800598e
 80053c4:	00000000 	.word	0x00000000
 80053c8:	0800514b 	.word	0x0800514b
 80053cc:	0800598a 	.word	0x0800598a

080053d0 <_printf_common>:
 80053d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053d4:	4616      	mov	r6, r2
 80053d6:	4699      	mov	r9, r3
 80053d8:	688a      	ldr	r2, [r1, #8]
 80053da:	690b      	ldr	r3, [r1, #16]
 80053dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80053e0:	4293      	cmp	r3, r2
 80053e2:	bfb8      	it	lt
 80053e4:	4613      	movlt	r3, r2
 80053e6:	6033      	str	r3, [r6, #0]
 80053e8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80053ec:	4607      	mov	r7, r0
 80053ee:	460c      	mov	r4, r1
 80053f0:	b10a      	cbz	r2, 80053f6 <_printf_common+0x26>
 80053f2:	3301      	adds	r3, #1
 80053f4:	6033      	str	r3, [r6, #0]
 80053f6:	6823      	ldr	r3, [r4, #0]
 80053f8:	0699      	lsls	r1, r3, #26
 80053fa:	bf42      	ittt	mi
 80053fc:	6833      	ldrmi	r3, [r6, #0]
 80053fe:	3302      	addmi	r3, #2
 8005400:	6033      	strmi	r3, [r6, #0]
 8005402:	6825      	ldr	r5, [r4, #0]
 8005404:	f015 0506 	ands.w	r5, r5, #6
 8005408:	d106      	bne.n	8005418 <_printf_common+0x48>
 800540a:	f104 0a19 	add.w	sl, r4, #25
 800540e:	68e3      	ldr	r3, [r4, #12]
 8005410:	6832      	ldr	r2, [r6, #0]
 8005412:	1a9b      	subs	r3, r3, r2
 8005414:	42ab      	cmp	r3, r5
 8005416:	dc26      	bgt.n	8005466 <_printf_common+0x96>
 8005418:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800541c:	1e13      	subs	r3, r2, #0
 800541e:	6822      	ldr	r2, [r4, #0]
 8005420:	bf18      	it	ne
 8005422:	2301      	movne	r3, #1
 8005424:	0692      	lsls	r2, r2, #26
 8005426:	d42b      	bmi.n	8005480 <_printf_common+0xb0>
 8005428:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800542c:	4649      	mov	r1, r9
 800542e:	4638      	mov	r0, r7
 8005430:	47c0      	blx	r8
 8005432:	3001      	adds	r0, #1
 8005434:	d01e      	beq.n	8005474 <_printf_common+0xa4>
 8005436:	6823      	ldr	r3, [r4, #0]
 8005438:	68e5      	ldr	r5, [r4, #12]
 800543a:	6832      	ldr	r2, [r6, #0]
 800543c:	f003 0306 	and.w	r3, r3, #6
 8005440:	2b04      	cmp	r3, #4
 8005442:	bf08      	it	eq
 8005444:	1aad      	subeq	r5, r5, r2
 8005446:	68a3      	ldr	r3, [r4, #8]
 8005448:	6922      	ldr	r2, [r4, #16]
 800544a:	bf0c      	ite	eq
 800544c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005450:	2500      	movne	r5, #0
 8005452:	4293      	cmp	r3, r2
 8005454:	bfc4      	itt	gt
 8005456:	1a9b      	subgt	r3, r3, r2
 8005458:	18ed      	addgt	r5, r5, r3
 800545a:	2600      	movs	r6, #0
 800545c:	341a      	adds	r4, #26
 800545e:	42b5      	cmp	r5, r6
 8005460:	d11a      	bne.n	8005498 <_printf_common+0xc8>
 8005462:	2000      	movs	r0, #0
 8005464:	e008      	b.n	8005478 <_printf_common+0xa8>
 8005466:	2301      	movs	r3, #1
 8005468:	4652      	mov	r2, sl
 800546a:	4649      	mov	r1, r9
 800546c:	4638      	mov	r0, r7
 800546e:	47c0      	blx	r8
 8005470:	3001      	adds	r0, #1
 8005472:	d103      	bne.n	800547c <_printf_common+0xac>
 8005474:	f04f 30ff 	mov.w	r0, #4294967295
 8005478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800547c:	3501      	adds	r5, #1
 800547e:	e7c6      	b.n	800540e <_printf_common+0x3e>
 8005480:	18e1      	adds	r1, r4, r3
 8005482:	1c5a      	adds	r2, r3, #1
 8005484:	2030      	movs	r0, #48	; 0x30
 8005486:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800548a:	4422      	add	r2, r4
 800548c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005490:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005494:	3302      	adds	r3, #2
 8005496:	e7c7      	b.n	8005428 <_printf_common+0x58>
 8005498:	2301      	movs	r3, #1
 800549a:	4622      	mov	r2, r4
 800549c:	4649      	mov	r1, r9
 800549e:	4638      	mov	r0, r7
 80054a0:	47c0      	blx	r8
 80054a2:	3001      	adds	r0, #1
 80054a4:	d0e6      	beq.n	8005474 <_printf_common+0xa4>
 80054a6:	3601      	adds	r6, #1
 80054a8:	e7d9      	b.n	800545e <_printf_common+0x8e>
	...

080054ac <_printf_i>:
 80054ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054b0:	7e0f      	ldrb	r7, [r1, #24]
 80054b2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80054b4:	2f78      	cmp	r7, #120	; 0x78
 80054b6:	4691      	mov	r9, r2
 80054b8:	4680      	mov	r8, r0
 80054ba:	460c      	mov	r4, r1
 80054bc:	469a      	mov	sl, r3
 80054be:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80054c2:	d807      	bhi.n	80054d4 <_printf_i+0x28>
 80054c4:	2f62      	cmp	r7, #98	; 0x62
 80054c6:	d80a      	bhi.n	80054de <_printf_i+0x32>
 80054c8:	2f00      	cmp	r7, #0
 80054ca:	f000 80d8 	beq.w	800567e <_printf_i+0x1d2>
 80054ce:	2f58      	cmp	r7, #88	; 0x58
 80054d0:	f000 80a3 	beq.w	800561a <_printf_i+0x16e>
 80054d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054d8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80054dc:	e03a      	b.n	8005554 <_printf_i+0xa8>
 80054de:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80054e2:	2b15      	cmp	r3, #21
 80054e4:	d8f6      	bhi.n	80054d4 <_printf_i+0x28>
 80054e6:	a101      	add	r1, pc, #4	; (adr r1, 80054ec <_printf_i+0x40>)
 80054e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80054ec:	08005545 	.word	0x08005545
 80054f0:	08005559 	.word	0x08005559
 80054f4:	080054d5 	.word	0x080054d5
 80054f8:	080054d5 	.word	0x080054d5
 80054fc:	080054d5 	.word	0x080054d5
 8005500:	080054d5 	.word	0x080054d5
 8005504:	08005559 	.word	0x08005559
 8005508:	080054d5 	.word	0x080054d5
 800550c:	080054d5 	.word	0x080054d5
 8005510:	080054d5 	.word	0x080054d5
 8005514:	080054d5 	.word	0x080054d5
 8005518:	08005665 	.word	0x08005665
 800551c:	08005589 	.word	0x08005589
 8005520:	08005647 	.word	0x08005647
 8005524:	080054d5 	.word	0x080054d5
 8005528:	080054d5 	.word	0x080054d5
 800552c:	08005687 	.word	0x08005687
 8005530:	080054d5 	.word	0x080054d5
 8005534:	08005589 	.word	0x08005589
 8005538:	080054d5 	.word	0x080054d5
 800553c:	080054d5 	.word	0x080054d5
 8005540:	0800564f 	.word	0x0800564f
 8005544:	682b      	ldr	r3, [r5, #0]
 8005546:	1d1a      	adds	r2, r3, #4
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	602a      	str	r2, [r5, #0]
 800554c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005550:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005554:	2301      	movs	r3, #1
 8005556:	e0a3      	b.n	80056a0 <_printf_i+0x1f4>
 8005558:	6820      	ldr	r0, [r4, #0]
 800555a:	6829      	ldr	r1, [r5, #0]
 800555c:	0606      	lsls	r6, r0, #24
 800555e:	f101 0304 	add.w	r3, r1, #4
 8005562:	d50a      	bpl.n	800557a <_printf_i+0xce>
 8005564:	680e      	ldr	r6, [r1, #0]
 8005566:	602b      	str	r3, [r5, #0]
 8005568:	2e00      	cmp	r6, #0
 800556a:	da03      	bge.n	8005574 <_printf_i+0xc8>
 800556c:	232d      	movs	r3, #45	; 0x2d
 800556e:	4276      	negs	r6, r6
 8005570:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005574:	485e      	ldr	r0, [pc, #376]	; (80056f0 <_printf_i+0x244>)
 8005576:	230a      	movs	r3, #10
 8005578:	e019      	b.n	80055ae <_printf_i+0x102>
 800557a:	680e      	ldr	r6, [r1, #0]
 800557c:	602b      	str	r3, [r5, #0]
 800557e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005582:	bf18      	it	ne
 8005584:	b236      	sxthne	r6, r6
 8005586:	e7ef      	b.n	8005568 <_printf_i+0xbc>
 8005588:	682b      	ldr	r3, [r5, #0]
 800558a:	6820      	ldr	r0, [r4, #0]
 800558c:	1d19      	adds	r1, r3, #4
 800558e:	6029      	str	r1, [r5, #0]
 8005590:	0601      	lsls	r1, r0, #24
 8005592:	d501      	bpl.n	8005598 <_printf_i+0xec>
 8005594:	681e      	ldr	r6, [r3, #0]
 8005596:	e002      	b.n	800559e <_printf_i+0xf2>
 8005598:	0646      	lsls	r6, r0, #25
 800559a:	d5fb      	bpl.n	8005594 <_printf_i+0xe8>
 800559c:	881e      	ldrh	r6, [r3, #0]
 800559e:	4854      	ldr	r0, [pc, #336]	; (80056f0 <_printf_i+0x244>)
 80055a0:	2f6f      	cmp	r7, #111	; 0x6f
 80055a2:	bf0c      	ite	eq
 80055a4:	2308      	moveq	r3, #8
 80055a6:	230a      	movne	r3, #10
 80055a8:	2100      	movs	r1, #0
 80055aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80055ae:	6865      	ldr	r5, [r4, #4]
 80055b0:	60a5      	str	r5, [r4, #8]
 80055b2:	2d00      	cmp	r5, #0
 80055b4:	bfa2      	ittt	ge
 80055b6:	6821      	ldrge	r1, [r4, #0]
 80055b8:	f021 0104 	bicge.w	r1, r1, #4
 80055bc:	6021      	strge	r1, [r4, #0]
 80055be:	b90e      	cbnz	r6, 80055c4 <_printf_i+0x118>
 80055c0:	2d00      	cmp	r5, #0
 80055c2:	d04d      	beq.n	8005660 <_printf_i+0x1b4>
 80055c4:	4615      	mov	r5, r2
 80055c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80055ca:	fb03 6711 	mls	r7, r3, r1, r6
 80055ce:	5dc7      	ldrb	r7, [r0, r7]
 80055d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80055d4:	4637      	mov	r7, r6
 80055d6:	42bb      	cmp	r3, r7
 80055d8:	460e      	mov	r6, r1
 80055da:	d9f4      	bls.n	80055c6 <_printf_i+0x11a>
 80055dc:	2b08      	cmp	r3, #8
 80055de:	d10b      	bne.n	80055f8 <_printf_i+0x14c>
 80055e0:	6823      	ldr	r3, [r4, #0]
 80055e2:	07de      	lsls	r6, r3, #31
 80055e4:	d508      	bpl.n	80055f8 <_printf_i+0x14c>
 80055e6:	6923      	ldr	r3, [r4, #16]
 80055e8:	6861      	ldr	r1, [r4, #4]
 80055ea:	4299      	cmp	r1, r3
 80055ec:	bfde      	ittt	le
 80055ee:	2330      	movle	r3, #48	; 0x30
 80055f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80055f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80055f8:	1b52      	subs	r2, r2, r5
 80055fa:	6122      	str	r2, [r4, #16]
 80055fc:	f8cd a000 	str.w	sl, [sp]
 8005600:	464b      	mov	r3, r9
 8005602:	aa03      	add	r2, sp, #12
 8005604:	4621      	mov	r1, r4
 8005606:	4640      	mov	r0, r8
 8005608:	f7ff fee2 	bl	80053d0 <_printf_common>
 800560c:	3001      	adds	r0, #1
 800560e:	d14c      	bne.n	80056aa <_printf_i+0x1fe>
 8005610:	f04f 30ff 	mov.w	r0, #4294967295
 8005614:	b004      	add	sp, #16
 8005616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800561a:	4835      	ldr	r0, [pc, #212]	; (80056f0 <_printf_i+0x244>)
 800561c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005620:	6829      	ldr	r1, [r5, #0]
 8005622:	6823      	ldr	r3, [r4, #0]
 8005624:	f851 6b04 	ldr.w	r6, [r1], #4
 8005628:	6029      	str	r1, [r5, #0]
 800562a:	061d      	lsls	r5, r3, #24
 800562c:	d514      	bpl.n	8005658 <_printf_i+0x1ac>
 800562e:	07df      	lsls	r7, r3, #31
 8005630:	bf44      	itt	mi
 8005632:	f043 0320 	orrmi.w	r3, r3, #32
 8005636:	6023      	strmi	r3, [r4, #0]
 8005638:	b91e      	cbnz	r6, 8005642 <_printf_i+0x196>
 800563a:	6823      	ldr	r3, [r4, #0]
 800563c:	f023 0320 	bic.w	r3, r3, #32
 8005640:	6023      	str	r3, [r4, #0]
 8005642:	2310      	movs	r3, #16
 8005644:	e7b0      	b.n	80055a8 <_printf_i+0xfc>
 8005646:	6823      	ldr	r3, [r4, #0]
 8005648:	f043 0320 	orr.w	r3, r3, #32
 800564c:	6023      	str	r3, [r4, #0]
 800564e:	2378      	movs	r3, #120	; 0x78
 8005650:	4828      	ldr	r0, [pc, #160]	; (80056f4 <_printf_i+0x248>)
 8005652:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005656:	e7e3      	b.n	8005620 <_printf_i+0x174>
 8005658:	0659      	lsls	r1, r3, #25
 800565a:	bf48      	it	mi
 800565c:	b2b6      	uxthmi	r6, r6
 800565e:	e7e6      	b.n	800562e <_printf_i+0x182>
 8005660:	4615      	mov	r5, r2
 8005662:	e7bb      	b.n	80055dc <_printf_i+0x130>
 8005664:	682b      	ldr	r3, [r5, #0]
 8005666:	6826      	ldr	r6, [r4, #0]
 8005668:	6961      	ldr	r1, [r4, #20]
 800566a:	1d18      	adds	r0, r3, #4
 800566c:	6028      	str	r0, [r5, #0]
 800566e:	0635      	lsls	r5, r6, #24
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	d501      	bpl.n	8005678 <_printf_i+0x1cc>
 8005674:	6019      	str	r1, [r3, #0]
 8005676:	e002      	b.n	800567e <_printf_i+0x1d2>
 8005678:	0670      	lsls	r0, r6, #25
 800567a:	d5fb      	bpl.n	8005674 <_printf_i+0x1c8>
 800567c:	8019      	strh	r1, [r3, #0]
 800567e:	2300      	movs	r3, #0
 8005680:	6123      	str	r3, [r4, #16]
 8005682:	4615      	mov	r5, r2
 8005684:	e7ba      	b.n	80055fc <_printf_i+0x150>
 8005686:	682b      	ldr	r3, [r5, #0]
 8005688:	1d1a      	adds	r2, r3, #4
 800568a:	602a      	str	r2, [r5, #0]
 800568c:	681d      	ldr	r5, [r3, #0]
 800568e:	6862      	ldr	r2, [r4, #4]
 8005690:	2100      	movs	r1, #0
 8005692:	4628      	mov	r0, r5
 8005694:	f7fa fdc4 	bl	8000220 <memchr>
 8005698:	b108      	cbz	r0, 800569e <_printf_i+0x1f2>
 800569a:	1b40      	subs	r0, r0, r5
 800569c:	6060      	str	r0, [r4, #4]
 800569e:	6863      	ldr	r3, [r4, #4]
 80056a0:	6123      	str	r3, [r4, #16]
 80056a2:	2300      	movs	r3, #0
 80056a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056a8:	e7a8      	b.n	80055fc <_printf_i+0x150>
 80056aa:	6923      	ldr	r3, [r4, #16]
 80056ac:	462a      	mov	r2, r5
 80056ae:	4649      	mov	r1, r9
 80056b0:	4640      	mov	r0, r8
 80056b2:	47d0      	blx	sl
 80056b4:	3001      	adds	r0, #1
 80056b6:	d0ab      	beq.n	8005610 <_printf_i+0x164>
 80056b8:	6823      	ldr	r3, [r4, #0]
 80056ba:	079b      	lsls	r3, r3, #30
 80056bc:	d413      	bmi.n	80056e6 <_printf_i+0x23a>
 80056be:	68e0      	ldr	r0, [r4, #12]
 80056c0:	9b03      	ldr	r3, [sp, #12]
 80056c2:	4298      	cmp	r0, r3
 80056c4:	bfb8      	it	lt
 80056c6:	4618      	movlt	r0, r3
 80056c8:	e7a4      	b.n	8005614 <_printf_i+0x168>
 80056ca:	2301      	movs	r3, #1
 80056cc:	4632      	mov	r2, r6
 80056ce:	4649      	mov	r1, r9
 80056d0:	4640      	mov	r0, r8
 80056d2:	47d0      	blx	sl
 80056d4:	3001      	adds	r0, #1
 80056d6:	d09b      	beq.n	8005610 <_printf_i+0x164>
 80056d8:	3501      	adds	r5, #1
 80056da:	68e3      	ldr	r3, [r4, #12]
 80056dc:	9903      	ldr	r1, [sp, #12]
 80056de:	1a5b      	subs	r3, r3, r1
 80056e0:	42ab      	cmp	r3, r5
 80056e2:	dcf2      	bgt.n	80056ca <_printf_i+0x21e>
 80056e4:	e7eb      	b.n	80056be <_printf_i+0x212>
 80056e6:	2500      	movs	r5, #0
 80056e8:	f104 0619 	add.w	r6, r4, #25
 80056ec:	e7f5      	b.n	80056da <_printf_i+0x22e>
 80056ee:	bf00      	nop
 80056f0:	08005995 	.word	0x08005995
 80056f4:	080059a6 	.word	0x080059a6

080056f8 <_sbrk_r>:
 80056f8:	b538      	push	{r3, r4, r5, lr}
 80056fa:	4d06      	ldr	r5, [pc, #24]	; (8005714 <_sbrk_r+0x1c>)
 80056fc:	2300      	movs	r3, #0
 80056fe:	4604      	mov	r4, r0
 8005700:	4608      	mov	r0, r1
 8005702:	602b      	str	r3, [r5, #0]
 8005704:	f7fb fa0a 	bl	8000b1c <_sbrk>
 8005708:	1c43      	adds	r3, r0, #1
 800570a:	d102      	bne.n	8005712 <_sbrk_r+0x1a>
 800570c:	682b      	ldr	r3, [r5, #0]
 800570e:	b103      	cbz	r3, 8005712 <_sbrk_r+0x1a>
 8005710:	6023      	str	r3, [r4, #0]
 8005712:	bd38      	pop	{r3, r4, r5, pc}
 8005714:	20000ed8 	.word	0x20000ed8

08005718 <__sread>:
 8005718:	b510      	push	{r4, lr}
 800571a:	460c      	mov	r4, r1
 800571c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005720:	f000 f8a0 	bl	8005864 <_read_r>
 8005724:	2800      	cmp	r0, #0
 8005726:	bfab      	itete	ge
 8005728:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800572a:	89a3      	ldrhlt	r3, [r4, #12]
 800572c:	181b      	addge	r3, r3, r0
 800572e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005732:	bfac      	ite	ge
 8005734:	6563      	strge	r3, [r4, #84]	; 0x54
 8005736:	81a3      	strhlt	r3, [r4, #12]
 8005738:	bd10      	pop	{r4, pc}

0800573a <__swrite>:
 800573a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800573e:	461f      	mov	r7, r3
 8005740:	898b      	ldrh	r3, [r1, #12]
 8005742:	05db      	lsls	r3, r3, #23
 8005744:	4605      	mov	r5, r0
 8005746:	460c      	mov	r4, r1
 8005748:	4616      	mov	r6, r2
 800574a:	d505      	bpl.n	8005758 <__swrite+0x1e>
 800574c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005750:	2302      	movs	r3, #2
 8005752:	2200      	movs	r2, #0
 8005754:	f000 f868 	bl	8005828 <_lseek_r>
 8005758:	89a3      	ldrh	r3, [r4, #12]
 800575a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800575e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005762:	81a3      	strh	r3, [r4, #12]
 8005764:	4632      	mov	r2, r6
 8005766:	463b      	mov	r3, r7
 8005768:	4628      	mov	r0, r5
 800576a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800576e:	f000 b817 	b.w	80057a0 <_write_r>

08005772 <__sseek>:
 8005772:	b510      	push	{r4, lr}
 8005774:	460c      	mov	r4, r1
 8005776:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800577a:	f000 f855 	bl	8005828 <_lseek_r>
 800577e:	1c43      	adds	r3, r0, #1
 8005780:	89a3      	ldrh	r3, [r4, #12]
 8005782:	bf15      	itete	ne
 8005784:	6560      	strne	r0, [r4, #84]	; 0x54
 8005786:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800578a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800578e:	81a3      	strheq	r3, [r4, #12]
 8005790:	bf18      	it	ne
 8005792:	81a3      	strhne	r3, [r4, #12]
 8005794:	bd10      	pop	{r4, pc}

08005796 <__sclose>:
 8005796:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800579a:	f000 b813 	b.w	80057c4 <_close_r>
	...

080057a0 <_write_r>:
 80057a0:	b538      	push	{r3, r4, r5, lr}
 80057a2:	4d07      	ldr	r5, [pc, #28]	; (80057c0 <_write_r+0x20>)
 80057a4:	4604      	mov	r4, r0
 80057a6:	4608      	mov	r0, r1
 80057a8:	4611      	mov	r1, r2
 80057aa:	2200      	movs	r2, #0
 80057ac:	602a      	str	r2, [r5, #0]
 80057ae:	461a      	mov	r2, r3
 80057b0:	f7fb f964 	bl	8000a7c <_write>
 80057b4:	1c43      	adds	r3, r0, #1
 80057b6:	d102      	bne.n	80057be <_write_r+0x1e>
 80057b8:	682b      	ldr	r3, [r5, #0]
 80057ba:	b103      	cbz	r3, 80057be <_write_r+0x1e>
 80057bc:	6023      	str	r3, [r4, #0]
 80057be:	bd38      	pop	{r3, r4, r5, pc}
 80057c0:	20000ed8 	.word	0x20000ed8

080057c4 <_close_r>:
 80057c4:	b538      	push	{r3, r4, r5, lr}
 80057c6:	4d06      	ldr	r5, [pc, #24]	; (80057e0 <_close_r+0x1c>)
 80057c8:	2300      	movs	r3, #0
 80057ca:	4604      	mov	r4, r0
 80057cc:	4608      	mov	r0, r1
 80057ce:	602b      	str	r3, [r5, #0]
 80057d0:	f7fb f970 	bl	8000ab4 <_close>
 80057d4:	1c43      	adds	r3, r0, #1
 80057d6:	d102      	bne.n	80057de <_close_r+0x1a>
 80057d8:	682b      	ldr	r3, [r5, #0]
 80057da:	b103      	cbz	r3, 80057de <_close_r+0x1a>
 80057dc:	6023      	str	r3, [r4, #0]
 80057de:	bd38      	pop	{r3, r4, r5, pc}
 80057e0:	20000ed8 	.word	0x20000ed8

080057e4 <_fstat_r>:
 80057e4:	b538      	push	{r3, r4, r5, lr}
 80057e6:	4d07      	ldr	r5, [pc, #28]	; (8005804 <_fstat_r+0x20>)
 80057e8:	2300      	movs	r3, #0
 80057ea:	4604      	mov	r4, r0
 80057ec:	4608      	mov	r0, r1
 80057ee:	4611      	mov	r1, r2
 80057f0:	602b      	str	r3, [r5, #0]
 80057f2:	f7fb f96b 	bl	8000acc <_fstat>
 80057f6:	1c43      	adds	r3, r0, #1
 80057f8:	d102      	bne.n	8005800 <_fstat_r+0x1c>
 80057fa:	682b      	ldr	r3, [r5, #0]
 80057fc:	b103      	cbz	r3, 8005800 <_fstat_r+0x1c>
 80057fe:	6023      	str	r3, [r4, #0]
 8005800:	bd38      	pop	{r3, r4, r5, pc}
 8005802:	bf00      	nop
 8005804:	20000ed8 	.word	0x20000ed8

08005808 <_isatty_r>:
 8005808:	b538      	push	{r3, r4, r5, lr}
 800580a:	4d06      	ldr	r5, [pc, #24]	; (8005824 <_isatty_r+0x1c>)
 800580c:	2300      	movs	r3, #0
 800580e:	4604      	mov	r4, r0
 8005810:	4608      	mov	r0, r1
 8005812:	602b      	str	r3, [r5, #0]
 8005814:	f7fb f96a 	bl	8000aec <_isatty>
 8005818:	1c43      	adds	r3, r0, #1
 800581a:	d102      	bne.n	8005822 <_isatty_r+0x1a>
 800581c:	682b      	ldr	r3, [r5, #0]
 800581e:	b103      	cbz	r3, 8005822 <_isatty_r+0x1a>
 8005820:	6023      	str	r3, [r4, #0]
 8005822:	bd38      	pop	{r3, r4, r5, pc}
 8005824:	20000ed8 	.word	0x20000ed8

08005828 <_lseek_r>:
 8005828:	b538      	push	{r3, r4, r5, lr}
 800582a:	4d07      	ldr	r5, [pc, #28]	; (8005848 <_lseek_r+0x20>)
 800582c:	4604      	mov	r4, r0
 800582e:	4608      	mov	r0, r1
 8005830:	4611      	mov	r1, r2
 8005832:	2200      	movs	r2, #0
 8005834:	602a      	str	r2, [r5, #0]
 8005836:	461a      	mov	r2, r3
 8005838:	f7fb f963 	bl	8000b02 <_lseek>
 800583c:	1c43      	adds	r3, r0, #1
 800583e:	d102      	bne.n	8005846 <_lseek_r+0x1e>
 8005840:	682b      	ldr	r3, [r5, #0]
 8005842:	b103      	cbz	r3, 8005846 <_lseek_r+0x1e>
 8005844:	6023      	str	r3, [r4, #0]
 8005846:	bd38      	pop	{r3, r4, r5, pc}
 8005848:	20000ed8 	.word	0x20000ed8

0800584c <__malloc_lock>:
 800584c:	4801      	ldr	r0, [pc, #4]	; (8005854 <__malloc_lock+0x8>)
 800584e:	f7ff bb1d 	b.w	8004e8c <__retarget_lock_acquire_recursive>
 8005852:	bf00      	nop
 8005854:	20000ecc 	.word	0x20000ecc

08005858 <__malloc_unlock>:
 8005858:	4801      	ldr	r0, [pc, #4]	; (8005860 <__malloc_unlock+0x8>)
 800585a:	f7ff bb18 	b.w	8004e8e <__retarget_lock_release_recursive>
 800585e:	bf00      	nop
 8005860:	20000ecc 	.word	0x20000ecc

08005864 <_read_r>:
 8005864:	b538      	push	{r3, r4, r5, lr}
 8005866:	4d07      	ldr	r5, [pc, #28]	; (8005884 <_read_r+0x20>)
 8005868:	4604      	mov	r4, r0
 800586a:	4608      	mov	r0, r1
 800586c:	4611      	mov	r1, r2
 800586e:	2200      	movs	r2, #0
 8005870:	602a      	str	r2, [r5, #0]
 8005872:	461a      	mov	r2, r3
 8005874:	f7fb f8e5 	bl	8000a42 <_read>
 8005878:	1c43      	adds	r3, r0, #1
 800587a:	d102      	bne.n	8005882 <_read_r+0x1e>
 800587c:	682b      	ldr	r3, [r5, #0]
 800587e:	b103      	cbz	r3, 8005882 <_read_r+0x1e>
 8005880:	6023      	str	r3, [r4, #0]
 8005882:	bd38      	pop	{r3, r4, r5, pc}
 8005884:	20000ed8 	.word	0x20000ed8

08005888 <_init>:
 8005888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800588a:	bf00      	nop
 800588c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800588e:	bc08      	pop	{r3}
 8005890:	469e      	mov	lr, r3
 8005892:	4770      	bx	lr

08005894 <_fini>:
 8005894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005896:	bf00      	nop
 8005898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800589a:	bc08      	pop	{r3}
 800589c:	469e      	mov	lr, r3
 800589e:	4770      	bx	lr
