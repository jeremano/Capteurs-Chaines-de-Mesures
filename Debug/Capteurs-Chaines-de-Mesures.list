
Capteurs-Chaines-de-Mesures.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076f0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000544  080078d0  080078d0  000178d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e14  08007e14  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007e14  08007e14  00017e14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e1c  08007e1c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e1c  08007e1c  00017e1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e20  08007e20  00017e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007e24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  200001e0  08008000  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200003e0  08008000  000203e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013ad6  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d58  00000000  00000000  00033ce2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc8  00000000  00000000  00036a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e80  00000000  00000000  00037a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004d5e  00000000  00000000  00038888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014b8f  00000000  00000000  0003d5e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c35ba  00000000  00000000  00052175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011572f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005064  00000000  00000000  00115780  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	00000000 	.word	0x00000000
 8000200:	080078b8 	.word	0x080078b8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e4 	.word	0x200001e4
 800021c:	080078b8 	.word	0x080078b8

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b974 	b.w	8000ef8 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468e      	mov	lr, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14d      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4694      	mov	ip, r2
 8000c3a:	d969      	bls.n	8000d10 <__udivmoddi4+0xe8>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b152      	cbz	r2, 8000c58 <__udivmoddi4+0x30>
 8000c42:	fa01 f302 	lsl.w	r3, r1, r2
 8000c46:	f1c2 0120 	rsb	r1, r2, #32
 8000c4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c52:	ea41 0e03 	orr.w	lr, r1, r3
 8000c56:	4094      	lsls	r4, r2
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	0c21      	lsrs	r1, r4, #16
 8000c5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c62:	fa1f f78c 	uxth.w	r7, ip
 8000c66:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c6e:	fb06 f107 	mul.w	r1, r6, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7e:	f080 811f 	bcs.w	8000ec0 <__udivmoddi4+0x298>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 811c 	bls.w	8000ec0 <__udivmoddi4+0x298>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x92>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cac:	f080 810a 	bcs.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	f240 8107 	bls.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	1be4      	subs	r4, r4, r7
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa4>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xc2>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80ef 	beq.w	8000eba <__udivmoddi4+0x292>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x160>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd4>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80f9 	bhi.w	8000eee <__udivmoddi4+0x2c6>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	469e      	mov	lr, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa4>
 8000d0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xec>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 8092 	bne.w	8000e42 <__udivmoddi4+0x21a>
 8000d1e:	eba1 010c 	sub.w	r1, r1, ip
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	2601      	movs	r6, #1
 8000d2c:	0c20      	lsrs	r0, r4, #16
 8000d2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d32:	fb07 1113 	mls	r1, r7, r3, r1
 8000d36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3a:	fb0e f003 	mul.w	r0, lr, r3
 8000d3e:	4288      	cmp	r0, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x12c>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x12a>
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d52:	4643      	mov	r3, r8
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d64:	fb0e fe00 	mul.w	lr, lr, r0
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x156>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d74:	d202      	bcs.n	8000d7c <__udivmoddi4+0x154>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f200 80bb 	bhi.w	8000ef2 <__udivmoddi4+0x2ca>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d86:	e79c      	b.n	8000cc2 <__udivmoddi4+0x9a>
 8000d88:	f1c6 0720 	rsb	r7, r6, #32
 8000d8c:	40b3      	lsls	r3, r6
 8000d8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d96:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	40f9      	lsrs	r1, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	fa00 f306 	lsl.w	r3, r0, r6
 8000daa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dae:	0c20      	lsrs	r0, r4, #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fb09 1118 	mls	r1, r9, r8, r1
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x1b8>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd0:	f080 8088 	bcs.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	f240 8085 	bls.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000de8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df4:	458e      	cmp	lr, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1e2>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e00:	d26c      	bcs.n	8000edc <__udivmoddi4+0x2b4>
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d96a      	bls.n	8000edc <__udivmoddi4+0x2b4>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e12:	eba1 010e 	sub.w	r1, r1, lr
 8000e16:	42a1      	cmp	r1, r4
 8000e18:	46c8      	mov	r8, r9
 8000e1a:	46a6      	mov	lr, r4
 8000e1c:	d356      	bcc.n	8000ecc <__udivmoddi4+0x2a4>
 8000e1e:	d053      	beq.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x212>
 8000e22:	ebb3 0208 	subs.w	r2, r3, r8
 8000e26:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e32:	40f1      	lsrs	r1, r6
 8000e34:	431f      	orrs	r7, r3
 8000e36:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	f1c2 0320 	rsb	r3, r2, #32
 8000e46:	40d8      	lsrs	r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e50:	4091      	lsls	r1, r2
 8000e52:	4301      	orrs	r1, r0
 8000e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e60:	fb07 3610 	mls	r6, r7, r0, r3
 8000e64:	0c0b      	lsrs	r3, r1, #16
 8000e66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	fa04 f402 	lsl.w	r4, r4, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x260>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e7e:	d22f      	bcs.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e80:	429e      	cmp	r6, r3
 8000e82:	d92d      	bls.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	b289      	uxth	r1, r1
 8000e8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e90:	fb07 3316 	mls	r3, r7, r6, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb06 f30e 	mul.w	r3, r6, lr
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x28a>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ea8:	d216      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d914      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eae:	3e02      	subs	r6, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eb8:	e738      	b.n	8000d2c <__udivmoddi4+0x104>
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e705      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e3      	b.n	8000c8c <__udivmoddi4+0x64>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6f8      	b.n	8000cba <__udivmoddi4+0x92>
 8000ec8:	454b      	cmp	r3, r9
 8000eca:	d2a9      	bcs.n	8000e20 <__udivmoddi4+0x1f8>
 8000ecc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7a3      	b.n	8000e20 <__udivmoddi4+0x1f8>
 8000ed8:	4646      	mov	r6, r8
 8000eda:	e7ea      	b.n	8000eb2 <__udivmoddi4+0x28a>
 8000edc:	4620      	mov	r0, r4
 8000ede:	e794      	b.n	8000e0a <__udivmoddi4+0x1e2>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	e7d1      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ee4:	46d0      	mov	r8, sl
 8000ee6:	e77b      	b.n	8000de0 <__udivmoddi4+0x1b8>
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	e732      	b.n	8000d54 <__udivmoddi4+0x12c>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e709      	b.n	8000d06 <__udivmoddi4+0xde>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e742      	b.n	8000d7e <__udivmoddi4+0x156>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <InitCapteur>:
#define ValueResetBMP 0xb6
#define ValueCLKSEL 0x02
uint8_t data[48];


void InitCapteur(I2C_HandleTypeDef* i2cHandle){
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af02      	add	r7, sp, #8
 8000f02:	6078      	str	r0, [r7, #4]

	  if(i2cHandle->Instance==I2C1)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a1b      	ldr	r2, [pc, #108]	; (8000f78 <InitCapteur+0x7c>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d12f      	bne.n	8000f6e <InitCapteur+0x72>
	  {
	/* MPU Reset */
	data[0]=RegisterResetMPU;
 8000f0e:	4b1b      	ldr	r3, [pc, #108]	; (8000f7c <InitCapteur+0x80>)
 8000f10:	226b      	movs	r2, #107	; 0x6b
 8000f12:	701a      	strb	r2, [r3, #0]
	data[1]=ValueResetMPU;
 8000f14:	4b19      	ldr	r3, [pc, #100]	; (8000f7c <InitCapteur+0x80>)
 8000f16:	2280      	movs	r2, #128	; 0x80
 8000f18:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1,AdressMPU, data, 2, HAL_MAX_DELAY);
 8000f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f1e:	9300      	str	r3, [sp, #0]
 8000f20:	2302      	movs	r3, #2
 8000f22:	4a16      	ldr	r2, [pc, #88]	; (8000f7c <InitCapteur+0x80>)
 8000f24:	21d0      	movs	r1, #208	; 0xd0
 8000f26:	4816      	ldr	r0, [pc, #88]	; (8000f80 <InitCapteur+0x84>)
 8000f28:	f001 f89e 	bl	8002068 <HAL_I2C_Master_Transmit>

	/* BMP Reset */
	data[0]=RegisterResetBMP;
 8000f2c:	4b13      	ldr	r3, [pc, #76]	; (8000f7c <InitCapteur+0x80>)
 8000f2e:	22e0      	movs	r2, #224	; 0xe0
 8000f30:	701a      	strb	r2, [r3, #0]
	data[1]=ValueResetBMP;
 8000f32:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <InitCapteur+0x80>)
 8000f34:	22b6      	movs	r2, #182	; 0xb6
 8000f36:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1,AdressBMP, data, 2, HAL_MAX_DELAY);
 8000f38:	f04f 33ff 	mov.w	r3, #4294967295
 8000f3c:	9300      	str	r3, [sp, #0]
 8000f3e:	2302      	movs	r3, #2
 8000f40:	4a0e      	ldr	r2, [pc, #56]	; (8000f7c <InitCapteur+0x80>)
 8000f42:	21ee      	movs	r1, #238	; 0xee
 8000f44:	480e      	ldr	r0, [pc, #56]	; (8000f80 <InitCapteur+0x84>)
 8000f46:	f001 f88f 	bl	8002068 <HAL_I2C_Master_Transmit>

	HAL_Delay(100);
 8000f4a:	2064      	movs	r0, #100	; 0x64
 8000f4c:	f000 fd5c 	bl	8001a08 <HAL_Delay>

	/* Choix de l'horloge */
	data[0]=RegisterCLKSEL;
 8000f50:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <InitCapteur+0x80>)
 8000f52:	226b      	movs	r2, #107	; 0x6b
 8000f54:	701a      	strb	r2, [r3, #0]
	data[1]=ValueCLKSEL;
 8000f56:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <InitCapteur+0x80>)
 8000f58:	2202      	movs	r2, #2
 8000f5a:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1,AdressMPU, data, 2, HAL_MAX_DELAY);
 8000f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f60:	9300      	str	r3, [sp, #0]
 8000f62:	2302      	movs	r3, #2
 8000f64:	4a05      	ldr	r2, [pc, #20]	; (8000f7c <InitCapteur+0x80>)
 8000f66:	21d0      	movs	r1, #208	; 0xd0
 8000f68:	4805      	ldr	r0, [pc, #20]	; (8000f80 <InitCapteur+0x84>)
 8000f6a:	f001 f87d 	bl	8002068 <HAL_I2C_Master_Transmit>


	  }
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40005400 	.word	0x40005400
 8000f7c:	200001fc 	.word	0x200001fc
 8000f80:	2000022c 	.word	0x2000022c
 8000f84:	00000000 	.word	0x00000000

08000f88 <Measure_T>:

void Measure_T(I2C_HandleTypeDef* i2cHandle,double *Temp){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af02      	add	r7, sp, #8
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
	if(i2cHandle->Instance==I2C1)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a26      	ldr	r2, [pc, #152]	; (8001030 <Measure_T+0xa8>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d13f      	bne.n	800101c <Measure_T+0x94>
		  {
		data[0]=TEMP_OUT_H;
 8000f9c:	4b25      	ldr	r3, [pc, #148]	; (8001034 <Measure_T+0xac>)
 8000f9e:	2241      	movs	r2, #65	; 0x41
 8000fa0:	701a      	strb	r2, [r3, #0]
		if(HAL_I2C_Master_Transmit(&hi2c1,AdressMPU, data, 1, HAL_MAX_DELAY) != HAL_OK){
 8000fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa6:	9300      	str	r3, [sp, #0]
 8000fa8:	2301      	movs	r3, #1
 8000faa:	4a22      	ldr	r2, [pc, #136]	; (8001034 <Measure_T+0xac>)
 8000fac:	21d0      	movs	r1, #208	; 0xd0
 8000fae:	4822      	ldr	r0, [pc, #136]	; (8001038 <Measure_T+0xb0>)
 8000fb0:	f001 f85a 	bl	8002068 <HAL_I2C_Master_Transmit>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <Measure_T+0x36>
	    	  	  Error_Handler();
 8000fba:	f000 faa9 	bl	8001510 <Error_Handler>
			  }
		if(HAL_I2C_Master_Receive(&hi2c1,AdressMPU, data, 2, HAL_MAX_DELAY) != HAL_OK){
 8000fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc2:	9300      	str	r3, [sp, #0]
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	4a1b      	ldr	r2, [pc, #108]	; (8001034 <Measure_T+0xac>)
 8000fc8:	21d0      	movs	r1, #208	; 0xd0
 8000fca:	481b      	ldr	r0, [pc, #108]	; (8001038 <Measure_T+0xb0>)
 8000fcc:	f001 f940 	bl	8002250 <HAL_I2C_Master_Receive>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <Measure_T+0x52>
		    	  Error_Handler();
 8000fd6:	f000 fa9b 	bl	8001510 <Error_Handler>
		      }
		HAL_Delay(1000);
 8000fda:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fde:	f000 fd13 	bl	8001a08 <HAL_Delay>
		*Temp = (((data[0]<<8)+(data[1]) - ROOM_TEMP_OFFSET)/TEMP_SENS) + ROOM_TEMP_OFFSET;
 8000fe2:	4b14      	ldr	r3, [pc, #80]	; (8001034 <Measure_T+0xac>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	021b      	lsls	r3, r3, #8
 8000fe8:	4a12      	ldr	r2, [pc, #72]	; (8001034 <Measure_T+0xac>)
 8000fea:	7852      	ldrb	r2, [r2, #1]
 8000fec:	4413      	add	r3, r2
 8000fee:	3b15      	subs	r3, #21
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff fabf 	bl	8000574 <__aeabi_i2d>
 8000ff6:	a30c      	add	r3, pc, #48	; (adr r3, 8001028 <Measure_T+0xa0>)
 8000ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ffc:	f7ff fc4e 	bl	800089c <__aeabi_ddiv>
 8001000:	4602      	mov	r2, r0
 8001002:	460b      	mov	r3, r1
 8001004:	4610      	mov	r0, r2
 8001006:	4619      	mov	r1, r3
 8001008:	f04f 0200 	mov.w	r2, #0
 800100c:	4b0b      	ldr	r3, [pc, #44]	; (800103c <Measure_T+0xb4>)
 800100e:	f7ff f965 	bl	80002dc <__adddf3>
 8001012:	4602      	mov	r2, r0
 8001014:	460b      	mov	r3, r1
 8001016:	6839      	ldr	r1, [r7, #0]
 8001018:	e9c1 2300 	strd	r2, r3, [r1]
		  }
}
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	f3af 8000 	nop.w
 8001028:	851eb852 	.word	0x851eb852
 800102c:	4074ddeb 	.word	0x4074ddeb
 8001030:	40005400 	.word	0x40005400
 8001034:	200001fc 	.word	0x200001fc
 8001038:	2000022c 	.word	0x2000022c
 800103c:	40350000 	.word	0x40350000

08001040 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA3   ------> LPUART1_RX
*/
void MX_GPIO_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b08a      	sub	sp, #40	; 0x28
 8001044:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001046:	f107 0314 	add.w	r3, r7, #20
 800104a:	2200      	movs	r2, #0
 800104c:	601a      	str	r2, [r3, #0]
 800104e:	605a      	str	r2, [r3, #4]
 8001050:	609a      	str	r2, [r3, #8]
 8001052:	60da      	str	r2, [r3, #12]
 8001054:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001056:	4b34      	ldr	r3, [pc, #208]	; (8001128 <MX_GPIO_Init+0xe8>)
 8001058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105a:	4a33      	ldr	r2, [pc, #204]	; (8001128 <MX_GPIO_Init+0xe8>)
 800105c:	f043 0304 	orr.w	r3, r3, #4
 8001060:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001062:	4b31      	ldr	r3, [pc, #196]	; (8001128 <MX_GPIO_Init+0xe8>)
 8001064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001066:	f003 0304 	and.w	r3, r3, #4
 800106a:	613b      	str	r3, [r7, #16]
 800106c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800106e:	4b2e      	ldr	r3, [pc, #184]	; (8001128 <MX_GPIO_Init+0xe8>)
 8001070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001072:	4a2d      	ldr	r2, [pc, #180]	; (8001128 <MX_GPIO_Init+0xe8>)
 8001074:	f043 0320 	orr.w	r3, r3, #32
 8001078:	64d3      	str	r3, [r2, #76]	; 0x4c
 800107a:	4b2b      	ldr	r3, [pc, #172]	; (8001128 <MX_GPIO_Init+0xe8>)
 800107c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800107e:	f003 0320 	and.w	r3, r3, #32
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001086:	4b28      	ldr	r3, [pc, #160]	; (8001128 <MX_GPIO_Init+0xe8>)
 8001088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108a:	4a27      	ldr	r2, [pc, #156]	; (8001128 <MX_GPIO_Init+0xe8>)
 800108c:	f043 0301 	orr.w	r3, r3, #1
 8001090:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001092:	4b25      	ldr	r3, [pc, #148]	; (8001128 <MX_GPIO_Init+0xe8>)
 8001094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	60bb      	str	r3, [r7, #8]
 800109c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800109e:	4b22      	ldr	r3, [pc, #136]	; (8001128 <MX_GPIO_Init+0xe8>)
 80010a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a2:	4a21      	ldr	r2, [pc, #132]	; (8001128 <MX_GPIO_Init+0xe8>)
 80010a4:	f043 0302 	orr.w	r3, r3, #2
 80010a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010aa:	4b1f      	ldr	r3, [pc, #124]	; (8001128 <MX_GPIO_Init+0xe8>)
 80010ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	607b      	str	r3, [r7, #4]
 80010b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010b6:	2200      	movs	r2, #0
 80010b8:	2120      	movs	r1, #32
 80010ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010be:	f000 ff2b 	bl	8001f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010c8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010d2:	f107 0314 	add.w	r3, r7, #20
 80010d6:	4619      	mov	r1, r3
 80010d8:	4814      	ldr	r0, [pc, #80]	; (800112c <MX_GPIO_Init+0xec>)
 80010da:	f000 fd9b 	bl	8001c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LPUART1_RX_Pin;
 80010de:	2308      	movs	r3, #8
 80010e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010e2:	2302      	movs	r3, #2
 80010e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e6:	2300      	movs	r3, #0
 80010e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ea:	2300      	movs	r3, #0
 80010ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80010ee:	230c      	movs	r3, #12
 80010f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LPUART1_RX_GPIO_Port, &GPIO_InitStruct);
 80010f2:	f107 0314 	add.w	r3, r7, #20
 80010f6:	4619      	mov	r1, r3
 80010f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010fc:	f000 fd8a 	bl	8001c14 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001100:	2320      	movs	r3, #32
 8001102:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001104:	2301      	movs	r3, #1
 8001106:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110c:	2300      	movs	r3, #0
 800110e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	4619      	mov	r1, r3
 8001116:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800111a:	f000 fd7b 	bl	8001c14 <HAL_GPIO_Init>

}
 800111e:	bf00      	nop
 8001120:	3728      	adds	r7, #40	; 0x28
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40021000 	.word	0x40021000
 800112c:	48000800 	.word	0x48000800

08001130 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001134:	4b1b      	ldr	r3, [pc, #108]	; (80011a4 <MX_I2C1_Init+0x74>)
 8001136:	4a1c      	ldr	r2, [pc, #112]	; (80011a8 <MX_I2C1_Init+0x78>)
 8001138:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 800113a:	4b1a      	ldr	r3, [pc, #104]	; (80011a4 <MX_I2C1_Init+0x74>)
 800113c:	4a1b      	ldr	r2, [pc, #108]	; (80011ac <MX_I2C1_Init+0x7c>)
 800113e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001140:	4b18      	ldr	r3, [pc, #96]	; (80011a4 <MX_I2C1_Init+0x74>)
 8001142:	2200      	movs	r2, #0
 8001144:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001146:	4b17      	ldr	r3, [pc, #92]	; (80011a4 <MX_I2C1_Init+0x74>)
 8001148:	2201      	movs	r2, #1
 800114a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800114c:	4b15      	ldr	r3, [pc, #84]	; (80011a4 <MX_I2C1_Init+0x74>)
 800114e:	2200      	movs	r2, #0
 8001150:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001152:	4b14      	ldr	r3, [pc, #80]	; (80011a4 <MX_I2C1_Init+0x74>)
 8001154:	2200      	movs	r2, #0
 8001156:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001158:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <MX_I2C1_Init+0x74>)
 800115a:	2200      	movs	r2, #0
 800115c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800115e:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <MX_I2C1_Init+0x74>)
 8001160:	2200      	movs	r2, #0
 8001162:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001164:	4b0f      	ldr	r3, [pc, #60]	; (80011a4 <MX_I2C1_Init+0x74>)
 8001166:	2200      	movs	r2, #0
 8001168:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800116a:	480e      	ldr	r0, [pc, #56]	; (80011a4 <MX_I2C1_Init+0x74>)
 800116c:	f000 feec 	bl	8001f48 <HAL_I2C_Init>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001176:	f000 f9cb 	bl	8001510 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800117a:	2100      	movs	r1, #0
 800117c:	4809      	ldr	r0, [pc, #36]	; (80011a4 <MX_I2C1_Init+0x74>)
 800117e:	f001 fcdd 	bl	8002b3c <HAL_I2CEx_ConfigAnalogFilter>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001188:	f000 f9c2 	bl	8001510 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800118c:	2100      	movs	r1, #0
 800118e:	4805      	ldr	r0, [pc, #20]	; (80011a4 <MX_I2C1_Init+0x74>)
 8001190:	f001 fd1f 	bl	8002bd2 <HAL_I2CEx_ConfigDigitalFilter>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800119a:	f000 f9b9 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	2000022c 	.word	0x2000022c
 80011a8:	40005400 	.word	0x40005400
 80011ac:	30a0a7fb 	.word	0x30a0a7fb

080011b0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b09a      	sub	sp, #104	; 0x68
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011c8:	f107 0310 	add.w	r3, r7, #16
 80011cc:	2244      	movs	r2, #68	; 0x44
 80011ce:	2100      	movs	r1, #0
 80011d0:	4618      	mov	r0, r3
 80011d2:	f003 fdd3 	bl	8004d7c <memset>
  if(i2cHandle->Instance==I2C1)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a1f      	ldr	r2, [pc, #124]	; (8001258 <HAL_I2C_MspInit+0xa8>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d136      	bne.n	800124e <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80011e0:	2340      	movs	r3, #64	; 0x40
 80011e2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80011e4:	2300      	movs	r3, #0
 80011e6:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011e8:	f107 0310 	add.w	r3, r7, #16
 80011ec:	4618      	mov	r0, r3
 80011ee:	f002 fb25 	bl	800383c <HAL_RCCEx_PeriphCLKConfig>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80011f8:	f000 f98a 	bl	8001510 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011fc:	4b17      	ldr	r3, [pc, #92]	; (800125c <HAL_I2C_MspInit+0xac>)
 80011fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001200:	4a16      	ldr	r2, [pc, #88]	; (800125c <HAL_I2C_MspInit+0xac>)
 8001202:	f043 0302 	orr.w	r3, r3, #2
 8001206:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001208:	4b14      	ldr	r3, [pc, #80]	; (800125c <HAL_I2C_MspInit+0xac>)
 800120a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120c:	f003 0302 	and.w	r3, r3, #2
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001214:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001218:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800121a:	2312      	movs	r3, #18
 800121c:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121e:	2300      	movs	r3, #0
 8001220:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001222:	2300      	movs	r3, #0
 8001224:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001226:	2304      	movs	r3, #4
 8001228:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800122e:	4619      	mov	r1, r3
 8001230:	480b      	ldr	r0, [pc, #44]	; (8001260 <HAL_I2C_MspInit+0xb0>)
 8001232:	f000 fcef 	bl	8001c14 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001236:	4b09      	ldr	r3, [pc, #36]	; (800125c <HAL_I2C_MspInit+0xac>)
 8001238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800123a:	4a08      	ldr	r2, [pc, #32]	; (800125c <HAL_I2C_MspInit+0xac>)
 800123c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001240:	6593      	str	r3, [r2, #88]	; 0x58
 8001242:	4b06      	ldr	r3, [pc, #24]	; (800125c <HAL_I2C_MspInit+0xac>)
 8001244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001246:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800124a:	60bb      	str	r3, [r7, #8]
 800124c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800124e:	bf00      	nop
 8001250:	3768      	adds	r7, #104	; 0x68
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40005400 	.word	0x40005400
 800125c:	40021000 	.word	0x40021000
 8001260:	48000400 	.word	0x48000400

08001264 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 800126c:	1d39      	adds	r1, r7, #4
 800126e:	f04f 33ff 	mov.w	r3, #4294967295
 8001272:	2201      	movs	r2, #1
 8001274:	4803      	ldr	r0, [pc, #12]	; (8001284 <__io_putchar+0x20>)
 8001276:	f002 fd21 	bl	8003cbc <HAL_UART_Transmit>
return ch;
 800127a:	687b      	ldr	r3, [r7, #4]
}
 800127c:	4618      	mov	r0, r3
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	20000284 	.word	0x20000284

08001288 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b090      	sub	sp, #64	; 0x40
 800128c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800128e:	f000 fb4a 	bl	8001926 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001292:	f000 f8f1 	bl	8001478 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001296:	f7ff fed3 	bl	8001040 <MX_GPIO_Init>
  MX_I2C1_Init();
 800129a:	f7ff ff49 	bl	8001130 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 800129e:	f000 fa75 	bl	800178c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 80012a2:	2201      	movs	r2, #1
 80012a4:	2120      	movs	r1, #32
 80012a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012aa:	f000 fe35 	bl	8001f18 <HAL_GPIO_WritePin>
    HAL_Delay(2000);
 80012ae:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80012b2:	f000 fba9 	bl	8001a08 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);
 80012b6:	2200      	movs	r2, #0
 80012b8:	2120      	movs	r1, #32
 80012ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012be:	f000 fe2b 	bl	8001f18 <HAL_GPIO_WritePin>

    InitCapteur(&hi2c1);
 80012c2:	485f      	ldr	r0, [pc, #380]	; (8001440 <main+0x1b8>)
 80012c4:	f7ff fe1a 	bl	8000efc <InitCapteur>
    BSP_LCD_DisplayStringAt(0, LINE(5), (uint8_t *)mess,CENTER_MODE);
    HAL_Delay(1000);
    BSP_LCD_Clear(LCD_COLOR_WHITE);
    */
    // Go through all possible i2c addresses
	printf("\r\n");
 80012c8:	485e      	ldr	r0, [pc, #376]	; (8001444 <main+0x1bc>)
 80012ca:	f004 fa4f 	bl	800576c <puts>
	printf("\r\n");
 80012ce:	485d      	ldr	r0, [pc, #372]	; (8001444 <main+0x1bc>)
 80012d0:	f004 fa4c 	bl	800576c <puts>
    printf("-- Test des adresses disponibles --\r\n");
 80012d4:	485c      	ldr	r0, [pc, #368]	; (8001448 <main+0x1c0>)
 80012d6:	f004 fa49 	bl	800576c <puts>
    	for (uint8_t i = 0; i < 128; i++) {
 80012da:	2300      	movs	r3, #0
 80012dc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80012e0:	e029      	b.n	8001336 <main+0xae>
    	  if (HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 3, 5) == HAL_OK) {
 80012e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80012e6:	b29b      	uxth	r3, r3
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	b299      	uxth	r1, r3
 80012ec:	2305      	movs	r3, #5
 80012ee:	2203      	movs	r2, #3
 80012f0:	4853      	ldr	r0, [pc, #332]	; (8001440 <main+0x1b8>)
 80012f2:	f001 f8a3 	bl	800243c <HAL_I2C_IsDeviceReady>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d106      	bne.n	800130a <main+0x82>
    		  printf("%2x ", i);
 80012fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001300:	4619      	mov	r1, r3
 8001302:	4852      	ldr	r0, [pc, #328]	; (800144c <main+0x1c4>)
 8001304:	f004 f9ac 	bl	8005660 <iprintf>
 8001308:	e002      	b.n	8001310 <main+0x88>
    	  } else {
    		  printf("-- ");
 800130a:	4851      	ldr	r0, [pc, #324]	; (8001450 <main+0x1c8>)
 800130c:	f004 f9a8 	bl	8005660 <iprintf>
    	  }
    	  if (i > 0 && (i + 1) % 16 == 0) printf("\n\r");
 8001310:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001314:	2b00      	cmp	r3, #0
 8001316:	d009      	beq.n	800132c <main+0xa4>
 8001318:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800131c:	3301      	adds	r3, #1
 800131e:	f003 030f 	and.w	r3, r3, #15
 8001322:	2b00      	cmp	r3, #0
 8001324:	d102      	bne.n	800132c <main+0xa4>
 8001326:	484b      	ldr	r0, [pc, #300]	; (8001454 <main+0x1cc>)
 8001328:	f004 f99a 	bl	8005660 <iprintf>
    	for (uint8_t i = 0; i < 128; i++) {
 800132c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001330:	3301      	adds	r3, #1
 8001332:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001336:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 800133a:	2b00      	cmp	r3, #0
 800133c:	dad1      	bge.n	80012e2 <main+0x5a>
      }

      printf("\n\r");
 800133e:	4845      	ldr	r0, [pc, #276]	; (8001454 <main+0x1cc>)
 8001340:	f004 f98e 	bl	8005660 <iprintf>

      printf("-- Test de l'identite du capteur MPU-9250 --\r\n");
 8001344:	4844      	ldr	r0, [pc, #272]	; (8001458 <main+0x1d0>)
 8001346:	f004 fa11 	bl	800576c <puts>
      uint8_t data[48];
      data[0]=0x75;
 800134a:	2375      	movs	r3, #117	; 0x75
 800134c:	713b      	strb	r3, [r7, #4]
      printf("Registre d'identification : %x\r\n",data[0]);
 800134e:	793b      	ldrb	r3, [r7, #4]
 8001350:	4619      	mov	r1, r3
 8001352:	4842      	ldr	r0, [pc, #264]	; (800145c <main+0x1d4>)
 8001354:	f004 f984 	bl	8005660 <iprintf>
      if(HAL_I2C_Master_Transmit(&hi2c1,AdressMPU, data, 1, HAL_MAX_DELAY) != HAL_OK){
 8001358:	1d3a      	adds	r2, r7, #4
 800135a:	f04f 33ff 	mov.w	r3, #4294967295
 800135e:	9300      	str	r3, [sp, #0]
 8001360:	2301      	movs	r3, #1
 8001362:	21d0      	movs	r1, #208	; 0xd0
 8001364:	4836      	ldr	r0, [pc, #216]	; (8001440 <main+0x1b8>)
 8001366:	f000 fe7f 	bl	8002068 <HAL_I2C_Master_Transmit>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <main+0xec>
    	  Error_Handler();
 8001370:	f000 f8ce 	bl	8001510 <Error_Handler>
      }
      if(HAL_I2C_Master_Receive(&hi2c1,AdressMPU, data, 1, HAL_MAX_DELAY) != HAL_OK){
 8001374:	1d3a      	adds	r2, r7, #4
 8001376:	f04f 33ff 	mov.w	r3, #4294967295
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	2301      	movs	r3, #1
 800137e:	21d0      	movs	r1, #208	; 0xd0
 8001380:	482f      	ldr	r0, [pc, #188]	; (8001440 <main+0x1b8>)
 8001382:	f000 ff65 	bl	8002250 <HAL_I2C_Master_Receive>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <main+0x108>
    	  Error_Handler();
 800138c:	f000 f8c0 	bl	8001510 <Error_Handler>
      }
      printf("Valeur recu : %x\r\n",data[0]);
 8001390:	793b      	ldrb	r3, [r7, #4]
 8001392:	4619      	mov	r1, r3
 8001394:	4832      	ldr	r0, [pc, #200]	; (8001460 <main+0x1d8>)
 8001396:	f004 f963 	bl	8005660 <iprintf>
      if (data[0]!=0x71){
 800139a:	793b      	ldrb	r3, [r7, #4]
 800139c:	2b71      	cmp	r3, #113	; 0x71
 800139e:	d005      	beq.n	80013ac <main+0x124>
    	  printf("Error !\r\n");
 80013a0:	4830      	ldr	r0, [pc, #192]	; (8001464 <main+0x1dc>)
 80013a2:	f004 f9e3 	bl	800576c <puts>
    	  Error_Handler();
 80013a6:	f000 f8b3 	bl	8001510 <Error_Handler>
 80013aa:	e002      	b.n	80013b2 <main+0x12a>
      }
      else{
    	  printf("Ok !\r\n");
 80013ac:	482e      	ldr	r0, [pc, #184]	; (8001468 <main+0x1e0>)
 80013ae:	f004 f9dd 	bl	800576c <puts>
      }
	  printf("\r\n");
 80013b2:	4824      	ldr	r0, [pc, #144]	; (8001444 <main+0x1bc>)
 80013b4:	f004 f9da 	bl	800576c <puts>
      printf("-- Test de l'identite du capteur BPM-280 --\r\n");
 80013b8:	482c      	ldr	r0, [pc, #176]	; (800146c <main+0x1e4>)
 80013ba:	f004 f9d7 	bl	800576c <puts>
      data[0]=0xd0;
 80013be:	23d0      	movs	r3, #208	; 0xd0
 80013c0:	713b      	strb	r3, [r7, #4]
      printf("Registre d'identification : %x\r\n",data[0]);
 80013c2:	793b      	ldrb	r3, [r7, #4]
 80013c4:	4619      	mov	r1, r3
 80013c6:	4825      	ldr	r0, [pc, #148]	; (800145c <main+0x1d4>)
 80013c8:	f004 f94a 	bl	8005660 <iprintf>
      if(HAL_I2C_Master_Transmit(&hi2c1,AdressBMP, data, 1, HAL_MAX_DELAY) != HAL_OK){
 80013cc:	1d3a      	adds	r2, r7, #4
 80013ce:	f04f 33ff 	mov.w	r3, #4294967295
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	2301      	movs	r3, #1
 80013d6:	21ee      	movs	r1, #238	; 0xee
 80013d8:	4819      	ldr	r0, [pc, #100]	; (8001440 <main+0x1b8>)
 80013da:	f000 fe45 	bl	8002068 <HAL_I2C_Master_Transmit>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <main+0x160>
    	  Error_Handler();
 80013e4:	f000 f894 	bl	8001510 <Error_Handler>
      }
      if(HAL_I2C_Master_Receive(&hi2c1,AdressBMP, data, 1, HAL_MAX_DELAY) != HAL_OK){
 80013e8:	1d3a      	adds	r2, r7, #4
 80013ea:	f04f 33ff 	mov.w	r3, #4294967295
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	2301      	movs	r3, #1
 80013f2:	21ee      	movs	r1, #238	; 0xee
 80013f4:	4812      	ldr	r0, [pc, #72]	; (8001440 <main+0x1b8>)
 80013f6:	f000 ff2b 	bl	8002250 <HAL_I2C_Master_Receive>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <main+0x17c>
    	  Error_Handler();
 8001400:	f000 f886 	bl	8001510 <Error_Handler>
      }
      printf("Valeur recu : %x\r\n",data[0]);
 8001404:	793b      	ldrb	r3, [r7, #4]
 8001406:	4619      	mov	r1, r3
 8001408:	4815      	ldr	r0, [pc, #84]	; (8001460 <main+0x1d8>)
 800140a:	f004 f929 	bl	8005660 <iprintf>
      if (data[0]!=0x58){
 800140e:	793b      	ldrb	r3, [r7, #4]
 8001410:	2b58      	cmp	r3, #88	; 0x58
 8001412:	d005      	beq.n	8001420 <main+0x198>
    	  printf("Error !\r\n");
 8001414:	4813      	ldr	r0, [pc, #76]	; (8001464 <main+0x1dc>)
 8001416:	f004 f9a9 	bl	800576c <puts>
    	  Error_Handler();
 800141a:	f000 f879 	bl	8001510 <Error_Handler>
 800141e:	e002      	b.n	8001426 <main+0x19e>
      }
      else{
    	  printf("Ok !\r\n");
 8001420:	4811      	ldr	r0, [pc, #68]	; (8001468 <main+0x1e0>)
 8001422:	f004 f9a3 	bl	800576c <puts>
      }

      while (1)
      {
      	Measure_T(&hi2c1,&Temp);
 8001426:	4912      	ldr	r1, [pc, #72]	; (8001470 <main+0x1e8>)
 8001428:	4805      	ldr	r0, [pc, #20]	; (8001440 <main+0x1b8>)
 800142a:	f7ff fdad 	bl	8000f88 <Measure_T>
        printf("Temperature : %f\r\n",&Temp);
 800142e:	4910      	ldr	r1, [pc, #64]	; (8001470 <main+0x1e8>)
 8001430:	4810      	ldr	r0, [pc, #64]	; (8001474 <main+0x1ec>)
 8001432:	f004 f915 	bl	8005660 <iprintf>
    	/*Measure_A(&hi2c1,&AccelX,&AccelY,&AccelZ);
        printf("AccelerationX : %ld\r\n",AccelX);
        printf("AccelerationY : %ld\r\n",AccelY);
        printf("AccelerationZ : %ld\r\n",AccelZ);*/
    	HAL_Delay(500);
 8001436:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800143a:	f000 fae5 	bl	8001a08 <HAL_Delay>
      	Measure_T(&hi2c1,&Temp);
 800143e:	e7f2      	b.n	8001426 <main+0x19e>
 8001440:	2000022c 	.word	0x2000022c
 8001444:	080078d0 	.word	0x080078d0
 8001448:	080078d4 	.word	0x080078d4
 800144c:	080078fc 	.word	0x080078fc
 8001450:	08007904 	.word	0x08007904
 8001454:	08007908 	.word	0x08007908
 8001458:	0800790c 	.word	0x0800790c
 800145c:	0800793c 	.word	0x0800793c
 8001460:	08007960 	.word	0x08007960
 8001464:	08007974 	.word	0x08007974
 8001468:	08007980 	.word	0x08007980
 800146c:	08007988 	.word	0x08007988
 8001470:	20000278 	.word	0x20000278
 8001474:	080079b8 	.word	0x080079b8

08001478 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b094      	sub	sp, #80	; 0x50
 800147c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800147e:	f107 0318 	add.w	r3, r7, #24
 8001482:	2238      	movs	r2, #56	; 0x38
 8001484:	2100      	movs	r1, #0
 8001486:	4618      	mov	r0, r3
 8001488:	f003 fc78 	bl	8004d7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800148c:	1d3b      	adds	r3, r7, #4
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]
 8001496:	60da      	str	r2, [r3, #12]
 8001498:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800149a:	2000      	movs	r0, #0
 800149c:	f001 fbe6 	bl	8002c6c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014a0:	2302      	movs	r3, #2
 80014a2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014a8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014aa:	2340      	movs	r3, #64	; 0x40
 80014ac:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ae:	2302      	movs	r3, #2
 80014b0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014b2:	2302      	movs	r3, #2
 80014b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80014b6:	2304      	movs	r3, #4
 80014b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80014ba:	2355      	movs	r3, #85	; 0x55
 80014bc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014be:	2302      	movs	r3, #2
 80014c0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80014c2:	2302      	movs	r3, #2
 80014c4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80014c6:	2302      	movs	r3, #2
 80014c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014ca:	f107 0318 	add.w	r3, r7, #24
 80014ce:	4618      	mov	r0, r3
 80014d0:	f001 fc80 	bl	8002dd4 <HAL_RCC_OscConfig>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <SystemClock_Config+0x66>
  {
    Error_Handler();
 80014da:	f000 f819 	bl	8001510 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014de:	230f      	movs	r3, #15
 80014e0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014e2:	2303      	movs	r3, #3
 80014e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014ea:	2300      	movs	r3, #0
 80014ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014ee:	2300      	movs	r3, #0
 80014f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80014f2:	1d3b      	adds	r3, r7, #4
 80014f4:	2104      	movs	r1, #4
 80014f6:	4618      	mov	r0, r3
 80014f8:	f001 ff84 	bl	8003404 <HAL_RCC_ClockConfig>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001502:	f000 f805 	bl	8001510 <Error_Handler>
  }
}
 8001506:	bf00      	nop
 8001508:	3750      	adds	r7, #80	; 0x50
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
	...

08001510 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	printf("Une erreur est survenue ! Arret du programme\r\n");
 8001514:	480a      	ldr	r0, [pc, #40]	; (8001540 <Error_Handler+0x30>)
 8001516:	f004 f929 	bl	800576c <puts>
	while(1){
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 800151a:	2201      	movs	r2, #1
 800151c:	2120      	movs	r1, #32
 800151e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001522:	f000 fcf9 	bl	8001f18 <HAL_GPIO_WritePin>
	    HAL_Delay(200);
 8001526:	20c8      	movs	r0, #200	; 0xc8
 8001528:	f000 fa6e 	bl	8001a08 <HAL_Delay>
	    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);
 800152c:	2200      	movs	r2, #0
 800152e:	2120      	movs	r1, #32
 8001530:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001534:	f000 fcf0 	bl	8001f18 <HAL_GPIO_WritePin>
	    HAL_Delay(200);
 8001538:	20c8      	movs	r0, #200	; 0xc8
 800153a:	f000 fa65 	bl	8001a08 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 800153e:	e7ec      	b.n	800151a <Error_Handler+0xa>
 8001540:	080079cc 	.word	0x080079cc

08001544 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b082      	sub	sp, #8
 8001548:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800154a:	4b12      	ldr	r3, [pc, #72]	; (8001594 <HAL_MspInit+0x50>)
 800154c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800154e:	4a11      	ldr	r2, [pc, #68]	; (8001594 <HAL_MspInit+0x50>)
 8001550:	f043 0301 	orr.w	r3, r3, #1
 8001554:	6613      	str	r3, [r2, #96]	; 0x60
 8001556:	4b0f      	ldr	r3, [pc, #60]	; (8001594 <HAL_MspInit+0x50>)
 8001558:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	607b      	str	r3, [r7, #4]
 8001560:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001562:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <HAL_MspInit+0x50>)
 8001564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001566:	4a0b      	ldr	r2, [pc, #44]	; (8001594 <HAL_MspInit+0x50>)
 8001568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800156c:	6593      	str	r3, [r2, #88]	; 0x58
 800156e:	4b09      	ldr	r3, [pc, #36]	; (8001594 <HAL_MspInit+0x50>)
 8001570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001576:	603b      	str	r3, [r7, #0]
 8001578:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800157a:	2200      	movs	r2, #0
 800157c:	210f      	movs	r1, #15
 800157e:	f06f 0001 	mvn.w	r0, #1
 8001582:	f000 fb20 	bl	8001bc6 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001586:	f001 fc15 	bl	8002db4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800158a:	bf00      	nop
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40021000 	.word	0x40021000

08001598 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800159c:	e7fe      	b.n	800159c <NMI_Handler+0x4>

0800159e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800159e:	b480      	push	{r7}
 80015a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015a2:	e7fe      	b.n	80015a2 <HardFault_Handler+0x4>

080015a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015a8:	e7fe      	b.n	80015a8 <MemManage_Handler+0x4>

080015aa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015aa:	b480      	push	{r7}
 80015ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ae:	e7fe      	b.n	80015ae <BusFault_Handler+0x4>

080015b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015b4:	e7fe      	b.n	80015b4 <UsageFault_Handler+0x4>

080015b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015b6:	b480      	push	{r7}
 80015b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015ba:	bf00      	nop
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015c8:	f000 fa00 	bl	80019cc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80015cc:	f003 fb12 	bl	8004bf4 <xTaskGetSchedulerState>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b01      	cmp	r3, #1
 80015d4:	d001      	beq.n	80015da <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80015d6:	f003 fb77 	bl	8004cc8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}

080015de <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015de:	b480      	push	{r7}
 80015e0:	af00      	add	r7, sp, #0
	return 1;
 80015e2:	2301      	movs	r3, #1
}
 80015e4:	4618      	mov	r0, r3
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <_kill>:

int _kill(int pid, int sig)
{
 80015ee:	b580      	push	{r7, lr}
 80015f0:	b082      	sub	sp, #8
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
 80015f6:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80015f8:	f003 fb88 	bl	8004d0c <__errno>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2216      	movs	r2, #22
 8001600:	601a      	str	r2, [r3, #0]
	return -1;
 8001602:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001606:	4618      	mov	r0, r3
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <_exit>:

void _exit (int status)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b082      	sub	sp, #8
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001616:	f04f 31ff 	mov.w	r1, #4294967295
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f7ff ffe7 	bl	80015ee <_kill>
	while (1) {}		/* Make sure we hang here */
 8001620:	e7fe      	b.n	8001620 <_exit+0x12>

08001622 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001622:	b580      	push	{r7, lr}
 8001624:	b086      	sub	sp, #24
 8001626:	af00      	add	r7, sp, #0
 8001628:	60f8      	str	r0, [r7, #12]
 800162a:	60b9      	str	r1, [r7, #8]
 800162c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800162e:	2300      	movs	r3, #0
 8001630:	617b      	str	r3, [r7, #20]
 8001632:	e00a      	b.n	800164a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001634:	f3af 8000 	nop.w
 8001638:	4601      	mov	r1, r0
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	1c5a      	adds	r2, r3, #1
 800163e:	60ba      	str	r2, [r7, #8]
 8001640:	b2ca      	uxtb	r2, r1
 8001642:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	3301      	adds	r3, #1
 8001648:	617b      	str	r3, [r7, #20]
 800164a:	697a      	ldr	r2, [r7, #20]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	429a      	cmp	r2, r3
 8001650:	dbf0      	blt.n	8001634 <_read+0x12>
	}

return len;
 8001652:	687b      	ldr	r3, [r7, #4]
}
 8001654:	4618      	mov	r0, r3
 8001656:	3718      	adds	r7, #24
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}

0800165c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	60b9      	str	r1, [r7, #8]
 8001666:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]
 800166c:	e009      	b.n	8001682 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800166e:	68bb      	ldr	r3, [r7, #8]
 8001670:	1c5a      	adds	r2, r3, #1
 8001672:	60ba      	str	r2, [r7, #8]
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	4618      	mov	r0, r3
 8001678:	f7ff fdf4 	bl	8001264 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	3301      	adds	r3, #1
 8001680:	617b      	str	r3, [r7, #20]
 8001682:	697a      	ldr	r2, [r7, #20]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	429a      	cmp	r2, r3
 8001688:	dbf1      	blt.n	800166e <_write+0x12>
	}
	return len;
 800168a:	687b      	ldr	r3, [r7, #4]
}
 800168c:	4618      	mov	r0, r3
 800168e:	3718      	adds	r7, #24
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}

08001694 <_close>:

int _close(int file)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
	return -1;
 800169c:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
 80016b4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016bc:	605a      	str	r2, [r3, #4]
	return 0;
 80016be:	2300      	movs	r3, #0
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	370c      	adds	r7, #12
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr

080016cc <_isatty>:

int _isatty(int file)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
	return 1;
 80016d4:	2301      	movs	r3, #1
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr

080016e2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016e2:	b480      	push	{r7}
 80016e4:	b085      	sub	sp, #20
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	60f8      	str	r0, [r7, #12]
 80016ea:	60b9      	str	r1, [r7, #8]
 80016ec:	607a      	str	r2, [r7, #4]
	return 0;
 80016ee:	2300      	movs	r3, #0
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3714      	adds	r7, #20
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001704:	4a14      	ldr	r2, [pc, #80]	; (8001758 <_sbrk+0x5c>)
 8001706:	4b15      	ldr	r3, [pc, #84]	; (800175c <_sbrk+0x60>)
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001710:	4b13      	ldr	r3, [pc, #76]	; (8001760 <_sbrk+0x64>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d102      	bne.n	800171e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001718:	4b11      	ldr	r3, [pc, #68]	; (8001760 <_sbrk+0x64>)
 800171a:	4a12      	ldr	r2, [pc, #72]	; (8001764 <_sbrk+0x68>)
 800171c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800171e:	4b10      	ldr	r3, [pc, #64]	; (8001760 <_sbrk+0x64>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4413      	add	r3, r2
 8001726:	693a      	ldr	r2, [r7, #16]
 8001728:	429a      	cmp	r2, r3
 800172a:	d207      	bcs.n	800173c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800172c:	f003 faee 	bl	8004d0c <__errno>
 8001730:	4603      	mov	r3, r0
 8001732:	220c      	movs	r2, #12
 8001734:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001736:	f04f 33ff 	mov.w	r3, #4294967295
 800173a:	e009      	b.n	8001750 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800173c:	4b08      	ldr	r3, [pc, #32]	; (8001760 <_sbrk+0x64>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001742:	4b07      	ldr	r3, [pc, #28]	; (8001760 <_sbrk+0x64>)
 8001744:	681a      	ldr	r2, [r3, #0]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4413      	add	r3, r2
 800174a:	4a05      	ldr	r2, [pc, #20]	; (8001760 <_sbrk+0x64>)
 800174c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800174e:	68fb      	ldr	r3, [r7, #12]
}
 8001750:	4618      	mov	r0, r3
 8001752:	3718      	adds	r7, #24
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	20008000 	.word	0x20008000
 800175c:	00000400 	.word	0x00000400
 8001760:	20000280 	.word	0x20000280
 8001764:	200003e0 	.word	0x200003e0

08001768 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800176c:	4b06      	ldr	r3, [pc, #24]	; (8001788 <SystemInit+0x20>)
 800176e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001772:	4a05      	ldr	r2, [pc, #20]	; (8001788 <SystemInit+0x20>)
 8001774:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001778:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800177c:	bf00      	nop
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001790:	4b22      	ldr	r3, [pc, #136]	; (800181c <MX_USART2_UART_Init+0x90>)
 8001792:	4a23      	ldr	r2, [pc, #140]	; (8001820 <MX_USART2_UART_Init+0x94>)
 8001794:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001796:	4b21      	ldr	r3, [pc, #132]	; (800181c <MX_USART2_UART_Init+0x90>)
 8001798:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800179c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800179e:	4b1f      	ldr	r3, [pc, #124]	; (800181c <MX_USART2_UART_Init+0x90>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017a4:	4b1d      	ldr	r3, [pc, #116]	; (800181c <MX_USART2_UART_Init+0x90>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017aa:	4b1c      	ldr	r3, [pc, #112]	; (800181c <MX_USART2_UART_Init+0x90>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017b0:	4b1a      	ldr	r3, [pc, #104]	; (800181c <MX_USART2_UART_Init+0x90>)
 80017b2:	220c      	movs	r2, #12
 80017b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017b6:	4b19      	ldr	r3, [pc, #100]	; (800181c <MX_USART2_UART_Init+0x90>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017bc:	4b17      	ldr	r3, [pc, #92]	; (800181c <MX_USART2_UART_Init+0x90>)
 80017be:	2200      	movs	r2, #0
 80017c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017c2:	4b16      	ldr	r3, [pc, #88]	; (800181c <MX_USART2_UART_Init+0x90>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80017c8:	4b14      	ldr	r3, [pc, #80]	; (800181c <MX_USART2_UART_Init+0x90>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017ce:	4b13      	ldr	r3, [pc, #76]	; (800181c <MX_USART2_UART_Init+0x90>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017d4:	4811      	ldr	r0, [pc, #68]	; (800181c <MX_USART2_UART_Init+0x90>)
 80017d6:	f002 fa21 	bl	8003c1c <HAL_UART_Init>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80017e0:	f7ff fe96 	bl	8001510 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017e4:	2100      	movs	r1, #0
 80017e6:	480d      	ldr	r0, [pc, #52]	; (800181c <MX_USART2_UART_Init+0x90>)
 80017e8:	f002 ffb8 	bl	800475c <HAL_UARTEx_SetTxFifoThreshold>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80017f2:	f7ff fe8d 	bl	8001510 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017f6:	2100      	movs	r1, #0
 80017f8:	4808      	ldr	r0, [pc, #32]	; (800181c <MX_USART2_UART_Init+0x90>)
 80017fa:	f002 ffed 	bl	80047d8 <HAL_UARTEx_SetRxFifoThreshold>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001804:	f7ff fe84 	bl	8001510 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001808:	4804      	ldr	r0, [pc, #16]	; (800181c <MX_USART2_UART_Init+0x90>)
 800180a:	f002 ff6e 	bl	80046ea <HAL_UARTEx_DisableFifoMode>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001814:	f7ff fe7c 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001818:	bf00      	nop
 800181a:	bd80      	pop	{r7, pc}
 800181c:	20000284 	.word	0x20000284
 8001820:	40004400 	.word	0x40004400

08001824 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b09a      	sub	sp, #104	; 0x68
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800182c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	60da      	str	r2, [r3, #12]
 800183a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800183c:	f107 0310 	add.w	r3, r7, #16
 8001840:	2244      	movs	r2, #68	; 0x44
 8001842:	2100      	movs	r1, #0
 8001844:	4618      	mov	r0, r3
 8001846:	f003 fa99 	bl	8004d7c <memset>
  if(uartHandle->Instance==USART2)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a1f      	ldr	r2, [pc, #124]	; (80018cc <HAL_UART_MspInit+0xa8>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d137      	bne.n	80018c4 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001854:	2302      	movs	r3, #2
 8001856:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001858:	2300      	movs	r3, #0
 800185a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800185c:	f107 0310 	add.w	r3, r7, #16
 8001860:	4618      	mov	r0, r3
 8001862:	f001 ffeb 	bl	800383c <HAL_RCCEx_PeriphCLKConfig>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800186c:	f7ff fe50 	bl	8001510 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001870:	4b17      	ldr	r3, [pc, #92]	; (80018d0 <HAL_UART_MspInit+0xac>)
 8001872:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001874:	4a16      	ldr	r2, [pc, #88]	; (80018d0 <HAL_UART_MspInit+0xac>)
 8001876:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800187a:	6593      	str	r3, [r2, #88]	; 0x58
 800187c:	4b14      	ldr	r3, [pc, #80]	; (80018d0 <HAL_UART_MspInit+0xac>)
 800187e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001884:	60fb      	str	r3, [r7, #12]
 8001886:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001888:	4b11      	ldr	r3, [pc, #68]	; (80018d0 <HAL_UART_MspInit+0xac>)
 800188a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800188c:	4a10      	ldr	r2, [pc, #64]	; (80018d0 <HAL_UART_MspInit+0xac>)
 800188e:	f043 0301 	orr.w	r3, r3, #1
 8001892:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001894:	4b0e      	ldr	r3, [pc, #56]	; (80018d0 <HAL_UART_MspInit+0xac>)
 8001896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001898:	f003 0301 	and.w	r3, r3, #1
 800189c:	60bb      	str	r3, [r7, #8]
 800189e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 80018a0:	f248 0304 	movw	r3, #32772	; 0x8004
 80018a4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a6:	2302      	movs	r3, #2
 80018a8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018aa:	2300      	movs	r3, #0
 80018ac:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ae:	2300      	movs	r3, #0
 80018b0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018b2:	2307      	movs	r3, #7
 80018b4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80018ba:	4619      	mov	r1, r3
 80018bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018c0:	f000 f9a8 	bl	8001c14 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80018c4:	bf00      	nop
 80018c6:	3768      	adds	r7, #104	; 0x68
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	40004400 	.word	0x40004400
 80018d0:	40021000 	.word	0x40021000

080018d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80018d4:	480d      	ldr	r0, [pc, #52]	; (800190c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80018d6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018d8:	480d      	ldr	r0, [pc, #52]	; (8001910 <LoopForever+0x6>)
  ldr r1, =_edata
 80018da:	490e      	ldr	r1, [pc, #56]	; (8001914 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018dc:	4a0e      	ldr	r2, [pc, #56]	; (8001918 <LoopForever+0xe>)
  movs r3, #0
 80018de:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80018e0:	e002      	b.n	80018e8 <LoopCopyDataInit>

080018e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018e6:	3304      	adds	r3, #4

080018e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018ec:	d3f9      	bcc.n	80018e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ee:	4a0b      	ldr	r2, [pc, #44]	; (800191c <LoopForever+0x12>)
  ldr r4, =_ebss
 80018f0:	4c0b      	ldr	r4, [pc, #44]	; (8001920 <LoopForever+0x16>)
  movs r3, #0
 80018f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018f4:	e001      	b.n	80018fa <LoopFillZerobss>

080018f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018f8:	3204      	adds	r2, #4

080018fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018fc:	d3fb      	bcc.n	80018f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80018fe:	f7ff ff33 	bl	8001768 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001902:	f003 fa09 	bl	8004d18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001906:	f7ff fcbf 	bl	8001288 <main>

0800190a <LoopForever>:

LoopForever:
    b LoopForever
 800190a:	e7fe      	b.n	800190a <LoopForever>
  ldr   r0, =_estack
 800190c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001910:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001914:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001918:	08007e24 	.word	0x08007e24
  ldr r2, =_sbss
 800191c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001920:	200003e0 	.word	0x200003e0

08001924 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001924:	e7fe      	b.n	8001924 <ADC1_2_IRQHandler>

08001926 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	b082      	sub	sp, #8
 800192a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800192c:	2300      	movs	r3, #0
 800192e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001930:	2003      	movs	r0, #3
 8001932:	f000 f93d 	bl	8001bb0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001936:	200f      	movs	r0, #15
 8001938:	f000 f80e 	bl	8001958 <HAL_InitTick>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d002      	beq.n	8001948 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	71fb      	strb	r3, [r7, #7]
 8001946:	e001      	b.n	800194c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001948:	f7ff fdfc 	bl	8001544 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800194c:	79fb      	ldrb	r3, [r7, #7]

}
 800194e:	4618      	mov	r0, r3
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
	...

08001958 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b084      	sub	sp, #16
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001960:	2300      	movs	r3, #0
 8001962:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001964:	4b16      	ldr	r3, [pc, #88]	; (80019c0 <HAL_InitTick+0x68>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d022      	beq.n	80019b2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800196c:	4b15      	ldr	r3, [pc, #84]	; (80019c4 <HAL_InitTick+0x6c>)
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	4b13      	ldr	r3, [pc, #76]	; (80019c0 <HAL_InitTick+0x68>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001978:	fbb1 f3f3 	udiv	r3, r1, r3
 800197c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001980:	4618      	mov	r0, r3
 8001982:	f000 f93a 	bl	8001bfa <HAL_SYSTICK_Config>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d10f      	bne.n	80019ac <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2b0f      	cmp	r3, #15
 8001990:	d809      	bhi.n	80019a6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001992:	2200      	movs	r2, #0
 8001994:	6879      	ldr	r1, [r7, #4]
 8001996:	f04f 30ff 	mov.w	r0, #4294967295
 800199a:	f000 f914 	bl	8001bc6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800199e:	4a0a      	ldr	r2, [pc, #40]	; (80019c8 <HAL_InitTick+0x70>)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6013      	str	r3, [r2, #0]
 80019a4:	e007      	b.n	80019b6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	73fb      	strb	r3, [r7, #15]
 80019aa:	e004      	b.n	80019b6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	73fb      	strb	r3, [r7, #15]
 80019b0:	e001      	b.n	80019b6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80019b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3710      	adds	r7, #16
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	20000008 	.word	0x20000008
 80019c4:	20000000 	.word	0x20000000
 80019c8:	20000004 	.word	0x20000004

080019cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019d0:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <HAL_IncTick+0x1c>)
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	4b05      	ldr	r3, [pc, #20]	; (80019ec <HAL_IncTick+0x20>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4413      	add	r3, r2
 80019da:	4a03      	ldr	r2, [pc, #12]	; (80019e8 <HAL_IncTick+0x1c>)
 80019dc:	6013      	str	r3, [r2, #0]
}
 80019de:	bf00      	nop
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	20000314 	.word	0x20000314
 80019ec:	20000008 	.word	0x20000008

080019f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  return uwTick;
 80019f4:	4b03      	ldr	r3, [pc, #12]	; (8001a04 <HAL_GetTick+0x14>)
 80019f6:	681b      	ldr	r3, [r3, #0]
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	20000314 	.word	0x20000314

08001a08 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a10:	f7ff ffee 	bl	80019f0 <HAL_GetTick>
 8001a14:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a20:	d004      	beq.n	8001a2c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a22:	4b09      	ldr	r3, [pc, #36]	; (8001a48 <HAL_Delay+0x40>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	68fa      	ldr	r2, [r7, #12]
 8001a28:	4413      	add	r3, r2
 8001a2a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a2c:	bf00      	nop
 8001a2e:	f7ff ffdf 	bl	80019f0 <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	68fa      	ldr	r2, [r7, #12]
 8001a3a:	429a      	cmp	r2, r3
 8001a3c:	d8f7      	bhi.n	8001a2e <HAL_Delay+0x26>
  {
  }
}
 8001a3e:	bf00      	nop
 8001a40:	bf00      	nop
 8001a42:	3710      	adds	r7, #16
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	20000008 	.word	0x20000008

08001a4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a5c:	4b0c      	ldr	r3, [pc, #48]	; (8001a90 <__NVIC_SetPriorityGrouping+0x44>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a62:	68ba      	ldr	r2, [r7, #8]
 8001a64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a68:	4013      	ands	r3, r2
 8001a6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a7e:	4a04      	ldr	r2, [pc, #16]	; (8001a90 <__NVIC_SetPriorityGrouping+0x44>)
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	60d3      	str	r3, [r2, #12]
}
 8001a84:	bf00      	nop
 8001a86:	3714      	adds	r7, #20
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	e000ed00 	.word	0xe000ed00

08001a94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a98:	4b04      	ldr	r3, [pc, #16]	; (8001aac <__NVIC_GetPriorityGrouping+0x18>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	0a1b      	lsrs	r3, r3, #8
 8001a9e:	f003 0307 	and.w	r3, r3, #7
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	6039      	str	r1, [r7, #0]
 8001aba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	db0a      	blt.n	8001ada <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	b2da      	uxtb	r2, r3
 8001ac8:	490c      	ldr	r1, [pc, #48]	; (8001afc <__NVIC_SetPriority+0x4c>)
 8001aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ace:	0112      	lsls	r2, r2, #4
 8001ad0:	b2d2      	uxtb	r2, r2
 8001ad2:	440b      	add	r3, r1
 8001ad4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ad8:	e00a      	b.n	8001af0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	b2da      	uxtb	r2, r3
 8001ade:	4908      	ldr	r1, [pc, #32]	; (8001b00 <__NVIC_SetPriority+0x50>)
 8001ae0:	79fb      	ldrb	r3, [r7, #7]
 8001ae2:	f003 030f 	and.w	r3, r3, #15
 8001ae6:	3b04      	subs	r3, #4
 8001ae8:	0112      	lsls	r2, r2, #4
 8001aea:	b2d2      	uxtb	r2, r2
 8001aec:	440b      	add	r3, r1
 8001aee:	761a      	strb	r2, [r3, #24]
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	e000e100 	.word	0xe000e100
 8001b00:	e000ed00 	.word	0xe000ed00

08001b04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b089      	sub	sp, #36	; 0x24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	f1c3 0307 	rsb	r3, r3, #7
 8001b1e:	2b04      	cmp	r3, #4
 8001b20:	bf28      	it	cs
 8001b22:	2304      	movcs	r3, #4
 8001b24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	3304      	adds	r3, #4
 8001b2a:	2b06      	cmp	r3, #6
 8001b2c:	d902      	bls.n	8001b34 <NVIC_EncodePriority+0x30>
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	3b03      	subs	r3, #3
 8001b32:	e000      	b.n	8001b36 <NVIC_EncodePriority+0x32>
 8001b34:	2300      	movs	r3, #0
 8001b36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b38:	f04f 32ff 	mov.w	r2, #4294967295
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	43da      	mvns	r2, r3
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	401a      	ands	r2, r3
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	fa01 f303 	lsl.w	r3, r1, r3
 8001b56:	43d9      	mvns	r1, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b5c:	4313      	orrs	r3, r2
         );
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3724      	adds	r7, #36	; 0x24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b68:	4770      	bx	lr
	...

08001b6c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	3b01      	subs	r3, #1
 8001b78:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b7c:	d301      	bcc.n	8001b82 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e00f      	b.n	8001ba2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b82:	4a0a      	ldr	r2, [pc, #40]	; (8001bac <SysTick_Config+0x40>)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3b01      	subs	r3, #1
 8001b88:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b8a:	210f      	movs	r1, #15
 8001b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b90:	f7ff ff8e 	bl	8001ab0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b94:	4b05      	ldr	r3, [pc, #20]	; (8001bac <SysTick_Config+0x40>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b9a:	4b04      	ldr	r3, [pc, #16]	; (8001bac <SysTick_Config+0x40>)
 8001b9c:	2207      	movs	r2, #7
 8001b9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	e000e010 	.word	0xe000e010

08001bb0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f7ff ff47 	bl	8001a4c <__NVIC_SetPriorityGrouping>
}
 8001bbe:	bf00      	nop
 8001bc0:	3708      	adds	r7, #8
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b086      	sub	sp, #24
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	4603      	mov	r3, r0
 8001bce:	60b9      	str	r1, [r7, #8]
 8001bd0:	607a      	str	r2, [r7, #4]
 8001bd2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001bd4:	f7ff ff5e 	bl	8001a94 <__NVIC_GetPriorityGrouping>
 8001bd8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	68b9      	ldr	r1, [r7, #8]
 8001bde:	6978      	ldr	r0, [r7, #20]
 8001be0:	f7ff ff90 	bl	8001b04 <NVIC_EncodePriority>
 8001be4:	4602      	mov	r2, r0
 8001be6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bea:	4611      	mov	r1, r2
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7ff ff5f 	bl	8001ab0 <__NVIC_SetPriority>
}
 8001bf2:	bf00      	nop
 8001bf4:	3718      	adds	r7, #24
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b082      	sub	sp, #8
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f7ff ffb2 	bl	8001b6c <SysTick_Config>
 8001c08:	4603      	mov	r3, r0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3708      	adds	r7, #8
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd80      	pop	{r7, pc}
	...

08001c14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b087      	sub	sp, #28
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001c22:	e15a      	b.n	8001eda <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	2101      	movs	r1, #1
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c30:	4013      	ands	r3, r2
 8001c32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	f000 814c 	beq.w	8001ed4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f003 0303 	and.w	r3, r3, #3
 8001c44:	2b01      	cmp	r3, #1
 8001c46:	d005      	beq.n	8001c54 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001c50:	2b02      	cmp	r3, #2
 8001c52:	d130      	bne.n	8001cb6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	005b      	lsls	r3, r3, #1
 8001c5e:	2203      	movs	r2, #3
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	43db      	mvns	r3, r3
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	68da      	ldr	r2, [r3, #12]
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	43db      	mvns	r3, r3
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	4013      	ands	r3, r2
 8001c98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	091b      	lsrs	r3, r3, #4
 8001ca0:	f003 0201 	and.w	r2, r3, #1
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f003 0303 	and.w	r3, r3, #3
 8001cbe:	2b03      	cmp	r3, #3
 8001cc0:	d017      	beq.n	8001cf2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	2203      	movs	r2, #3
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	689a      	ldr	r2, [r3, #8]
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	005b      	lsls	r3, r3, #1
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f003 0303 	and.w	r3, r3, #3
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d123      	bne.n	8001d46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	08da      	lsrs	r2, r3, #3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	3208      	adds	r2, #8
 8001d06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	f003 0307 	and.w	r3, r3, #7
 8001d12:	009b      	lsls	r3, r3, #2
 8001d14:	220f      	movs	r2, #15
 8001d16:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1a:	43db      	mvns	r3, r3
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	691a      	ldr	r2, [r3, #16]
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	f003 0307 	and.w	r3, r3, #7
 8001d2c:	009b      	lsls	r3, r3, #2
 8001d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	08da      	lsrs	r2, r3, #3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	3208      	adds	r2, #8
 8001d40:	6939      	ldr	r1, [r7, #16]
 8001d42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	2203      	movs	r2, #3
 8001d52:	fa02 f303 	lsl.w	r3, r2, r3
 8001d56:	43db      	mvns	r3, r3
 8001d58:	693a      	ldr	r2, [r7, #16]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f003 0203 	and.w	r2, r3, #3
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	f000 80a6 	beq.w	8001ed4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d88:	4b5b      	ldr	r3, [pc, #364]	; (8001ef8 <HAL_GPIO_Init+0x2e4>)
 8001d8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d8c:	4a5a      	ldr	r2, [pc, #360]	; (8001ef8 <HAL_GPIO_Init+0x2e4>)
 8001d8e:	f043 0301 	orr.w	r3, r3, #1
 8001d92:	6613      	str	r3, [r2, #96]	; 0x60
 8001d94:	4b58      	ldr	r3, [pc, #352]	; (8001ef8 <HAL_GPIO_Init+0x2e4>)
 8001d96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d98:	f003 0301 	and.w	r3, r3, #1
 8001d9c:	60bb      	str	r3, [r7, #8]
 8001d9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001da0:	4a56      	ldr	r2, [pc, #344]	; (8001efc <HAL_GPIO_Init+0x2e8>)
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	089b      	lsrs	r3, r3, #2
 8001da6:	3302      	adds	r3, #2
 8001da8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	f003 0303 	and.w	r3, r3, #3
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	220f      	movs	r2, #15
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001dca:	d01f      	beq.n	8001e0c <HAL_GPIO_Init+0x1f8>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4a4c      	ldr	r2, [pc, #304]	; (8001f00 <HAL_GPIO_Init+0x2ec>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d019      	beq.n	8001e08 <HAL_GPIO_Init+0x1f4>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	4a4b      	ldr	r2, [pc, #300]	; (8001f04 <HAL_GPIO_Init+0x2f0>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d013      	beq.n	8001e04 <HAL_GPIO_Init+0x1f0>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	4a4a      	ldr	r2, [pc, #296]	; (8001f08 <HAL_GPIO_Init+0x2f4>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d00d      	beq.n	8001e00 <HAL_GPIO_Init+0x1ec>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4a49      	ldr	r2, [pc, #292]	; (8001f0c <HAL_GPIO_Init+0x2f8>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d007      	beq.n	8001dfc <HAL_GPIO_Init+0x1e8>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	4a48      	ldr	r2, [pc, #288]	; (8001f10 <HAL_GPIO_Init+0x2fc>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d101      	bne.n	8001df8 <HAL_GPIO_Init+0x1e4>
 8001df4:	2305      	movs	r3, #5
 8001df6:	e00a      	b.n	8001e0e <HAL_GPIO_Init+0x1fa>
 8001df8:	2306      	movs	r3, #6
 8001dfa:	e008      	b.n	8001e0e <HAL_GPIO_Init+0x1fa>
 8001dfc:	2304      	movs	r3, #4
 8001dfe:	e006      	b.n	8001e0e <HAL_GPIO_Init+0x1fa>
 8001e00:	2303      	movs	r3, #3
 8001e02:	e004      	b.n	8001e0e <HAL_GPIO_Init+0x1fa>
 8001e04:	2302      	movs	r3, #2
 8001e06:	e002      	b.n	8001e0e <HAL_GPIO_Init+0x1fa>
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e000      	b.n	8001e0e <HAL_GPIO_Init+0x1fa>
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	697a      	ldr	r2, [r7, #20]
 8001e10:	f002 0203 	and.w	r2, r2, #3
 8001e14:	0092      	lsls	r2, r2, #2
 8001e16:	4093      	lsls	r3, r2
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e1e:	4937      	ldr	r1, [pc, #220]	; (8001efc <HAL_GPIO_Init+0x2e8>)
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	089b      	lsrs	r3, r3, #2
 8001e24:	3302      	adds	r3, #2
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e2c:	4b39      	ldr	r3, [pc, #228]	; (8001f14 <HAL_GPIO_Init+0x300>)
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	43db      	mvns	r3, r3
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	4013      	ands	r3, r2
 8001e3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d003      	beq.n	8001e50 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e50:	4a30      	ldr	r2, [pc, #192]	; (8001f14 <HAL_GPIO_Init+0x300>)
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e56:	4b2f      	ldr	r3, [pc, #188]	; (8001f14 <HAL_GPIO_Init+0x300>)
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	4013      	ands	r3, r2
 8001e64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d003      	beq.n	8001e7a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e7a:	4a26      	ldr	r2, [pc, #152]	; (8001f14 <HAL_GPIO_Init+0x300>)
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001e80:	4b24      	ldr	r3, [pc, #144]	; (8001f14 <HAL_GPIO_Init+0x300>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ea4:	4a1b      	ldr	r2, [pc, #108]	; (8001f14 <HAL_GPIO_Init+0x300>)
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001eaa:	4b1a      	ldr	r3, [pc, #104]	; (8001f14 <HAL_GPIO_Init+0x300>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	43db      	mvns	r3, r3
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ece:	4a11      	ldr	r2, [pc, #68]	; (8001f14 <HAL_GPIO_Init+0x300>)
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	f47f ae9d 	bne.w	8001c24 <HAL_GPIO_Init+0x10>
  }
}
 8001eea:	bf00      	nop
 8001eec:	bf00      	nop
 8001eee:	371c      	adds	r7, #28
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	40010000 	.word	0x40010000
 8001f00:	48000400 	.word	0x48000400
 8001f04:	48000800 	.word	0x48000800
 8001f08:	48000c00 	.word	0x48000c00
 8001f0c:	48001000 	.word	0x48001000
 8001f10:	48001400 	.word	0x48001400
 8001f14:	40010400 	.word	0x40010400

08001f18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	460b      	mov	r3, r1
 8001f22:	807b      	strh	r3, [r7, #2]
 8001f24:	4613      	mov	r3, r2
 8001f26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f28:	787b      	ldrb	r3, [r7, #1]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f2e:	887a      	ldrh	r2, [r7, #2]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f34:	e002      	b.n	8001f3c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f36:	887a      	ldrh	r2, [r7, #2]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d101      	bne.n	8001f5a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e081      	b.n	800205e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d106      	bne.n	8001f74 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f7ff f91e 	bl	80011b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2224      	movs	r2, #36	; 0x24
 8001f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f022 0201 	bic.w	r2, r2, #1
 8001f8a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685a      	ldr	r2, [r3, #4]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f98:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	689a      	ldr	r2, [r3, #8]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fa8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d107      	bne.n	8001fc2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	689a      	ldr	r2, [r3, #8]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001fbe:	609a      	str	r2, [r3, #8]
 8001fc0:	e006      	b.n	8001fd0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	689a      	ldr	r2, [r3, #8]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001fce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d104      	bne.n	8001fe2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fe0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	6812      	ldr	r2, [r2, #0]
 8001fec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ff0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ff4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68da      	ldr	r2, [r3, #12]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002004:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	691a      	ldr	r2, [r3, #16]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	695b      	ldr	r3, [r3, #20]
 800200e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	699b      	ldr	r3, [r3, #24]
 8002016:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	430a      	orrs	r2, r1
 800201e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	69d9      	ldr	r1, [r3, #28]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a1a      	ldr	r2, [r3, #32]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	430a      	orrs	r2, r1
 800202e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f042 0201 	orr.w	r2, r2, #1
 800203e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2220      	movs	r2, #32
 800204a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2200      	movs	r2, #0
 8002052:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3708      	adds	r7, #8
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
	...

08002068 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b088      	sub	sp, #32
 800206c:	af02      	add	r7, sp, #8
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	607a      	str	r2, [r7, #4]
 8002072:	461a      	mov	r2, r3
 8002074:	460b      	mov	r3, r1
 8002076:	817b      	strh	r3, [r7, #10]
 8002078:	4613      	mov	r3, r2
 800207a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002082:	b2db      	uxtb	r3, r3
 8002084:	2b20      	cmp	r3, #32
 8002086:	f040 80da 	bne.w	800223e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002090:	2b01      	cmp	r3, #1
 8002092:	d101      	bne.n	8002098 <HAL_I2C_Master_Transmit+0x30>
 8002094:	2302      	movs	r3, #2
 8002096:	e0d3      	b.n	8002240 <HAL_I2C_Master_Transmit+0x1d8>
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2201      	movs	r2, #1
 800209c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80020a0:	f7ff fca6 	bl	80019f0 <HAL_GetTick>
 80020a4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	9300      	str	r3, [sp, #0]
 80020aa:	2319      	movs	r3, #25
 80020ac:	2201      	movs	r2, #1
 80020ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80020b2:	68f8      	ldr	r0, [r7, #12]
 80020b4:	f000 faed 	bl	8002692 <I2C_WaitOnFlagUntilTimeout>
 80020b8:	4603      	mov	r3, r0
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d001      	beq.n	80020c2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e0be      	b.n	8002240 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	2221      	movs	r2, #33	; 0x21
 80020c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	2210      	movs	r2, #16
 80020ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2200      	movs	r2, #0
 80020d6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	893a      	ldrh	r2, [r7, #8]
 80020e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2200      	movs	r2, #0
 80020e8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	2bff      	cmp	r3, #255	; 0xff
 80020f2:	d90e      	bls.n	8002112 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	22ff      	movs	r2, #255	; 0xff
 80020f8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020fe:	b2da      	uxtb	r2, r3
 8002100:	8979      	ldrh	r1, [r7, #10]
 8002102:	4b51      	ldr	r3, [pc, #324]	; (8002248 <HAL_I2C_Master_Transmit+0x1e0>)
 8002104:	9300      	str	r3, [sp, #0]
 8002106:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800210a:	68f8      	ldr	r0, [r7, #12]
 800210c:	f000 fce4 	bl	8002ad8 <I2C_TransferConfig>
 8002110:	e06c      	b.n	80021ec <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002116:	b29a      	uxth	r2, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002120:	b2da      	uxtb	r2, r3
 8002122:	8979      	ldrh	r1, [r7, #10]
 8002124:	4b48      	ldr	r3, [pc, #288]	; (8002248 <HAL_I2C_Master_Transmit+0x1e0>)
 8002126:	9300      	str	r3, [sp, #0]
 8002128:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800212c:	68f8      	ldr	r0, [r7, #12]
 800212e:	f000 fcd3 	bl	8002ad8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002132:	e05b      	b.n	80021ec <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002134:	697a      	ldr	r2, [r7, #20]
 8002136:	6a39      	ldr	r1, [r7, #32]
 8002138:	68f8      	ldr	r0, [r7, #12]
 800213a:	f000 faea 	bl	8002712 <I2C_WaitOnTXISFlagUntilTimeout>
 800213e:	4603      	mov	r3, r0
 8002140:	2b00      	cmp	r3, #0
 8002142:	d001      	beq.n	8002148 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e07b      	b.n	8002240 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214c:	781a      	ldrb	r2, [r3, #0]
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002158:	1c5a      	adds	r2, r3, #1
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002162:	b29b      	uxth	r3, r3
 8002164:	3b01      	subs	r3, #1
 8002166:	b29a      	uxth	r2, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002170:	3b01      	subs	r3, #1
 8002172:	b29a      	uxth	r2, r3
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800217c:	b29b      	uxth	r3, r3
 800217e:	2b00      	cmp	r3, #0
 8002180:	d034      	beq.n	80021ec <HAL_I2C_Master_Transmit+0x184>
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002186:	2b00      	cmp	r3, #0
 8002188:	d130      	bne.n	80021ec <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	9300      	str	r3, [sp, #0]
 800218e:	6a3b      	ldr	r3, [r7, #32]
 8002190:	2200      	movs	r2, #0
 8002192:	2180      	movs	r1, #128	; 0x80
 8002194:	68f8      	ldr	r0, [r7, #12]
 8002196:	f000 fa7c 	bl	8002692 <I2C_WaitOnFlagUntilTimeout>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e04d      	b.n	8002240 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a8:	b29b      	uxth	r3, r3
 80021aa:	2bff      	cmp	r3, #255	; 0xff
 80021ac:	d90e      	bls.n	80021cc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	22ff      	movs	r2, #255	; 0xff
 80021b2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021b8:	b2da      	uxtb	r2, r3
 80021ba:	8979      	ldrh	r1, [r7, #10]
 80021bc:	2300      	movs	r3, #0
 80021be:	9300      	str	r3, [sp, #0]
 80021c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80021c4:	68f8      	ldr	r0, [r7, #12]
 80021c6:	f000 fc87 	bl	8002ad8 <I2C_TransferConfig>
 80021ca:	e00f      	b.n	80021ec <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d0:	b29a      	uxth	r2, r3
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021da:	b2da      	uxtb	r2, r3
 80021dc:	8979      	ldrh	r1, [r7, #10]
 80021de:	2300      	movs	r3, #0
 80021e0:	9300      	str	r3, [sp, #0]
 80021e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021e6:	68f8      	ldr	r0, [r7, #12]
 80021e8:	f000 fc76 	bl	8002ad8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d19e      	bne.n	8002134 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021f6:	697a      	ldr	r2, [r7, #20]
 80021f8:	6a39      	ldr	r1, [r7, #32]
 80021fa:	68f8      	ldr	r0, [r7, #12]
 80021fc:	f000 fac9 	bl	8002792 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e01a      	b.n	8002240 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	2220      	movs	r2, #32
 8002210:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6859      	ldr	r1, [r3, #4]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	4b0b      	ldr	r3, [pc, #44]	; (800224c <HAL_I2C_Master_Transmit+0x1e4>)
 800221e:	400b      	ands	r3, r1
 8002220:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2220      	movs	r2, #32
 8002226:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800223a:	2300      	movs	r3, #0
 800223c:	e000      	b.n	8002240 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800223e:	2302      	movs	r3, #2
  }
}
 8002240:	4618      	mov	r0, r3
 8002242:	3718      	adds	r7, #24
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	80002000 	.word	0x80002000
 800224c:	fe00e800 	.word	0xfe00e800

08002250 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b088      	sub	sp, #32
 8002254:	af02      	add	r7, sp, #8
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	607a      	str	r2, [r7, #4]
 800225a:	461a      	mov	r2, r3
 800225c:	460b      	mov	r3, r1
 800225e:	817b      	strh	r3, [r7, #10]
 8002260:	4613      	mov	r3, r2
 8002262:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800226a:	b2db      	uxtb	r3, r3
 800226c:	2b20      	cmp	r3, #32
 800226e:	f040 80db 	bne.w	8002428 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002278:	2b01      	cmp	r3, #1
 800227a:	d101      	bne.n	8002280 <HAL_I2C_Master_Receive+0x30>
 800227c:	2302      	movs	r3, #2
 800227e:	e0d4      	b.n	800242a <HAL_I2C_Master_Receive+0x1da>
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002288:	f7ff fbb2 	bl	80019f0 <HAL_GetTick>
 800228c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	9300      	str	r3, [sp, #0]
 8002292:	2319      	movs	r3, #25
 8002294:	2201      	movs	r2, #1
 8002296:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800229a:	68f8      	ldr	r0, [r7, #12]
 800229c:	f000 f9f9 	bl	8002692 <I2C_WaitOnFlagUntilTimeout>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d001      	beq.n	80022aa <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e0bf      	b.n	800242a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2222      	movs	r2, #34	; 0x22
 80022ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2210      	movs	r2, #16
 80022b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2200      	movs	r2, #0
 80022be:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	893a      	ldrh	r2, [r7, #8]
 80022ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2200      	movs	r2, #0
 80022d0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	2bff      	cmp	r3, #255	; 0xff
 80022da:	d90e      	bls.n	80022fa <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	22ff      	movs	r2, #255	; 0xff
 80022e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022e6:	b2da      	uxtb	r2, r3
 80022e8:	8979      	ldrh	r1, [r7, #10]
 80022ea:	4b52      	ldr	r3, [pc, #328]	; (8002434 <HAL_I2C_Master_Receive+0x1e4>)
 80022ec:	9300      	str	r3, [sp, #0]
 80022ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022f2:	68f8      	ldr	r0, [r7, #12]
 80022f4:	f000 fbf0 	bl	8002ad8 <I2C_TransferConfig>
 80022f8:	e06d      	b.n	80023d6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022fe:	b29a      	uxth	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002308:	b2da      	uxtb	r2, r3
 800230a:	8979      	ldrh	r1, [r7, #10]
 800230c:	4b49      	ldr	r3, [pc, #292]	; (8002434 <HAL_I2C_Master_Receive+0x1e4>)
 800230e:	9300      	str	r3, [sp, #0]
 8002310:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002314:	68f8      	ldr	r0, [r7, #12]
 8002316:	f000 fbdf 	bl	8002ad8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800231a:	e05c      	b.n	80023d6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800231c:	697a      	ldr	r2, [r7, #20]
 800231e:	6a39      	ldr	r1, [r7, #32]
 8002320:	68f8      	ldr	r0, [r7, #12]
 8002322:	f000 fa73 	bl	800280c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e07c      	b.n	800242a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233a:	b2d2      	uxtb	r2, r2
 800233c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002342:	1c5a      	adds	r2, r3, #1
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800234c:	3b01      	subs	r3, #1
 800234e:	b29a      	uxth	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002358:	b29b      	uxth	r3, r3
 800235a:	3b01      	subs	r3, #1
 800235c:	b29a      	uxth	r2, r3
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002366:	b29b      	uxth	r3, r3
 8002368:	2b00      	cmp	r3, #0
 800236a:	d034      	beq.n	80023d6 <HAL_I2C_Master_Receive+0x186>
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002370:	2b00      	cmp	r3, #0
 8002372:	d130      	bne.n	80023d6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	9300      	str	r3, [sp, #0]
 8002378:	6a3b      	ldr	r3, [r7, #32]
 800237a:	2200      	movs	r2, #0
 800237c:	2180      	movs	r1, #128	; 0x80
 800237e:	68f8      	ldr	r0, [r7, #12]
 8002380:	f000 f987 	bl	8002692 <I2C_WaitOnFlagUntilTimeout>
 8002384:	4603      	mov	r3, r0
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e04d      	b.n	800242a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002392:	b29b      	uxth	r3, r3
 8002394:	2bff      	cmp	r3, #255	; 0xff
 8002396:	d90e      	bls.n	80023b6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	22ff      	movs	r2, #255	; 0xff
 800239c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	8979      	ldrh	r1, [r7, #10]
 80023a6:	2300      	movs	r3, #0
 80023a8:	9300      	str	r3, [sp, #0]
 80023aa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80023ae:	68f8      	ldr	r0, [r7, #12]
 80023b0:	f000 fb92 	bl	8002ad8 <I2C_TransferConfig>
 80023b4:	e00f      	b.n	80023d6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ba:	b29a      	uxth	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023c4:	b2da      	uxtb	r2, r3
 80023c6:	8979      	ldrh	r1, [r7, #10]
 80023c8:	2300      	movs	r3, #0
 80023ca:	9300      	str	r3, [sp, #0]
 80023cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023d0:	68f8      	ldr	r0, [r7, #12]
 80023d2:	f000 fb81 	bl	8002ad8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023da:	b29b      	uxth	r3, r3
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d19d      	bne.n	800231c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023e0:	697a      	ldr	r2, [r7, #20]
 80023e2:	6a39      	ldr	r1, [r7, #32]
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	f000 f9d4 	bl	8002792 <I2C_WaitOnSTOPFlagUntilTimeout>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e01a      	b.n	800242a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2220      	movs	r2, #32
 80023fa:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	6859      	ldr	r1, [r3, #4]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	4b0c      	ldr	r3, [pc, #48]	; (8002438 <HAL_I2C_Master_Receive+0x1e8>)
 8002408:	400b      	ands	r3, r1
 800240a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2220      	movs	r2, #32
 8002410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002424:	2300      	movs	r3, #0
 8002426:	e000      	b.n	800242a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002428:	2302      	movs	r3, #2
  }
}
 800242a:	4618      	mov	r0, r3
 800242c:	3718      	adds	r7, #24
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	80002400 	.word	0x80002400
 8002438:	fe00e800 	.word	0xfe00e800

0800243c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b08a      	sub	sp, #40	; 0x28
 8002440:	af02      	add	r7, sp, #8
 8002442:	60f8      	str	r0, [r7, #12]
 8002444:	607a      	str	r2, [r7, #4]
 8002446:	603b      	str	r3, [r7, #0]
 8002448:	460b      	mov	r3, r1
 800244a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800244c:	2300      	movs	r3, #0
 800244e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002456:	b2db      	uxtb	r3, r3
 8002458:	2b20      	cmp	r3, #32
 800245a:	f040 80f1 	bne.w	8002640 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002468:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800246c:	d101      	bne.n	8002472 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800246e:	2302      	movs	r3, #2
 8002470:	e0e7      	b.n	8002642 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002478:	2b01      	cmp	r3, #1
 800247a:	d101      	bne.n	8002480 <HAL_I2C_IsDeviceReady+0x44>
 800247c:	2302      	movs	r3, #2
 800247e:	e0e0      	b.n	8002642 <HAL_I2C_IsDeviceReady+0x206>
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2224      	movs	r2, #36	; 0x24
 800248c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2200      	movs	r2, #0
 8002494:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d107      	bne.n	80024ae <HAL_I2C_IsDeviceReady+0x72>
 800249e:	897b      	ldrh	r3, [r7, #10]
 80024a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80024ac:	e004      	b.n	80024b8 <HAL_I2C_IsDeviceReady+0x7c>
 80024ae:	897b      	ldrh	r3, [r7, #10]
 80024b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024b4:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80024b8:	68fa      	ldr	r2, [r7, #12]
 80024ba:	6812      	ldr	r2, [r2, #0]
 80024bc:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80024be:	f7ff fa97 	bl	80019f0 <HAL_GetTick>
 80024c2:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	f003 0320 	and.w	r3, r3, #32
 80024ce:	2b20      	cmp	r3, #32
 80024d0:	bf0c      	ite	eq
 80024d2:	2301      	moveq	r3, #1
 80024d4:	2300      	movne	r3, #0
 80024d6:	b2db      	uxtb	r3, r3
 80024d8:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	f003 0310 	and.w	r3, r3, #16
 80024e4:	2b10      	cmp	r3, #16
 80024e6:	bf0c      	ite	eq
 80024e8:	2301      	moveq	r3, #1
 80024ea:	2300      	movne	r3, #0
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80024f0:	e034      	b.n	800255c <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f8:	d01a      	beq.n	8002530 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80024fa:	f7ff fa79 	bl	80019f0 <HAL_GetTick>
 80024fe:	4602      	mov	r2, r0
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	1ad3      	subs	r3, r2, r3
 8002504:	683a      	ldr	r2, [r7, #0]
 8002506:	429a      	cmp	r2, r3
 8002508:	d302      	bcc.n	8002510 <HAL_I2C_IsDeviceReady+0xd4>
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d10f      	bne.n	8002530 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2220      	movs	r2, #32
 8002514:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251c:	f043 0220 	orr.w	r2, r3, #32
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2200      	movs	r2, #0
 8002528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e088      	b.n	8002642 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	699b      	ldr	r3, [r3, #24]
 8002536:	f003 0320 	and.w	r3, r3, #32
 800253a:	2b20      	cmp	r3, #32
 800253c:	bf0c      	ite	eq
 800253e:	2301      	moveq	r3, #1
 8002540:	2300      	movne	r3, #0
 8002542:	b2db      	uxtb	r3, r3
 8002544:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	699b      	ldr	r3, [r3, #24]
 800254c:	f003 0310 	and.w	r3, r3, #16
 8002550:	2b10      	cmp	r3, #16
 8002552:	bf0c      	ite	eq
 8002554:	2301      	moveq	r3, #1
 8002556:	2300      	movne	r3, #0
 8002558:	b2db      	uxtb	r3, r3
 800255a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800255c:	7ffb      	ldrb	r3, [r7, #31]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d102      	bne.n	8002568 <HAL_I2C_IsDeviceReady+0x12c>
 8002562:	7fbb      	ldrb	r3, [r7, #30]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d0c4      	beq.n	80024f2 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	f003 0310 	and.w	r3, r3, #16
 8002572:	2b10      	cmp	r3, #16
 8002574:	d01a      	beq.n	80025ac <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	9300      	str	r3, [sp, #0]
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	2200      	movs	r2, #0
 800257e:	2120      	movs	r1, #32
 8002580:	68f8      	ldr	r0, [r7, #12]
 8002582:	f000 f886 	bl	8002692 <I2C_WaitOnFlagUntilTimeout>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d001      	beq.n	8002590 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e058      	b.n	8002642 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	2220      	movs	r2, #32
 8002596:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	2220      	movs	r2, #32
 800259c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80025a8:	2300      	movs	r3, #0
 80025aa:	e04a      	b.n	8002642 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	9300      	str	r3, [sp, #0]
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	2200      	movs	r2, #0
 80025b4:	2120      	movs	r1, #32
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f000 f86b 	bl	8002692 <I2C_WaitOnFlagUntilTimeout>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e03d      	b.n	8002642 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	2210      	movs	r2, #16
 80025cc:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2220      	movs	r2, #32
 80025d4:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	429a      	cmp	r2, r3
 80025dc:	d118      	bne.n	8002610 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	685a      	ldr	r2, [r3, #4]
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80025ec:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	2200      	movs	r2, #0
 80025f6:	2120      	movs	r1, #32
 80025f8:	68f8      	ldr	r0, [r7, #12]
 80025fa:	f000 f84a 	bl	8002692 <I2C_WaitOnFlagUntilTimeout>
 80025fe:	4603      	mov	r3, r0
 8002600:	2b00      	cmp	r3, #0
 8002602:	d001      	beq.n	8002608 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e01c      	b.n	8002642 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2220      	movs	r2, #32
 800260e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002610:	697b      	ldr	r3, [r7, #20]
 8002612:	3301      	adds	r3, #1
 8002614:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	429a      	cmp	r2, r3
 800261c:	f63f af3b 	bhi.w	8002496 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	2220      	movs	r2, #32
 8002624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800262c:	f043 0220 	orr.w	r2, r3, #32
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e000      	b.n	8002642 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8002640:	2302      	movs	r3, #2
  }
}
 8002642:	4618      	mov	r0, r3
 8002644:	3720      	adds	r7, #32
 8002646:	46bd      	mov	sp, r7
 8002648:	bd80      	pop	{r7, pc}

0800264a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800264a:	b480      	push	{r7}
 800264c:	b083      	sub	sp, #12
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	699b      	ldr	r3, [r3, #24]
 8002658:	f003 0302 	and.w	r3, r3, #2
 800265c:	2b02      	cmp	r3, #2
 800265e:	d103      	bne.n	8002668 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2200      	movs	r2, #0
 8002666:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	699b      	ldr	r3, [r3, #24]
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	2b01      	cmp	r3, #1
 8002674:	d007      	beq.n	8002686 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	699a      	ldr	r2, [r3, #24]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f042 0201 	orr.w	r2, r2, #1
 8002684:	619a      	str	r2, [r3, #24]
  }
}
 8002686:	bf00      	nop
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr

08002692 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002692:	b580      	push	{r7, lr}
 8002694:	b084      	sub	sp, #16
 8002696:	af00      	add	r7, sp, #0
 8002698:	60f8      	str	r0, [r7, #12]
 800269a:	60b9      	str	r1, [r7, #8]
 800269c:	603b      	str	r3, [r7, #0]
 800269e:	4613      	mov	r3, r2
 80026a0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026a2:	e022      	b.n	80026ea <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026aa:	d01e      	beq.n	80026ea <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026ac:	f7ff f9a0 	bl	80019f0 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	69bb      	ldr	r3, [r7, #24]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	683a      	ldr	r2, [r7, #0]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d302      	bcc.n	80026c2 <I2C_WaitOnFlagUntilTimeout+0x30>
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d113      	bne.n	80026ea <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c6:	f043 0220 	orr.w	r2, r3, #32
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2220      	movs	r2, #32
 80026d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e00f      	b.n	800270a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	699a      	ldr	r2, [r3, #24]
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	4013      	ands	r3, r2
 80026f4:	68ba      	ldr	r2, [r7, #8]
 80026f6:	429a      	cmp	r2, r3
 80026f8:	bf0c      	ite	eq
 80026fa:	2301      	moveq	r3, #1
 80026fc:	2300      	movne	r3, #0
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	461a      	mov	r2, r3
 8002702:	79fb      	ldrb	r3, [r7, #7]
 8002704:	429a      	cmp	r2, r3
 8002706:	d0cd      	beq.n	80026a4 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002708:	2300      	movs	r3, #0
}
 800270a:	4618      	mov	r0, r3
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b084      	sub	sp, #16
 8002716:	af00      	add	r7, sp, #0
 8002718:	60f8      	str	r0, [r7, #12]
 800271a:	60b9      	str	r1, [r7, #8]
 800271c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800271e:	e02c      	b.n	800277a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	68b9      	ldr	r1, [r7, #8]
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	f000 f8eb 	bl	8002900 <I2C_IsErrorOccurred>
 800272a:	4603      	mov	r3, r0
 800272c:	2b00      	cmp	r3, #0
 800272e:	d001      	beq.n	8002734 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e02a      	b.n	800278a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800273a:	d01e      	beq.n	800277a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800273c:	f7ff f958 	bl	80019f0 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	68ba      	ldr	r2, [r7, #8]
 8002748:	429a      	cmp	r2, r3
 800274a:	d302      	bcc.n	8002752 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d113      	bne.n	800277a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002756:	f043 0220 	orr.w	r2, r3, #32
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2220      	movs	r2, #32
 8002762:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e007      	b.n	800278a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b02      	cmp	r3, #2
 8002786:	d1cb      	bne.n	8002720 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002792:	b580      	push	{r7, lr}
 8002794:	b084      	sub	sp, #16
 8002796:	af00      	add	r7, sp, #0
 8002798:	60f8      	str	r0, [r7, #12]
 800279a:	60b9      	str	r1, [r7, #8]
 800279c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800279e:	e028      	b.n	80027f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	68b9      	ldr	r1, [r7, #8]
 80027a4:	68f8      	ldr	r0, [r7, #12]
 80027a6:	f000 f8ab 	bl	8002900 <I2C_IsErrorOccurred>
 80027aa:	4603      	mov	r3, r0
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d001      	beq.n	80027b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e026      	b.n	8002802 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027b4:	f7ff f91c 	bl	80019f0 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	68ba      	ldr	r2, [r7, #8]
 80027c0:	429a      	cmp	r2, r3
 80027c2:	d302      	bcc.n	80027ca <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d113      	bne.n	80027f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ce:	f043 0220 	orr.w	r2, r3, #32
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2220      	movs	r2, #32
 80027da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e007      	b.n	8002802 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	699b      	ldr	r3, [r3, #24]
 80027f8:	f003 0320 	and.w	r3, r3, #32
 80027fc:	2b20      	cmp	r3, #32
 80027fe:	d1cf      	bne.n	80027a0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3710      	adds	r7, #16
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
	...

0800280c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b084      	sub	sp, #16
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002818:	e064      	b.n	80028e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	68b9      	ldr	r1, [r7, #8]
 800281e:	68f8      	ldr	r0, [r7, #12]
 8002820:	f000 f86e 	bl	8002900 <I2C_IsErrorOccurred>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e062      	b.n	80028f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	f003 0320 	and.w	r3, r3, #32
 8002838:	2b20      	cmp	r3, #32
 800283a:	d138      	bne.n	80028ae <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	f003 0304 	and.w	r3, r3, #4
 8002846:	2b04      	cmp	r3, #4
 8002848:	d105      	bne.n	8002856 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002852:	2300      	movs	r3, #0
 8002854:	e04e      	b.n	80028f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	f003 0310 	and.w	r3, r3, #16
 8002860:	2b10      	cmp	r3, #16
 8002862:	d107      	bne.n	8002874 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2210      	movs	r2, #16
 800286a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2204      	movs	r2, #4
 8002870:	645a      	str	r2, [r3, #68]	; 0x44
 8002872:	e002      	b.n	800287a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2200      	movs	r2, #0
 8002878:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2220      	movs	r2, #32
 8002880:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6859      	ldr	r1, [r3, #4]
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	4b1b      	ldr	r3, [pc, #108]	; (80028fc <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800288e:	400b      	ands	r3, r1
 8002890:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2220      	movs	r2, #32
 8002896:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e022      	b.n	80028f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028ae:	f7ff f89f 	bl	80019f0 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	68ba      	ldr	r2, [r7, #8]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d302      	bcc.n	80028c4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d10f      	bne.n	80028e4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c8:	f043 0220 	orr.w	r2, r3, #32
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2220      	movs	r2, #32
 80028d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e007      	b.n	80028f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	f003 0304 	and.w	r3, r3, #4
 80028ee:	2b04      	cmp	r3, #4
 80028f0:	d193      	bne.n	800281a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3710      	adds	r7, #16
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	fe00e800 	.word	0xfe00e800

08002900 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b08a      	sub	sp, #40	; 0x28
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800290c:	2300      	movs	r3, #0
 800290e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800291a:	2300      	movs	r3, #0
 800291c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	f003 0310 	and.w	r3, r3, #16
 8002928:	2b00      	cmp	r3, #0
 800292a:	d075      	beq.n	8002a18 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	2210      	movs	r2, #16
 8002932:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002934:	e056      	b.n	80029e4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800293c:	d052      	beq.n	80029e4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800293e:	f7ff f857 	bl	80019f0 <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	68ba      	ldr	r2, [r7, #8]
 800294a:	429a      	cmp	r2, r3
 800294c:	d302      	bcc.n	8002954 <I2C_IsErrorOccurred+0x54>
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d147      	bne.n	80029e4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800295e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002966:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002972:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002976:	d12e      	bne.n	80029d6 <I2C_IsErrorOccurred+0xd6>
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800297e:	d02a      	beq.n	80029d6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002980:	7cfb      	ldrb	r3, [r7, #19]
 8002982:	2b20      	cmp	r3, #32
 8002984:	d027      	beq.n	80029d6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	685a      	ldr	r2, [r3, #4]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002994:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002996:	f7ff f82b 	bl	80019f0 <HAL_GetTick>
 800299a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800299c:	e01b      	b.n	80029d6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800299e:	f7ff f827 	bl	80019f0 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2b19      	cmp	r3, #25
 80029aa:	d914      	bls.n	80029d6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b0:	f043 0220 	orr.w	r2, r3, #32
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	2220      	movs	r2, #32
 80029bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	699b      	ldr	r3, [r3, #24]
 80029dc:	f003 0320 	and.w	r3, r3, #32
 80029e0:	2b20      	cmp	r3, #32
 80029e2:	d1dc      	bne.n	800299e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	f003 0320 	and.w	r3, r3, #32
 80029ee:	2b20      	cmp	r3, #32
 80029f0:	d003      	beq.n	80029fa <I2C_IsErrorOccurred+0xfa>
 80029f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d09d      	beq.n	8002936 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80029fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d103      	bne.n	8002a0a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2220      	movs	r2, #32
 8002a08:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002a0a:	6a3b      	ldr	r3, [r7, #32]
 8002a0c:	f043 0304 	orr.w	r3, r3, #4
 8002a10:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00b      	beq.n	8002a42 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002a2a:	6a3b      	ldr	r3, [r7, #32]
 8002a2c:	f043 0301 	orr.w	r3, r3, #1
 8002a30:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a3a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d00b      	beq.n	8002a64 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002a4c:	6a3b      	ldr	r3, [r7, #32]
 8002a4e:	f043 0308 	orr.w	r3, r3, #8
 8002a52:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a5c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002a64:	69bb      	ldr	r3, [r7, #24]
 8002a66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00b      	beq.n	8002a86 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002a6e:	6a3b      	ldr	r3, [r7, #32]
 8002a70:	f043 0302 	orr.w	r3, r3, #2
 8002a74:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a7e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002a86:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d01c      	beq.n	8002ac8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002a8e:	68f8      	ldr	r0, [r7, #12]
 8002a90:	f7ff fddb 	bl	800264a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	6859      	ldr	r1, [r3, #4]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	4b0d      	ldr	r3, [pc, #52]	; (8002ad4 <I2C_IsErrorOccurred+0x1d4>)
 8002aa0:	400b      	ands	r3, r1
 8002aa2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002aa8:	6a3b      	ldr	r3, [r7, #32]
 8002aaa:	431a      	orrs	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2220      	movs	r2, #32
 8002ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002ac8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002acc:	4618      	mov	r0, r3
 8002ace:	3728      	adds	r7, #40	; 0x28
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	fe00e800 	.word	0xfe00e800

08002ad8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b087      	sub	sp, #28
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	607b      	str	r3, [r7, #4]
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	817b      	strh	r3, [r7, #10]
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002aea:	897b      	ldrh	r3, [r7, #10]
 8002aec:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002af0:	7a7b      	ldrb	r3, [r7, #9]
 8002af2:	041b      	lsls	r3, r3, #16
 8002af4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002af8:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002afe:	6a3b      	ldr	r3, [r7, #32]
 8002b00:	4313      	orrs	r3, r2
 8002b02:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b06:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	685a      	ldr	r2, [r3, #4]
 8002b0e:	6a3b      	ldr	r3, [r7, #32]
 8002b10:	0d5b      	lsrs	r3, r3, #21
 8002b12:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002b16:	4b08      	ldr	r3, [pc, #32]	; (8002b38 <I2C_TransferConfig+0x60>)
 8002b18:	430b      	orrs	r3, r1
 8002b1a:	43db      	mvns	r3, r3
 8002b1c:	ea02 0103 	and.w	r1, r2, r3
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	697a      	ldr	r2, [r7, #20]
 8002b26:	430a      	orrs	r2, r1
 8002b28:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002b2a:	bf00      	nop
 8002b2c:	371c      	adds	r7, #28
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	03ff63ff 	.word	0x03ff63ff

08002b3c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b20      	cmp	r3, #32
 8002b50:	d138      	bne.n	8002bc4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d101      	bne.n	8002b60 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	e032      	b.n	8002bc6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2224      	movs	r2, #36	; 0x24
 8002b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f022 0201 	bic.w	r2, r2, #1
 8002b7e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b8e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	6819      	ldr	r1, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	683a      	ldr	r2, [r7, #0]
 8002b9c:	430a      	orrs	r2, r1
 8002b9e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f042 0201 	orr.w	r2, r2, #1
 8002bae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2220      	movs	r2, #32
 8002bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	e000      	b.n	8002bc6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002bc4:	2302      	movs	r3, #2
  }
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr

08002bd2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b085      	sub	sp, #20
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
 8002bda:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	2b20      	cmp	r3, #32
 8002be6:	d139      	bne.n	8002c5c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d101      	bne.n	8002bf6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	e033      	b.n	8002c5e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2224      	movs	r2, #36	; 0x24
 8002c02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f022 0201 	bic.w	r2, r2, #1
 8002c14:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c24:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	021b      	lsls	r3, r3, #8
 8002c2a:	68fa      	ldr	r2, [r7, #12]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68fa      	ldr	r2, [r7, #12]
 8002c36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681a      	ldr	r2, [r3, #0]
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f042 0201 	orr.w	r2, r2, #1
 8002c46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2220      	movs	r2, #32
 8002c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	e000      	b.n	8002c5e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c5c:	2302      	movs	r3, #2
  }
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3714      	adds	r7, #20
 8002c62:	46bd      	mov	sp, r7
 8002c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c68:	4770      	bx	lr
	...

08002c6c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b085      	sub	sp, #20
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d141      	bne.n	8002cfe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c7a:	4b4b      	ldr	r3, [pc, #300]	; (8002da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c86:	d131      	bne.n	8002cec <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c88:	4b47      	ldr	r3, [pc, #284]	; (8002da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c8e:	4a46      	ldr	r2, [pc, #280]	; (8002da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c94:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c98:	4b43      	ldr	r3, [pc, #268]	; (8002da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ca0:	4a41      	ldr	r2, [pc, #260]	; (8002da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ca2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ca6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ca8:	4b40      	ldr	r3, [pc, #256]	; (8002dac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2232      	movs	r2, #50	; 0x32
 8002cae:	fb02 f303 	mul.w	r3, r2, r3
 8002cb2:	4a3f      	ldr	r2, [pc, #252]	; (8002db0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb8:	0c9b      	lsrs	r3, r3, #18
 8002cba:	3301      	adds	r3, #1
 8002cbc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cbe:	e002      	b.n	8002cc6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cc6:	4b38      	ldr	r3, [pc, #224]	; (8002da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cd2:	d102      	bne.n	8002cda <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1f2      	bne.n	8002cc0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002cda:	4b33      	ldr	r3, [pc, #204]	; (8002da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cdc:	695b      	ldr	r3, [r3, #20]
 8002cde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ce2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ce6:	d158      	bne.n	8002d9a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e057      	b.n	8002d9c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002cec:	4b2e      	ldr	r3, [pc, #184]	; (8002da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cf2:	4a2d      	ldr	r2, [pc, #180]	; (8002da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cf4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cf8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002cfc:	e04d      	b.n	8002d9a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d04:	d141      	bne.n	8002d8a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d06:	4b28      	ldr	r3, [pc, #160]	; (8002da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d12:	d131      	bne.n	8002d78 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d14:	4b24      	ldr	r3, [pc, #144]	; (8002da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d1a:	4a23      	ldr	r2, [pc, #140]	; (8002da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d20:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d24:	4b20      	ldr	r3, [pc, #128]	; (8002da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d2c:	4a1e      	ldr	r2, [pc, #120]	; (8002da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d32:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d34:	4b1d      	ldr	r3, [pc, #116]	; (8002dac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2232      	movs	r2, #50	; 0x32
 8002d3a:	fb02 f303 	mul.w	r3, r2, r3
 8002d3e:	4a1c      	ldr	r2, [pc, #112]	; (8002db0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002d40:	fba2 2303 	umull	r2, r3, r2, r3
 8002d44:	0c9b      	lsrs	r3, r3, #18
 8002d46:	3301      	adds	r3, #1
 8002d48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d4a:	e002      	b.n	8002d52 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	3b01      	subs	r3, #1
 8002d50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d52:	4b15      	ldr	r3, [pc, #84]	; (8002da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d54:	695b      	ldr	r3, [r3, #20]
 8002d56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d5e:	d102      	bne.n	8002d66 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d1f2      	bne.n	8002d4c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d66:	4b10      	ldr	r3, [pc, #64]	; (8002da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d68:	695b      	ldr	r3, [r3, #20]
 8002d6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d72:	d112      	bne.n	8002d9a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002d74:	2303      	movs	r3, #3
 8002d76:	e011      	b.n	8002d9c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d78:	4b0b      	ldr	r3, [pc, #44]	; (8002da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d7e:	4a0a      	ldr	r2, [pc, #40]	; (8002da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d84:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002d88:	e007      	b.n	8002d9a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d8a:	4b07      	ldr	r3, [pc, #28]	; (8002da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d92:	4a05      	ldr	r2, [pc, #20]	; (8002da8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d94:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d98:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3714      	adds	r7, #20
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	40007000 	.word	0x40007000
 8002dac:	20000000 	.word	0x20000000
 8002db0:	431bde83 	.word	0x431bde83

08002db4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002db8:	4b05      	ldr	r3, [pc, #20]	; (8002dd0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002dba:	689b      	ldr	r3, [r3, #8]
 8002dbc:	4a04      	ldr	r2, [pc, #16]	; (8002dd0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002dbe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dc2:	6093      	str	r3, [r2, #8]
}
 8002dc4:	bf00      	nop
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	40007000 	.word	0x40007000

08002dd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b088      	sub	sp, #32
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d101      	bne.n	8002de6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002de2:	2301      	movs	r3, #1
 8002de4:	e306      	b.n	80033f4 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d075      	beq.n	8002ede <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002df2:	4b97      	ldr	r3, [pc, #604]	; (8003050 <HAL_RCC_OscConfig+0x27c>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f003 030c 	and.w	r3, r3, #12
 8002dfa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002dfc:	4b94      	ldr	r3, [pc, #592]	; (8003050 <HAL_RCC_OscConfig+0x27c>)
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	f003 0303 	and.w	r3, r3, #3
 8002e04:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	2b0c      	cmp	r3, #12
 8002e0a:	d102      	bne.n	8002e12 <HAL_RCC_OscConfig+0x3e>
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	2b03      	cmp	r3, #3
 8002e10:	d002      	beq.n	8002e18 <HAL_RCC_OscConfig+0x44>
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	2b08      	cmp	r3, #8
 8002e16:	d10b      	bne.n	8002e30 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e18:	4b8d      	ldr	r3, [pc, #564]	; (8003050 <HAL_RCC_OscConfig+0x27c>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d05b      	beq.n	8002edc <HAL_RCC_OscConfig+0x108>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d157      	bne.n	8002edc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e2e1      	b.n	80033f4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e38:	d106      	bne.n	8002e48 <HAL_RCC_OscConfig+0x74>
 8002e3a:	4b85      	ldr	r3, [pc, #532]	; (8003050 <HAL_RCC_OscConfig+0x27c>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a84      	ldr	r2, [pc, #528]	; (8003050 <HAL_RCC_OscConfig+0x27c>)
 8002e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e44:	6013      	str	r3, [r2, #0]
 8002e46:	e01d      	b.n	8002e84 <HAL_RCC_OscConfig+0xb0>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e50:	d10c      	bne.n	8002e6c <HAL_RCC_OscConfig+0x98>
 8002e52:	4b7f      	ldr	r3, [pc, #508]	; (8003050 <HAL_RCC_OscConfig+0x27c>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a7e      	ldr	r2, [pc, #504]	; (8003050 <HAL_RCC_OscConfig+0x27c>)
 8002e58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e5c:	6013      	str	r3, [r2, #0]
 8002e5e:	4b7c      	ldr	r3, [pc, #496]	; (8003050 <HAL_RCC_OscConfig+0x27c>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a7b      	ldr	r2, [pc, #492]	; (8003050 <HAL_RCC_OscConfig+0x27c>)
 8002e64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e68:	6013      	str	r3, [r2, #0]
 8002e6a:	e00b      	b.n	8002e84 <HAL_RCC_OscConfig+0xb0>
 8002e6c:	4b78      	ldr	r3, [pc, #480]	; (8003050 <HAL_RCC_OscConfig+0x27c>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a77      	ldr	r2, [pc, #476]	; (8003050 <HAL_RCC_OscConfig+0x27c>)
 8002e72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e76:	6013      	str	r3, [r2, #0]
 8002e78:	4b75      	ldr	r3, [pc, #468]	; (8003050 <HAL_RCC_OscConfig+0x27c>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a74      	ldr	r2, [pc, #464]	; (8003050 <HAL_RCC_OscConfig+0x27c>)
 8002e7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d013      	beq.n	8002eb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e8c:	f7fe fdb0 	bl	80019f0 <HAL_GetTick>
 8002e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e92:	e008      	b.n	8002ea6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e94:	f7fe fdac 	bl	80019f0 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b64      	cmp	r3, #100	; 0x64
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e2a6      	b.n	80033f4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ea6:	4b6a      	ldr	r3, [pc, #424]	; (8003050 <HAL_RCC_OscConfig+0x27c>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d0f0      	beq.n	8002e94 <HAL_RCC_OscConfig+0xc0>
 8002eb2:	e014      	b.n	8002ede <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb4:	f7fe fd9c 	bl	80019f0 <HAL_GetTick>
 8002eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002eba:	e008      	b.n	8002ece <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ebc:	f7fe fd98 	bl	80019f0 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b64      	cmp	r3, #100	; 0x64
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e292      	b.n	80033f4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ece:	4b60      	ldr	r3, [pc, #384]	; (8003050 <HAL_RCC_OscConfig+0x27c>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1f0      	bne.n	8002ebc <HAL_RCC_OscConfig+0xe8>
 8002eda:	e000      	b.n	8002ede <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002edc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d075      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002eea:	4b59      	ldr	r3, [pc, #356]	; (8003050 <HAL_RCC_OscConfig+0x27c>)
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f003 030c 	and.w	r3, r3, #12
 8002ef2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ef4:	4b56      	ldr	r3, [pc, #344]	; (8003050 <HAL_RCC_OscConfig+0x27c>)
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	f003 0303 	and.w	r3, r3, #3
 8002efc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	2b0c      	cmp	r3, #12
 8002f02:	d102      	bne.n	8002f0a <HAL_RCC_OscConfig+0x136>
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	2b02      	cmp	r3, #2
 8002f08:	d002      	beq.n	8002f10 <HAL_RCC_OscConfig+0x13c>
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	2b04      	cmp	r3, #4
 8002f0e:	d11f      	bne.n	8002f50 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f10:	4b4f      	ldr	r3, [pc, #316]	; (8003050 <HAL_RCC_OscConfig+0x27c>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d005      	beq.n	8002f28 <HAL_RCC_OscConfig+0x154>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	68db      	ldr	r3, [r3, #12]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d101      	bne.n	8002f28 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e265      	b.n	80033f4 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f28:	4b49      	ldr	r3, [pc, #292]	; (8003050 <HAL_RCC_OscConfig+0x27c>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	061b      	lsls	r3, r3, #24
 8002f36:	4946      	ldr	r1, [pc, #280]	; (8003050 <HAL_RCC_OscConfig+0x27c>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002f3c:	4b45      	ldr	r3, [pc, #276]	; (8003054 <HAL_RCC_OscConfig+0x280>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7fe fd09 	bl	8001958 <HAL_InitTick>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d043      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e251      	b.n	80033f4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d023      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f58:	4b3d      	ldr	r3, [pc, #244]	; (8003050 <HAL_RCC_OscConfig+0x27c>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a3c      	ldr	r2, [pc, #240]	; (8003050 <HAL_RCC_OscConfig+0x27c>)
 8002f5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f64:	f7fe fd44 	bl	80019f0 <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f6c:	f7fe fd40 	bl	80019f0 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e23a      	b.n	80033f4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f7e:	4b34      	ldr	r3, [pc, #208]	; (8003050 <HAL_RCC_OscConfig+0x27c>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d0f0      	beq.n	8002f6c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f8a:	4b31      	ldr	r3, [pc, #196]	; (8003050 <HAL_RCC_OscConfig+0x27c>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	061b      	lsls	r3, r3, #24
 8002f98:	492d      	ldr	r1, [pc, #180]	; (8003050 <HAL_RCC_OscConfig+0x27c>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	604b      	str	r3, [r1, #4]
 8002f9e:	e01a      	b.n	8002fd6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fa0:	4b2b      	ldr	r3, [pc, #172]	; (8003050 <HAL_RCC_OscConfig+0x27c>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a2a      	ldr	r2, [pc, #168]	; (8003050 <HAL_RCC_OscConfig+0x27c>)
 8002fa6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002faa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fac:	f7fe fd20 	bl	80019f0 <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fb4:	f7fe fd1c 	bl	80019f0 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e216      	b.n	80033f4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fc6:	4b22      	ldr	r3, [pc, #136]	; (8003050 <HAL_RCC_OscConfig+0x27c>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1f0      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x1e0>
 8002fd2:	e000      	b.n	8002fd6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fd4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0308 	and.w	r3, r3, #8
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d041      	beq.n	8003066 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d01c      	beq.n	8003024 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fea:	4b19      	ldr	r3, [pc, #100]	; (8003050 <HAL_RCC_OscConfig+0x27c>)
 8002fec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ff0:	4a17      	ldr	r2, [pc, #92]	; (8003050 <HAL_RCC_OscConfig+0x27c>)
 8002ff2:	f043 0301 	orr.w	r3, r3, #1
 8002ff6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ffa:	f7fe fcf9 	bl	80019f0 <HAL_GetTick>
 8002ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003000:	e008      	b.n	8003014 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003002:	f7fe fcf5 	bl	80019f0 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	2b02      	cmp	r3, #2
 800300e:	d901      	bls.n	8003014 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003010:	2303      	movs	r3, #3
 8003012:	e1ef      	b.n	80033f4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003014:	4b0e      	ldr	r3, [pc, #56]	; (8003050 <HAL_RCC_OscConfig+0x27c>)
 8003016:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800301a:	f003 0302 	and.w	r3, r3, #2
 800301e:	2b00      	cmp	r3, #0
 8003020:	d0ef      	beq.n	8003002 <HAL_RCC_OscConfig+0x22e>
 8003022:	e020      	b.n	8003066 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003024:	4b0a      	ldr	r3, [pc, #40]	; (8003050 <HAL_RCC_OscConfig+0x27c>)
 8003026:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800302a:	4a09      	ldr	r2, [pc, #36]	; (8003050 <HAL_RCC_OscConfig+0x27c>)
 800302c:	f023 0301 	bic.w	r3, r3, #1
 8003030:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003034:	f7fe fcdc 	bl	80019f0 <HAL_GetTick>
 8003038:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800303a:	e00d      	b.n	8003058 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800303c:	f7fe fcd8 	bl	80019f0 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b02      	cmp	r3, #2
 8003048:	d906      	bls.n	8003058 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e1d2      	b.n	80033f4 <HAL_RCC_OscConfig+0x620>
 800304e:	bf00      	nop
 8003050:	40021000 	.word	0x40021000
 8003054:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003058:	4b8c      	ldr	r3, [pc, #560]	; (800328c <HAL_RCC_OscConfig+0x4b8>)
 800305a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800305e:	f003 0302 	and.w	r3, r3, #2
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1ea      	bne.n	800303c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0304 	and.w	r3, r3, #4
 800306e:	2b00      	cmp	r3, #0
 8003070:	f000 80a6 	beq.w	80031c0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003074:	2300      	movs	r3, #0
 8003076:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003078:	4b84      	ldr	r3, [pc, #528]	; (800328c <HAL_RCC_OscConfig+0x4b8>)
 800307a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800307c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d101      	bne.n	8003088 <HAL_RCC_OscConfig+0x2b4>
 8003084:	2301      	movs	r3, #1
 8003086:	e000      	b.n	800308a <HAL_RCC_OscConfig+0x2b6>
 8003088:	2300      	movs	r3, #0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d00d      	beq.n	80030aa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800308e:	4b7f      	ldr	r3, [pc, #508]	; (800328c <HAL_RCC_OscConfig+0x4b8>)
 8003090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003092:	4a7e      	ldr	r2, [pc, #504]	; (800328c <HAL_RCC_OscConfig+0x4b8>)
 8003094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003098:	6593      	str	r3, [r2, #88]	; 0x58
 800309a:	4b7c      	ldr	r3, [pc, #496]	; (800328c <HAL_RCC_OscConfig+0x4b8>)
 800309c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800309e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a2:	60fb      	str	r3, [r7, #12]
 80030a4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80030a6:	2301      	movs	r3, #1
 80030a8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030aa:	4b79      	ldr	r3, [pc, #484]	; (8003290 <HAL_RCC_OscConfig+0x4bc>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d118      	bne.n	80030e8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030b6:	4b76      	ldr	r3, [pc, #472]	; (8003290 <HAL_RCC_OscConfig+0x4bc>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a75      	ldr	r2, [pc, #468]	; (8003290 <HAL_RCC_OscConfig+0x4bc>)
 80030bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030c2:	f7fe fc95 	bl	80019f0 <HAL_GetTick>
 80030c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030c8:	e008      	b.n	80030dc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ca:	f7fe fc91 	bl	80019f0 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d901      	bls.n	80030dc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e18b      	b.n	80033f4 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030dc:	4b6c      	ldr	r3, [pc, #432]	; (8003290 <HAL_RCC_OscConfig+0x4bc>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d0f0      	beq.n	80030ca <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	689b      	ldr	r3, [r3, #8]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d108      	bne.n	8003102 <HAL_RCC_OscConfig+0x32e>
 80030f0:	4b66      	ldr	r3, [pc, #408]	; (800328c <HAL_RCC_OscConfig+0x4b8>)
 80030f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f6:	4a65      	ldr	r2, [pc, #404]	; (800328c <HAL_RCC_OscConfig+0x4b8>)
 80030f8:	f043 0301 	orr.w	r3, r3, #1
 80030fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003100:	e024      	b.n	800314c <HAL_RCC_OscConfig+0x378>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	2b05      	cmp	r3, #5
 8003108:	d110      	bne.n	800312c <HAL_RCC_OscConfig+0x358>
 800310a:	4b60      	ldr	r3, [pc, #384]	; (800328c <HAL_RCC_OscConfig+0x4b8>)
 800310c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003110:	4a5e      	ldr	r2, [pc, #376]	; (800328c <HAL_RCC_OscConfig+0x4b8>)
 8003112:	f043 0304 	orr.w	r3, r3, #4
 8003116:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800311a:	4b5c      	ldr	r3, [pc, #368]	; (800328c <HAL_RCC_OscConfig+0x4b8>)
 800311c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003120:	4a5a      	ldr	r2, [pc, #360]	; (800328c <HAL_RCC_OscConfig+0x4b8>)
 8003122:	f043 0301 	orr.w	r3, r3, #1
 8003126:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800312a:	e00f      	b.n	800314c <HAL_RCC_OscConfig+0x378>
 800312c:	4b57      	ldr	r3, [pc, #348]	; (800328c <HAL_RCC_OscConfig+0x4b8>)
 800312e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003132:	4a56      	ldr	r2, [pc, #344]	; (800328c <HAL_RCC_OscConfig+0x4b8>)
 8003134:	f023 0301 	bic.w	r3, r3, #1
 8003138:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800313c:	4b53      	ldr	r3, [pc, #332]	; (800328c <HAL_RCC_OscConfig+0x4b8>)
 800313e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003142:	4a52      	ldr	r2, [pc, #328]	; (800328c <HAL_RCC_OscConfig+0x4b8>)
 8003144:	f023 0304 	bic.w	r3, r3, #4
 8003148:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d016      	beq.n	8003182 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003154:	f7fe fc4c 	bl	80019f0 <HAL_GetTick>
 8003158:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800315a:	e00a      	b.n	8003172 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800315c:	f7fe fc48 	bl	80019f0 <HAL_GetTick>
 8003160:	4602      	mov	r2, r0
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	1ad3      	subs	r3, r2, r3
 8003166:	f241 3288 	movw	r2, #5000	; 0x1388
 800316a:	4293      	cmp	r3, r2
 800316c:	d901      	bls.n	8003172 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e140      	b.n	80033f4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003172:	4b46      	ldr	r3, [pc, #280]	; (800328c <HAL_RCC_OscConfig+0x4b8>)
 8003174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d0ed      	beq.n	800315c <HAL_RCC_OscConfig+0x388>
 8003180:	e015      	b.n	80031ae <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003182:	f7fe fc35 	bl	80019f0 <HAL_GetTick>
 8003186:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003188:	e00a      	b.n	80031a0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800318a:	f7fe fc31 	bl	80019f0 <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	f241 3288 	movw	r2, #5000	; 0x1388
 8003198:	4293      	cmp	r3, r2
 800319a:	d901      	bls.n	80031a0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e129      	b.n	80033f4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031a0:	4b3a      	ldr	r3, [pc, #232]	; (800328c <HAL_RCC_OscConfig+0x4b8>)
 80031a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1ed      	bne.n	800318a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031ae:	7ffb      	ldrb	r3, [r7, #31]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d105      	bne.n	80031c0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031b4:	4b35      	ldr	r3, [pc, #212]	; (800328c <HAL_RCC_OscConfig+0x4b8>)
 80031b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031b8:	4a34      	ldr	r2, [pc, #208]	; (800328c <HAL_RCC_OscConfig+0x4b8>)
 80031ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031be:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0320 	and.w	r3, r3, #32
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d03c      	beq.n	8003246 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	699b      	ldr	r3, [r3, #24]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d01c      	beq.n	800320e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80031d4:	4b2d      	ldr	r3, [pc, #180]	; (800328c <HAL_RCC_OscConfig+0x4b8>)
 80031d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031da:	4a2c      	ldr	r2, [pc, #176]	; (800328c <HAL_RCC_OscConfig+0x4b8>)
 80031dc:	f043 0301 	orr.w	r3, r3, #1
 80031e0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e4:	f7fe fc04 	bl	80019f0 <HAL_GetTick>
 80031e8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80031ea:	e008      	b.n	80031fe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031ec:	f7fe fc00 	bl	80019f0 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e0fa      	b.n	80033f4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80031fe:	4b23      	ldr	r3, [pc, #140]	; (800328c <HAL_RCC_OscConfig+0x4b8>)
 8003200:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d0ef      	beq.n	80031ec <HAL_RCC_OscConfig+0x418>
 800320c:	e01b      	b.n	8003246 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800320e:	4b1f      	ldr	r3, [pc, #124]	; (800328c <HAL_RCC_OscConfig+0x4b8>)
 8003210:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003214:	4a1d      	ldr	r2, [pc, #116]	; (800328c <HAL_RCC_OscConfig+0x4b8>)
 8003216:	f023 0301 	bic.w	r3, r3, #1
 800321a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800321e:	f7fe fbe7 	bl	80019f0 <HAL_GetTick>
 8003222:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003224:	e008      	b.n	8003238 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003226:	f7fe fbe3 	bl	80019f0 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	2b02      	cmp	r3, #2
 8003232:	d901      	bls.n	8003238 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e0dd      	b.n	80033f4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003238:	4b14      	ldr	r3, [pc, #80]	; (800328c <HAL_RCC_OscConfig+0x4b8>)
 800323a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1ef      	bne.n	8003226 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	69db      	ldr	r3, [r3, #28]
 800324a:	2b00      	cmp	r3, #0
 800324c:	f000 80d1 	beq.w	80033f2 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003250:	4b0e      	ldr	r3, [pc, #56]	; (800328c <HAL_RCC_OscConfig+0x4b8>)
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f003 030c 	and.w	r3, r3, #12
 8003258:	2b0c      	cmp	r3, #12
 800325a:	f000 808b 	beq.w	8003374 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	69db      	ldr	r3, [r3, #28]
 8003262:	2b02      	cmp	r3, #2
 8003264:	d15e      	bne.n	8003324 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003266:	4b09      	ldr	r3, [pc, #36]	; (800328c <HAL_RCC_OscConfig+0x4b8>)
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a08      	ldr	r2, [pc, #32]	; (800328c <HAL_RCC_OscConfig+0x4b8>)
 800326c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003270:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003272:	f7fe fbbd 	bl	80019f0 <HAL_GetTick>
 8003276:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003278:	e00c      	b.n	8003294 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800327a:	f7fe fbb9 	bl	80019f0 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d905      	bls.n	8003294 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e0b3      	b.n	80033f4 <HAL_RCC_OscConfig+0x620>
 800328c:	40021000 	.word	0x40021000
 8003290:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003294:	4b59      	ldr	r3, [pc, #356]	; (80033fc <HAL_RCC_OscConfig+0x628>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d1ec      	bne.n	800327a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032a0:	4b56      	ldr	r3, [pc, #344]	; (80033fc <HAL_RCC_OscConfig+0x628>)
 80032a2:	68da      	ldr	r2, [r3, #12]
 80032a4:	4b56      	ldr	r3, [pc, #344]	; (8003400 <HAL_RCC_OscConfig+0x62c>)
 80032a6:	4013      	ands	r3, r2
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	6a11      	ldr	r1, [r2, #32]
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032b0:	3a01      	subs	r2, #1
 80032b2:	0112      	lsls	r2, r2, #4
 80032b4:	4311      	orrs	r1, r2
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80032ba:	0212      	lsls	r2, r2, #8
 80032bc:	4311      	orrs	r1, r2
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80032c2:	0852      	lsrs	r2, r2, #1
 80032c4:	3a01      	subs	r2, #1
 80032c6:	0552      	lsls	r2, r2, #21
 80032c8:	4311      	orrs	r1, r2
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80032ce:	0852      	lsrs	r2, r2, #1
 80032d0:	3a01      	subs	r2, #1
 80032d2:	0652      	lsls	r2, r2, #25
 80032d4:	4311      	orrs	r1, r2
 80032d6:	687a      	ldr	r2, [r7, #4]
 80032d8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80032da:	06d2      	lsls	r2, r2, #27
 80032dc:	430a      	orrs	r2, r1
 80032de:	4947      	ldr	r1, [pc, #284]	; (80033fc <HAL_RCC_OscConfig+0x628>)
 80032e0:	4313      	orrs	r3, r2
 80032e2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032e4:	4b45      	ldr	r3, [pc, #276]	; (80033fc <HAL_RCC_OscConfig+0x628>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a44      	ldr	r2, [pc, #272]	; (80033fc <HAL_RCC_OscConfig+0x628>)
 80032ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032ee:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032f0:	4b42      	ldr	r3, [pc, #264]	; (80033fc <HAL_RCC_OscConfig+0x628>)
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	4a41      	ldr	r2, [pc, #260]	; (80033fc <HAL_RCC_OscConfig+0x628>)
 80032f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032fa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032fc:	f7fe fb78 	bl	80019f0 <HAL_GetTick>
 8003300:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003302:	e008      	b.n	8003316 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003304:	f7fe fb74 	bl	80019f0 <HAL_GetTick>
 8003308:	4602      	mov	r2, r0
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	1ad3      	subs	r3, r2, r3
 800330e:	2b02      	cmp	r3, #2
 8003310:	d901      	bls.n	8003316 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003312:	2303      	movs	r3, #3
 8003314:	e06e      	b.n	80033f4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003316:	4b39      	ldr	r3, [pc, #228]	; (80033fc <HAL_RCC_OscConfig+0x628>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d0f0      	beq.n	8003304 <HAL_RCC_OscConfig+0x530>
 8003322:	e066      	b.n	80033f2 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003324:	4b35      	ldr	r3, [pc, #212]	; (80033fc <HAL_RCC_OscConfig+0x628>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a34      	ldr	r2, [pc, #208]	; (80033fc <HAL_RCC_OscConfig+0x628>)
 800332a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800332e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003330:	4b32      	ldr	r3, [pc, #200]	; (80033fc <HAL_RCC_OscConfig+0x628>)
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	4a31      	ldr	r2, [pc, #196]	; (80033fc <HAL_RCC_OscConfig+0x628>)
 8003336:	f023 0303 	bic.w	r3, r3, #3
 800333a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800333c:	4b2f      	ldr	r3, [pc, #188]	; (80033fc <HAL_RCC_OscConfig+0x628>)
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	4a2e      	ldr	r2, [pc, #184]	; (80033fc <HAL_RCC_OscConfig+0x628>)
 8003342:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003346:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800334a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800334c:	f7fe fb50 	bl	80019f0 <HAL_GetTick>
 8003350:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003352:	e008      	b.n	8003366 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003354:	f7fe fb4c 	bl	80019f0 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b02      	cmp	r3, #2
 8003360:	d901      	bls.n	8003366 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e046      	b.n	80033f4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003366:	4b25      	ldr	r3, [pc, #148]	; (80033fc <HAL_RCC_OscConfig+0x628>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1f0      	bne.n	8003354 <HAL_RCC_OscConfig+0x580>
 8003372:	e03e      	b.n	80033f2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	69db      	ldr	r3, [r3, #28]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d101      	bne.n	8003380 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e039      	b.n	80033f4 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003380:	4b1e      	ldr	r3, [pc, #120]	; (80033fc <HAL_RCC_OscConfig+0x628>)
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	f003 0203 	and.w	r2, r3, #3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	429a      	cmp	r2, r3
 8003392:	d12c      	bne.n	80033ee <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339e:	3b01      	subs	r3, #1
 80033a0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d123      	bne.n	80033ee <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d11b      	bne.n	80033ee <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80033c2:	429a      	cmp	r2, r3
 80033c4:	d113      	bne.n	80033ee <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d0:	085b      	lsrs	r3, r3, #1
 80033d2:	3b01      	subs	r3, #1
 80033d4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d109      	bne.n	80033ee <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80033da:	697b      	ldr	r3, [r7, #20]
 80033dc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033e4:	085b      	lsrs	r3, r3, #1
 80033e6:	3b01      	subs	r3, #1
 80033e8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d001      	beq.n	80033f2 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e000      	b.n	80033f4 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3720      	adds	r7, #32
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	40021000 	.word	0x40021000
 8003400:	019f800c 	.word	0x019f800c

08003404 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b086      	sub	sp, #24
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800340e:	2300      	movs	r3, #0
 8003410:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d101      	bne.n	800341c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e11e      	b.n	800365a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800341c:	4b91      	ldr	r3, [pc, #580]	; (8003664 <HAL_RCC_ClockConfig+0x260>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 030f 	and.w	r3, r3, #15
 8003424:	683a      	ldr	r2, [r7, #0]
 8003426:	429a      	cmp	r2, r3
 8003428:	d910      	bls.n	800344c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800342a:	4b8e      	ldr	r3, [pc, #568]	; (8003664 <HAL_RCC_ClockConfig+0x260>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f023 020f 	bic.w	r2, r3, #15
 8003432:	498c      	ldr	r1, [pc, #560]	; (8003664 <HAL_RCC_ClockConfig+0x260>)
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	4313      	orrs	r3, r2
 8003438:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800343a:	4b8a      	ldr	r3, [pc, #552]	; (8003664 <HAL_RCC_ClockConfig+0x260>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 030f 	and.w	r3, r3, #15
 8003442:	683a      	ldr	r2, [r7, #0]
 8003444:	429a      	cmp	r2, r3
 8003446:	d001      	beq.n	800344c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e106      	b.n	800365a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0301 	and.w	r3, r3, #1
 8003454:	2b00      	cmp	r3, #0
 8003456:	d073      	beq.n	8003540 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	2b03      	cmp	r3, #3
 800345e:	d129      	bne.n	80034b4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003460:	4b81      	ldr	r3, [pc, #516]	; (8003668 <HAL_RCC_ClockConfig+0x264>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d101      	bne.n	8003470 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	e0f4      	b.n	800365a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003470:	f000 f99e 	bl	80037b0 <RCC_GetSysClockFreqFromPLLSource>
 8003474:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	4a7c      	ldr	r2, [pc, #496]	; (800366c <HAL_RCC_ClockConfig+0x268>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d93f      	bls.n	80034fe <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800347e:	4b7a      	ldr	r3, [pc, #488]	; (8003668 <HAL_RCC_ClockConfig+0x264>)
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d009      	beq.n	800349e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003492:	2b00      	cmp	r3, #0
 8003494:	d033      	beq.n	80034fe <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800349a:	2b00      	cmp	r3, #0
 800349c:	d12f      	bne.n	80034fe <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800349e:	4b72      	ldr	r3, [pc, #456]	; (8003668 <HAL_RCC_ClockConfig+0x264>)
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034a6:	4a70      	ldr	r2, [pc, #448]	; (8003668 <HAL_RCC_ClockConfig+0x264>)
 80034a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034ac:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80034ae:	2380      	movs	r3, #128	; 0x80
 80034b0:	617b      	str	r3, [r7, #20]
 80034b2:	e024      	b.n	80034fe <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	2b02      	cmp	r3, #2
 80034ba:	d107      	bne.n	80034cc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034bc:	4b6a      	ldr	r3, [pc, #424]	; (8003668 <HAL_RCC_ClockConfig+0x264>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d109      	bne.n	80034dc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e0c6      	b.n	800365a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034cc:	4b66      	ldr	r3, [pc, #408]	; (8003668 <HAL_RCC_ClockConfig+0x264>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d101      	bne.n	80034dc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80034d8:	2301      	movs	r3, #1
 80034da:	e0be      	b.n	800365a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80034dc:	f000 f8ce 	bl	800367c <HAL_RCC_GetSysClockFreq>
 80034e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	4a61      	ldr	r2, [pc, #388]	; (800366c <HAL_RCC_ClockConfig+0x268>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d909      	bls.n	80034fe <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80034ea:	4b5f      	ldr	r3, [pc, #380]	; (8003668 <HAL_RCC_ClockConfig+0x264>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034f2:	4a5d      	ldr	r2, [pc, #372]	; (8003668 <HAL_RCC_ClockConfig+0x264>)
 80034f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034f8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80034fa:	2380      	movs	r3, #128	; 0x80
 80034fc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034fe:	4b5a      	ldr	r3, [pc, #360]	; (8003668 <HAL_RCC_ClockConfig+0x264>)
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f023 0203 	bic.w	r2, r3, #3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	4957      	ldr	r1, [pc, #348]	; (8003668 <HAL_RCC_ClockConfig+0x264>)
 800350c:	4313      	orrs	r3, r2
 800350e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003510:	f7fe fa6e 	bl	80019f0 <HAL_GetTick>
 8003514:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003516:	e00a      	b.n	800352e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003518:	f7fe fa6a 	bl	80019f0 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	f241 3288 	movw	r2, #5000	; 0x1388
 8003526:	4293      	cmp	r3, r2
 8003528:	d901      	bls.n	800352e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e095      	b.n	800365a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800352e:	4b4e      	ldr	r3, [pc, #312]	; (8003668 <HAL_RCC_ClockConfig+0x264>)
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f003 020c 	and.w	r2, r3, #12
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	429a      	cmp	r2, r3
 800353e:	d1eb      	bne.n	8003518 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0302 	and.w	r3, r3, #2
 8003548:	2b00      	cmp	r3, #0
 800354a:	d023      	beq.n	8003594 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0304 	and.w	r3, r3, #4
 8003554:	2b00      	cmp	r3, #0
 8003556:	d005      	beq.n	8003564 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003558:	4b43      	ldr	r3, [pc, #268]	; (8003668 <HAL_RCC_ClockConfig+0x264>)
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	4a42      	ldr	r2, [pc, #264]	; (8003668 <HAL_RCC_ClockConfig+0x264>)
 800355e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003562:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f003 0308 	and.w	r3, r3, #8
 800356c:	2b00      	cmp	r3, #0
 800356e:	d007      	beq.n	8003580 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003570:	4b3d      	ldr	r3, [pc, #244]	; (8003668 <HAL_RCC_ClockConfig+0x264>)
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003578:	4a3b      	ldr	r2, [pc, #236]	; (8003668 <HAL_RCC_ClockConfig+0x264>)
 800357a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800357e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003580:	4b39      	ldr	r3, [pc, #228]	; (8003668 <HAL_RCC_ClockConfig+0x264>)
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	4936      	ldr	r1, [pc, #216]	; (8003668 <HAL_RCC_ClockConfig+0x264>)
 800358e:	4313      	orrs	r3, r2
 8003590:	608b      	str	r3, [r1, #8]
 8003592:	e008      	b.n	80035a6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	2b80      	cmp	r3, #128	; 0x80
 8003598:	d105      	bne.n	80035a6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800359a:	4b33      	ldr	r3, [pc, #204]	; (8003668 <HAL_RCC_ClockConfig+0x264>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	4a32      	ldr	r2, [pc, #200]	; (8003668 <HAL_RCC_ClockConfig+0x264>)
 80035a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035a4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035a6:	4b2f      	ldr	r3, [pc, #188]	; (8003664 <HAL_RCC_ClockConfig+0x260>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 030f 	and.w	r3, r3, #15
 80035ae:	683a      	ldr	r2, [r7, #0]
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d21d      	bcs.n	80035f0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035b4:	4b2b      	ldr	r3, [pc, #172]	; (8003664 <HAL_RCC_ClockConfig+0x260>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f023 020f 	bic.w	r2, r3, #15
 80035bc:	4929      	ldr	r1, [pc, #164]	; (8003664 <HAL_RCC_ClockConfig+0x260>)
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	4313      	orrs	r3, r2
 80035c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80035c4:	f7fe fa14 	bl	80019f0 <HAL_GetTick>
 80035c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ca:	e00a      	b.n	80035e2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035cc:	f7fe fa10 	bl	80019f0 <HAL_GetTick>
 80035d0:	4602      	mov	r2, r0
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80035da:	4293      	cmp	r3, r2
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e03b      	b.n	800365a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035e2:	4b20      	ldr	r3, [pc, #128]	; (8003664 <HAL_RCC_ClockConfig+0x260>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 030f 	and.w	r3, r3, #15
 80035ea:	683a      	ldr	r2, [r7, #0]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d1ed      	bne.n	80035cc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0304 	and.w	r3, r3, #4
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d008      	beq.n	800360e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035fc:	4b1a      	ldr	r3, [pc, #104]	; (8003668 <HAL_RCC_ClockConfig+0x264>)
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	4917      	ldr	r1, [pc, #92]	; (8003668 <HAL_RCC_ClockConfig+0x264>)
 800360a:	4313      	orrs	r3, r2
 800360c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0308 	and.w	r3, r3, #8
 8003616:	2b00      	cmp	r3, #0
 8003618:	d009      	beq.n	800362e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800361a:	4b13      	ldr	r3, [pc, #76]	; (8003668 <HAL_RCC_ClockConfig+0x264>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	00db      	lsls	r3, r3, #3
 8003628:	490f      	ldr	r1, [pc, #60]	; (8003668 <HAL_RCC_ClockConfig+0x264>)
 800362a:	4313      	orrs	r3, r2
 800362c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800362e:	f000 f825 	bl	800367c <HAL_RCC_GetSysClockFreq>
 8003632:	4602      	mov	r2, r0
 8003634:	4b0c      	ldr	r3, [pc, #48]	; (8003668 <HAL_RCC_ClockConfig+0x264>)
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	091b      	lsrs	r3, r3, #4
 800363a:	f003 030f 	and.w	r3, r3, #15
 800363e:	490c      	ldr	r1, [pc, #48]	; (8003670 <HAL_RCC_ClockConfig+0x26c>)
 8003640:	5ccb      	ldrb	r3, [r1, r3]
 8003642:	f003 031f 	and.w	r3, r3, #31
 8003646:	fa22 f303 	lsr.w	r3, r2, r3
 800364a:	4a0a      	ldr	r2, [pc, #40]	; (8003674 <HAL_RCC_ClockConfig+0x270>)
 800364c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800364e:	4b0a      	ldr	r3, [pc, #40]	; (8003678 <HAL_RCC_ClockConfig+0x274>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4618      	mov	r0, r3
 8003654:	f7fe f980 	bl	8001958 <HAL_InitTick>
 8003658:	4603      	mov	r3, r0
}
 800365a:	4618      	mov	r0, r3
 800365c:	3718      	adds	r7, #24
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	40022000 	.word	0x40022000
 8003668:	40021000 	.word	0x40021000
 800366c:	04c4b400 	.word	0x04c4b400
 8003670:	080079fc 	.word	0x080079fc
 8003674:	20000000 	.word	0x20000000
 8003678:	20000004 	.word	0x20000004

0800367c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800367c:	b480      	push	{r7}
 800367e:	b087      	sub	sp, #28
 8003680:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003682:	4b2c      	ldr	r3, [pc, #176]	; (8003734 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	f003 030c 	and.w	r3, r3, #12
 800368a:	2b04      	cmp	r3, #4
 800368c:	d102      	bne.n	8003694 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800368e:	4b2a      	ldr	r3, [pc, #168]	; (8003738 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003690:	613b      	str	r3, [r7, #16]
 8003692:	e047      	b.n	8003724 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003694:	4b27      	ldr	r3, [pc, #156]	; (8003734 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f003 030c 	and.w	r3, r3, #12
 800369c:	2b08      	cmp	r3, #8
 800369e:	d102      	bne.n	80036a6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80036a0:	4b26      	ldr	r3, [pc, #152]	; (800373c <HAL_RCC_GetSysClockFreq+0xc0>)
 80036a2:	613b      	str	r3, [r7, #16]
 80036a4:	e03e      	b.n	8003724 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80036a6:	4b23      	ldr	r3, [pc, #140]	; (8003734 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f003 030c 	and.w	r3, r3, #12
 80036ae:	2b0c      	cmp	r3, #12
 80036b0:	d136      	bne.n	8003720 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036b2:	4b20      	ldr	r3, [pc, #128]	; (8003734 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	f003 0303 	and.w	r3, r3, #3
 80036ba:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036bc:	4b1d      	ldr	r3, [pc, #116]	; (8003734 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	091b      	lsrs	r3, r3, #4
 80036c2:	f003 030f 	and.w	r3, r3, #15
 80036c6:	3301      	adds	r3, #1
 80036c8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	2b03      	cmp	r3, #3
 80036ce:	d10c      	bne.n	80036ea <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036d0:	4a1a      	ldr	r2, [pc, #104]	; (800373c <HAL_RCC_GetSysClockFreq+0xc0>)
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80036d8:	4a16      	ldr	r2, [pc, #88]	; (8003734 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036da:	68d2      	ldr	r2, [r2, #12]
 80036dc:	0a12      	lsrs	r2, r2, #8
 80036de:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80036e2:	fb02 f303 	mul.w	r3, r2, r3
 80036e6:	617b      	str	r3, [r7, #20]
      break;
 80036e8:	e00c      	b.n	8003704 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036ea:	4a13      	ldr	r2, [pc, #76]	; (8003738 <HAL_RCC_GetSysClockFreq+0xbc>)
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80036f2:	4a10      	ldr	r2, [pc, #64]	; (8003734 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036f4:	68d2      	ldr	r2, [r2, #12]
 80036f6:	0a12      	lsrs	r2, r2, #8
 80036f8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80036fc:	fb02 f303 	mul.w	r3, r2, r3
 8003700:	617b      	str	r3, [r7, #20]
      break;
 8003702:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003704:	4b0b      	ldr	r3, [pc, #44]	; (8003734 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	0e5b      	lsrs	r3, r3, #25
 800370a:	f003 0303 	and.w	r3, r3, #3
 800370e:	3301      	adds	r3, #1
 8003710:	005b      	lsls	r3, r3, #1
 8003712:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003714:	697a      	ldr	r2, [r7, #20]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	fbb2 f3f3 	udiv	r3, r2, r3
 800371c:	613b      	str	r3, [r7, #16]
 800371e:	e001      	b.n	8003724 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003720:	2300      	movs	r3, #0
 8003722:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003724:	693b      	ldr	r3, [r7, #16]
}
 8003726:	4618      	mov	r0, r3
 8003728:	371c      	adds	r7, #28
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	40021000 	.word	0x40021000
 8003738:	00f42400 	.word	0x00f42400
 800373c:	016e3600 	.word	0x016e3600

08003740 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003740:	b480      	push	{r7}
 8003742:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003744:	4b03      	ldr	r3, [pc, #12]	; (8003754 <HAL_RCC_GetHCLKFreq+0x14>)
 8003746:	681b      	ldr	r3, [r3, #0]
}
 8003748:	4618      	mov	r0, r3
 800374a:	46bd      	mov	sp, r7
 800374c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003750:	4770      	bx	lr
 8003752:	bf00      	nop
 8003754:	20000000 	.word	0x20000000

08003758 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800375c:	f7ff fff0 	bl	8003740 <HAL_RCC_GetHCLKFreq>
 8003760:	4602      	mov	r2, r0
 8003762:	4b06      	ldr	r3, [pc, #24]	; (800377c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	0a1b      	lsrs	r3, r3, #8
 8003768:	f003 0307 	and.w	r3, r3, #7
 800376c:	4904      	ldr	r1, [pc, #16]	; (8003780 <HAL_RCC_GetPCLK1Freq+0x28>)
 800376e:	5ccb      	ldrb	r3, [r1, r3]
 8003770:	f003 031f 	and.w	r3, r3, #31
 8003774:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003778:	4618      	mov	r0, r3
 800377a:	bd80      	pop	{r7, pc}
 800377c:	40021000 	.word	0x40021000
 8003780:	08007a0c 	.word	0x08007a0c

08003784 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003788:	f7ff ffda 	bl	8003740 <HAL_RCC_GetHCLKFreq>
 800378c:	4602      	mov	r2, r0
 800378e:	4b06      	ldr	r3, [pc, #24]	; (80037a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	0adb      	lsrs	r3, r3, #11
 8003794:	f003 0307 	and.w	r3, r3, #7
 8003798:	4904      	ldr	r1, [pc, #16]	; (80037ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800379a:	5ccb      	ldrb	r3, [r1, r3]
 800379c:	f003 031f 	and.w	r3, r3, #31
 80037a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	40021000 	.word	0x40021000
 80037ac:	08007a0c 	.word	0x08007a0c

080037b0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b087      	sub	sp, #28
 80037b4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80037b6:	4b1e      	ldr	r3, [pc, #120]	; (8003830 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	f003 0303 	and.w	r3, r3, #3
 80037be:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037c0:	4b1b      	ldr	r3, [pc, #108]	; (8003830 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	091b      	lsrs	r3, r3, #4
 80037c6:	f003 030f 	and.w	r3, r3, #15
 80037ca:	3301      	adds	r3, #1
 80037cc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	2b03      	cmp	r3, #3
 80037d2:	d10c      	bne.n	80037ee <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80037d4:	4a17      	ldr	r2, [pc, #92]	; (8003834 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037dc:	4a14      	ldr	r2, [pc, #80]	; (8003830 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80037de:	68d2      	ldr	r2, [r2, #12]
 80037e0:	0a12      	lsrs	r2, r2, #8
 80037e2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80037e6:	fb02 f303 	mul.w	r3, r2, r3
 80037ea:	617b      	str	r3, [r7, #20]
    break;
 80037ec:	e00c      	b.n	8003808 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80037ee:	4a12      	ldr	r2, [pc, #72]	; (8003838 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80037f6:	4a0e      	ldr	r2, [pc, #56]	; (8003830 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80037f8:	68d2      	ldr	r2, [r2, #12]
 80037fa:	0a12      	lsrs	r2, r2, #8
 80037fc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003800:	fb02 f303 	mul.w	r3, r2, r3
 8003804:	617b      	str	r3, [r7, #20]
    break;
 8003806:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003808:	4b09      	ldr	r3, [pc, #36]	; (8003830 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	0e5b      	lsrs	r3, r3, #25
 800380e:	f003 0303 	and.w	r3, r3, #3
 8003812:	3301      	adds	r3, #1
 8003814:	005b      	lsls	r3, r3, #1
 8003816:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003818:	697a      	ldr	r2, [r7, #20]
 800381a:	68bb      	ldr	r3, [r7, #8]
 800381c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003820:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003822:	687b      	ldr	r3, [r7, #4]
}
 8003824:	4618      	mov	r0, r3
 8003826:	371c      	adds	r7, #28
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr
 8003830:	40021000 	.word	0x40021000
 8003834:	016e3600 	.word	0x016e3600
 8003838:	00f42400 	.word	0x00f42400

0800383c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b086      	sub	sp, #24
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003844:	2300      	movs	r3, #0
 8003846:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003848:	2300      	movs	r3, #0
 800384a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003854:	2b00      	cmp	r3, #0
 8003856:	f000 8098 	beq.w	800398a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800385a:	2300      	movs	r3, #0
 800385c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800385e:	4b43      	ldr	r3, [pc, #268]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10d      	bne.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800386a:	4b40      	ldr	r3, [pc, #256]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800386c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800386e:	4a3f      	ldr	r2, [pc, #252]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003874:	6593      	str	r3, [r2, #88]	; 0x58
 8003876:	4b3d      	ldr	r3, [pc, #244]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800387a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800387e:	60bb      	str	r3, [r7, #8]
 8003880:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003882:	2301      	movs	r3, #1
 8003884:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003886:	4b3a      	ldr	r3, [pc, #232]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a39      	ldr	r2, [pc, #228]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800388c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003890:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003892:	f7fe f8ad 	bl	80019f0 <HAL_GetTick>
 8003896:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003898:	e009      	b.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800389a:	f7fe f8a9 	bl	80019f0 <HAL_GetTick>
 800389e:	4602      	mov	r2, r0
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	1ad3      	subs	r3, r2, r3
 80038a4:	2b02      	cmp	r3, #2
 80038a6:	d902      	bls.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	74fb      	strb	r3, [r7, #19]
        break;
 80038ac:	e005      	b.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038ae:	4b30      	ldr	r3, [pc, #192]	; (8003970 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d0ef      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80038ba:	7cfb      	ldrb	r3, [r7, #19]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d159      	bne.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80038c0:	4b2a      	ldr	r3, [pc, #168]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038ca:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80038cc:	697b      	ldr	r3, [r7, #20]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d01e      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d019      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80038dc:	4b23      	ldr	r3, [pc, #140]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80038e8:	4b20      	ldr	r3, [pc, #128]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ee:	4a1f      	ldr	r2, [pc, #124]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038f8:	4b1c      	ldr	r3, [pc, #112]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038fe:	4a1b      	ldr	r2, [pc, #108]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003900:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003904:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003908:	4a18      	ldr	r2, [pc, #96]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	2b00      	cmp	r3, #0
 8003918:	d016      	beq.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800391a:	f7fe f869 	bl	80019f0 <HAL_GetTick>
 800391e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003920:	e00b      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003922:	f7fe f865 	bl	80019f0 <HAL_GetTick>
 8003926:	4602      	mov	r2, r0
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	1ad3      	subs	r3, r2, r3
 800392c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003930:	4293      	cmp	r3, r2
 8003932:	d902      	bls.n	800393a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	74fb      	strb	r3, [r7, #19]
            break;
 8003938:	e006      	b.n	8003948 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800393a:	4b0c      	ldr	r3, [pc, #48]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800393c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003940:	f003 0302 	and.w	r3, r3, #2
 8003944:	2b00      	cmp	r3, #0
 8003946:	d0ec      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003948:	7cfb      	ldrb	r3, [r7, #19]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d10b      	bne.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800394e:	4b07      	ldr	r3, [pc, #28]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003950:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003954:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395c:	4903      	ldr	r1, [pc, #12]	; (800396c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800395e:	4313      	orrs	r3, r2
 8003960:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003964:	e008      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003966:	7cfb      	ldrb	r3, [r7, #19]
 8003968:	74bb      	strb	r3, [r7, #18]
 800396a:	e005      	b.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800396c:	40021000 	.word	0x40021000
 8003970:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003974:	7cfb      	ldrb	r3, [r7, #19]
 8003976:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003978:	7c7b      	ldrb	r3, [r7, #17]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d105      	bne.n	800398a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800397e:	4ba6      	ldr	r3, [pc, #664]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003982:	4aa5      	ldr	r2, [pc, #660]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003984:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003988:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0301 	and.w	r3, r3, #1
 8003992:	2b00      	cmp	r3, #0
 8003994:	d00a      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003996:	4ba0      	ldr	r3, [pc, #640]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800399c:	f023 0203 	bic.w	r2, r3, #3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	499c      	ldr	r1, [pc, #624]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0302 	and.w	r3, r3, #2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d00a      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039b8:	4b97      	ldr	r3, [pc, #604]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039be:	f023 020c 	bic.w	r2, r3, #12
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	4994      	ldr	r1, [pc, #592]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039c8:	4313      	orrs	r3, r2
 80039ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f003 0304 	and.w	r3, r3, #4
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00a      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80039da:	4b8f      	ldr	r3, [pc, #572]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	498b      	ldr	r1, [pc, #556]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0308 	and.w	r3, r3, #8
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d00a      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80039fc:	4b86      	ldr	r3, [pc, #536]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a02:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	4983      	ldr	r1, [pc, #524]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0320 	and.w	r3, r3, #32
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00a      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a1e:	4b7e      	ldr	r3, [pc, #504]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a24:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	695b      	ldr	r3, [r3, #20]
 8003a2c:	497a      	ldr	r1, [pc, #488]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d00a      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a40:	4b75      	ldr	r3, [pc, #468]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a46:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	4972      	ldr	r1, [pc, #456]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d00a      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a62:	4b6d      	ldr	r3, [pc, #436]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a68:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	69db      	ldr	r3, [r3, #28]
 8003a70:	4969      	ldr	r1, [pc, #420]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00a      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a84:	4b64      	ldr	r3, [pc, #400]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a8a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	4961      	ldr	r1, [pc, #388]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a94:	4313      	orrs	r3, r2
 8003a96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d00a      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003aa6:	4b5c      	ldr	r3, [pc, #368]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab4:	4958      	ldr	r1, [pc, #352]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d015      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ac8:	4b53      	ldr	r3, [pc, #332]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ace:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad6:	4950      	ldr	r1, [pc, #320]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ae6:	d105      	bne.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ae8:	4b4b      	ldr	r3, [pc, #300]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	4a4a      	ldr	r2, [pc, #296]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003aee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003af2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d015      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003b00:	4b45      	ldr	r3, [pc, #276]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b06:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0e:	4942      	ldr	r1, [pc, #264]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b10:	4313      	orrs	r3, r2
 8003b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b1e:	d105      	bne.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b20:	4b3d      	ldr	r3, [pc, #244]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	4a3c      	ldr	r2, [pc, #240]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b2a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d015      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003b38:	4b37      	ldr	r3, [pc, #220]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b3e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b46:	4934      	ldr	r1, [pc, #208]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b52:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b56:	d105      	bne.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b58:	4b2f      	ldr	r3, [pc, #188]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	4a2e      	ldr	r2, [pc, #184]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b62:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d015      	beq.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b70:	4b29      	ldr	r3, [pc, #164]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b76:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b7e:	4926      	ldr	r1, [pc, #152]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b8e:	d105      	bne.n	8003b9c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b90:	4b21      	ldr	r3, [pc, #132]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	4a20      	ldr	r2, [pc, #128]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b9a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d015      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ba8:	4b1b      	ldr	r3, [pc, #108]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb6:	4918      	ldr	r1, [pc, #96]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bc6:	d105      	bne.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bc8:	4b13      	ldr	r3, [pc, #76]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	4a12      	ldr	r2, [pc, #72]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bd2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d015      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003be0:	4b0d      	ldr	r3, [pc, #52]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bee:	490a      	ldr	r1, [pc, #40]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bfa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bfe:	d105      	bne.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003c00:	4b05      	ldr	r3, [pc, #20]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	4a04      	ldr	r2, [pc, #16]	; (8003c18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c0a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003c0c:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3718      	adds	r7, #24
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	40021000 	.word	0x40021000

08003c1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e042      	b.n	8003cb4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d106      	bne.n	8003c46 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f7fd fdef 	bl	8001824 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2224      	movs	r2, #36	; 0x24
 8003c4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f022 0201 	bic.w	r2, r2, #1
 8003c5c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	f000 f8c2 	bl	8003de8 <UART_SetConfig>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d101      	bne.n	8003c6e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e022      	b.n	8003cb4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d002      	beq.n	8003c7c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 fb82 	bl	8004380 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	685a      	ldr	r2, [r3, #4]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c8a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	689a      	ldr	r2, [r3, #8]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c9a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f042 0201 	orr.w	r2, r2, #1
 8003caa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 fc09 	bl	80044c4 <UART_CheckIdleState>
 8003cb2:	4603      	mov	r3, r0
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3708      	adds	r7, #8
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bd80      	pop	{r7, pc}

08003cbc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b08a      	sub	sp, #40	; 0x28
 8003cc0:	af02      	add	r7, sp, #8
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	603b      	str	r3, [r7, #0]
 8003cc8:	4613      	mov	r3, r2
 8003cca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cd2:	2b20      	cmp	r3, #32
 8003cd4:	f040 8083 	bne.w	8003dde <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d002      	beq.n	8003ce4 <HAL_UART_Transmit+0x28>
 8003cde:	88fb      	ldrh	r3, [r7, #6]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d101      	bne.n	8003ce8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e07b      	b.n	8003de0 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d101      	bne.n	8003cf6 <HAL_UART_Transmit+0x3a>
 8003cf2:	2302      	movs	r3, #2
 8003cf4:	e074      	b.n	8003de0 <HAL_UART_Transmit+0x124>
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2200      	movs	r2, #0
 8003d02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2221      	movs	r2, #33	; 0x21
 8003d0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d0e:	f7fd fe6f 	bl	80019f0 <HAL_GetTick>
 8003d12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	88fa      	ldrh	r2, [r7, #6]
 8003d18:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	88fa      	ldrh	r2, [r7, #6]
 8003d20:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d2c:	d108      	bne.n	8003d40 <HAL_UART_Transmit+0x84>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d104      	bne.n	8003d40 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003d36:	2300      	movs	r3, #0
 8003d38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	61bb      	str	r3, [r7, #24]
 8003d3e:	e003      	b.n	8003d48 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d44:	2300      	movs	r3, #0
 8003d46:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003d50:	e02c      	b.n	8003dac <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	9300      	str	r3, [sp, #0]
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	2180      	movs	r1, #128	; 0x80
 8003d5c:	68f8      	ldr	r0, [r7, #12]
 8003d5e:	f000 fbfc 	bl	800455a <UART_WaitOnFlagUntilTimeout>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d001      	beq.n	8003d6c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e039      	b.n	8003de0 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d10b      	bne.n	8003d8a <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	881b      	ldrh	r3, [r3, #0]
 8003d76:	461a      	mov	r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d80:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	3302      	adds	r3, #2
 8003d86:	61bb      	str	r3, [r7, #24]
 8003d88:	e007      	b.n	8003d9a <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	781a      	ldrb	r2, [r3, #0]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	3301      	adds	r3, #1
 8003d98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	3b01      	subs	r3, #1
 8003da4:	b29a      	uxth	r2, r3
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d1cc      	bne.n	8003d52 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	9300      	str	r3, [sp, #0]
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	2140      	movs	r1, #64	; 0x40
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	f000 fbc9 	bl	800455a <UART_WaitOnFlagUntilTimeout>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d001      	beq.n	8003dd2 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e006      	b.n	8003de0 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2220      	movs	r2, #32
 8003dd6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	e000      	b.n	8003de0 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003dde:	2302      	movs	r3, #2
  }
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3720      	adds	r7, #32
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}

08003de8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003de8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dec:	b08c      	sub	sp, #48	; 0x30
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003df2:	2300      	movs	r3, #0
 8003df4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	689a      	ldr	r2, [r3, #8]
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	691b      	ldr	r3, [r3, #16]
 8003e00:	431a      	orrs	r2, r3
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	695b      	ldr	r3, [r3, #20]
 8003e06:	431a      	orrs	r2, r3
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	69db      	ldr	r3, [r3, #28]
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	4bab      	ldr	r3, [pc, #684]	; (80040c4 <UART_SetConfig+0x2dc>)
 8003e18:	4013      	ands	r3, r2
 8003e1a:	697a      	ldr	r2, [r7, #20]
 8003e1c:	6812      	ldr	r2, [r2, #0]
 8003e1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e20:	430b      	orrs	r3, r1
 8003e22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	68da      	ldr	r2, [r3, #12]
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	430a      	orrs	r2, r1
 8003e38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	699b      	ldr	r3, [r3, #24]
 8003e3e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4aa0      	ldr	r2, [pc, #640]	; (80040c8 <UART_SetConfig+0x2e0>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d004      	beq.n	8003e54 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	6a1b      	ldr	r3, [r3, #32]
 8003e4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e50:	4313      	orrs	r3, r2
 8003e52:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003e5e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	6812      	ldr	r2, [r2, #0]
 8003e66:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e68:	430b      	orrs	r3, r1
 8003e6a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e72:	f023 010f 	bic.w	r1, r3, #15
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a91      	ldr	r2, [pc, #580]	; (80040cc <UART_SetConfig+0x2e4>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d125      	bne.n	8003ed8 <UART_SetConfig+0xf0>
 8003e8c:	4b90      	ldr	r3, [pc, #576]	; (80040d0 <UART_SetConfig+0x2e8>)
 8003e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e92:	f003 0303 	and.w	r3, r3, #3
 8003e96:	2b03      	cmp	r3, #3
 8003e98:	d81a      	bhi.n	8003ed0 <UART_SetConfig+0xe8>
 8003e9a:	a201      	add	r2, pc, #4	; (adr r2, 8003ea0 <UART_SetConfig+0xb8>)
 8003e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ea0:	08003eb1 	.word	0x08003eb1
 8003ea4:	08003ec1 	.word	0x08003ec1
 8003ea8:	08003eb9 	.word	0x08003eb9
 8003eac:	08003ec9 	.word	0x08003ec9
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003eb6:	e0d6      	b.n	8004066 <UART_SetConfig+0x27e>
 8003eb8:	2302      	movs	r3, #2
 8003eba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ebe:	e0d2      	b.n	8004066 <UART_SetConfig+0x27e>
 8003ec0:	2304      	movs	r3, #4
 8003ec2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ec6:	e0ce      	b.n	8004066 <UART_SetConfig+0x27e>
 8003ec8:	2308      	movs	r3, #8
 8003eca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ece:	e0ca      	b.n	8004066 <UART_SetConfig+0x27e>
 8003ed0:	2310      	movs	r3, #16
 8003ed2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ed6:	e0c6      	b.n	8004066 <UART_SetConfig+0x27e>
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a7d      	ldr	r2, [pc, #500]	; (80040d4 <UART_SetConfig+0x2ec>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d138      	bne.n	8003f54 <UART_SetConfig+0x16c>
 8003ee2:	4b7b      	ldr	r3, [pc, #492]	; (80040d0 <UART_SetConfig+0x2e8>)
 8003ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ee8:	f003 030c 	and.w	r3, r3, #12
 8003eec:	2b0c      	cmp	r3, #12
 8003eee:	d82d      	bhi.n	8003f4c <UART_SetConfig+0x164>
 8003ef0:	a201      	add	r2, pc, #4	; (adr r2, 8003ef8 <UART_SetConfig+0x110>)
 8003ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ef6:	bf00      	nop
 8003ef8:	08003f2d 	.word	0x08003f2d
 8003efc:	08003f4d 	.word	0x08003f4d
 8003f00:	08003f4d 	.word	0x08003f4d
 8003f04:	08003f4d 	.word	0x08003f4d
 8003f08:	08003f3d 	.word	0x08003f3d
 8003f0c:	08003f4d 	.word	0x08003f4d
 8003f10:	08003f4d 	.word	0x08003f4d
 8003f14:	08003f4d 	.word	0x08003f4d
 8003f18:	08003f35 	.word	0x08003f35
 8003f1c:	08003f4d 	.word	0x08003f4d
 8003f20:	08003f4d 	.word	0x08003f4d
 8003f24:	08003f4d 	.word	0x08003f4d
 8003f28:	08003f45 	.word	0x08003f45
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f32:	e098      	b.n	8004066 <UART_SetConfig+0x27e>
 8003f34:	2302      	movs	r3, #2
 8003f36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f3a:	e094      	b.n	8004066 <UART_SetConfig+0x27e>
 8003f3c:	2304      	movs	r3, #4
 8003f3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f42:	e090      	b.n	8004066 <UART_SetConfig+0x27e>
 8003f44:	2308      	movs	r3, #8
 8003f46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f4a:	e08c      	b.n	8004066 <UART_SetConfig+0x27e>
 8003f4c:	2310      	movs	r3, #16
 8003f4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f52:	e088      	b.n	8004066 <UART_SetConfig+0x27e>
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	4a5f      	ldr	r2, [pc, #380]	; (80040d8 <UART_SetConfig+0x2f0>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d125      	bne.n	8003faa <UART_SetConfig+0x1c2>
 8003f5e:	4b5c      	ldr	r3, [pc, #368]	; (80040d0 <UART_SetConfig+0x2e8>)
 8003f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f64:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003f68:	2b30      	cmp	r3, #48	; 0x30
 8003f6a:	d016      	beq.n	8003f9a <UART_SetConfig+0x1b2>
 8003f6c:	2b30      	cmp	r3, #48	; 0x30
 8003f6e:	d818      	bhi.n	8003fa2 <UART_SetConfig+0x1ba>
 8003f70:	2b20      	cmp	r3, #32
 8003f72:	d00a      	beq.n	8003f8a <UART_SetConfig+0x1a2>
 8003f74:	2b20      	cmp	r3, #32
 8003f76:	d814      	bhi.n	8003fa2 <UART_SetConfig+0x1ba>
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d002      	beq.n	8003f82 <UART_SetConfig+0x19a>
 8003f7c:	2b10      	cmp	r3, #16
 8003f7e:	d008      	beq.n	8003f92 <UART_SetConfig+0x1aa>
 8003f80:	e00f      	b.n	8003fa2 <UART_SetConfig+0x1ba>
 8003f82:	2300      	movs	r3, #0
 8003f84:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f88:	e06d      	b.n	8004066 <UART_SetConfig+0x27e>
 8003f8a:	2302      	movs	r3, #2
 8003f8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f90:	e069      	b.n	8004066 <UART_SetConfig+0x27e>
 8003f92:	2304      	movs	r3, #4
 8003f94:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f98:	e065      	b.n	8004066 <UART_SetConfig+0x27e>
 8003f9a:	2308      	movs	r3, #8
 8003f9c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fa0:	e061      	b.n	8004066 <UART_SetConfig+0x27e>
 8003fa2:	2310      	movs	r3, #16
 8003fa4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fa8:	e05d      	b.n	8004066 <UART_SetConfig+0x27e>
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a4b      	ldr	r2, [pc, #300]	; (80040dc <UART_SetConfig+0x2f4>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d125      	bne.n	8004000 <UART_SetConfig+0x218>
 8003fb4:	4b46      	ldr	r3, [pc, #280]	; (80040d0 <UART_SetConfig+0x2e8>)
 8003fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003fbe:	2bc0      	cmp	r3, #192	; 0xc0
 8003fc0:	d016      	beq.n	8003ff0 <UART_SetConfig+0x208>
 8003fc2:	2bc0      	cmp	r3, #192	; 0xc0
 8003fc4:	d818      	bhi.n	8003ff8 <UART_SetConfig+0x210>
 8003fc6:	2b80      	cmp	r3, #128	; 0x80
 8003fc8:	d00a      	beq.n	8003fe0 <UART_SetConfig+0x1f8>
 8003fca:	2b80      	cmp	r3, #128	; 0x80
 8003fcc:	d814      	bhi.n	8003ff8 <UART_SetConfig+0x210>
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d002      	beq.n	8003fd8 <UART_SetConfig+0x1f0>
 8003fd2:	2b40      	cmp	r3, #64	; 0x40
 8003fd4:	d008      	beq.n	8003fe8 <UART_SetConfig+0x200>
 8003fd6:	e00f      	b.n	8003ff8 <UART_SetConfig+0x210>
 8003fd8:	2300      	movs	r3, #0
 8003fda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fde:	e042      	b.n	8004066 <UART_SetConfig+0x27e>
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fe6:	e03e      	b.n	8004066 <UART_SetConfig+0x27e>
 8003fe8:	2304      	movs	r3, #4
 8003fea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fee:	e03a      	b.n	8004066 <UART_SetConfig+0x27e>
 8003ff0:	2308      	movs	r3, #8
 8003ff2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ff6:	e036      	b.n	8004066 <UART_SetConfig+0x27e>
 8003ff8:	2310      	movs	r3, #16
 8003ffa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ffe:	e032      	b.n	8004066 <UART_SetConfig+0x27e>
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a30      	ldr	r2, [pc, #192]	; (80040c8 <UART_SetConfig+0x2e0>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d12a      	bne.n	8004060 <UART_SetConfig+0x278>
 800400a:	4b31      	ldr	r3, [pc, #196]	; (80040d0 <UART_SetConfig+0x2e8>)
 800400c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004010:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004014:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004018:	d01a      	beq.n	8004050 <UART_SetConfig+0x268>
 800401a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800401e:	d81b      	bhi.n	8004058 <UART_SetConfig+0x270>
 8004020:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004024:	d00c      	beq.n	8004040 <UART_SetConfig+0x258>
 8004026:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800402a:	d815      	bhi.n	8004058 <UART_SetConfig+0x270>
 800402c:	2b00      	cmp	r3, #0
 800402e:	d003      	beq.n	8004038 <UART_SetConfig+0x250>
 8004030:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004034:	d008      	beq.n	8004048 <UART_SetConfig+0x260>
 8004036:	e00f      	b.n	8004058 <UART_SetConfig+0x270>
 8004038:	2300      	movs	r3, #0
 800403a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800403e:	e012      	b.n	8004066 <UART_SetConfig+0x27e>
 8004040:	2302      	movs	r3, #2
 8004042:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004046:	e00e      	b.n	8004066 <UART_SetConfig+0x27e>
 8004048:	2304      	movs	r3, #4
 800404a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800404e:	e00a      	b.n	8004066 <UART_SetConfig+0x27e>
 8004050:	2308      	movs	r3, #8
 8004052:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004056:	e006      	b.n	8004066 <UART_SetConfig+0x27e>
 8004058:	2310      	movs	r3, #16
 800405a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800405e:	e002      	b.n	8004066 <UART_SetConfig+0x27e>
 8004060:	2310      	movs	r3, #16
 8004062:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a17      	ldr	r2, [pc, #92]	; (80040c8 <UART_SetConfig+0x2e0>)
 800406c:	4293      	cmp	r3, r2
 800406e:	f040 80a8 	bne.w	80041c2 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004072:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004076:	2b08      	cmp	r3, #8
 8004078:	d834      	bhi.n	80040e4 <UART_SetConfig+0x2fc>
 800407a:	a201      	add	r2, pc, #4	; (adr r2, 8004080 <UART_SetConfig+0x298>)
 800407c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004080:	080040a5 	.word	0x080040a5
 8004084:	080040e5 	.word	0x080040e5
 8004088:	080040ad 	.word	0x080040ad
 800408c:	080040e5 	.word	0x080040e5
 8004090:	080040b3 	.word	0x080040b3
 8004094:	080040e5 	.word	0x080040e5
 8004098:	080040e5 	.word	0x080040e5
 800409c:	080040e5 	.word	0x080040e5
 80040a0:	080040bb 	.word	0x080040bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040a4:	f7ff fb58 	bl	8003758 <HAL_RCC_GetPCLK1Freq>
 80040a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80040aa:	e021      	b.n	80040f0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040ac:	4b0c      	ldr	r3, [pc, #48]	; (80040e0 <UART_SetConfig+0x2f8>)
 80040ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80040b0:	e01e      	b.n	80040f0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040b2:	f7ff fae3 	bl	800367c <HAL_RCC_GetSysClockFreq>
 80040b6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80040b8:	e01a      	b.n	80040f0 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80040c0:	e016      	b.n	80040f0 <UART_SetConfig+0x308>
 80040c2:	bf00      	nop
 80040c4:	cfff69f3 	.word	0xcfff69f3
 80040c8:	40008000 	.word	0x40008000
 80040cc:	40013800 	.word	0x40013800
 80040d0:	40021000 	.word	0x40021000
 80040d4:	40004400 	.word	0x40004400
 80040d8:	40004800 	.word	0x40004800
 80040dc:	40004c00 	.word	0x40004c00
 80040e0:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80040e4:	2300      	movs	r3, #0
 80040e6:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80040ee:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80040f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	f000 812a 	beq.w	800434c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fc:	4a9e      	ldr	r2, [pc, #632]	; (8004378 <UART_SetConfig+0x590>)
 80040fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004102:	461a      	mov	r2, r3
 8004104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004106:	fbb3 f3f2 	udiv	r3, r3, r2
 800410a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	685a      	ldr	r2, [r3, #4]
 8004110:	4613      	mov	r3, r2
 8004112:	005b      	lsls	r3, r3, #1
 8004114:	4413      	add	r3, r2
 8004116:	69ba      	ldr	r2, [r7, #24]
 8004118:	429a      	cmp	r2, r3
 800411a:	d305      	bcc.n	8004128 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004122:	69ba      	ldr	r2, [r7, #24]
 8004124:	429a      	cmp	r2, r3
 8004126:	d903      	bls.n	8004130 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800412e:	e10d      	b.n	800434c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004132:	2200      	movs	r2, #0
 8004134:	60bb      	str	r3, [r7, #8]
 8004136:	60fa      	str	r2, [r7, #12]
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800413c:	4a8e      	ldr	r2, [pc, #568]	; (8004378 <UART_SetConfig+0x590>)
 800413e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004142:	b29b      	uxth	r3, r3
 8004144:	2200      	movs	r2, #0
 8004146:	603b      	str	r3, [r7, #0]
 8004148:	607a      	str	r2, [r7, #4]
 800414a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800414e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004152:	f7fc fd51 	bl	8000bf8 <__aeabi_uldivmod>
 8004156:	4602      	mov	r2, r0
 8004158:	460b      	mov	r3, r1
 800415a:	4610      	mov	r0, r2
 800415c:	4619      	mov	r1, r3
 800415e:	f04f 0200 	mov.w	r2, #0
 8004162:	f04f 0300 	mov.w	r3, #0
 8004166:	020b      	lsls	r3, r1, #8
 8004168:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800416c:	0202      	lsls	r2, r0, #8
 800416e:	6979      	ldr	r1, [r7, #20]
 8004170:	6849      	ldr	r1, [r1, #4]
 8004172:	0849      	lsrs	r1, r1, #1
 8004174:	2000      	movs	r0, #0
 8004176:	460c      	mov	r4, r1
 8004178:	4605      	mov	r5, r0
 800417a:	eb12 0804 	adds.w	r8, r2, r4
 800417e:	eb43 0905 	adc.w	r9, r3, r5
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	2200      	movs	r2, #0
 8004188:	469a      	mov	sl, r3
 800418a:	4693      	mov	fp, r2
 800418c:	4652      	mov	r2, sl
 800418e:	465b      	mov	r3, fp
 8004190:	4640      	mov	r0, r8
 8004192:	4649      	mov	r1, r9
 8004194:	f7fc fd30 	bl	8000bf8 <__aeabi_uldivmod>
 8004198:	4602      	mov	r2, r0
 800419a:	460b      	mov	r3, r1
 800419c:	4613      	mov	r3, r2
 800419e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80041a0:	6a3b      	ldr	r3, [r7, #32]
 80041a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041a6:	d308      	bcc.n	80041ba <UART_SetConfig+0x3d2>
 80041a8:	6a3b      	ldr	r3, [r7, #32]
 80041aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041ae:	d204      	bcs.n	80041ba <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	6a3a      	ldr	r2, [r7, #32]
 80041b6:	60da      	str	r2, [r3, #12]
 80041b8:	e0c8      	b.n	800434c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80041ba:	2301      	movs	r3, #1
 80041bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80041c0:	e0c4      	b.n	800434c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	69db      	ldr	r3, [r3, #28]
 80041c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041ca:	d167      	bne.n	800429c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80041cc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80041d0:	2b08      	cmp	r3, #8
 80041d2:	d828      	bhi.n	8004226 <UART_SetConfig+0x43e>
 80041d4:	a201      	add	r2, pc, #4	; (adr r2, 80041dc <UART_SetConfig+0x3f4>)
 80041d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041da:	bf00      	nop
 80041dc:	08004201 	.word	0x08004201
 80041e0:	08004209 	.word	0x08004209
 80041e4:	08004211 	.word	0x08004211
 80041e8:	08004227 	.word	0x08004227
 80041ec:	08004217 	.word	0x08004217
 80041f0:	08004227 	.word	0x08004227
 80041f4:	08004227 	.word	0x08004227
 80041f8:	08004227 	.word	0x08004227
 80041fc:	0800421f 	.word	0x0800421f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004200:	f7ff faaa 	bl	8003758 <HAL_RCC_GetPCLK1Freq>
 8004204:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004206:	e014      	b.n	8004232 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004208:	f7ff fabc 	bl	8003784 <HAL_RCC_GetPCLK2Freq>
 800420c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800420e:	e010      	b.n	8004232 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004210:	4b5a      	ldr	r3, [pc, #360]	; (800437c <UART_SetConfig+0x594>)
 8004212:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004214:	e00d      	b.n	8004232 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004216:	f7ff fa31 	bl	800367c <HAL_RCC_GetSysClockFreq>
 800421a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800421c:	e009      	b.n	8004232 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800421e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004222:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004224:	e005      	b.n	8004232 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8004226:	2300      	movs	r3, #0
 8004228:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004230:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004234:	2b00      	cmp	r3, #0
 8004236:	f000 8089 	beq.w	800434c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423e:	4a4e      	ldr	r2, [pc, #312]	; (8004378 <UART_SetConfig+0x590>)
 8004240:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004244:	461a      	mov	r2, r3
 8004246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004248:	fbb3 f3f2 	udiv	r3, r3, r2
 800424c:	005a      	lsls	r2, r3, #1
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	085b      	lsrs	r3, r3, #1
 8004254:	441a      	add	r2, r3
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	fbb2 f3f3 	udiv	r3, r2, r3
 800425e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004260:	6a3b      	ldr	r3, [r7, #32]
 8004262:	2b0f      	cmp	r3, #15
 8004264:	d916      	bls.n	8004294 <UART_SetConfig+0x4ac>
 8004266:	6a3b      	ldr	r3, [r7, #32]
 8004268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800426c:	d212      	bcs.n	8004294 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800426e:	6a3b      	ldr	r3, [r7, #32]
 8004270:	b29b      	uxth	r3, r3
 8004272:	f023 030f 	bic.w	r3, r3, #15
 8004276:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004278:	6a3b      	ldr	r3, [r7, #32]
 800427a:	085b      	lsrs	r3, r3, #1
 800427c:	b29b      	uxth	r3, r3
 800427e:	f003 0307 	and.w	r3, r3, #7
 8004282:	b29a      	uxth	r2, r3
 8004284:	8bfb      	ldrh	r3, [r7, #30]
 8004286:	4313      	orrs	r3, r2
 8004288:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	8bfa      	ldrh	r2, [r7, #30]
 8004290:	60da      	str	r2, [r3, #12]
 8004292:	e05b      	b.n	800434c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800429a:	e057      	b.n	800434c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800429c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80042a0:	2b08      	cmp	r3, #8
 80042a2:	d828      	bhi.n	80042f6 <UART_SetConfig+0x50e>
 80042a4:	a201      	add	r2, pc, #4	; (adr r2, 80042ac <UART_SetConfig+0x4c4>)
 80042a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042aa:	bf00      	nop
 80042ac:	080042d1 	.word	0x080042d1
 80042b0:	080042d9 	.word	0x080042d9
 80042b4:	080042e1 	.word	0x080042e1
 80042b8:	080042f7 	.word	0x080042f7
 80042bc:	080042e7 	.word	0x080042e7
 80042c0:	080042f7 	.word	0x080042f7
 80042c4:	080042f7 	.word	0x080042f7
 80042c8:	080042f7 	.word	0x080042f7
 80042cc:	080042ef 	.word	0x080042ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042d0:	f7ff fa42 	bl	8003758 <HAL_RCC_GetPCLK1Freq>
 80042d4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80042d6:	e014      	b.n	8004302 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042d8:	f7ff fa54 	bl	8003784 <HAL_RCC_GetPCLK2Freq>
 80042dc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80042de:	e010      	b.n	8004302 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042e0:	4b26      	ldr	r3, [pc, #152]	; (800437c <UART_SetConfig+0x594>)
 80042e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80042e4:	e00d      	b.n	8004302 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042e6:	f7ff f9c9 	bl	800367c <HAL_RCC_GetSysClockFreq>
 80042ea:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80042ec:	e009      	b.n	8004302 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80042f4:	e005      	b.n	8004302 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80042f6:	2300      	movs	r3, #0
 80042f8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004300:	bf00      	nop
    }

    if (pclk != 0U)
 8004302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004304:	2b00      	cmp	r3, #0
 8004306:	d021      	beq.n	800434c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430c:	4a1a      	ldr	r2, [pc, #104]	; (8004378 <UART_SetConfig+0x590>)
 800430e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004312:	461a      	mov	r2, r3
 8004314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004316:	fbb3 f2f2 	udiv	r2, r3, r2
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	085b      	lsrs	r3, r3, #1
 8004320:	441a      	add	r2, r3
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	fbb2 f3f3 	udiv	r3, r2, r3
 800432a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800432c:	6a3b      	ldr	r3, [r7, #32]
 800432e:	2b0f      	cmp	r3, #15
 8004330:	d909      	bls.n	8004346 <UART_SetConfig+0x55e>
 8004332:	6a3b      	ldr	r3, [r7, #32]
 8004334:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004338:	d205      	bcs.n	8004346 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800433a:	6a3b      	ldr	r3, [r7, #32]
 800433c:	b29a      	uxth	r2, r3
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	60da      	str	r2, [r3, #12]
 8004344:	e002      	b.n	800434c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	2201      	movs	r2, #1
 8004350:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004354:	697b      	ldr	r3, [r7, #20]
 8004356:	2201      	movs	r2, #1
 8004358:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	2200      	movs	r2, #0
 8004360:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	2200      	movs	r2, #0
 8004366:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004368:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800436c:	4618      	mov	r0, r3
 800436e:	3730      	adds	r7, #48	; 0x30
 8004370:	46bd      	mov	sp, r7
 8004372:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004376:	bf00      	nop
 8004378:	08007a14 	.word	0x08007a14
 800437c:	00f42400 	.word	0x00f42400

08004380 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004380:	b480      	push	{r7}
 8004382:	b083      	sub	sp, #12
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800438c:	f003 0301 	and.w	r3, r3, #1
 8004390:	2b00      	cmp	r3, #0
 8004392:	d00a      	beq.n	80043aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	430a      	orrs	r2, r1
 80043a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ae:	f003 0302 	and.w	r3, r3, #2
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d00a      	beq.n	80043cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	430a      	orrs	r2, r1
 80043ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d0:	f003 0304 	and.w	r3, r3, #4
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d00a      	beq.n	80043ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	430a      	orrs	r2, r1
 80043ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f2:	f003 0308 	and.w	r3, r3, #8
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00a      	beq.n	8004410 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	430a      	orrs	r2, r1
 800440e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004414:	f003 0310 	and.w	r3, r3, #16
 8004418:	2b00      	cmp	r3, #0
 800441a:	d00a      	beq.n	8004432 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	430a      	orrs	r2, r1
 8004430:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004436:	f003 0320 	and.w	r3, r3, #32
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00a      	beq.n	8004454 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	430a      	orrs	r2, r1
 8004452:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004458:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800445c:	2b00      	cmp	r3, #0
 800445e:	d01a      	beq.n	8004496 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	430a      	orrs	r2, r1
 8004474:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800447a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800447e:	d10a      	bne.n	8004496 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	430a      	orrs	r2, r1
 8004494:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d00a      	beq.n	80044b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	430a      	orrs	r2, r1
 80044b6:	605a      	str	r2, [r3, #4]
  }
}
 80044b8:	bf00      	nop
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b086      	sub	sp, #24
 80044c8:	af02      	add	r7, sp, #8
 80044ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80044d4:	f7fd fa8c 	bl	80019f0 <HAL_GetTick>
 80044d8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0308 	and.w	r3, r3, #8
 80044e4:	2b08      	cmp	r3, #8
 80044e6:	d10e      	bne.n	8004506 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80044e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80044ec:	9300      	str	r3, [sp, #0]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 f82f 	bl	800455a <UART_WaitOnFlagUntilTimeout>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d001      	beq.n	8004506 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e025      	b.n	8004552 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0304 	and.w	r3, r3, #4
 8004510:	2b04      	cmp	r3, #4
 8004512:	d10e      	bne.n	8004532 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004514:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004518:	9300      	str	r3, [sp, #0]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2200      	movs	r2, #0
 800451e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f000 f819 	bl	800455a <UART_WaitOnFlagUntilTimeout>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d001      	beq.n	8004532 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e00f      	b.n	8004552 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2220      	movs	r2, #32
 8004536:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2220      	movs	r2, #32
 800453e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004550:	2300      	movs	r3, #0
}
 8004552:	4618      	mov	r0, r3
 8004554:	3710      	adds	r7, #16
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}

0800455a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800455a:	b580      	push	{r7, lr}
 800455c:	b09c      	sub	sp, #112	; 0x70
 800455e:	af00      	add	r7, sp, #0
 8004560:	60f8      	str	r0, [r7, #12]
 8004562:	60b9      	str	r1, [r7, #8]
 8004564:	603b      	str	r3, [r7, #0]
 8004566:	4613      	mov	r3, r2
 8004568:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800456a:	e0a9      	b.n	80046c0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800456c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800456e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004572:	f000 80a5 	beq.w	80046c0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004576:	f7fd fa3b 	bl	80019f0 <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004582:	429a      	cmp	r2, r3
 8004584:	d302      	bcc.n	800458c <UART_WaitOnFlagUntilTimeout+0x32>
 8004586:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004588:	2b00      	cmp	r3, #0
 800458a:	d140      	bne.n	800460e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004592:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004594:	e853 3f00 	ldrex	r3, [r3]
 8004598:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800459a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800459c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80045a0:	667b      	str	r3, [r7, #100]	; 0x64
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	461a      	mov	r2, r3
 80045a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045aa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045ac:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80045b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80045b2:	e841 2300 	strex	r3, r2, [r1]
 80045b6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80045b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1e6      	bne.n	800458c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	3308      	adds	r3, #8
 80045c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045c8:	e853 3f00 	ldrex	r3, [r3]
 80045cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80045ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045d0:	f023 0301 	bic.w	r3, r3, #1
 80045d4:	663b      	str	r3, [r7, #96]	; 0x60
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	3308      	adds	r3, #8
 80045dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80045de:	64ba      	str	r2, [r7, #72]	; 0x48
 80045e0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80045e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045e6:	e841 2300 	strex	r3, r2, [r1]
 80045ea:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80045ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d1e5      	bne.n	80045be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2220      	movs	r2, #32
 80045f6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	2220      	movs	r2, #32
 80045fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e069      	b.n	80046e2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0304 	and.w	r3, r3, #4
 8004618:	2b00      	cmp	r3, #0
 800461a:	d051      	beq.n	80046c0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	69db      	ldr	r3, [r3, #28]
 8004622:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004626:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800462a:	d149      	bne.n	80046c0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004634:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800463c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463e:	e853 3f00 	ldrex	r3, [r3]
 8004642:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004646:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800464a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	461a      	mov	r2, r3
 8004652:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004654:	637b      	str	r3, [r7, #52]	; 0x34
 8004656:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004658:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800465a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800465c:	e841 2300 	strex	r3, r2, [r1]
 8004660:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1e6      	bne.n	8004636 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	3308      	adds	r3, #8
 800466e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	e853 3f00 	ldrex	r3, [r3]
 8004676:	613b      	str	r3, [r7, #16]
   return(result);
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	f023 0301 	bic.w	r3, r3, #1
 800467e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	3308      	adds	r3, #8
 8004686:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004688:	623a      	str	r2, [r7, #32]
 800468a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800468c:	69f9      	ldr	r1, [r7, #28]
 800468e:	6a3a      	ldr	r2, [r7, #32]
 8004690:	e841 2300 	strex	r3, r2, [r1]
 8004694:	61bb      	str	r3, [r7, #24]
   return(result);
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d1e5      	bne.n	8004668 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2220      	movs	r2, #32
 80046a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2220      	movs	r2, #32
 80046a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2220      	movs	r2, #32
 80046b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80046bc:	2303      	movs	r3, #3
 80046be:	e010      	b.n	80046e2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	69da      	ldr	r2, [r3, #28]
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	4013      	ands	r3, r2
 80046ca:	68ba      	ldr	r2, [r7, #8]
 80046cc:	429a      	cmp	r2, r3
 80046ce:	bf0c      	ite	eq
 80046d0:	2301      	moveq	r3, #1
 80046d2:	2300      	movne	r3, #0
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	461a      	mov	r2, r3
 80046d8:	79fb      	ldrb	r3, [r7, #7]
 80046da:	429a      	cmp	r2, r3
 80046dc:	f43f af46 	beq.w	800456c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3770      	adds	r7, #112	; 0x70
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}

080046ea <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80046ea:	b480      	push	{r7}
 80046ec:	b085      	sub	sp, #20
 80046ee:	af00      	add	r7, sp, #0
 80046f0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d101      	bne.n	8004700 <HAL_UARTEx_DisableFifoMode+0x16>
 80046fc:	2302      	movs	r3, #2
 80046fe:	e027      	b.n	8004750 <HAL_UARTEx_DisableFifoMode+0x66>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2224      	movs	r2, #36	; 0x24
 800470c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f022 0201 	bic.w	r2, r2, #1
 8004726:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800472e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2200      	movs	r2, #0
 8004734:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68fa      	ldr	r2, [r7, #12]
 800473c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2220      	movs	r2, #32
 8004742:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2200      	movs	r2, #0
 800474a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800474e:	2300      	movs	r3, #0
}
 8004750:	4618      	mov	r0, r3
 8004752:	3714      	adds	r7, #20
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b084      	sub	sp, #16
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800476c:	2b01      	cmp	r3, #1
 800476e:	d101      	bne.n	8004774 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004770:	2302      	movs	r3, #2
 8004772:	e02d      	b.n	80047d0 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2201      	movs	r2, #1
 8004778:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2224      	movs	r2, #36	; 0x24
 8004780:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f022 0201 	bic.w	r2, r2, #1
 800479a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	683a      	ldr	r2, [r7, #0]
 80047ac:	430a      	orrs	r2, r1
 80047ae:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f000 f84f 	bl	8004854 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68fa      	ldr	r2, [r7, #12]
 80047bc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2220      	movs	r2, #32
 80047c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80047ce:	2300      	movs	r3, #0
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3710      	adds	r7, #16
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}

080047d8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d101      	bne.n	80047f0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80047ec:	2302      	movs	r3, #2
 80047ee:	e02d      	b.n	800484c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2224      	movs	r2, #36	; 0x24
 80047fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f022 0201 	bic.w	r2, r2, #1
 8004816:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	683a      	ldr	r2, [r7, #0]
 8004828:	430a      	orrs	r2, r1
 800482a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f000 f811 	bl	8004854 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2220      	movs	r2, #32
 800483e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800484a:	2300      	movs	r3, #0
}
 800484c:	4618      	mov	r0, r3
 800484e:	3710      	adds	r7, #16
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004854:	b480      	push	{r7}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004860:	2b00      	cmp	r3, #0
 8004862:	d108      	bne.n	8004876 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2201      	movs	r2, #1
 8004868:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2201      	movs	r2, #1
 8004870:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004874:	e031      	b.n	80048da <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004876:	2308      	movs	r3, #8
 8004878:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800487a:	2308      	movs	r3, #8
 800487c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	0e5b      	lsrs	r3, r3, #25
 8004886:	b2db      	uxtb	r3, r3
 8004888:	f003 0307 	and.w	r3, r3, #7
 800488c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	0f5b      	lsrs	r3, r3, #29
 8004896:	b2db      	uxtb	r3, r3
 8004898:	f003 0307 	and.w	r3, r3, #7
 800489c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800489e:	7bbb      	ldrb	r3, [r7, #14]
 80048a0:	7b3a      	ldrb	r2, [r7, #12]
 80048a2:	4911      	ldr	r1, [pc, #68]	; (80048e8 <UARTEx_SetNbDataToProcess+0x94>)
 80048a4:	5c8a      	ldrb	r2, [r1, r2]
 80048a6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80048aa:	7b3a      	ldrb	r2, [r7, #12]
 80048ac:	490f      	ldr	r1, [pc, #60]	; (80048ec <UARTEx_SetNbDataToProcess+0x98>)
 80048ae:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80048b0:	fb93 f3f2 	sdiv	r3, r3, r2
 80048b4:	b29a      	uxth	r2, r3
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80048bc:	7bfb      	ldrb	r3, [r7, #15]
 80048be:	7b7a      	ldrb	r2, [r7, #13]
 80048c0:	4909      	ldr	r1, [pc, #36]	; (80048e8 <UARTEx_SetNbDataToProcess+0x94>)
 80048c2:	5c8a      	ldrb	r2, [r1, r2]
 80048c4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80048c8:	7b7a      	ldrb	r2, [r7, #13]
 80048ca:	4908      	ldr	r1, [pc, #32]	; (80048ec <UARTEx_SetNbDataToProcess+0x98>)
 80048cc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80048ce:	fb93 f3f2 	sdiv	r3, r3, r2
 80048d2:	b29a      	uxth	r2, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80048da:	bf00      	nop
 80048dc:	3714      	adds	r7, #20
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	08007a2c 	.word	0x08007a2c
 80048ec:	08007a34 	.word	0x08007a34

080048f0 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80048f0:	b480      	push	{r7}
 80048f2:	b085      	sub	sp, #20
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	689a      	ldr	r2, [r3, #8]
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	683a      	ldr	r2, [r7, #0]
 8004914:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	683a      	ldr	r2, [r7, #0]
 800491a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	1c5a      	adds	r2, r3, #1
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	601a      	str	r2, [r3, #0]
}
 800492c:	bf00      	nop
 800492e:	3714      	adds	r7, #20
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004938:	b480      	push	{r7}
 800493a:	b085      	sub	sp, #20
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	691b      	ldr	r3, [r3, #16]
 8004944:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	6892      	ldr	r2, [r2, #8]
 800494e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	687a      	ldr	r2, [r7, #4]
 8004956:	6852      	ldr	r2, [r2, #4]
 8004958:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	429a      	cmp	r2, r3
 8004962:	d103      	bne.n	800496c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	689a      	ldr	r2, [r3, #8]
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	1e5a      	subs	r2, r3, #1
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
}
 8004980:	4618      	mov	r0, r3
 8004982:	3714      	adds	r7, #20
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b086      	sub	sp, #24
 8004990:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004992:	2300      	movs	r3, #0
 8004994:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004996:	4b4e      	ldr	r3, [pc, #312]	; (8004ad0 <xTaskIncrementTick+0x144>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2b00      	cmp	r3, #0
 800499c:	f040 808e 	bne.w	8004abc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80049a0:	4b4c      	ldr	r3, [pc, #304]	; (8004ad4 <xTaskIncrementTick+0x148>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	3301      	adds	r3, #1
 80049a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80049a8:	4a4a      	ldr	r2, [pc, #296]	; (8004ad4 <xTaskIncrementTick+0x148>)
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d120      	bne.n	80049f6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80049b4:	4b48      	ldr	r3, [pc, #288]	; (8004ad8 <xTaskIncrementTick+0x14c>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00a      	beq.n	80049d4 <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80049be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c2:	f383 8811 	msr	BASEPRI, r3
 80049c6:	f3bf 8f6f 	isb	sy
 80049ca:	f3bf 8f4f 	dsb	sy
 80049ce:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80049d0:	bf00      	nop
 80049d2:	e7fe      	b.n	80049d2 <xTaskIncrementTick+0x46>
 80049d4:	4b40      	ldr	r3, [pc, #256]	; (8004ad8 <xTaskIncrementTick+0x14c>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	60fb      	str	r3, [r7, #12]
 80049da:	4b40      	ldr	r3, [pc, #256]	; (8004adc <xTaskIncrementTick+0x150>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	4a3e      	ldr	r2, [pc, #248]	; (8004ad8 <xTaskIncrementTick+0x14c>)
 80049e0:	6013      	str	r3, [r2, #0]
 80049e2:	4a3e      	ldr	r2, [pc, #248]	; (8004adc <xTaskIncrementTick+0x150>)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6013      	str	r3, [r2, #0]
 80049e8:	4b3d      	ldr	r3, [pc, #244]	; (8004ae0 <xTaskIncrementTick+0x154>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	3301      	adds	r3, #1
 80049ee:	4a3c      	ldr	r2, [pc, #240]	; (8004ae0 <xTaskIncrementTick+0x154>)
 80049f0:	6013      	str	r3, [r2, #0]
 80049f2:	f000 f8df 	bl	8004bb4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80049f6:	4b3b      	ldr	r3, [pc, #236]	; (8004ae4 <xTaskIncrementTick+0x158>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	693a      	ldr	r2, [r7, #16]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d348      	bcc.n	8004a92 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a00:	4b35      	ldr	r3, [pc, #212]	; (8004ad8 <xTaskIncrementTick+0x14c>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d104      	bne.n	8004a14 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a0a:	4b36      	ldr	r3, [pc, #216]	; (8004ae4 <xTaskIncrementTick+0x158>)
 8004a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a10:	601a      	str	r2, [r3, #0]
					break;
 8004a12:	e03e      	b.n	8004a92 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a14:	4b30      	ldr	r3, [pc, #192]	; (8004ad8 <xTaskIncrementTick+0x14c>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004a1e:	68bb      	ldr	r3, [r7, #8]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004a24:	693a      	ldr	r2, [r7, #16]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d203      	bcs.n	8004a34 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004a2c:	4a2d      	ldr	r2, [pc, #180]	; (8004ae4 <xTaskIncrementTick+0x158>)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004a32:	e02e      	b.n	8004a92 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	3304      	adds	r3, #4
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f7ff ff7d 	bl	8004938 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d004      	beq.n	8004a50 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	3318      	adds	r3, #24
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7ff ff74 	bl	8004938 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a54:	2201      	movs	r2, #1
 8004a56:	409a      	lsls	r2, r3
 8004a58:	4b23      	ldr	r3, [pc, #140]	; (8004ae8 <xTaskIncrementTick+0x15c>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	4a22      	ldr	r2, [pc, #136]	; (8004ae8 <xTaskIncrementTick+0x15c>)
 8004a60:	6013      	str	r3, [r2, #0]
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a66:	4613      	mov	r3, r2
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	4413      	add	r3, r2
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	4a1f      	ldr	r2, [pc, #124]	; (8004aec <xTaskIncrementTick+0x160>)
 8004a70:	441a      	add	r2, r3
 8004a72:	68bb      	ldr	r3, [r7, #8]
 8004a74:	3304      	adds	r3, #4
 8004a76:	4619      	mov	r1, r3
 8004a78:	4610      	mov	r0, r2
 8004a7a:	f7ff ff39 	bl	80048f0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a82:	4b1b      	ldr	r3, [pc, #108]	; (8004af0 <xTaskIncrementTick+0x164>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d3b9      	bcc.n	8004a00 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a90:	e7b6      	b.n	8004a00 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004a92:	4b17      	ldr	r3, [pc, #92]	; (8004af0 <xTaskIncrementTick+0x164>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a98:	4914      	ldr	r1, [pc, #80]	; (8004aec <xTaskIncrementTick+0x160>)
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	4413      	add	r3, r2
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	440b      	add	r3, r1
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	2b01      	cmp	r3, #1
 8004aa8:	d901      	bls.n	8004aae <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004aae:	4b11      	ldr	r3, [pc, #68]	; (8004af4 <xTaskIncrementTick+0x168>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d007      	beq.n	8004ac6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004ab6:	2301      	movs	r3, #1
 8004ab8:	617b      	str	r3, [r7, #20]
 8004aba:	e004      	b.n	8004ac6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004abc:	4b0e      	ldr	r3, [pc, #56]	; (8004af8 <xTaskIncrementTick+0x16c>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	4a0d      	ldr	r2, [pc, #52]	; (8004af8 <xTaskIncrementTick+0x16c>)
 8004ac4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004ac6:	697b      	ldr	r3, [r7, #20]
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3718      	adds	r7, #24
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}
 8004ad0:	200003cc 	.word	0x200003cc
 8004ad4:	200003b0 	.word	0x200003b0
 8004ad8:	200003a8 	.word	0x200003a8
 8004adc:	200003ac 	.word	0x200003ac
 8004ae0:	200003c4 	.word	0x200003c4
 8004ae4:	200003c8 	.word	0x200003c8
 8004ae8:	200003b4 	.word	0x200003b4
 8004aec:	2000031c 	.word	0x2000031c
 8004af0:	20000318 	.word	0x20000318
 8004af4:	200003c0 	.word	0x200003c0
 8004af8:	200003bc 	.word	0x200003bc

08004afc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004afc:	b480      	push	{r7}
 8004afe:	b087      	sub	sp, #28
 8004b00:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004b02:	4b27      	ldr	r3, [pc, #156]	; (8004ba0 <vTaskSwitchContext+0xa4>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d003      	beq.n	8004b12 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004b0a:	4b26      	ldr	r3, [pc, #152]	; (8004ba4 <vTaskSwitchContext+0xa8>)
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004b10:	e03f      	b.n	8004b92 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8004b12:	4b24      	ldr	r3, [pc, #144]	; (8004ba4 <vTaskSwitchContext+0xa8>)
 8004b14:	2200      	movs	r2, #0
 8004b16:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b18:	4b23      	ldr	r3, [pc, #140]	; (8004ba8 <vTaskSwitchContext+0xac>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	fab3 f383 	clz	r3, r3
 8004b24:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004b26:	7afb      	ldrb	r3, [r7, #11]
 8004b28:	f1c3 031f 	rsb	r3, r3, #31
 8004b2c:	617b      	str	r3, [r7, #20]
 8004b2e:	491f      	ldr	r1, [pc, #124]	; (8004bac <vTaskSwitchContext+0xb0>)
 8004b30:	697a      	ldr	r2, [r7, #20]
 8004b32:	4613      	mov	r3, r2
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	4413      	add	r3, r2
 8004b38:	009b      	lsls	r3, r3, #2
 8004b3a:	440b      	add	r3, r1
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d10a      	bne.n	8004b58 <vTaskSwitchContext+0x5c>
	__asm volatile
 8004b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b46:	f383 8811 	msr	BASEPRI, r3
 8004b4a:	f3bf 8f6f 	isb	sy
 8004b4e:	f3bf 8f4f 	dsb	sy
 8004b52:	607b      	str	r3, [r7, #4]
}
 8004b54:	bf00      	nop
 8004b56:	e7fe      	b.n	8004b56 <vTaskSwitchContext+0x5a>
 8004b58:	697a      	ldr	r2, [r7, #20]
 8004b5a:	4613      	mov	r3, r2
 8004b5c:	009b      	lsls	r3, r3, #2
 8004b5e:	4413      	add	r3, r2
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	4a12      	ldr	r2, [pc, #72]	; (8004bac <vTaskSwitchContext+0xb0>)
 8004b64:	4413      	add	r3, r2
 8004b66:	613b      	str	r3, [r7, #16]
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	685a      	ldr	r2, [r3, #4]
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	605a      	str	r2, [r3, #4]
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	685a      	ldr	r2, [r3, #4]
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	3308      	adds	r3, #8
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d104      	bne.n	8004b88 <vTaskSwitchContext+0x8c>
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	685a      	ldr	r2, [r3, #4]
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	605a      	str	r2, [r3, #4]
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	4a08      	ldr	r2, [pc, #32]	; (8004bb0 <vTaskSwitchContext+0xb4>)
 8004b90:	6013      	str	r3, [r2, #0]
}
 8004b92:	bf00      	nop
 8004b94:	371c      	adds	r7, #28
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	200003cc 	.word	0x200003cc
 8004ba4:	200003c0 	.word	0x200003c0
 8004ba8:	200003b4 	.word	0x200003b4
 8004bac:	2000031c 	.word	0x2000031c
 8004bb0:	20000318 	.word	0x20000318

08004bb4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004bba:	4b0c      	ldr	r3, [pc, #48]	; (8004bec <prvResetNextTaskUnblockTime+0x38>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d104      	bne.n	8004bce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004bc4:	4b0a      	ldr	r3, [pc, #40]	; (8004bf0 <prvResetNextTaskUnblockTime+0x3c>)
 8004bc6:	f04f 32ff 	mov.w	r2, #4294967295
 8004bca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004bcc:	e008      	b.n	8004be0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bce:	4b07      	ldr	r3, [pc, #28]	; (8004bec <prvResetNextTaskUnblockTime+0x38>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	68db      	ldr	r3, [r3, #12]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	4a04      	ldr	r2, [pc, #16]	; (8004bf0 <prvResetNextTaskUnblockTime+0x3c>)
 8004bde:	6013      	str	r3, [r2, #0]
}
 8004be0:	bf00      	nop
 8004be2:	370c      	adds	r7, #12
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr
 8004bec:	200003a8 	.word	0x200003a8
 8004bf0:	200003c8 	.word	0x200003c8

08004bf4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b083      	sub	sp, #12
 8004bf8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004bfa:	4b0b      	ldr	r3, [pc, #44]	; (8004c28 <xTaskGetSchedulerState+0x34>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d102      	bne.n	8004c08 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004c02:	2301      	movs	r3, #1
 8004c04:	607b      	str	r3, [r7, #4]
 8004c06:	e008      	b.n	8004c1a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c08:	4b08      	ldr	r3, [pc, #32]	; (8004c2c <xTaskGetSchedulerState+0x38>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d102      	bne.n	8004c16 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004c10:	2302      	movs	r3, #2
 8004c12:	607b      	str	r3, [r7, #4]
 8004c14:	e001      	b.n	8004c1a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004c16:	2300      	movs	r3, #0
 8004c18:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004c1a:	687b      	ldr	r3, [r7, #4]
	}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr
 8004c28:	200003b8 	.word	0x200003b8
 8004c2c:	200003cc 	.word	0x200003cc

08004c30 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004c30:	4b07      	ldr	r3, [pc, #28]	; (8004c50 <pxCurrentTCBConst2>)
 8004c32:	6819      	ldr	r1, [r3, #0]
 8004c34:	6808      	ldr	r0, [r1, #0]
 8004c36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c3a:	f380 8809 	msr	PSP, r0
 8004c3e:	f3bf 8f6f 	isb	sy
 8004c42:	f04f 0000 	mov.w	r0, #0
 8004c46:	f380 8811 	msr	BASEPRI, r0
 8004c4a:	4770      	bx	lr
 8004c4c:	f3af 8000 	nop.w

08004c50 <pxCurrentTCBConst2>:
 8004c50:	20000318 	.word	0x20000318
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004c54:	bf00      	nop
 8004c56:	bf00      	nop
	...

08004c60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004c60:	f3ef 8009 	mrs	r0, PSP
 8004c64:	f3bf 8f6f 	isb	sy
 8004c68:	4b15      	ldr	r3, [pc, #84]	; (8004cc0 <pxCurrentTCBConst>)
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	f01e 0f10 	tst.w	lr, #16
 8004c70:	bf08      	it	eq
 8004c72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004c76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c7a:	6010      	str	r0, [r2, #0]
 8004c7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004c80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004c84:	f380 8811 	msr	BASEPRI, r0
 8004c88:	f3bf 8f4f 	dsb	sy
 8004c8c:	f3bf 8f6f 	isb	sy
 8004c90:	f7ff ff34 	bl	8004afc <vTaskSwitchContext>
 8004c94:	f04f 0000 	mov.w	r0, #0
 8004c98:	f380 8811 	msr	BASEPRI, r0
 8004c9c:	bc09      	pop	{r0, r3}
 8004c9e:	6819      	ldr	r1, [r3, #0]
 8004ca0:	6808      	ldr	r0, [r1, #0]
 8004ca2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ca6:	f01e 0f10 	tst.w	lr, #16
 8004caa:	bf08      	it	eq
 8004cac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004cb0:	f380 8809 	msr	PSP, r0
 8004cb4:	f3bf 8f6f 	isb	sy
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	f3af 8000 	nop.w

08004cc0 <pxCurrentTCBConst>:
 8004cc0:	20000318 	.word	0x20000318
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004cc4:	bf00      	nop
 8004cc6:	bf00      	nop

08004cc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b082      	sub	sp, #8
 8004ccc:	af00      	add	r7, sp, #0
	__asm volatile
 8004cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd2:	f383 8811 	msr	BASEPRI, r3
 8004cd6:	f3bf 8f6f 	isb	sy
 8004cda:	f3bf 8f4f 	dsb	sy
 8004cde:	607b      	str	r3, [r7, #4]
}
 8004ce0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004ce2:	f7ff fe53 	bl	800498c <xTaskIncrementTick>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d003      	beq.n	8004cf4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004cec:	4b06      	ldr	r3, [pc, #24]	; (8004d08 <xPortSysTickHandler+0x40>)
 8004cee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cf2:	601a      	str	r2, [r3, #0]
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004cfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004d00:	bf00      	nop
 8004d02:	3708      	adds	r7, #8
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	e000ed04 	.word	0xe000ed04

08004d0c <__errno>:
 8004d0c:	4b01      	ldr	r3, [pc, #4]	; (8004d14 <__errno+0x8>)
 8004d0e:	6818      	ldr	r0, [r3, #0]
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	2000000c 	.word	0x2000000c

08004d18 <__libc_init_array>:
 8004d18:	b570      	push	{r4, r5, r6, lr}
 8004d1a:	4d0d      	ldr	r5, [pc, #52]	; (8004d50 <__libc_init_array+0x38>)
 8004d1c:	4c0d      	ldr	r4, [pc, #52]	; (8004d54 <__libc_init_array+0x3c>)
 8004d1e:	1b64      	subs	r4, r4, r5
 8004d20:	10a4      	asrs	r4, r4, #2
 8004d22:	2600      	movs	r6, #0
 8004d24:	42a6      	cmp	r6, r4
 8004d26:	d109      	bne.n	8004d3c <__libc_init_array+0x24>
 8004d28:	4d0b      	ldr	r5, [pc, #44]	; (8004d58 <__libc_init_array+0x40>)
 8004d2a:	4c0c      	ldr	r4, [pc, #48]	; (8004d5c <__libc_init_array+0x44>)
 8004d2c:	f002 fdc4 	bl	80078b8 <_init>
 8004d30:	1b64      	subs	r4, r4, r5
 8004d32:	10a4      	asrs	r4, r4, #2
 8004d34:	2600      	movs	r6, #0
 8004d36:	42a6      	cmp	r6, r4
 8004d38:	d105      	bne.n	8004d46 <__libc_init_array+0x2e>
 8004d3a:	bd70      	pop	{r4, r5, r6, pc}
 8004d3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d40:	4798      	blx	r3
 8004d42:	3601      	adds	r6, #1
 8004d44:	e7ee      	b.n	8004d24 <__libc_init_array+0xc>
 8004d46:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d4a:	4798      	blx	r3
 8004d4c:	3601      	adds	r6, #1
 8004d4e:	e7f2      	b.n	8004d36 <__libc_init_array+0x1e>
 8004d50:	08007e1c 	.word	0x08007e1c
 8004d54:	08007e1c 	.word	0x08007e1c
 8004d58:	08007e1c 	.word	0x08007e1c
 8004d5c:	08007e20 	.word	0x08007e20

08004d60 <memcpy>:
 8004d60:	440a      	add	r2, r1
 8004d62:	4291      	cmp	r1, r2
 8004d64:	f100 33ff 	add.w	r3, r0, #4294967295
 8004d68:	d100      	bne.n	8004d6c <memcpy+0xc>
 8004d6a:	4770      	bx	lr
 8004d6c:	b510      	push	{r4, lr}
 8004d6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d76:	4291      	cmp	r1, r2
 8004d78:	d1f9      	bne.n	8004d6e <memcpy+0xe>
 8004d7a:	bd10      	pop	{r4, pc}

08004d7c <memset>:
 8004d7c:	4402      	add	r2, r0
 8004d7e:	4603      	mov	r3, r0
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d100      	bne.n	8004d86 <memset+0xa>
 8004d84:	4770      	bx	lr
 8004d86:	f803 1b01 	strb.w	r1, [r3], #1
 8004d8a:	e7f9      	b.n	8004d80 <memset+0x4>

08004d8c <__cvt>:
 8004d8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d90:	ec55 4b10 	vmov	r4, r5, d0
 8004d94:	2d00      	cmp	r5, #0
 8004d96:	460e      	mov	r6, r1
 8004d98:	4619      	mov	r1, r3
 8004d9a:	462b      	mov	r3, r5
 8004d9c:	bfbb      	ittet	lt
 8004d9e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004da2:	461d      	movlt	r5, r3
 8004da4:	2300      	movge	r3, #0
 8004da6:	232d      	movlt	r3, #45	; 0x2d
 8004da8:	700b      	strb	r3, [r1, #0]
 8004daa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004dac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004db0:	4691      	mov	r9, r2
 8004db2:	f023 0820 	bic.w	r8, r3, #32
 8004db6:	bfbc      	itt	lt
 8004db8:	4622      	movlt	r2, r4
 8004dba:	4614      	movlt	r4, r2
 8004dbc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004dc0:	d005      	beq.n	8004dce <__cvt+0x42>
 8004dc2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004dc6:	d100      	bne.n	8004dca <__cvt+0x3e>
 8004dc8:	3601      	adds	r6, #1
 8004dca:	2102      	movs	r1, #2
 8004dcc:	e000      	b.n	8004dd0 <__cvt+0x44>
 8004dce:	2103      	movs	r1, #3
 8004dd0:	ab03      	add	r3, sp, #12
 8004dd2:	9301      	str	r3, [sp, #4]
 8004dd4:	ab02      	add	r3, sp, #8
 8004dd6:	9300      	str	r3, [sp, #0]
 8004dd8:	ec45 4b10 	vmov	d0, r4, r5
 8004ddc:	4653      	mov	r3, sl
 8004dde:	4632      	mov	r2, r6
 8004de0:	f000 fe1a 	bl	8005a18 <_dtoa_r>
 8004de4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004de8:	4607      	mov	r7, r0
 8004dea:	d102      	bne.n	8004df2 <__cvt+0x66>
 8004dec:	f019 0f01 	tst.w	r9, #1
 8004df0:	d022      	beq.n	8004e38 <__cvt+0xac>
 8004df2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004df6:	eb07 0906 	add.w	r9, r7, r6
 8004dfa:	d110      	bne.n	8004e1e <__cvt+0x92>
 8004dfc:	783b      	ldrb	r3, [r7, #0]
 8004dfe:	2b30      	cmp	r3, #48	; 0x30
 8004e00:	d10a      	bne.n	8004e18 <__cvt+0x8c>
 8004e02:	2200      	movs	r2, #0
 8004e04:	2300      	movs	r3, #0
 8004e06:	4620      	mov	r0, r4
 8004e08:	4629      	mov	r1, r5
 8004e0a:	f7fb fe85 	bl	8000b18 <__aeabi_dcmpeq>
 8004e0e:	b918      	cbnz	r0, 8004e18 <__cvt+0x8c>
 8004e10:	f1c6 0601 	rsb	r6, r6, #1
 8004e14:	f8ca 6000 	str.w	r6, [sl]
 8004e18:	f8da 3000 	ldr.w	r3, [sl]
 8004e1c:	4499      	add	r9, r3
 8004e1e:	2200      	movs	r2, #0
 8004e20:	2300      	movs	r3, #0
 8004e22:	4620      	mov	r0, r4
 8004e24:	4629      	mov	r1, r5
 8004e26:	f7fb fe77 	bl	8000b18 <__aeabi_dcmpeq>
 8004e2a:	b108      	cbz	r0, 8004e30 <__cvt+0xa4>
 8004e2c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004e30:	2230      	movs	r2, #48	; 0x30
 8004e32:	9b03      	ldr	r3, [sp, #12]
 8004e34:	454b      	cmp	r3, r9
 8004e36:	d307      	bcc.n	8004e48 <__cvt+0xbc>
 8004e38:	9b03      	ldr	r3, [sp, #12]
 8004e3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e3c:	1bdb      	subs	r3, r3, r7
 8004e3e:	4638      	mov	r0, r7
 8004e40:	6013      	str	r3, [r2, #0]
 8004e42:	b004      	add	sp, #16
 8004e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e48:	1c59      	adds	r1, r3, #1
 8004e4a:	9103      	str	r1, [sp, #12]
 8004e4c:	701a      	strb	r2, [r3, #0]
 8004e4e:	e7f0      	b.n	8004e32 <__cvt+0xa6>

08004e50 <__exponent>:
 8004e50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e52:	4603      	mov	r3, r0
 8004e54:	2900      	cmp	r1, #0
 8004e56:	bfb8      	it	lt
 8004e58:	4249      	neglt	r1, r1
 8004e5a:	f803 2b02 	strb.w	r2, [r3], #2
 8004e5e:	bfb4      	ite	lt
 8004e60:	222d      	movlt	r2, #45	; 0x2d
 8004e62:	222b      	movge	r2, #43	; 0x2b
 8004e64:	2909      	cmp	r1, #9
 8004e66:	7042      	strb	r2, [r0, #1]
 8004e68:	dd2a      	ble.n	8004ec0 <__exponent+0x70>
 8004e6a:	f10d 0407 	add.w	r4, sp, #7
 8004e6e:	46a4      	mov	ip, r4
 8004e70:	270a      	movs	r7, #10
 8004e72:	46a6      	mov	lr, r4
 8004e74:	460a      	mov	r2, r1
 8004e76:	fb91 f6f7 	sdiv	r6, r1, r7
 8004e7a:	fb07 1516 	mls	r5, r7, r6, r1
 8004e7e:	3530      	adds	r5, #48	; 0x30
 8004e80:	2a63      	cmp	r2, #99	; 0x63
 8004e82:	f104 34ff 	add.w	r4, r4, #4294967295
 8004e86:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004e8a:	4631      	mov	r1, r6
 8004e8c:	dcf1      	bgt.n	8004e72 <__exponent+0x22>
 8004e8e:	3130      	adds	r1, #48	; 0x30
 8004e90:	f1ae 0502 	sub.w	r5, lr, #2
 8004e94:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004e98:	1c44      	adds	r4, r0, #1
 8004e9a:	4629      	mov	r1, r5
 8004e9c:	4561      	cmp	r1, ip
 8004e9e:	d30a      	bcc.n	8004eb6 <__exponent+0x66>
 8004ea0:	f10d 0209 	add.w	r2, sp, #9
 8004ea4:	eba2 020e 	sub.w	r2, r2, lr
 8004ea8:	4565      	cmp	r5, ip
 8004eaa:	bf88      	it	hi
 8004eac:	2200      	movhi	r2, #0
 8004eae:	4413      	add	r3, r2
 8004eb0:	1a18      	subs	r0, r3, r0
 8004eb2:	b003      	add	sp, #12
 8004eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004eb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004eba:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004ebe:	e7ed      	b.n	8004e9c <__exponent+0x4c>
 8004ec0:	2330      	movs	r3, #48	; 0x30
 8004ec2:	3130      	adds	r1, #48	; 0x30
 8004ec4:	7083      	strb	r3, [r0, #2]
 8004ec6:	70c1      	strb	r1, [r0, #3]
 8004ec8:	1d03      	adds	r3, r0, #4
 8004eca:	e7f1      	b.n	8004eb0 <__exponent+0x60>

08004ecc <_printf_float>:
 8004ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ed0:	ed2d 8b02 	vpush	{d8}
 8004ed4:	b08d      	sub	sp, #52	; 0x34
 8004ed6:	460c      	mov	r4, r1
 8004ed8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004edc:	4616      	mov	r6, r2
 8004ede:	461f      	mov	r7, r3
 8004ee0:	4605      	mov	r5, r0
 8004ee2:	f001 fd3f 	bl	8006964 <_localeconv_r>
 8004ee6:	f8d0 a000 	ldr.w	sl, [r0]
 8004eea:	4650      	mov	r0, sl
 8004eec:	f7fb f998 	bl	8000220 <strlen>
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	930a      	str	r3, [sp, #40]	; 0x28
 8004ef4:	6823      	ldr	r3, [r4, #0]
 8004ef6:	9305      	str	r3, [sp, #20]
 8004ef8:	f8d8 3000 	ldr.w	r3, [r8]
 8004efc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004f00:	3307      	adds	r3, #7
 8004f02:	f023 0307 	bic.w	r3, r3, #7
 8004f06:	f103 0208 	add.w	r2, r3, #8
 8004f0a:	f8c8 2000 	str.w	r2, [r8]
 8004f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f12:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004f16:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004f1a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004f1e:	9307      	str	r3, [sp, #28]
 8004f20:	f8cd 8018 	str.w	r8, [sp, #24]
 8004f24:	ee08 0a10 	vmov	s16, r0
 8004f28:	4b9f      	ldr	r3, [pc, #636]	; (80051a8 <_printf_float+0x2dc>)
 8004f2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f2e:	f04f 32ff 	mov.w	r2, #4294967295
 8004f32:	f7fb fe23 	bl	8000b7c <__aeabi_dcmpun>
 8004f36:	bb88      	cbnz	r0, 8004f9c <_printf_float+0xd0>
 8004f38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004f3c:	4b9a      	ldr	r3, [pc, #616]	; (80051a8 <_printf_float+0x2dc>)
 8004f3e:	f04f 32ff 	mov.w	r2, #4294967295
 8004f42:	f7fb fdfd 	bl	8000b40 <__aeabi_dcmple>
 8004f46:	bb48      	cbnz	r0, 8004f9c <_printf_float+0xd0>
 8004f48:	2200      	movs	r2, #0
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	4640      	mov	r0, r8
 8004f4e:	4649      	mov	r1, r9
 8004f50:	f7fb fdec 	bl	8000b2c <__aeabi_dcmplt>
 8004f54:	b110      	cbz	r0, 8004f5c <_printf_float+0x90>
 8004f56:	232d      	movs	r3, #45	; 0x2d
 8004f58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f5c:	4b93      	ldr	r3, [pc, #588]	; (80051ac <_printf_float+0x2e0>)
 8004f5e:	4894      	ldr	r0, [pc, #592]	; (80051b0 <_printf_float+0x2e4>)
 8004f60:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004f64:	bf94      	ite	ls
 8004f66:	4698      	movls	r8, r3
 8004f68:	4680      	movhi	r8, r0
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	6123      	str	r3, [r4, #16]
 8004f6e:	9b05      	ldr	r3, [sp, #20]
 8004f70:	f023 0204 	bic.w	r2, r3, #4
 8004f74:	6022      	str	r2, [r4, #0]
 8004f76:	f04f 0900 	mov.w	r9, #0
 8004f7a:	9700      	str	r7, [sp, #0]
 8004f7c:	4633      	mov	r3, r6
 8004f7e:	aa0b      	add	r2, sp, #44	; 0x2c
 8004f80:	4621      	mov	r1, r4
 8004f82:	4628      	mov	r0, r5
 8004f84:	f000 f9d8 	bl	8005338 <_printf_common>
 8004f88:	3001      	adds	r0, #1
 8004f8a:	f040 8090 	bne.w	80050ae <_printf_float+0x1e2>
 8004f8e:	f04f 30ff 	mov.w	r0, #4294967295
 8004f92:	b00d      	add	sp, #52	; 0x34
 8004f94:	ecbd 8b02 	vpop	{d8}
 8004f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f9c:	4642      	mov	r2, r8
 8004f9e:	464b      	mov	r3, r9
 8004fa0:	4640      	mov	r0, r8
 8004fa2:	4649      	mov	r1, r9
 8004fa4:	f7fb fdea 	bl	8000b7c <__aeabi_dcmpun>
 8004fa8:	b140      	cbz	r0, 8004fbc <_printf_float+0xf0>
 8004faa:	464b      	mov	r3, r9
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	bfbc      	itt	lt
 8004fb0:	232d      	movlt	r3, #45	; 0x2d
 8004fb2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004fb6:	487f      	ldr	r0, [pc, #508]	; (80051b4 <_printf_float+0x2e8>)
 8004fb8:	4b7f      	ldr	r3, [pc, #508]	; (80051b8 <_printf_float+0x2ec>)
 8004fba:	e7d1      	b.n	8004f60 <_printf_float+0x94>
 8004fbc:	6863      	ldr	r3, [r4, #4]
 8004fbe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004fc2:	9206      	str	r2, [sp, #24]
 8004fc4:	1c5a      	adds	r2, r3, #1
 8004fc6:	d13f      	bne.n	8005048 <_printf_float+0x17c>
 8004fc8:	2306      	movs	r3, #6
 8004fca:	6063      	str	r3, [r4, #4]
 8004fcc:	9b05      	ldr	r3, [sp, #20]
 8004fce:	6861      	ldr	r1, [r4, #4]
 8004fd0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	9303      	str	r3, [sp, #12]
 8004fd8:	ab0a      	add	r3, sp, #40	; 0x28
 8004fda:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004fde:	ab09      	add	r3, sp, #36	; 0x24
 8004fe0:	ec49 8b10 	vmov	d0, r8, r9
 8004fe4:	9300      	str	r3, [sp, #0]
 8004fe6:	6022      	str	r2, [r4, #0]
 8004fe8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004fec:	4628      	mov	r0, r5
 8004fee:	f7ff fecd 	bl	8004d8c <__cvt>
 8004ff2:	9b06      	ldr	r3, [sp, #24]
 8004ff4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004ff6:	2b47      	cmp	r3, #71	; 0x47
 8004ff8:	4680      	mov	r8, r0
 8004ffa:	d108      	bne.n	800500e <_printf_float+0x142>
 8004ffc:	1cc8      	adds	r0, r1, #3
 8004ffe:	db02      	blt.n	8005006 <_printf_float+0x13a>
 8005000:	6863      	ldr	r3, [r4, #4]
 8005002:	4299      	cmp	r1, r3
 8005004:	dd41      	ble.n	800508a <_printf_float+0x1be>
 8005006:	f1ab 0b02 	sub.w	fp, fp, #2
 800500a:	fa5f fb8b 	uxtb.w	fp, fp
 800500e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005012:	d820      	bhi.n	8005056 <_printf_float+0x18a>
 8005014:	3901      	subs	r1, #1
 8005016:	465a      	mov	r2, fp
 8005018:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800501c:	9109      	str	r1, [sp, #36]	; 0x24
 800501e:	f7ff ff17 	bl	8004e50 <__exponent>
 8005022:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005024:	1813      	adds	r3, r2, r0
 8005026:	2a01      	cmp	r2, #1
 8005028:	4681      	mov	r9, r0
 800502a:	6123      	str	r3, [r4, #16]
 800502c:	dc02      	bgt.n	8005034 <_printf_float+0x168>
 800502e:	6822      	ldr	r2, [r4, #0]
 8005030:	07d2      	lsls	r2, r2, #31
 8005032:	d501      	bpl.n	8005038 <_printf_float+0x16c>
 8005034:	3301      	adds	r3, #1
 8005036:	6123      	str	r3, [r4, #16]
 8005038:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800503c:	2b00      	cmp	r3, #0
 800503e:	d09c      	beq.n	8004f7a <_printf_float+0xae>
 8005040:	232d      	movs	r3, #45	; 0x2d
 8005042:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005046:	e798      	b.n	8004f7a <_printf_float+0xae>
 8005048:	9a06      	ldr	r2, [sp, #24]
 800504a:	2a47      	cmp	r2, #71	; 0x47
 800504c:	d1be      	bne.n	8004fcc <_printf_float+0x100>
 800504e:	2b00      	cmp	r3, #0
 8005050:	d1bc      	bne.n	8004fcc <_printf_float+0x100>
 8005052:	2301      	movs	r3, #1
 8005054:	e7b9      	b.n	8004fca <_printf_float+0xfe>
 8005056:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800505a:	d118      	bne.n	800508e <_printf_float+0x1c2>
 800505c:	2900      	cmp	r1, #0
 800505e:	6863      	ldr	r3, [r4, #4]
 8005060:	dd0b      	ble.n	800507a <_printf_float+0x1ae>
 8005062:	6121      	str	r1, [r4, #16]
 8005064:	b913      	cbnz	r3, 800506c <_printf_float+0x1a0>
 8005066:	6822      	ldr	r2, [r4, #0]
 8005068:	07d0      	lsls	r0, r2, #31
 800506a:	d502      	bpl.n	8005072 <_printf_float+0x1a6>
 800506c:	3301      	adds	r3, #1
 800506e:	440b      	add	r3, r1
 8005070:	6123      	str	r3, [r4, #16]
 8005072:	65a1      	str	r1, [r4, #88]	; 0x58
 8005074:	f04f 0900 	mov.w	r9, #0
 8005078:	e7de      	b.n	8005038 <_printf_float+0x16c>
 800507a:	b913      	cbnz	r3, 8005082 <_printf_float+0x1b6>
 800507c:	6822      	ldr	r2, [r4, #0]
 800507e:	07d2      	lsls	r2, r2, #31
 8005080:	d501      	bpl.n	8005086 <_printf_float+0x1ba>
 8005082:	3302      	adds	r3, #2
 8005084:	e7f4      	b.n	8005070 <_printf_float+0x1a4>
 8005086:	2301      	movs	r3, #1
 8005088:	e7f2      	b.n	8005070 <_printf_float+0x1a4>
 800508a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800508e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005090:	4299      	cmp	r1, r3
 8005092:	db05      	blt.n	80050a0 <_printf_float+0x1d4>
 8005094:	6823      	ldr	r3, [r4, #0]
 8005096:	6121      	str	r1, [r4, #16]
 8005098:	07d8      	lsls	r0, r3, #31
 800509a:	d5ea      	bpl.n	8005072 <_printf_float+0x1a6>
 800509c:	1c4b      	adds	r3, r1, #1
 800509e:	e7e7      	b.n	8005070 <_printf_float+0x1a4>
 80050a0:	2900      	cmp	r1, #0
 80050a2:	bfd4      	ite	le
 80050a4:	f1c1 0202 	rsble	r2, r1, #2
 80050a8:	2201      	movgt	r2, #1
 80050aa:	4413      	add	r3, r2
 80050ac:	e7e0      	b.n	8005070 <_printf_float+0x1a4>
 80050ae:	6823      	ldr	r3, [r4, #0]
 80050b0:	055a      	lsls	r2, r3, #21
 80050b2:	d407      	bmi.n	80050c4 <_printf_float+0x1f8>
 80050b4:	6923      	ldr	r3, [r4, #16]
 80050b6:	4642      	mov	r2, r8
 80050b8:	4631      	mov	r1, r6
 80050ba:	4628      	mov	r0, r5
 80050bc:	47b8      	blx	r7
 80050be:	3001      	adds	r0, #1
 80050c0:	d12c      	bne.n	800511c <_printf_float+0x250>
 80050c2:	e764      	b.n	8004f8e <_printf_float+0xc2>
 80050c4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80050c8:	f240 80e0 	bls.w	800528c <_printf_float+0x3c0>
 80050cc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80050d0:	2200      	movs	r2, #0
 80050d2:	2300      	movs	r3, #0
 80050d4:	f7fb fd20 	bl	8000b18 <__aeabi_dcmpeq>
 80050d8:	2800      	cmp	r0, #0
 80050da:	d034      	beq.n	8005146 <_printf_float+0x27a>
 80050dc:	4a37      	ldr	r2, [pc, #220]	; (80051bc <_printf_float+0x2f0>)
 80050de:	2301      	movs	r3, #1
 80050e0:	4631      	mov	r1, r6
 80050e2:	4628      	mov	r0, r5
 80050e4:	47b8      	blx	r7
 80050e6:	3001      	adds	r0, #1
 80050e8:	f43f af51 	beq.w	8004f8e <_printf_float+0xc2>
 80050ec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80050f0:	429a      	cmp	r2, r3
 80050f2:	db02      	blt.n	80050fa <_printf_float+0x22e>
 80050f4:	6823      	ldr	r3, [r4, #0]
 80050f6:	07d8      	lsls	r0, r3, #31
 80050f8:	d510      	bpl.n	800511c <_printf_float+0x250>
 80050fa:	ee18 3a10 	vmov	r3, s16
 80050fe:	4652      	mov	r2, sl
 8005100:	4631      	mov	r1, r6
 8005102:	4628      	mov	r0, r5
 8005104:	47b8      	blx	r7
 8005106:	3001      	adds	r0, #1
 8005108:	f43f af41 	beq.w	8004f8e <_printf_float+0xc2>
 800510c:	f04f 0800 	mov.w	r8, #0
 8005110:	f104 091a 	add.w	r9, r4, #26
 8005114:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005116:	3b01      	subs	r3, #1
 8005118:	4543      	cmp	r3, r8
 800511a:	dc09      	bgt.n	8005130 <_printf_float+0x264>
 800511c:	6823      	ldr	r3, [r4, #0]
 800511e:	079b      	lsls	r3, r3, #30
 8005120:	f100 8105 	bmi.w	800532e <_printf_float+0x462>
 8005124:	68e0      	ldr	r0, [r4, #12]
 8005126:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005128:	4298      	cmp	r0, r3
 800512a:	bfb8      	it	lt
 800512c:	4618      	movlt	r0, r3
 800512e:	e730      	b.n	8004f92 <_printf_float+0xc6>
 8005130:	2301      	movs	r3, #1
 8005132:	464a      	mov	r2, r9
 8005134:	4631      	mov	r1, r6
 8005136:	4628      	mov	r0, r5
 8005138:	47b8      	blx	r7
 800513a:	3001      	adds	r0, #1
 800513c:	f43f af27 	beq.w	8004f8e <_printf_float+0xc2>
 8005140:	f108 0801 	add.w	r8, r8, #1
 8005144:	e7e6      	b.n	8005114 <_printf_float+0x248>
 8005146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005148:	2b00      	cmp	r3, #0
 800514a:	dc39      	bgt.n	80051c0 <_printf_float+0x2f4>
 800514c:	4a1b      	ldr	r2, [pc, #108]	; (80051bc <_printf_float+0x2f0>)
 800514e:	2301      	movs	r3, #1
 8005150:	4631      	mov	r1, r6
 8005152:	4628      	mov	r0, r5
 8005154:	47b8      	blx	r7
 8005156:	3001      	adds	r0, #1
 8005158:	f43f af19 	beq.w	8004f8e <_printf_float+0xc2>
 800515c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005160:	4313      	orrs	r3, r2
 8005162:	d102      	bne.n	800516a <_printf_float+0x29e>
 8005164:	6823      	ldr	r3, [r4, #0]
 8005166:	07d9      	lsls	r1, r3, #31
 8005168:	d5d8      	bpl.n	800511c <_printf_float+0x250>
 800516a:	ee18 3a10 	vmov	r3, s16
 800516e:	4652      	mov	r2, sl
 8005170:	4631      	mov	r1, r6
 8005172:	4628      	mov	r0, r5
 8005174:	47b8      	blx	r7
 8005176:	3001      	adds	r0, #1
 8005178:	f43f af09 	beq.w	8004f8e <_printf_float+0xc2>
 800517c:	f04f 0900 	mov.w	r9, #0
 8005180:	f104 0a1a 	add.w	sl, r4, #26
 8005184:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005186:	425b      	negs	r3, r3
 8005188:	454b      	cmp	r3, r9
 800518a:	dc01      	bgt.n	8005190 <_printf_float+0x2c4>
 800518c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800518e:	e792      	b.n	80050b6 <_printf_float+0x1ea>
 8005190:	2301      	movs	r3, #1
 8005192:	4652      	mov	r2, sl
 8005194:	4631      	mov	r1, r6
 8005196:	4628      	mov	r0, r5
 8005198:	47b8      	blx	r7
 800519a:	3001      	adds	r0, #1
 800519c:	f43f aef7 	beq.w	8004f8e <_printf_float+0xc2>
 80051a0:	f109 0901 	add.w	r9, r9, #1
 80051a4:	e7ee      	b.n	8005184 <_printf_float+0x2b8>
 80051a6:	bf00      	nop
 80051a8:	7fefffff 	.word	0x7fefffff
 80051ac:	08007a40 	.word	0x08007a40
 80051b0:	08007a44 	.word	0x08007a44
 80051b4:	08007a4c 	.word	0x08007a4c
 80051b8:	08007a48 	.word	0x08007a48
 80051bc:	08007a50 	.word	0x08007a50
 80051c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80051c2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80051c4:	429a      	cmp	r2, r3
 80051c6:	bfa8      	it	ge
 80051c8:	461a      	movge	r2, r3
 80051ca:	2a00      	cmp	r2, #0
 80051cc:	4691      	mov	r9, r2
 80051ce:	dc37      	bgt.n	8005240 <_printf_float+0x374>
 80051d0:	f04f 0b00 	mov.w	fp, #0
 80051d4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80051d8:	f104 021a 	add.w	r2, r4, #26
 80051dc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80051de:	9305      	str	r3, [sp, #20]
 80051e0:	eba3 0309 	sub.w	r3, r3, r9
 80051e4:	455b      	cmp	r3, fp
 80051e6:	dc33      	bgt.n	8005250 <_printf_float+0x384>
 80051e8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80051ec:	429a      	cmp	r2, r3
 80051ee:	db3b      	blt.n	8005268 <_printf_float+0x39c>
 80051f0:	6823      	ldr	r3, [r4, #0]
 80051f2:	07da      	lsls	r2, r3, #31
 80051f4:	d438      	bmi.n	8005268 <_printf_float+0x39c>
 80051f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051f8:	9a05      	ldr	r2, [sp, #20]
 80051fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80051fc:	1a9a      	subs	r2, r3, r2
 80051fe:	eba3 0901 	sub.w	r9, r3, r1
 8005202:	4591      	cmp	r9, r2
 8005204:	bfa8      	it	ge
 8005206:	4691      	movge	r9, r2
 8005208:	f1b9 0f00 	cmp.w	r9, #0
 800520c:	dc35      	bgt.n	800527a <_printf_float+0x3ae>
 800520e:	f04f 0800 	mov.w	r8, #0
 8005212:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005216:	f104 0a1a 	add.w	sl, r4, #26
 800521a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800521e:	1a9b      	subs	r3, r3, r2
 8005220:	eba3 0309 	sub.w	r3, r3, r9
 8005224:	4543      	cmp	r3, r8
 8005226:	f77f af79 	ble.w	800511c <_printf_float+0x250>
 800522a:	2301      	movs	r3, #1
 800522c:	4652      	mov	r2, sl
 800522e:	4631      	mov	r1, r6
 8005230:	4628      	mov	r0, r5
 8005232:	47b8      	blx	r7
 8005234:	3001      	adds	r0, #1
 8005236:	f43f aeaa 	beq.w	8004f8e <_printf_float+0xc2>
 800523a:	f108 0801 	add.w	r8, r8, #1
 800523e:	e7ec      	b.n	800521a <_printf_float+0x34e>
 8005240:	4613      	mov	r3, r2
 8005242:	4631      	mov	r1, r6
 8005244:	4642      	mov	r2, r8
 8005246:	4628      	mov	r0, r5
 8005248:	47b8      	blx	r7
 800524a:	3001      	adds	r0, #1
 800524c:	d1c0      	bne.n	80051d0 <_printf_float+0x304>
 800524e:	e69e      	b.n	8004f8e <_printf_float+0xc2>
 8005250:	2301      	movs	r3, #1
 8005252:	4631      	mov	r1, r6
 8005254:	4628      	mov	r0, r5
 8005256:	9205      	str	r2, [sp, #20]
 8005258:	47b8      	blx	r7
 800525a:	3001      	adds	r0, #1
 800525c:	f43f ae97 	beq.w	8004f8e <_printf_float+0xc2>
 8005260:	9a05      	ldr	r2, [sp, #20]
 8005262:	f10b 0b01 	add.w	fp, fp, #1
 8005266:	e7b9      	b.n	80051dc <_printf_float+0x310>
 8005268:	ee18 3a10 	vmov	r3, s16
 800526c:	4652      	mov	r2, sl
 800526e:	4631      	mov	r1, r6
 8005270:	4628      	mov	r0, r5
 8005272:	47b8      	blx	r7
 8005274:	3001      	adds	r0, #1
 8005276:	d1be      	bne.n	80051f6 <_printf_float+0x32a>
 8005278:	e689      	b.n	8004f8e <_printf_float+0xc2>
 800527a:	9a05      	ldr	r2, [sp, #20]
 800527c:	464b      	mov	r3, r9
 800527e:	4442      	add	r2, r8
 8005280:	4631      	mov	r1, r6
 8005282:	4628      	mov	r0, r5
 8005284:	47b8      	blx	r7
 8005286:	3001      	adds	r0, #1
 8005288:	d1c1      	bne.n	800520e <_printf_float+0x342>
 800528a:	e680      	b.n	8004f8e <_printf_float+0xc2>
 800528c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800528e:	2a01      	cmp	r2, #1
 8005290:	dc01      	bgt.n	8005296 <_printf_float+0x3ca>
 8005292:	07db      	lsls	r3, r3, #31
 8005294:	d538      	bpl.n	8005308 <_printf_float+0x43c>
 8005296:	2301      	movs	r3, #1
 8005298:	4642      	mov	r2, r8
 800529a:	4631      	mov	r1, r6
 800529c:	4628      	mov	r0, r5
 800529e:	47b8      	blx	r7
 80052a0:	3001      	adds	r0, #1
 80052a2:	f43f ae74 	beq.w	8004f8e <_printf_float+0xc2>
 80052a6:	ee18 3a10 	vmov	r3, s16
 80052aa:	4652      	mov	r2, sl
 80052ac:	4631      	mov	r1, r6
 80052ae:	4628      	mov	r0, r5
 80052b0:	47b8      	blx	r7
 80052b2:	3001      	adds	r0, #1
 80052b4:	f43f ae6b 	beq.w	8004f8e <_printf_float+0xc2>
 80052b8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80052bc:	2200      	movs	r2, #0
 80052be:	2300      	movs	r3, #0
 80052c0:	f7fb fc2a 	bl	8000b18 <__aeabi_dcmpeq>
 80052c4:	b9d8      	cbnz	r0, 80052fe <_printf_float+0x432>
 80052c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052c8:	f108 0201 	add.w	r2, r8, #1
 80052cc:	3b01      	subs	r3, #1
 80052ce:	4631      	mov	r1, r6
 80052d0:	4628      	mov	r0, r5
 80052d2:	47b8      	blx	r7
 80052d4:	3001      	adds	r0, #1
 80052d6:	d10e      	bne.n	80052f6 <_printf_float+0x42a>
 80052d8:	e659      	b.n	8004f8e <_printf_float+0xc2>
 80052da:	2301      	movs	r3, #1
 80052dc:	4652      	mov	r2, sl
 80052de:	4631      	mov	r1, r6
 80052e0:	4628      	mov	r0, r5
 80052e2:	47b8      	blx	r7
 80052e4:	3001      	adds	r0, #1
 80052e6:	f43f ae52 	beq.w	8004f8e <_printf_float+0xc2>
 80052ea:	f108 0801 	add.w	r8, r8, #1
 80052ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052f0:	3b01      	subs	r3, #1
 80052f2:	4543      	cmp	r3, r8
 80052f4:	dcf1      	bgt.n	80052da <_printf_float+0x40e>
 80052f6:	464b      	mov	r3, r9
 80052f8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80052fc:	e6dc      	b.n	80050b8 <_printf_float+0x1ec>
 80052fe:	f04f 0800 	mov.w	r8, #0
 8005302:	f104 0a1a 	add.w	sl, r4, #26
 8005306:	e7f2      	b.n	80052ee <_printf_float+0x422>
 8005308:	2301      	movs	r3, #1
 800530a:	4642      	mov	r2, r8
 800530c:	e7df      	b.n	80052ce <_printf_float+0x402>
 800530e:	2301      	movs	r3, #1
 8005310:	464a      	mov	r2, r9
 8005312:	4631      	mov	r1, r6
 8005314:	4628      	mov	r0, r5
 8005316:	47b8      	blx	r7
 8005318:	3001      	adds	r0, #1
 800531a:	f43f ae38 	beq.w	8004f8e <_printf_float+0xc2>
 800531e:	f108 0801 	add.w	r8, r8, #1
 8005322:	68e3      	ldr	r3, [r4, #12]
 8005324:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005326:	1a5b      	subs	r3, r3, r1
 8005328:	4543      	cmp	r3, r8
 800532a:	dcf0      	bgt.n	800530e <_printf_float+0x442>
 800532c:	e6fa      	b.n	8005124 <_printf_float+0x258>
 800532e:	f04f 0800 	mov.w	r8, #0
 8005332:	f104 0919 	add.w	r9, r4, #25
 8005336:	e7f4      	b.n	8005322 <_printf_float+0x456>

08005338 <_printf_common>:
 8005338:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800533c:	4616      	mov	r6, r2
 800533e:	4699      	mov	r9, r3
 8005340:	688a      	ldr	r2, [r1, #8]
 8005342:	690b      	ldr	r3, [r1, #16]
 8005344:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005348:	4293      	cmp	r3, r2
 800534a:	bfb8      	it	lt
 800534c:	4613      	movlt	r3, r2
 800534e:	6033      	str	r3, [r6, #0]
 8005350:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005354:	4607      	mov	r7, r0
 8005356:	460c      	mov	r4, r1
 8005358:	b10a      	cbz	r2, 800535e <_printf_common+0x26>
 800535a:	3301      	adds	r3, #1
 800535c:	6033      	str	r3, [r6, #0]
 800535e:	6823      	ldr	r3, [r4, #0]
 8005360:	0699      	lsls	r1, r3, #26
 8005362:	bf42      	ittt	mi
 8005364:	6833      	ldrmi	r3, [r6, #0]
 8005366:	3302      	addmi	r3, #2
 8005368:	6033      	strmi	r3, [r6, #0]
 800536a:	6825      	ldr	r5, [r4, #0]
 800536c:	f015 0506 	ands.w	r5, r5, #6
 8005370:	d106      	bne.n	8005380 <_printf_common+0x48>
 8005372:	f104 0a19 	add.w	sl, r4, #25
 8005376:	68e3      	ldr	r3, [r4, #12]
 8005378:	6832      	ldr	r2, [r6, #0]
 800537a:	1a9b      	subs	r3, r3, r2
 800537c:	42ab      	cmp	r3, r5
 800537e:	dc26      	bgt.n	80053ce <_printf_common+0x96>
 8005380:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005384:	1e13      	subs	r3, r2, #0
 8005386:	6822      	ldr	r2, [r4, #0]
 8005388:	bf18      	it	ne
 800538a:	2301      	movne	r3, #1
 800538c:	0692      	lsls	r2, r2, #26
 800538e:	d42b      	bmi.n	80053e8 <_printf_common+0xb0>
 8005390:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005394:	4649      	mov	r1, r9
 8005396:	4638      	mov	r0, r7
 8005398:	47c0      	blx	r8
 800539a:	3001      	adds	r0, #1
 800539c:	d01e      	beq.n	80053dc <_printf_common+0xa4>
 800539e:	6823      	ldr	r3, [r4, #0]
 80053a0:	68e5      	ldr	r5, [r4, #12]
 80053a2:	6832      	ldr	r2, [r6, #0]
 80053a4:	f003 0306 	and.w	r3, r3, #6
 80053a8:	2b04      	cmp	r3, #4
 80053aa:	bf08      	it	eq
 80053ac:	1aad      	subeq	r5, r5, r2
 80053ae:	68a3      	ldr	r3, [r4, #8]
 80053b0:	6922      	ldr	r2, [r4, #16]
 80053b2:	bf0c      	ite	eq
 80053b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053b8:	2500      	movne	r5, #0
 80053ba:	4293      	cmp	r3, r2
 80053bc:	bfc4      	itt	gt
 80053be:	1a9b      	subgt	r3, r3, r2
 80053c0:	18ed      	addgt	r5, r5, r3
 80053c2:	2600      	movs	r6, #0
 80053c4:	341a      	adds	r4, #26
 80053c6:	42b5      	cmp	r5, r6
 80053c8:	d11a      	bne.n	8005400 <_printf_common+0xc8>
 80053ca:	2000      	movs	r0, #0
 80053cc:	e008      	b.n	80053e0 <_printf_common+0xa8>
 80053ce:	2301      	movs	r3, #1
 80053d0:	4652      	mov	r2, sl
 80053d2:	4649      	mov	r1, r9
 80053d4:	4638      	mov	r0, r7
 80053d6:	47c0      	blx	r8
 80053d8:	3001      	adds	r0, #1
 80053da:	d103      	bne.n	80053e4 <_printf_common+0xac>
 80053dc:	f04f 30ff 	mov.w	r0, #4294967295
 80053e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053e4:	3501      	adds	r5, #1
 80053e6:	e7c6      	b.n	8005376 <_printf_common+0x3e>
 80053e8:	18e1      	adds	r1, r4, r3
 80053ea:	1c5a      	adds	r2, r3, #1
 80053ec:	2030      	movs	r0, #48	; 0x30
 80053ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80053f2:	4422      	add	r2, r4
 80053f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80053f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80053fc:	3302      	adds	r3, #2
 80053fe:	e7c7      	b.n	8005390 <_printf_common+0x58>
 8005400:	2301      	movs	r3, #1
 8005402:	4622      	mov	r2, r4
 8005404:	4649      	mov	r1, r9
 8005406:	4638      	mov	r0, r7
 8005408:	47c0      	blx	r8
 800540a:	3001      	adds	r0, #1
 800540c:	d0e6      	beq.n	80053dc <_printf_common+0xa4>
 800540e:	3601      	adds	r6, #1
 8005410:	e7d9      	b.n	80053c6 <_printf_common+0x8e>
	...

08005414 <_printf_i>:
 8005414:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005418:	7e0f      	ldrb	r7, [r1, #24]
 800541a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800541c:	2f78      	cmp	r7, #120	; 0x78
 800541e:	4691      	mov	r9, r2
 8005420:	4680      	mov	r8, r0
 8005422:	460c      	mov	r4, r1
 8005424:	469a      	mov	sl, r3
 8005426:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800542a:	d807      	bhi.n	800543c <_printf_i+0x28>
 800542c:	2f62      	cmp	r7, #98	; 0x62
 800542e:	d80a      	bhi.n	8005446 <_printf_i+0x32>
 8005430:	2f00      	cmp	r7, #0
 8005432:	f000 80d8 	beq.w	80055e6 <_printf_i+0x1d2>
 8005436:	2f58      	cmp	r7, #88	; 0x58
 8005438:	f000 80a3 	beq.w	8005582 <_printf_i+0x16e>
 800543c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005440:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005444:	e03a      	b.n	80054bc <_printf_i+0xa8>
 8005446:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800544a:	2b15      	cmp	r3, #21
 800544c:	d8f6      	bhi.n	800543c <_printf_i+0x28>
 800544e:	a101      	add	r1, pc, #4	; (adr r1, 8005454 <_printf_i+0x40>)
 8005450:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005454:	080054ad 	.word	0x080054ad
 8005458:	080054c1 	.word	0x080054c1
 800545c:	0800543d 	.word	0x0800543d
 8005460:	0800543d 	.word	0x0800543d
 8005464:	0800543d 	.word	0x0800543d
 8005468:	0800543d 	.word	0x0800543d
 800546c:	080054c1 	.word	0x080054c1
 8005470:	0800543d 	.word	0x0800543d
 8005474:	0800543d 	.word	0x0800543d
 8005478:	0800543d 	.word	0x0800543d
 800547c:	0800543d 	.word	0x0800543d
 8005480:	080055cd 	.word	0x080055cd
 8005484:	080054f1 	.word	0x080054f1
 8005488:	080055af 	.word	0x080055af
 800548c:	0800543d 	.word	0x0800543d
 8005490:	0800543d 	.word	0x0800543d
 8005494:	080055ef 	.word	0x080055ef
 8005498:	0800543d 	.word	0x0800543d
 800549c:	080054f1 	.word	0x080054f1
 80054a0:	0800543d 	.word	0x0800543d
 80054a4:	0800543d 	.word	0x0800543d
 80054a8:	080055b7 	.word	0x080055b7
 80054ac:	682b      	ldr	r3, [r5, #0]
 80054ae:	1d1a      	adds	r2, r3, #4
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	602a      	str	r2, [r5, #0]
 80054b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80054bc:	2301      	movs	r3, #1
 80054be:	e0a3      	b.n	8005608 <_printf_i+0x1f4>
 80054c0:	6820      	ldr	r0, [r4, #0]
 80054c2:	6829      	ldr	r1, [r5, #0]
 80054c4:	0606      	lsls	r6, r0, #24
 80054c6:	f101 0304 	add.w	r3, r1, #4
 80054ca:	d50a      	bpl.n	80054e2 <_printf_i+0xce>
 80054cc:	680e      	ldr	r6, [r1, #0]
 80054ce:	602b      	str	r3, [r5, #0]
 80054d0:	2e00      	cmp	r6, #0
 80054d2:	da03      	bge.n	80054dc <_printf_i+0xc8>
 80054d4:	232d      	movs	r3, #45	; 0x2d
 80054d6:	4276      	negs	r6, r6
 80054d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054dc:	485e      	ldr	r0, [pc, #376]	; (8005658 <_printf_i+0x244>)
 80054de:	230a      	movs	r3, #10
 80054e0:	e019      	b.n	8005516 <_printf_i+0x102>
 80054e2:	680e      	ldr	r6, [r1, #0]
 80054e4:	602b      	str	r3, [r5, #0]
 80054e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80054ea:	bf18      	it	ne
 80054ec:	b236      	sxthne	r6, r6
 80054ee:	e7ef      	b.n	80054d0 <_printf_i+0xbc>
 80054f0:	682b      	ldr	r3, [r5, #0]
 80054f2:	6820      	ldr	r0, [r4, #0]
 80054f4:	1d19      	adds	r1, r3, #4
 80054f6:	6029      	str	r1, [r5, #0]
 80054f8:	0601      	lsls	r1, r0, #24
 80054fa:	d501      	bpl.n	8005500 <_printf_i+0xec>
 80054fc:	681e      	ldr	r6, [r3, #0]
 80054fe:	e002      	b.n	8005506 <_printf_i+0xf2>
 8005500:	0646      	lsls	r6, r0, #25
 8005502:	d5fb      	bpl.n	80054fc <_printf_i+0xe8>
 8005504:	881e      	ldrh	r6, [r3, #0]
 8005506:	4854      	ldr	r0, [pc, #336]	; (8005658 <_printf_i+0x244>)
 8005508:	2f6f      	cmp	r7, #111	; 0x6f
 800550a:	bf0c      	ite	eq
 800550c:	2308      	moveq	r3, #8
 800550e:	230a      	movne	r3, #10
 8005510:	2100      	movs	r1, #0
 8005512:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005516:	6865      	ldr	r5, [r4, #4]
 8005518:	60a5      	str	r5, [r4, #8]
 800551a:	2d00      	cmp	r5, #0
 800551c:	bfa2      	ittt	ge
 800551e:	6821      	ldrge	r1, [r4, #0]
 8005520:	f021 0104 	bicge.w	r1, r1, #4
 8005524:	6021      	strge	r1, [r4, #0]
 8005526:	b90e      	cbnz	r6, 800552c <_printf_i+0x118>
 8005528:	2d00      	cmp	r5, #0
 800552a:	d04d      	beq.n	80055c8 <_printf_i+0x1b4>
 800552c:	4615      	mov	r5, r2
 800552e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005532:	fb03 6711 	mls	r7, r3, r1, r6
 8005536:	5dc7      	ldrb	r7, [r0, r7]
 8005538:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800553c:	4637      	mov	r7, r6
 800553e:	42bb      	cmp	r3, r7
 8005540:	460e      	mov	r6, r1
 8005542:	d9f4      	bls.n	800552e <_printf_i+0x11a>
 8005544:	2b08      	cmp	r3, #8
 8005546:	d10b      	bne.n	8005560 <_printf_i+0x14c>
 8005548:	6823      	ldr	r3, [r4, #0]
 800554a:	07de      	lsls	r6, r3, #31
 800554c:	d508      	bpl.n	8005560 <_printf_i+0x14c>
 800554e:	6923      	ldr	r3, [r4, #16]
 8005550:	6861      	ldr	r1, [r4, #4]
 8005552:	4299      	cmp	r1, r3
 8005554:	bfde      	ittt	le
 8005556:	2330      	movle	r3, #48	; 0x30
 8005558:	f805 3c01 	strble.w	r3, [r5, #-1]
 800555c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005560:	1b52      	subs	r2, r2, r5
 8005562:	6122      	str	r2, [r4, #16]
 8005564:	f8cd a000 	str.w	sl, [sp]
 8005568:	464b      	mov	r3, r9
 800556a:	aa03      	add	r2, sp, #12
 800556c:	4621      	mov	r1, r4
 800556e:	4640      	mov	r0, r8
 8005570:	f7ff fee2 	bl	8005338 <_printf_common>
 8005574:	3001      	adds	r0, #1
 8005576:	d14c      	bne.n	8005612 <_printf_i+0x1fe>
 8005578:	f04f 30ff 	mov.w	r0, #4294967295
 800557c:	b004      	add	sp, #16
 800557e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005582:	4835      	ldr	r0, [pc, #212]	; (8005658 <_printf_i+0x244>)
 8005584:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005588:	6829      	ldr	r1, [r5, #0]
 800558a:	6823      	ldr	r3, [r4, #0]
 800558c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005590:	6029      	str	r1, [r5, #0]
 8005592:	061d      	lsls	r5, r3, #24
 8005594:	d514      	bpl.n	80055c0 <_printf_i+0x1ac>
 8005596:	07df      	lsls	r7, r3, #31
 8005598:	bf44      	itt	mi
 800559a:	f043 0320 	orrmi.w	r3, r3, #32
 800559e:	6023      	strmi	r3, [r4, #0]
 80055a0:	b91e      	cbnz	r6, 80055aa <_printf_i+0x196>
 80055a2:	6823      	ldr	r3, [r4, #0]
 80055a4:	f023 0320 	bic.w	r3, r3, #32
 80055a8:	6023      	str	r3, [r4, #0]
 80055aa:	2310      	movs	r3, #16
 80055ac:	e7b0      	b.n	8005510 <_printf_i+0xfc>
 80055ae:	6823      	ldr	r3, [r4, #0]
 80055b0:	f043 0320 	orr.w	r3, r3, #32
 80055b4:	6023      	str	r3, [r4, #0]
 80055b6:	2378      	movs	r3, #120	; 0x78
 80055b8:	4828      	ldr	r0, [pc, #160]	; (800565c <_printf_i+0x248>)
 80055ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80055be:	e7e3      	b.n	8005588 <_printf_i+0x174>
 80055c0:	0659      	lsls	r1, r3, #25
 80055c2:	bf48      	it	mi
 80055c4:	b2b6      	uxthmi	r6, r6
 80055c6:	e7e6      	b.n	8005596 <_printf_i+0x182>
 80055c8:	4615      	mov	r5, r2
 80055ca:	e7bb      	b.n	8005544 <_printf_i+0x130>
 80055cc:	682b      	ldr	r3, [r5, #0]
 80055ce:	6826      	ldr	r6, [r4, #0]
 80055d0:	6961      	ldr	r1, [r4, #20]
 80055d2:	1d18      	adds	r0, r3, #4
 80055d4:	6028      	str	r0, [r5, #0]
 80055d6:	0635      	lsls	r5, r6, #24
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	d501      	bpl.n	80055e0 <_printf_i+0x1cc>
 80055dc:	6019      	str	r1, [r3, #0]
 80055de:	e002      	b.n	80055e6 <_printf_i+0x1d2>
 80055e0:	0670      	lsls	r0, r6, #25
 80055e2:	d5fb      	bpl.n	80055dc <_printf_i+0x1c8>
 80055e4:	8019      	strh	r1, [r3, #0]
 80055e6:	2300      	movs	r3, #0
 80055e8:	6123      	str	r3, [r4, #16]
 80055ea:	4615      	mov	r5, r2
 80055ec:	e7ba      	b.n	8005564 <_printf_i+0x150>
 80055ee:	682b      	ldr	r3, [r5, #0]
 80055f0:	1d1a      	adds	r2, r3, #4
 80055f2:	602a      	str	r2, [r5, #0]
 80055f4:	681d      	ldr	r5, [r3, #0]
 80055f6:	6862      	ldr	r2, [r4, #4]
 80055f8:	2100      	movs	r1, #0
 80055fa:	4628      	mov	r0, r5
 80055fc:	f7fa fe18 	bl	8000230 <memchr>
 8005600:	b108      	cbz	r0, 8005606 <_printf_i+0x1f2>
 8005602:	1b40      	subs	r0, r0, r5
 8005604:	6060      	str	r0, [r4, #4]
 8005606:	6863      	ldr	r3, [r4, #4]
 8005608:	6123      	str	r3, [r4, #16]
 800560a:	2300      	movs	r3, #0
 800560c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005610:	e7a8      	b.n	8005564 <_printf_i+0x150>
 8005612:	6923      	ldr	r3, [r4, #16]
 8005614:	462a      	mov	r2, r5
 8005616:	4649      	mov	r1, r9
 8005618:	4640      	mov	r0, r8
 800561a:	47d0      	blx	sl
 800561c:	3001      	adds	r0, #1
 800561e:	d0ab      	beq.n	8005578 <_printf_i+0x164>
 8005620:	6823      	ldr	r3, [r4, #0]
 8005622:	079b      	lsls	r3, r3, #30
 8005624:	d413      	bmi.n	800564e <_printf_i+0x23a>
 8005626:	68e0      	ldr	r0, [r4, #12]
 8005628:	9b03      	ldr	r3, [sp, #12]
 800562a:	4298      	cmp	r0, r3
 800562c:	bfb8      	it	lt
 800562e:	4618      	movlt	r0, r3
 8005630:	e7a4      	b.n	800557c <_printf_i+0x168>
 8005632:	2301      	movs	r3, #1
 8005634:	4632      	mov	r2, r6
 8005636:	4649      	mov	r1, r9
 8005638:	4640      	mov	r0, r8
 800563a:	47d0      	blx	sl
 800563c:	3001      	adds	r0, #1
 800563e:	d09b      	beq.n	8005578 <_printf_i+0x164>
 8005640:	3501      	adds	r5, #1
 8005642:	68e3      	ldr	r3, [r4, #12]
 8005644:	9903      	ldr	r1, [sp, #12]
 8005646:	1a5b      	subs	r3, r3, r1
 8005648:	42ab      	cmp	r3, r5
 800564a:	dcf2      	bgt.n	8005632 <_printf_i+0x21e>
 800564c:	e7eb      	b.n	8005626 <_printf_i+0x212>
 800564e:	2500      	movs	r5, #0
 8005650:	f104 0619 	add.w	r6, r4, #25
 8005654:	e7f5      	b.n	8005642 <_printf_i+0x22e>
 8005656:	bf00      	nop
 8005658:	08007a52 	.word	0x08007a52
 800565c:	08007a63 	.word	0x08007a63

08005660 <iprintf>:
 8005660:	b40f      	push	{r0, r1, r2, r3}
 8005662:	4b0a      	ldr	r3, [pc, #40]	; (800568c <iprintf+0x2c>)
 8005664:	b513      	push	{r0, r1, r4, lr}
 8005666:	681c      	ldr	r4, [r3, #0]
 8005668:	b124      	cbz	r4, 8005674 <iprintf+0x14>
 800566a:	69a3      	ldr	r3, [r4, #24]
 800566c:	b913      	cbnz	r3, 8005674 <iprintf+0x14>
 800566e:	4620      	mov	r0, r4
 8005670:	f001 f8da 	bl	8006828 <__sinit>
 8005674:	ab05      	add	r3, sp, #20
 8005676:	9a04      	ldr	r2, [sp, #16]
 8005678:	68a1      	ldr	r1, [r4, #8]
 800567a:	9301      	str	r3, [sp, #4]
 800567c:	4620      	mov	r0, r4
 800567e:	f001 fe89 	bl	8007394 <_vfiprintf_r>
 8005682:	b002      	add	sp, #8
 8005684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005688:	b004      	add	sp, #16
 800568a:	4770      	bx	lr
 800568c:	2000000c 	.word	0x2000000c

08005690 <_puts_r>:
 8005690:	b570      	push	{r4, r5, r6, lr}
 8005692:	460e      	mov	r6, r1
 8005694:	4605      	mov	r5, r0
 8005696:	b118      	cbz	r0, 80056a0 <_puts_r+0x10>
 8005698:	6983      	ldr	r3, [r0, #24]
 800569a:	b90b      	cbnz	r3, 80056a0 <_puts_r+0x10>
 800569c:	f001 f8c4 	bl	8006828 <__sinit>
 80056a0:	69ab      	ldr	r3, [r5, #24]
 80056a2:	68ac      	ldr	r4, [r5, #8]
 80056a4:	b913      	cbnz	r3, 80056ac <_puts_r+0x1c>
 80056a6:	4628      	mov	r0, r5
 80056a8:	f001 f8be 	bl	8006828 <__sinit>
 80056ac:	4b2c      	ldr	r3, [pc, #176]	; (8005760 <_puts_r+0xd0>)
 80056ae:	429c      	cmp	r4, r3
 80056b0:	d120      	bne.n	80056f4 <_puts_r+0x64>
 80056b2:	686c      	ldr	r4, [r5, #4]
 80056b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80056b6:	07db      	lsls	r3, r3, #31
 80056b8:	d405      	bmi.n	80056c6 <_puts_r+0x36>
 80056ba:	89a3      	ldrh	r3, [r4, #12]
 80056bc:	0598      	lsls	r0, r3, #22
 80056be:	d402      	bmi.n	80056c6 <_puts_r+0x36>
 80056c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80056c2:	f001 f954 	bl	800696e <__retarget_lock_acquire_recursive>
 80056c6:	89a3      	ldrh	r3, [r4, #12]
 80056c8:	0719      	lsls	r1, r3, #28
 80056ca:	d51d      	bpl.n	8005708 <_puts_r+0x78>
 80056cc:	6923      	ldr	r3, [r4, #16]
 80056ce:	b1db      	cbz	r3, 8005708 <_puts_r+0x78>
 80056d0:	3e01      	subs	r6, #1
 80056d2:	68a3      	ldr	r3, [r4, #8]
 80056d4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80056d8:	3b01      	subs	r3, #1
 80056da:	60a3      	str	r3, [r4, #8]
 80056dc:	bb39      	cbnz	r1, 800572e <_puts_r+0x9e>
 80056de:	2b00      	cmp	r3, #0
 80056e0:	da38      	bge.n	8005754 <_puts_r+0xc4>
 80056e2:	4622      	mov	r2, r4
 80056e4:	210a      	movs	r1, #10
 80056e6:	4628      	mov	r0, r5
 80056e8:	f000 f848 	bl	800577c <__swbuf_r>
 80056ec:	3001      	adds	r0, #1
 80056ee:	d011      	beq.n	8005714 <_puts_r+0x84>
 80056f0:	250a      	movs	r5, #10
 80056f2:	e011      	b.n	8005718 <_puts_r+0x88>
 80056f4:	4b1b      	ldr	r3, [pc, #108]	; (8005764 <_puts_r+0xd4>)
 80056f6:	429c      	cmp	r4, r3
 80056f8:	d101      	bne.n	80056fe <_puts_r+0x6e>
 80056fa:	68ac      	ldr	r4, [r5, #8]
 80056fc:	e7da      	b.n	80056b4 <_puts_r+0x24>
 80056fe:	4b1a      	ldr	r3, [pc, #104]	; (8005768 <_puts_r+0xd8>)
 8005700:	429c      	cmp	r4, r3
 8005702:	bf08      	it	eq
 8005704:	68ec      	ldreq	r4, [r5, #12]
 8005706:	e7d5      	b.n	80056b4 <_puts_r+0x24>
 8005708:	4621      	mov	r1, r4
 800570a:	4628      	mov	r0, r5
 800570c:	f000 f888 	bl	8005820 <__swsetup_r>
 8005710:	2800      	cmp	r0, #0
 8005712:	d0dd      	beq.n	80056d0 <_puts_r+0x40>
 8005714:	f04f 35ff 	mov.w	r5, #4294967295
 8005718:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800571a:	07da      	lsls	r2, r3, #31
 800571c:	d405      	bmi.n	800572a <_puts_r+0x9a>
 800571e:	89a3      	ldrh	r3, [r4, #12]
 8005720:	059b      	lsls	r3, r3, #22
 8005722:	d402      	bmi.n	800572a <_puts_r+0x9a>
 8005724:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005726:	f001 f923 	bl	8006970 <__retarget_lock_release_recursive>
 800572a:	4628      	mov	r0, r5
 800572c:	bd70      	pop	{r4, r5, r6, pc}
 800572e:	2b00      	cmp	r3, #0
 8005730:	da04      	bge.n	800573c <_puts_r+0xac>
 8005732:	69a2      	ldr	r2, [r4, #24]
 8005734:	429a      	cmp	r2, r3
 8005736:	dc06      	bgt.n	8005746 <_puts_r+0xb6>
 8005738:	290a      	cmp	r1, #10
 800573a:	d004      	beq.n	8005746 <_puts_r+0xb6>
 800573c:	6823      	ldr	r3, [r4, #0]
 800573e:	1c5a      	adds	r2, r3, #1
 8005740:	6022      	str	r2, [r4, #0]
 8005742:	7019      	strb	r1, [r3, #0]
 8005744:	e7c5      	b.n	80056d2 <_puts_r+0x42>
 8005746:	4622      	mov	r2, r4
 8005748:	4628      	mov	r0, r5
 800574a:	f000 f817 	bl	800577c <__swbuf_r>
 800574e:	3001      	adds	r0, #1
 8005750:	d1bf      	bne.n	80056d2 <_puts_r+0x42>
 8005752:	e7df      	b.n	8005714 <_puts_r+0x84>
 8005754:	6823      	ldr	r3, [r4, #0]
 8005756:	250a      	movs	r5, #10
 8005758:	1c5a      	adds	r2, r3, #1
 800575a:	6022      	str	r2, [r4, #0]
 800575c:	701d      	strb	r5, [r3, #0]
 800575e:	e7db      	b.n	8005718 <_puts_r+0x88>
 8005760:	08007b24 	.word	0x08007b24
 8005764:	08007b44 	.word	0x08007b44
 8005768:	08007b04 	.word	0x08007b04

0800576c <puts>:
 800576c:	4b02      	ldr	r3, [pc, #8]	; (8005778 <puts+0xc>)
 800576e:	4601      	mov	r1, r0
 8005770:	6818      	ldr	r0, [r3, #0]
 8005772:	f7ff bf8d 	b.w	8005690 <_puts_r>
 8005776:	bf00      	nop
 8005778:	2000000c 	.word	0x2000000c

0800577c <__swbuf_r>:
 800577c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800577e:	460e      	mov	r6, r1
 8005780:	4614      	mov	r4, r2
 8005782:	4605      	mov	r5, r0
 8005784:	b118      	cbz	r0, 800578e <__swbuf_r+0x12>
 8005786:	6983      	ldr	r3, [r0, #24]
 8005788:	b90b      	cbnz	r3, 800578e <__swbuf_r+0x12>
 800578a:	f001 f84d 	bl	8006828 <__sinit>
 800578e:	4b21      	ldr	r3, [pc, #132]	; (8005814 <__swbuf_r+0x98>)
 8005790:	429c      	cmp	r4, r3
 8005792:	d12b      	bne.n	80057ec <__swbuf_r+0x70>
 8005794:	686c      	ldr	r4, [r5, #4]
 8005796:	69a3      	ldr	r3, [r4, #24]
 8005798:	60a3      	str	r3, [r4, #8]
 800579a:	89a3      	ldrh	r3, [r4, #12]
 800579c:	071a      	lsls	r2, r3, #28
 800579e:	d52f      	bpl.n	8005800 <__swbuf_r+0x84>
 80057a0:	6923      	ldr	r3, [r4, #16]
 80057a2:	b36b      	cbz	r3, 8005800 <__swbuf_r+0x84>
 80057a4:	6923      	ldr	r3, [r4, #16]
 80057a6:	6820      	ldr	r0, [r4, #0]
 80057a8:	1ac0      	subs	r0, r0, r3
 80057aa:	6963      	ldr	r3, [r4, #20]
 80057ac:	b2f6      	uxtb	r6, r6
 80057ae:	4283      	cmp	r3, r0
 80057b0:	4637      	mov	r7, r6
 80057b2:	dc04      	bgt.n	80057be <__swbuf_r+0x42>
 80057b4:	4621      	mov	r1, r4
 80057b6:	4628      	mov	r0, r5
 80057b8:	f000 ffa2 	bl	8006700 <_fflush_r>
 80057bc:	bb30      	cbnz	r0, 800580c <__swbuf_r+0x90>
 80057be:	68a3      	ldr	r3, [r4, #8]
 80057c0:	3b01      	subs	r3, #1
 80057c2:	60a3      	str	r3, [r4, #8]
 80057c4:	6823      	ldr	r3, [r4, #0]
 80057c6:	1c5a      	adds	r2, r3, #1
 80057c8:	6022      	str	r2, [r4, #0]
 80057ca:	701e      	strb	r6, [r3, #0]
 80057cc:	6963      	ldr	r3, [r4, #20]
 80057ce:	3001      	adds	r0, #1
 80057d0:	4283      	cmp	r3, r0
 80057d2:	d004      	beq.n	80057de <__swbuf_r+0x62>
 80057d4:	89a3      	ldrh	r3, [r4, #12]
 80057d6:	07db      	lsls	r3, r3, #31
 80057d8:	d506      	bpl.n	80057e8 <__swbuf_r+0x6c>
 80057da:	2e0a      	cmp	r6, #10
 80057dc:	d104      	bne.n	80057e8 <__swbuf_r+0x6c>
 80057de:	4621      	mov	r1, r4
 80057e0:	4628      	mov	r0, r5
 80057e2:	f000 ff8d 	bl	8006700 <_fflush_r>
 80057e6:	b988      	cbnz	r0, 800580c <__swbuf_r+0x90>
 80057e8:	4638      	mov	r0, r7
 80057ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057ec:	4b0a      	ldr	r3, [pc, #40]	; (8005818 <__swbuf_r+0x9c>)
 80057ee:	429c      	cmp	r4, r3
 80057f0:	d101      	bne.n	80057f6 <__swbuf_r+0x7a>
 80057f2:	68ac      	ldr	r4, [r5, #8]
 80057f4:	e7cf      	b.n	8005796 <__swbuf_r+0x1a>
 80057f6:	4b09      	ldr	r3, [pc, #36]	; (800581c <__swbuf_r+0xa0>)
 80057f8:	429c      	cmp	r4, r3
 80057fa:	bf08      	it	eq
 80057fc:	68ec      	ldreq	r4, [r5, #12]
 80057fe:	e7ca      	b.n	8005796 <__swbuf_r+0x1a>
 8005800:	4621      	mov	r1, r4
 8005802:	4628      	mov	r0, r5
 8005804:	f000 f80c 	bl	8005820 <__swsetup_r>
 8005808:	2800      	cmp	r0, #0
 800580a:	d0cb      	beq.n	80057a4 <__swbuf_r+0x28>
 800580c:	f04f 37ff 	mov.w	r7, #4294967295
 8005810:	e7ea      	b.n	80057e8 <__swbuf_r+0x6c>
 8005812:	bf00      	nop
 8005814:	08007b24 	.word	0x08007b24
 8005818:	08007b44 	.word	0x08007b44
 800581c:	08007b04 	.word	0x08007b04

08005820 <__swsetup_r>:
 8005820:	4b32      	ldr	r3, [pc, #200]	; (80058ec <__swsetup_r+0xcc>)
 8005822:	b570      	push	{r4, r5, r6, lr}
 8005824:	681d      	ldr	r5, [r3, #0]
 8005826:	4606      	mov	r6, r0
 8005828:	460c      	mov	r4, r1
 800582a:	b125      	cbz	r5, 8005836 <__swsetup_r+0x16>
 800582c:	69ab      	ldr	r3, [r5, #24]
 800582e:	b913      	cbnz	r3, 8005836 <__swsetup_r+0x16>
 8005830:	4628      	mov	r0, r5
 8005832:	f000 fff9 	bl	8006828 <__sinit>
 8005836:	4b2e      	ldr	r3, [pc, #184]	; (80058f0 <__swsetup_r+0xd0>)
 8005838:	429c      	cmp	r4, r3
 800583a:	d10f      	bne.n	800585c <__swsetup_r+0x3c>
 800583c:	686c      	ldr	r4, [r5, #4]
 800583e:	89a3      	ldrh	r3, [r4, #12]
 8005840:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005844:	0719      	lsls	r1, r3, #28
 8005846:	d42c      	bmi.n	80058a2 <__swsetup_r+0x82>
 8005848:	06dd      	lsls	r5, r3, #27
 800584a:	d411      	bmi.n	8005870 <__swsetup_r+0x50>
 800584c:	2309      	movs	r3, #9
 800584e:	6033      	str	r3, [r6, #0]
 8005850:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005854:	81a3      	strh	r3, [r4, #12]
 8005856:	f04f 30ff 	mov.w	r0, #4294967295
 800585a:	e03e      	b.n	80058da <__swsetup_r+0xba>
 800585c:	4b25      	ldr	r3, [pc, #148]	; (80058f4 <__swsetup_r+0xd4>)
 800585e:	429c      	cmp	r4, r3
 8005860:	d101      	bne.n	8005866 <__swsetup_r+0x46>
 8005862:	68ac      	ldr	r4, [r5, #8]
 8005864:	e7eb      	b.n	800583e <__swsetup_r+0x1e>
 8005866:	4b24      	ldr	r3, [pc, #144]	; (80058f8 <__swsetup_r+0xd8>)
 8005868:	429c      	cmp	r4, r3
 800586a:	bf08      	it	eq
 800586c:	68ec      	ldreq	r4, [r5, #12]
 800586e:	e7e6      	b.n	800583e <__swsetup_r+0x1e>
 8005870:	0758      	lsls	r0, r3, #29
 8005872:	d512      	bpl.n	800589a <__swsetup_r+0x7a>
 8005874:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005876:	b141      	cbz	r1, 800588a <__swsetup_r+0x6a>
 8005878:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800587c:	4299      	cmp	r1, r3
 800587e:	d002      	beq.n	8005886 <__swsetup_r+0x66>
 8005880:	4630      	mov	r0, r6
 8005882:	f001 fc7d 	bl	8007180 <_free_r>
 8005886:	2300      	movs	r3, #0
 8005888:	6363      	str	r3, [r4, #52]	; 0x34
 800588a:	89a3      	ldrh	r3, [r4, #12]
 800588c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005890:	81a3      	strh	r3, [r4, #12]
 8005892:	2300      	movs	r3, #0
 8005894:	6063      	str	r3, [r4, #4]
 8005896:	6923      	ldr	r3, [r4, #16]
 8005898:	6023      	str	r3, [r4, #0]
 800589a:	89a3      	ldrh	r3, [r4, #12]
 800589c:	f043 0308 	orr.w	r3, r3, #8
 80058a0:	81a3      	strh	r3, [r4, #12]
 80058a2:	6923      	ldr	r3, [r4, #16]
 80058a4:	b94b      	cbnz	r3, 80058ba <__swsetup_r+0x9a>
 80058a6:	89a3      	ldrh	r3, [r4, #12]
 80058a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80058ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058b0:	d003      	beq.n	80058ba <__swsetup_r+0x9a>
 80058b2:	4621      	mov	r1, r4
 80058b4:	4630      	mov	r0, r6
 80058b6:	f001 f881 	bl	80069bc <__smakebuf_r>
 80058ba:	89a0      	ldrh	r0, [r4, #12]
 80058bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80058c0:	f010 0301 	ands.w	r3, r0, #1
 80058c4:	d00a      	beq.n	80058dc <__swsetup_r+0xbc>
 80058c6:	2300      	movs	r3, #0
 80058c8:	60a3      	str	r3, [r4, #8]
 80058ca:	6963      	ldr	r3, [r4, #20]
 80058cc:	425b      	negs	r3, r3
 80058ce:	61a3      	str	r3, [r4, #24]
 80058d0:	6923      	ldr	r3, [r4, #16]
 80058d2:	b943      	cbnz	r3, 80058e6 <__swsetup_r+0xc6>
 80058d4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80058d8:	d1ba      	bne.n	8005850 <__swsetup_r+0x30>
 80058da:	bd70      	pop	{r4, r5, r6, pc}
 80058dc:	0781      	lsls	r1, r0, #30
 80058de:	bf58      	it	pl
 80058e0:	6963      	ldrpl	r3, [r4, #20]
 80058e2:	60a3      	str	r3, [r4, #8]
 80058e4:	e7f4      	b.n	80058d0 <__swsetup_r+0xb0>
 80058e6:	2000      	movs	r0, #0
 80058e8:	e7f7      	b.n	80058da <__swsetup_r+0xba>
 80058ea:	bf00      	nop
 80058ec:	2000000c 	.word	0x2000000c
 80058f0:	08007b24 	.word	0x08007b24
 80058f4:	08007b44 	.word	0x08007b44
 80058f8:	08007b04 	.word	0x08007b04

080058fc <quorem>:
 80058fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005900:	6903      	ldr	r3, [r0, #16]
 8005902:	690c      	ldr	r4, [r1, #16]
 8005904:	42a3      	cmp	r3, r4
 8005906:	4607      	mov	r7, r0
 8005908:	f2c0 8081 	blt.w	8005a0e <quorem+0x112>
 800590c:	3c01      	subs	r4, #1
 800590e:	f101 0814 	add.w	r8, r1, #20
 8005912:	f100 0514 	add.w	r5, r0, #20
 8005916:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800591a:	9301      	str	r3, [sp, #4]
 800591c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005920:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005924:	3301      	adds	r3, #1
 8005926:	429a      	cmp	r2, r3
 8005928:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800592c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005930:	fbb2 f6f3 	udiv	r6, r2, r3
 8005934:	d331      	bcc.n	800599a <quorem+0x9e>
 8005936:	f04f 0e00 	mov.w	lr, #0
 800593a:	4640      	mov	r0, r8
 800593c:	46ac      	mov	ip, r5
 800593e:	46f2      	mov	sl, lr
 8005940:	f850 2b04 	ldr.w	r2, [r0], #4
 8005944:	b293      	uxth	r3, r2
 8005946:	fb06 e303 	mla	r3, r6, r3, lr
 800594a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800594e:	b29b      	uxth	r3, r3
 8005950:	ebaa 0303 	sub.w	r3, sl, r3
 8005954:	f8dc a000 	ldr.w	sl, [ip]
 8005958:	0c12      	lsrs	r2, r2, #16
 800595a:	fa13 f38a 	uxtah	r3, r3, sl
 800595e:	fb06 e202 	mla	r2, r6, r2, lr
 8005962:	9300      	str	r3, [sp, #0]
 8005964:	9b00      	ldr	r3, [sp, #0]
 8005966:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800596a:	b292      	uxth	r2, r2
 800596c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005970:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005974:	f8bd 3000 	ldrh.w	r3, [sp]
 8005978:	4581      	cmp	r9, r0
 800597a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800597e:	f84c 3b04 	str.w	r3, [ip], #4
 8005982:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005986:	d2db      	bcs.n	8005940 <quorem+0x44>
 8005988:	f855 300b 	ldr.w	r3, [r5, fp]
 800598c:	b92b      	cbnz	r3, 800599a <quorem+0x9e>
 800598e:	9b01      	ldr	r3, [sp, #4]
 8005990:	3b04      	subs	r3, #4
 8005992:	429d      	cmp	r5, r3
 8005994:	461a      	mov	r2, r3
 8005996:	d32e      	bcc.n	80059f6 <quorem+0xfa>
 8005998:	613c      	str	r4, [r7, #16]
 800599a:	4638      	mov	r0, r7
 800599c:	f001 fad8 	bl	8006f50 <__mcmp>
 80059a0:	2800      	cmp	r0, #0
 80059a2:	db24      	blt.n	80059ee <quorem+0xf2>
 80059a4:	3601      	adds	r6, #1
 80059a6:	4628      	mov	r0, r5
 80059a8:	f04f 0c00 	mov.w	ip, #0
 80059ac:	f858 2b04 	ldr.w	r2, [r8], #4
 80059b0:	f8d0 e000 	ldr.w	lr, [r0]
 80059b4:	b293      	uxth	r3, r2
 80059b6:	ebac 0303 	sub.w	r3, ip, r3
 80059ba:	0c12      	lsrs	r2, r2, #16
 80059bc:	fa13 f38e 	uxtah	r3, r3, lr
 80059c0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80059c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80059ce:	45c1      	cmp	r9, r8
 80059d0:	f840 3b04 	str.w	r3, [r0], #4
 80059d4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80059d8:	d2e8      	bcs.n	80059ac <quorem+0xb0>
 80059da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80059de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80059e2:	b922      	cbnz	r2, 80059ee <quorem+0xf2>
 80059e4:	3b04      	subs	r3, #4
 80059e6:	429d      	cmp	r5, r3
 80059e8:	461a      	mov	r2, r3
 80059ea:	d30a      	bcc.n	8005a02 <quorem+0x106>
 80059ec:	613c      	str	r4, [r7, #16]
 80059ee:	4630      	mov	r0, r6
 80059f0:	b003      	add	sp, #12
 80059f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059f6:	6812      	ldr	r2, [r2, #0]
 80059f8:	3b04      	subs	r3, #4
 80059fa:	2a00      	cmp	r2, #0
 80059fc:	d1cc      	bne.n	8005998 <quorem+0x9c>
 80059fe:	3c01      	subs	r4, #1
 8005a00:	e7c7      	b.n	8005992 <quorem+0x96>
 8005a02:	6812      	ldr	r2, [r2, #0]
 8005a04:	3b04      	subs	r3, #4
 8005a06:	2a00      	cmp	r2, #0
 8005a08:	d1f0      	bne.n	80059ec <quorem+0xf0>
 8005a0a:	3c01      	subs	r4, #1
 8005a0c:	e7eb      	b.n	80059e6 <quorem+0xea>
 8005a0e:	2000      	movs	r0, #0
 8005a10:	e7ee      	b.n	80059f0 <quorem+0xf4>
 8005a12:	0000      	movs	r0, r0
 8005a14:	0000      	movs	r0, r0
	...

08005a18 <_dtoa_r>:
 8005a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a1c:	ed2d 8b04 	vpush	{d8-d9}
 8005a20:	ec57 6b10 	vmov	r6, r7, d0
 8005a24:	b093      	sub	sp, #76	; 0x4c
 8005a26:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005a28:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005a2c:	9106      	str	r1, [sp, #24]
 8005a2e:	ee10 aa10 	vmov	sl, s0
 8005a32:	4604      	mov	r4, r0
 8005a34:	9209      	str	r2, [sp, #36]	; 0x24
 8005a36:	930c      	str	r3, [sp, #48]	; 0x30
 8005a38:	46bb      	mov	fp, r7
 8005a3a:	b975      	cbnz	r5, 8005a5a <_dtoa_r+0x42>
 8005a3c:	2010      	movs	r0, #16
 8005a3e:	f000 fffd 	bl	8006a3c <malloc>
 8005a42:	4602      	mov	r2, r0
 8005a44:	6260      	str	r0, [r4, #36]	; 0x24
 8005a46:	b920      	cbnz	r0, 8005a52 <_dtoa_r+0x3a>
 8005a48:	4ba7      	ldr	r3, [pc, #668]	; (8005ce8 <_dtoa_r+0x2d0>)
 8005a4a:	21ea      	movs	r1, #234	; 0xea
 8005a4c:	48a7      	ldr	r0, [pc, #668]	; (8005cec <_dtoa_r+0x2d4>)
 8005a4e:	f001 fe37 	bl	80076c0 <__assert_func>
 8005a52:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005a56:	6005      	str	r5, [r0, #0]
 8005a58:	60c5      	str	r5, [r0, #12]
 8005a5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a5c:	6819      	ldr	r1, [r3, #0]
 8005a5e:	b151      	cbz	r1, 8005a76 <_dtoa_r+0x5e>
 8005a60:	685a      	ldr	r2, [r3, #4]
 8005a62:	604a      	str	r2, [r1, #4]
 8005a64:	2301      	movs	r3, #1
 8005a66:	4093      	lsls	r3, r2
 8005a68:	608b      	str	r3, [r1, #8]
 8005a6a:	4620      	mov	r0, r4
 8005a6c:	f001 f82e 	bl	8006acc <_Bfree>
 8005a70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a72:	2200      	movs	r2, #0
 8005a74:	601a      	str	r2, [r3, #0]
 8005a76:	1e3b      	subs	r3, r7, #0
 8005a78:	bfaa      	itet	ge
 8005a7a:	2300      	movge	r3, #0
 8005a7c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005a80:	f8c8 3000 	strge.w	r3, [r8]
 8005a84:	4b9a      	ldr	r3, [pc, #616]	; (8005cf0 <_dtoa_r+0x2d8>)
 8005a86:	bfbc      	itt	lt
 8005a88:	2201      	movlt	r2, #1
 8005a8a:	f8c8 2000 	strlt.w	r2, [r8]
 8005a8e:	ea33 030b 	bics.w	r3, r3, fp
 8005a92:	d11b      	bne.n	8005acc <_dtoa_r+0xb4>
 8005a94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005a96:	f242 730f 	movw	r3, #9999	; 0x270f
 8005a9a:	6013      	str	r3, [r2, #0]
 8005a9c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005aa0:	4333      	orrs	r3, r6
 8005aa2:	f000 8592 	beq.w	80065ca <_dtoa_r+0xbb2>
 8005aa6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005aa8:	b963      	cbnz	r3, 8005ac4 <_dtoa_r+0xac>
 8005aaa:	4b92      	ldr	r3, [pc, #584]	; (8005cf4 <_dtoa_r+0x2dc>)
 8005aac:	e022      	b.n	8005af4 <_dtoa_r+0xdc>
 8005aae:	4b92      	ldr	r3, [pc, #584]	; (8005cf8 <_dtoa_r+0x2e0>)
 8005ab0:	9301      	str	r3, [sp, #4]
 8005ab2:	3308      	adds	r3, #8
 8005ab4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005ab6:	6013      	str	r3, [r2, #0]
 8005ab8:	9801      	ldr	r0, [sp, #4]
 8005aba:	b013      	add	sp, #76	; 0x4c
 8005abc:	ecbd 8b04 	vpop	{d8-d9}
 8005ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ac4:	4b8b      	ldr	r3, [pc, #556]	; (8005cf4 <_dtoa_r+0x2dc>)
 8005ac6:	9301      	str	r3, [sp, #4]
 8005ac8:	3303      	adds	r3, #3
 8005aca:	e7f3      	b.n	8005ab4 <_dtoa_r+0x9c>
 8005acc:	2200      	movs	r2, #0
 8005ace:	2300      	movs	r3, #0
 8005ad0:	4650      	mov	r0, sl
 8005ad2:	4659      	mov	r1, fp
 8005ad4:	f7fb f820 	bl	8000b18 <__aeabi_dcmpeq>
 8005ad8:	ec4b ab19 	vmov	d9, sl, fp
 8005adc:	4680      	mov	r8, r0
 8005ade:	b158      	cbz	r0, 8005af8 <_dtoa_r+0xe0>
 8005ae0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	6013      	str	r3, [r2, #0]
 8005ae6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	f000 856b 	beq.w	80065c4 <_dtoa_r+0xbac>
 8005aee:	4883      	ldr	r0, [pc, #524]	; (8005cfc <_dtoa_r+0x2e4>)
 8005af0:	6018      	str	r0, [r3, #0]
 8005af2:	1e43      	subs	r3, r0, #1
 8005af4:	9301      	str	r3, [sp, #4]
 8005af6:	e7df      	b.n	8005ab8 <_dtoa_r+0xa0>
 8005af8:	ec4b ab10 	vmov	d0, sl, fp
 8005afc:	aa10      	add	r2, sp, #64	; 0x40
 8005afe:	a911      	add	r1, sp, #68	; 0x44
 8005b00:	4620      	mov	r0, r4
 8005b02:	f001 facb 	bl	800709c <__d2b>
 8005b06:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005b0a:	ee08 0a10 	vmov	s16, r0
 8005b0e:	2d00      	cmp	r5, #0
 8005b10:	f000 8084 	beq.w	8005c1c <_dtoa_r+0x204>
 8005b14:	ee19 3a90 	vmov	r3, s19
 8005b18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b1c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005b20:	4656      	mov	r6, sl
 8005b22:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005b26:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005b2a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005b2e:	4b74      	ldr	r3, [pc, #464]	; (8005d00 <_dtoa_r+0x2e8>)
 8005b30:	2200      	movs	r2, #0
 8005b32:	4630      	mov	r0, r6
 8005b34:	4639      	mov	r1, r7
 8005b36:	f7fa fbcf 	bl	80002d8 <__aeabi_dsub>
 8005b3a:	a365      	add	r3, pc, #404	; (adr r3, 8005cd0 <_dtoa_r+0x2b8>)
 8005b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b40:	f7fa fd82 	bl	8000648 <__aeabi_dmul>
 8005b44:	a364      	add	r3, pc, #400	; (adr r3, 8005cd8 <_dtoa_r+0x2c0>)
 8005b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b4a:	f7fa fbc7 	bl	80002dc <__adddf3>
 8005b4e:	4606      	mov	r6, r0
 8005b50:	4628      	mov	r0, r5
 8005b52:	460f      	mov	r7, r1
 8005b54:	f7fa fd0e 	bl	8000574 <__aeabi_i2d>
 8005b58:	a361      	add	r3, pc, #388	; (adr r3, 8005ce0 <_dtoa_r+0x2c8>)
 8005b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b5e:	f7fa fd73 	bl	8000648 <__aeabi_dmul>
 8005b62:	4602      	mov	r2, r0
 8005b64:	460b      	mov	r3, r1
 8005b66:	4630      	mov	r0, r6
 8005b68:	4639      	mov	r1, r7
 8005b6a:	f7fa fbb7 	bl	80002dc <__adddf3>
 8005b6e:	4606      	mov	r6, r0
 8005b70:	460f      	mov	r7, r1
 8005b72:	f7fb f819 	bl	8000ba8 <__aeabi_d2iz>
 8005b76:	2200      	movs	r2, #0
 8005b78:	9000      	str	r0, [sp, #0]
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	4630      	mov	r0, r6
 8005b7e:	4639      	mov	r1, r7
 8005b80:	f7fa ffd4 	bl	8000b2c <__aeabi_dcmplt>
 8005b84:	b150      	cbz	r0, 8005b9c <_dtoa_r+0x184>
 8005b86:	9800      	ldr	r0, [sp, #0]
 8005b88:	f7fa fcf4 	bl	8000574 <__aeabi_i2d>
 8005b8c:	4632      	mov	r2, r6
 8005b8e:	463b      	mov	r3, r7
 8005b90:	f7fa ffc2 	bl	8000b18 <__aeabi_dcmpeq>
 8005b94:	b910      	cbnz	r0, 8005b9c <_dtoa_r+0x184>
 8005b96:	9b00      	ldr	r3, [sp, #0]
 8005b98:	3b01      	subs	r3, #1
 8005b9a:	9300      	str	r3, [sp, #0]
 8005b9c:	9b00      	ldr	r3, [sp, #0]
 8005b9e:	2b16      	cmp	r3, #22
 8005ba0:	d85a      	bhi.n	8005c58 <_dtoa_r+0x240>
 8005ba2:	9a00      	ldr	r2, [sp, #0]
 8005ba4:	4b57      	ldr	r3, [pc, #348]	; (8005d04 <_dtoa_r+0x2ec>)
 8005ba6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bae:	ec51 0b19 	vmov	r0, r1, d9
 8005bb2:	f7fa ffbb 	bl	8000b2c <__aeabi_dcmplt>
 8005bb6:	2800      	cmp	r0, #0
 8005bb8:	d050      	beq.n	8005c5c <_dtoa_r+0x244>
 8005bba:	9b00      	ldr	r3, [sp, #0]
 8005bbc:	3b01      	subs	r3, #1
 8005bbe:	9300      	str	r3, [sp, #0]
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	930b      	str	r3, [sp, #44]	; 0x2c
 8005bc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005bc6:	1b5d      	subs	r5, r3, r5
 8005bc8:	1e6b      	subs	r3, r5, #1
 8005bca:	9305      	str	r3, [sp, #20]
 8005bcc:	bf45      	ittet	mi
 8005bce:	f1c5 0301 	rsbmi	r3, r5, #1
 8005bd2:	9304      	strmi	r3, [sp, #16]
 8005bd4:	2300      	movpl	r3, #0
 8005bd6:	2300      	movmi	r3, #0
 8005bd8:	bf4c      	ite	mi
 8005bda:	9305      	strmi	r3, [sp, #20]
 8005bdc:	9304      	strpl	r3, [sp, #16]
 8005bde:	9b00      	ldr	r3, [sp, #0]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	db3d      	blt.n	8005c60 <_dtoa_r+0x248>
 8005be4:	9b05      	ldr	r3, [sp, #20]
 8005be6:	9a00      	ldr	r2, [sp, #0]
 8005be8:	920a      	str	r2, [sp, #40]	; 0x28
 8005bea:	4413      	add	r3, r2
 8005bec:	9305      	str	r3, [sp, #20]
 8005bee:	2300      	movs	r3, #0
 8005bf0:	9307      	str	r3, [sp, #28]
 8005bf2:	9b06      	ldr	r3, [sp, #24]
 8005bf4:	2b09      	cmp	r3, #9
 8005bf6:	f200 8089 	bhi.w	8005d0c <_dtoa_r+0x2f4>
 8005bfa:	2b05      	cmp	r3, #5
 8005bfc:	bfc4      	itt	gt
 8005bfe:	3b04      	subgt	r3, #4
 8005c00:	9306      	strgt	r3, [sp, #24]
 8005c02:	9b06      	ldr	r3, [sp, #24]
 8005c04:	f1a3 0302 	sub.w	r3, r3, #2
 8005c08:	bfcc      	ite	gt
 8005c0a:	2500      	movgt	r5, #0
 8005c0c:	2501      	movle	r5, #1
 8005c0e:	2b03      	cmp	r3, #3
 8005c10:	f200 8087 	bhi.w	8005d22 <_dtoa_r+0x30a>
 8005c14:	e8df f003 	tbb	[pc, r3]
 8005c18:	59383a2d 	.word	0x59383a2d
 8005c1c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005c20:	441d      	add	r5, r3
 8005c22:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005c26:	2b20      	cmp	r3, #32
 8005c28:	bfc1      	itttt	gt
 8005c2a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005c2e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005c32:	fa0b f303 	lslgt.w	r3, fp, r3
 8005c36:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005c3a:	bfda      	itte	le
 8005c3c:	f1c3 0320 	rsble	r3, r3, #32
 8005c40:	fa06 f003 	lslle.w	r0, r6, r3
 8005c44:	4318      	orrgt	r0, r3
 8005c46:	f7fa fc85 	bl	8000554 <__aeabi_ui2d>
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	4606      	mov	r6, r0
 8005c4e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005c52:	3d01      	subs	r5, #1
 8005c54:	930e      	str	r3, [sp, #56]	; 0x38
 8005c56:	e76a      	b.n	8005b2e <_dtoa_r+0x116>
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e7b2      	b.n	8005bc2 <_dtoa_r+0x1aa>
 8005c5c:	900b      	str	r0, [sp, #44]	; 0x2c
 8005c5e:	e7b1      	b.n	8005bc4 <_dtoa_r+0x1ac>
 8005c60:	9b04      	ldr	r3, [sp, #16]
 8005c62:	9a00      	ldr	r2, [sp, #0]
 8005c64:	1a9b      	subs	r3, r3, r2
 8005c66:	9304      	str	r3, [sp, #16]
 8005c68:	4253      	negs	r3, r2
 8005c6a:	9307      	str	r3, [sp, #28]
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	930a      	str	r3, [sp, #40]	; 0x28
 8005c70:	e7bf      	b.n	8005bf2 <_dtoa_r+0x1da>
 8005c72:	2300      	movs	r3, #0
 8005c74:	9308      	str	r3, [sp, #32]
 8005c76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	dc55      	bgt.n	8005d28 <_dtoa_r+0x310>
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005c82:	461a      	mov	r2, r3
 8005c84:	9209      	str	r2, [sp, #36]	; 0x24
 8005c86:	e00c      	b.n	8005ca2 <_dtoa_r+0x28a>
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e7f3      	b.n	8005c74 <_dtoa_r+0x25c>
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c90:	9308      	str	r3, [sp, #32]
 8005c92:	9b00      	ldr	r3, [sp, #0]
 8005c94:	4413      	add	r3, r2
 8005c96:	9302      	str	r3, [sp, #8]
 8005c98:	3301      	adds	r3, #1
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	9303      	str	r3, [sp, #12]
 8005c9e:	bfb8      	it	lt
 8005ca0:	2301      	movlt	r3, #1
 8005ca2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	6042      	str	r2, [r0, #4]
 8005ca8:	2204      	movs	r2, #4
 8005caa:	f102 0614 	add.w	r6, r2, #20
 8005cae:	429e      	cmp	r6, r3
 8005cb0:	6841      	ldr	r1, [r0, #4]
 8005cb2:	d93d      	bls.n	8005d30 <_dtoa_r+0x318>
 8005cb4:	4620      	mov	r0, r4
 8005cb6:	f000 fec9 	bl	8006a4c <_Balloc>
 8005cba:	9001      	str	r0, [sp, #4]
 8005cbc:	2800      	cmp	r0, #0
 8005cbe:	d13b      	bne.n	8005d38 <_dtoa_r+0x320>
 8005cc0:	4b11      	ldr	r3, [pc, #68]	; (8005d08 <_dtoa_r+0x2f0>)
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005cc8:	e6c0      	b.n	8005a4c <_dtoa_r+0x34>
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e7df      	b.n	8005c8e <_dtoa_r+0x276>
 8005cce:	bf00      	nop
 8005cd0:	636f4361 	.word	0x636f4361
 8005cd4:	3fd287a7 	.word	0x3fd287a7
 8005cd8:	8b60c8b3 	.word	0x8b60c8b3
 8005cdc:	3fc68a28 	.word	0x3fc68a28
 8005ce0:	509f79fb 	.word	0x509f79fb
 8005ce4:	3fd34413 	.word	0x3fd34413
 8005ce8:	08007a81 	.word	0x08007a81
 8005cec:	08007a98 	.word	0x08007a98
 8005cf0:	7ff00000 	.word	0x7ff00000
 8005cf4:	08007a7d 	.word	0x08007a7d
 8005cf8:	08007a74 	.word	0x08007a74
 8005cfc:	08007a51 	.word	0x08007a51
 8005d00:	3ff80000 	.word	0x3ff80000
 8005d04:	08007be8 	.word	0x08007be8
 8005d08:	08007af3 	.word	0x08007af3
 8005d0c:	2501      	movs	r5, #1
 8005d0e:	2300      	movs	r3, #0
 8005d10:	9306      	str	r3, [sp, #24]
 8005d12:	9508      	str	r5, [sp, #32]
 8005d14:	f04f 33ff 	mov.w	r3, #4294967295
 8005d18:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	2312      	movs	r3, #18
 8005d20:	e7b0      	b.n	8005c84 <_dtoa_r+0x26c>
 8005d22:	2301      	movs	r3, #1
 8005d24:	9308      	str	r3, [sp, #32]
 8005d26:	e7f5      	b.n	8005d14 <_dtoa_r+0x2fc>
 8005d28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d2a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005d2e:	e7b8      	b.n	8005ca2 <_dtoa_r+0x28a>
 8005d30:	3101      	adds	r1, #1
 8005d32:	6041      	str	r1, [r0, #4]
 8005d34:	0052      	lsls	r2, r2, #1
 8005d36:	e7b8      	b.n	8005caa <_dtoa_r+0x292>
 8005d38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d3a:	9a01      	ldr	r2, [sp, #4]
 8005d3c:	601a      	str	r2, [r3, #0]
 8005d3e:	9b03      	ldr	r3, [sp, #12]
 8005d40:	2b0e      	cmp	r3, #14
 8005d42:	f200 809d 	bhi.w	8005e80 <_dtoa_r+0x468>
 8005d46:	2d00      	cmp	r5, #0
 8005d48:	f000 809a 	beq.w	8005e80 <_dtoa_r+0x468>
 8005d4c:	9b00      	ldr	r3, [sp, #0]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	dd32      	ble.n	8005db8 <_dtoa_r+0x3a0>
 8005d52:	4ab7      	ldr	r2, [pc, #732]	; (8006030 <_dtoa_r+0x618>)
 8005d54:	f003 030f 	and.w	r3, r3, #15
 8005d58:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005d5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005d60:	9b00      	ldr	r3, [sp, #0]
 8005d62:	05d8      	lsls	r0, r3, #23
 8005d64:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005d68:	d516      	bpl.n	8005d98 <_dtoa_r+0x380>
 8005d6a:	4bb2      	ldr	r3, [pc, #712]	; (8006034 <_dtoa_r+0x61c>)
 8005d6c:	ec51 0b19 	vmov	r0, r1, d9
 8005d70:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005d74:	f7fa fd92 	bl	800089c <__aeabi_ddiv>
 8005d78:	f007 070f 	and.w	r7, r7, #15
 8005d7c:	4682      	mov	sl, r0
 8005d7e:	468b      	mov	fp, r1
 8005d80:	2503      	movs	r5, #3
 8005d82:	4eac      	ldr	r6, [pc, #688]	; (8006034 <_dtoa_r+0x61c>)
 8005d84:	b957      	cbnz	r7, 8005d9c <_dtoa_r+0x384>
 8005d86:	4642      	mov	r2, r8
 8005d88:	464b      	mov	r3, r9
 8005d8a:	4650      	mov	r0, sl
 8005d8c:	4659      	mov	r1, fp
 8005d8e:	f7fa fd85 	bl	800089c <__aeabi_ddiv>
 8005d92:	4682      	mov	sl, r0
 8005d94:	468b      	mov	fp, r1
 8005d96:	e028      	b.n	8005dea <_dtoa_r+0x3d2>
 8005d98:	2502      	movs	r5, #2
 8005d9a:	e7f2      	b.n	8005d82 <_dtoa_r+0x36a>
 8005d9c:	07f9      	lsls	r1, r7, #31
 8005d9e:	d508      	bpl.n	8005db2 <_dtoa_r+0x39a>
 8005da0:	4640      	mov	r0, r8
 8005da2:	4649      	mov	r1, r9
 8005da4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005da8:	f7fa fc4e 	bl	8000648 <__aeabi_dmul>
 8005dac:	3501      	adds	r5, #1
 8005dae:	4680      	mov	r8, r0
 8005db0:	4689      	mov	r9, r1
 8005db2:	107f      	asrs	r7, r7, #1
 8005db4:	3608      	adds	r6, #8
 8005db6:	e7e5      	b.n	8005d84 <_dtoa_r+0x36c>
 8005db8:	f000 809b 	beq.w	8005ef2 <_dtoa_r+0x4da>
 8005dbc:	9b00      	ldr	r3, [sp, #0]
 8005dbe:	4f9d      	ldr	r7, [pc, #628]	; (8006034 <_dtoa_r+0x61c>)
 8005dc0:	425e      	negs	r6, r3
 8005dc2:	4b9b      	ldr	r3, [pc, #620]	; (8006030 <_dtoa_r+0x618>)
 8005dc4:	f006 020f 	and.w	r2, r6, #15
 8005dc8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd0:	ec51 0b19 	vmov	r0, r1, d9
 8005dd4:	f7fa fc38 	bl	8000648 <__aeabi_dmul>
 8005dd8:	1136      	asrs	r6, r6, #4
 8005dda:	4682      	mov	sl, r0
 8005ddc:	468b      	mov	fp, r1
 8005dde:	2300      	movs	r3, #0
 8005de0:	2502      	movs	r5, #2
 8005de2:	2e00      	cmp	r6, #0
 8005de4:	d17a      	bne.n	8005edc <_dtoa_r+0x4c4>
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d1d3      	bne.n	8005d92 <_dtoa_r+0x37a>
 8005dea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	f000 8082 	beq.w	8005ef6 <_dtoa_r+0x4de>
 8005df2:	4b91      	ldr	r3, [pc, #580]	; (8006038 <_dtoa_r+0x620>)
 8005df4:	2200      	movs	r2, #0
 8005df6:	4650      	mov	r0, sl
 8005df8:	4659      	mov	r1, fp
 8005dfa:	f7fa fe97 	bl	8000b2c <__aeabi_dcmplt>
 8005dfe:	2800      	cmp	r0, #0
 8005e00:	d079      	beq.n	8005ef6 <_dtoa_r+0x4de>
 8005e02:	9b03      	ldr	r3, [sp, #12]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d076      	beq.n	8005ef6 <_dtoa_r+0x4de>
 8005e08:	9b02      	ldr	r3, [sp, #8]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	dd36      	ble.n	8005e7c <_dtoa_r+0x464>
 8005e0e:	9b00      	ldr	r3, [sp, #0]
 8005e10:	4650      	mov	r0, sl
 8005e12:	4659      	mov	r1, fp
 8005e14:	1e5f      	subs	r7, r3, #1
 8005e16:	2200      	movs	r2, #0
 8005e18:	4b88      	ldr	r3, [pc, #544]	; (800603c <_dtoa_r+0x624>)
 8005e1a:	f7fa fc15 	bl	8000648 <__aeabi_dmul>
 8005e1e:	9e02      	ldr	r6, [sp, #8]
 8005e20:	4682      	mov	sl, r0
 8005e22:	468b      	mov	fp, r1
 8005e24:	3501      	adds	r5, #1
 8005e26:	4628      	mov	r0, r5
 8005e28:	f7fa fba4 	bl	8000574 <__aeabi_i2d>
 8005e2c:	4652      	mov	r2, sl
 8005e2e:	465b      	mov	r3, fp
 8005e30:	f7fa fc0a 	bl	8000648 <__aeabi_dmul>
 8005e34:	4b82      	ldr	r3, [pc, #520]	; (8006040 <_dtoa_r+0x628>)
 8005e36:	2200      	movs	r2, #0
 8005e38:	f7fa fa50 	bl	80002dc <__adddf3>
 8005e3c:	46d0      	mov	r8, sl
 8005e3e:	46d9      	mov	r9, fp
 8005e40:	4682      	mov	sl, r0
 8005e42:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005e46:	2e00      	cmp	r6, #0
 8005e48:	d158      	bne.n	8005efc <_dtoa_r+0x4e4>
 8005e4a:	4b7e      	ldr	r3, [pc, #504]	; (8006044 <_dtoa_r+0x62c>)
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	4640      	mov	r0, r8
 8005e50:	4649      	mov	r1, r9
 8005e52:	f7fa fa41 	bl	80002d8 <__aeabi_dsub>
 8005e56:	4652      	mov	r2, sl
 8005e58:	465b      	mov	r3, fp
 8005e5a:	4680      	mov	r8, r0
 8005e5c:	4689      	mov	r9, r1
 8005e5e:	f7fa fe83 	bl	8000b68 <__aeabi_dcmpgt>
 8005e62:	2800      	cmp	r0, #0
 8005e64:	f040 8295 	bne.w	8006392 <_dtoa_r+0x97a>
 8005e68:	4652      	mov	r2, sl
 8005e6a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005e6e:	4640      	mov	r0, r8
 8005e70:	4649      	mov	r1, r9
 8005e72:	f7fa fe5b 	bl	8000b2c <__aeabi_dcmplt>
 8005e76:	2800      	cmp	r0, #0
 8005e78:	f040 8289 	bne.w	800638e <_dtoa_r+0x976>
 8005e7c:	ec5b ab19 	vmov	sl, fp, d9
 8005e80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	f2c0 8148 	blt.w	8006118 <_dtoa_r+0x700>
 8005e88:	9a00      	ldr	r2, [sp, #0]
 8005e8a:	2a0e      	cmp	r2, #14
 8005e8c:	f300 8144 	bgt.w	8006118 <_dtoa_r+0x700>
 8005e90:	4b67      	ldr	r3, [pc, #412]	; (8006030 <_dtoa_r+0x618>)
 8005e92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005e96:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005e9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	f280 80d5 	bge.w	800604c <_dtoa_r+0x634>
 8005ea2:	9b03      	ldr	r3, [sp, #12]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	f300 80d1 	bgt.w	800604c <_dtoa_r+0x634>
 8005eaa:	f040 826f 	bne.w	800638c <_dtoa_r+0x974>
 8005eae:	4b65      	ldr	r3, [pc, #404]	; (8006044 <_dtoa_r+0x62c>)
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	4640      	mov	r0, r8
 8005eb4:	4649      	mov	r1, r9
 8005eb6:	f7fa fbc7 	bl	8000648 <__aeabi_dmul>
 8005eba:	4652      	mov	r2, sl
 8005ebc:	465b      	mov	r3, fp
 8005ebe:	f7fa fe49 	bl	8000b54 <__aeabi_dcmpge>
 8005ec2:	9e03      	ldr	r6, [sp, #12]
 8005ec4:	4637      	mov	r7, r6
 8005ec6:	2800      	cmp	r0, #0
 8005ec8:	f040 8245 	bne.w	8006356 <_dtoa_r+0x93e>
 8005ecc:	9d01      	ldr	r5, [sp, #4]
 8005ece:	2331      	movs	r3, #49	; 0x31
 8005ed0:	f805 3b01 	strb.w	r3, [r5], #1
 8005ed4:	9b00      	ldr	r3, [sp, #0]
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	9300      	str	r3, [sp, #0]
 8005eda:	e240      	b.n	800635e <_dtoa_r+0x946>
 8005edc:	07f2      	lsls	r2, r6, #31
 8005ede:	d505      	bpl.n	8005eec <_dtoa_r+0x4d4>
 8005ee0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ee4:	f7fa fbb0 	bl	8000648 <__aeabi_dmul>
 8005ee8:	3501      	adds	r5, #1
 8005eea:	2301      	movs	r3, #1
 8005eec:	1076      	asrs	r6, r6, #1
 8005eee:	3708      	adds	r7, #8
 8005ef0:	e777      	b.n	8005de2 <_dtoa_r+0x3ca>
 8005ef2:	2502      	movs	r5, #2
 8005ef4:	e779      	b.n	8005dea <_dtoa_r+0x3d2>
 8005ef6:	9f00      	ldr	r7, [sp, #0]
 8005ef8:	9e03      	ldr	r6, [sp, #12]
 8005efa:	e794      	b.n	8005e26 <_dtoa_r+0x40e>
 8005efc:	9901      	ldr	r1, [sp, #4]
 8005efe:	4b4c      	ldr	r3, [pc, #304]	; (8006030 <_dtoa_r+0x618>)
 8005f00:	4431      	add	r1, r6
 8005f02:	910d      	str	r1, [sp, #52]	; 0x34
 8005f04:	9908      	ldr	r1, [sp, #32]
 8005f06:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005f0a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005f0e:	2900      	cmp	r1, #0
 8005f10:	d043      	beq.n	8005f9a <_dtoa_r+0x582>
 8005f12:	494d      	ldr	r1, [pc, #308]	; (8006048 <_dtoa_r+0x630>)
 8005f14:	2000      	movs	r0, #0
 8005f16:	f7fa fcc1 	bl	800089c <__aeabi_ddiv>
 8005f1a:	4652      	mov	r2, sl
 8005f1c:	465b      	mov	r3, fp
 8005f1e:	f7fa f9db 	bl	80002d8 <__aeabi_dsub>
 8005f22:	9d01      	ldr	r5, [sp, #4]
 8005f24:	4682      	mov	sl, r0
 8005f26:	468b      	mov	fp, r1
 8005f28:	4649      	mov	r1, r9
 8005f2a:	4640      	mov	r0, r8
 8005f2c:	f7fa fe3c 	bl	8000ba8 <__aeabi_d2iz>
 8005f30:	4606      	mov	r6, r0
 8005f32:	f7fa fb1f 	bl	8000574 <__aeabi_i2d>
 8005f36:	4602      	mov	r2, r0
 8005f38:	460b      	mov	r3, r1
 8005f3a:	4640      	mov	r0, r8
 8005f3c:	4649      	mov	r1, r9
 8005f3e:	f7fa f9cb 	bl	80002d8 <__aeabi_dsub>
 8005f42:	3630      	adds	r6, #48	; 0x30
 8005f44:	f805 6b01 	strb.w	r6, [r5], #1
 8005f48:	4652      	mov	r2, sl
 8005f4a:	465b      	mov	r3, fp
 8005f4c:	4680      	mov	r8, r0
 8005f4e:	4689      	mov	r9, r1
 8005f50:	f7fa fdec 	bl	8000b2c <__aeabi_dcmplt>
 8005f54:	2800      	cmp	r0, #0
 8005f56:	d163      	bne.n	8006020 <_dtoa_r+0x608>
 8005f58:	4642      	mov	r2, r8
 8005f5a:	464b      	mov	r3, r9
 8005f5c:	4936      	ldr	r1, [pc, #216]	; (8006038 <_dtoa_r+0x620>)
 8005f5e:	2000      	movs	r0, #0
 8005f60:	f7fa f9ba 	bl	80002d8 <__aeabi_dsub>
 8005f64:	4652      	mov	r2, sl
 8005f66:	465b      	mov	r3, fp
 8005f68:	f7fa fde0 	bl	8000b2c <__aeabi_dcmplt>
 8005f6c:	2800      	cmp	r0, #0
 8005f6e:	f040 80b5 	bne.w	80060dc <_dtoa_r+0x6c4>
 8005f72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005f74:	429d      	cmp	r5, r3
 8005f76:	d081      	beq.n	8005e7c <_dtoa_r+0x464>
 8005f78:	4b30      	ldr	r3, [pc, #192]	; (800603c <_dtoa_r+0x624>)
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	4650      	mov	r0, sl
 8005f7e:	4659      	mov	r1, fp
 8005f80:	f7fa fb62 	bl	8000648 <__aeabi_dmul>
 8005f84:	4b2d      	ldr	r3, [pc, #180]	; (800603c <_dtoa_r+0x624>)
 8005f86:	4682      	mov	sl, r0
 8005f88:	468b      	mov	fp, r1
 8005f8a:	4640      	mov	r0, r8
 8005f8c:	4649      	mov	r1, r9
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f7fa fb5a 	bl	8000648 <__aeabi_dmul>
 8005f94:	4680      	mov	r8, r0
 8005f96:	4689      	mov	r9, r1
 8005f98:	e7c6      	b.n	8005f28 <_dtoa_r+0x510>
 8005f9a:	4650      	mov	r0, sl
 8005f9c:	4659      	mov	r1, fp
 8005f9e:	f7fa fb53 	bl	8000648 <__aeabi_dmul>
 8005fa2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005fa4:	9d01      	ldr	r5, [sp, #4]
 8005fa6:	930f      	str	r3, [sp, #60]	; 0x3c
 8005fa8:	4682      	mov	sl, r0
 8005faa:	468b      	mov	fp, r1
 8005fac:	4649      	mov	r1, r9
 8005fae:	4640      	mov	r0, r8
 8005fb0:	f7fa fdfa 	bl	8000ba8 <__aeabi_d2iz>
 8005fb4:	4606      	mov	r6, r0
 8005fb6:	f7fa fadd 	bl	8000574 <__aeabi_i2d>
 8005fba:	3630      	adds	r6, #48	; 0x30
 8005fbc:	4602      	mov	r2, r0
 8005fbe:	460b      	mov	r3, r1
 8005fc0:	4640      	mov	r0, r8
 8005fc2:	4649      	mov	r1, r9
 8005fc4:	f7fa f988 	bl	80002d8 <__aeabi_dsub>
 8005fc8:	f805 6b01 	strb.w	r6, [r5], #1
 8005fcc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005fce:	429d      	cmp	r5, r3
 8005fd0:	4680      	mov	r8, r0
 8005fd2:	4689      	mov	r9, r1
 8005fd4:	f04f 0200 	mov.w	r2, #0
 8005fd8:	d124      	bne.n	8006024 <_dtoa_r+0x60c>
 8005fda:	4b1b      	ldr	r3, [pc, #108]	; (8006048 <_dtoa_r+0x630>)
 8005fdc:	4650      	mov	r0, sl
 8005fde:	4659      	mov	r1, fp
 8005fe0:	f7fa f97c 	bl	80002dc <__adddf3>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	460b      	mov	r3, r1
 8005fe8:	4640      	mov	r0, r8
 8005fea:	4649      	mov	r1, r9
 8005fec:	f7fa fdbc 	bl	8000b68 <__aeabi_dcmpgt>
 8005ff0:	2800      	cmp	r0, #0
 8005ff2:	d173      	bne.n	80060dc <_dtoa_r+0x6c4>
 8005ff4:	4652      	mov	r2, sl
 8005ff6:	465b      	mov	r3, fp
 8005ff8:	4913      	ldr	r1, [pc, #76]	; (8006048 <_dtoa_r+0x630>)
 8005ffa:	2000      	movs	r0, #0
 8005ffc:	f7fa f96c 	bl	80002d8 <__aeabi_dsub>
 8006000:	4602      	mov	r2, r0
 8006002:	460b      	mov	r3, r1
 8006004:	4640      	mov	r0, r8
 8006006:	4649      	mov	r1, r9
 8006008:	f7fa fd90 	bl	8000b2c <__aeabi_dcmplt>
 800600c:	2800      	cmp	r0, #0
 800600e:	f43f af35 	beq.w	8005e7c <_dtoa_r+0x464>
 8006012:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006014:	1e6b      	subs	r3, r5, #1
 8006016:	930f      	str	r3, [sp, #60]	; 0x3c
 8006018:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800601c:	2b30      	cmp	r3, #48	; 0x30
 800601e:	d0f8      	beq.n	8006012 <_dtoa_r+0x5fa>
 8006020:	9700      	str	r7, [sp, #0]
 8006022:	e049      	b.n	80060b8 <_dtoa_r+0x6a0>
 8006024:	4b05      	ldr	r3, [pc, #20]	; (800603c <_dtoa_r+0x624>)
 8006026:	f7fa fb0f 	bl	8000648 <__aeabi_dmul>
 800602a:	4680      	mov	r8, r0
 800602c:	4689      	mov	r9, r1
 800602e:	e7bd      	b.n	8005fac <_dtoa_r+0x594>
 8006030:	08007be8 	.word	0x08007be8
 8006034:	08007bc0 	.word	0x08007bc0
 8006038:	3ff00000 	.word	0x3ff00000
 800603c:	40240000 	.word	0x40240000
 8006040:	401c0000 	.word	0x401c0000
 8006044:	40140000 	.word	0x40140000
 8006048:	3fe00000 	.word	0x3fe00000
 800604c:	9d01      	ldr	r5, [sp, #4]
 800604e:	4656      	mov	r6, sl
 8006050:	465f      	mov	r7, fp
 8006052:	4642      	mov	r2, r8
 8006054:	464b      	mov	r3, r9
 8006056:	4630      	mov	r0, r6
 8006058:	4639      	mov	r1, r7
 800605a:	f7fa fc1f 	bl	800089c <__aeabi_ddiv>
 800605e:	f7fa fda3 	bl	8000ba8 <__aeabi_d2iz>
 8006062:	4682      	mov	sl, r0
 8006064:	f7fa fa86 	bl	8000574 <__aeabi_i2d>
 8006068:	4642      	mov	r2, r8
 800606a:	464b      	mov	r3, r9
 800606c:	f7fa faec 	bl	8000648 <__aeabi_dmul>
 8006070:	4602      	mov	r2, r0
 8006072:	460b      	mov	r3, r1
 8006074:	4630      	mov	r0, r6
 8006076:	4639      	mov	r1, r7
 8006078:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800607c:	f7fa f92c 	bl	80002d8 <__aeabi_dsub>
 8006080:	f805 6b01 	strb.w	r6, [r5], #1
 8006084:	9e01      	ldr	r6, [sp, #4]
 8006086:	9f03      	ldr	r7, [sp, #12]
 8006088:	1bae      	subs	r6, r5, r6
 800608a:	42b7      	cmp	r7, r6
 800608c:	4602      	mov	r2, r0
 800608e:	460b      	mov	r3, r1
 8006090:	d135      	bne.n	80060fe <_dtoa_r+0x6e6>
 8006092:	f7fa f923 	bl	80002dc <__adddf3>
 8006096:	4642      	mov	r2, r8
 8006098:	464b      	mov	r3, r9
 800609a:	4606      	mov	r6, r0
 800609c:	460f      	mov	r7, r1
 800609e:	f7fa fd63 	bl	8000b68 <__aeabi_dcmpgt>
 80060a2:	b9d0      	cbnz	r0, 80060da <_dtoa_r+0x6c2>
 80060a4:	4642      	mov	r2, r8
 80060a6:	464b      	mov	r3, r9
 80060a8:	4630      	mov	r0, r6
 80060aa:	4639      	mov	r1, r7
 80060ac:	f7fa fd34 	bl	8000b18 <__aeabi_dcmpeq>
 80060b0:	b110      	cbz	r0, 80060b8 <_dtoa_r+0x6a0>
 80060b2:	f01a 0f01 	tst.w	sl, #1
 80060b6:	d110      	bne.n	80060da <_dtoa_r+0x6c2>
 80060b8:	4620      	mov	r0, r4
 80060ba:	ee18 1a10 	vmov	r1, s16
 80060be:	f000 fd05 	bl	8006acc <_Bfree>
 80060c2:	2300      	movs	r3, #0
 80060c4:	9800      	ldr	r0, [sp, #0]
 80060c6:	702b      	strb	r3, [r5, #0]
 80060c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80060ca:	3001      	adds	r0, #1
 80060cc:	6018      	str	r0, [r3, #0]
 80060ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	f43f acf1 	beq.w	8005ab8 <_dtoa_r+0xa0>
 80060d6:	601d      	str	r5, [r3, #0]
 80060d8:	e4ee      	b.n	8005ab8 <_dtoa_r+0xa0>
 80060da:	9f00      	ldr	r7, [sp, #0]
 80060dc:	462b      	mov	r3, r5
 80060de:	461d      	mov	r5, r3
 80060e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80060e4:	2a39      	cmp	r2, #57	; 0x39
 80060e6:	d106      	bne.n	80060f6 <_dtoa_r+0x6de>
 80060e8:	9a01      	ldr	r2, [sp, #4]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d1f7      	bne.n	80060de <_dtoa_r+0x6c6>
 80060ee:	9901      	ldr	r1, [sp, #4]
 80060f0:	2230      	movs	r2, #48	; 0x30
 80060f2:	3701      	adds	r7, #1
 80060f4:	700a      	strb	r2, [r1, #0]
 80060f6:	781a      	ldrb	r2, [r3, #0]
 80060f8:	3201      	adds	r2, #1
 80060fa:	701a      	strb	r2, [r3, #0]
 80060fc:	e790      	b.n	8006020 <_dtoa_r+0x608>
 80060fe:	4ba6      	ldr	r3, [pc, #664]	; (8006398 <_dtoa_r+0x980>)
 8006100:	2200      	movs	r2, #0
 8006102:	f7fa faa1 	bl	8000648 <__aeabi_dmul>
 8006106:	2200      	movs	r2, #0
 8006108:	2300      	movs	r3, #0
 800610a:	4606      	mov	r6, r0
 800610c:	460f      	mov	r7, r1
 800610e:	f7fa fd03 	bl	8000b18 <__aeabi_dcmpeq>
 8006112:	2800      	cmp	r0, #0
 8006114:	d09d      	beq.n	8006052 <_dtoa_r+0x63a>
 8006116:	e7cf      	b.n	80060b8 <_dtoa_r+0x6a0>
 8006118:	9a08      	ldr	r2, [sp, #32]
 800611a:	2a00      	cmp	r2, #0
 800611c:	f000 80d7 	beq.w	80062ce <_dtoa_r+0x8b6>
 8006120:	9a06      	ldr	r2, [sp, #24]
 8006122:	2a01      	cmp	r2, #1
 8006124:	f300 80ba 	bgt.w	800629c <_dtoa_r+0x884>
 8006128:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800612a:	2a00      	cmp	r2, #0
 800612c:	f000 80b2 	beq.w	8006294 <_dtoa_r+0x87c>
 8006130:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006134:	9e07      	ldr	r6, [sp, #28]
 8006136:	9d04      	ldr	r5, [sp, #16]
 8006138:	9a04      	ldr	r2, [sp, #16]
 800613a:	441a      	add	r2, r3
 800613c:	9204      	str	r2, [sp, #16]
 800613e:	9a05      	ldr	r2, [sp, #20]
 8006140:	2101      	movs	r1, #1
 8006142:	441a      	add	r2, r3
 8006144:	4620      	mov	r0, r4
 8006146:	9205      	str	r2, [sp, #20]
 8006148:	f000 fd78 	bl	8006c3c <__i2b>
 800614c:	4607      	mov	r7, r0
 800614e:	2d00      	cmp	r5, #0
 8006150:	dd0c      	ble.n	800616c <_dtoa_r+0x754>
 8006152:	9b05      	ldr	r3, [sp, #20]
 8006154:	2b00      	cmp	r3, #0
 8006156:	dd09      	ble.n	800616c <_dtoa_r+0x754>
 8006158:	42ab      	cmp	r3, r5
 800615a:	9a04      	ldr	r2, [sp, #16]
 800615c:	bfa8      	it	ge
 800615e:	462b      	movge	r3, r5
 8006160:	1ad2      	subs	r2, r2, r3
 8006162:	9204      	str	r2, [sp, #16]
 8006164:	9a05      	ldr	r2, [sp, #20]
 8006166:	1aed      	subs	r5, r5, r3
 8006168:	1ad3      	subs	r3, r2, r3
 800616a:	9305      	str	r3, [sp, #20]
 800616c:	9b07      	ldr	r3, [sp, #28]
 800616e:	b31b      	cbz	r3, 80061b8 <_dtoa_r+0x7a0>
 8006170:	9b08      	ldr	r3, [sp, #32]
 8006172:	2b00      	cmp	r3, #0
 8006174:	f000 80af 	beq.w	80062d6 <_dtoa_r+0x8be>
 8006178:	2e00      	cmp	r6, #0
 800617a:	dd13      	ble.n	80061a4 <_dtoa_r+0x78c>
 800617c:	4639      	mov	r1, r7
 800617e:	4632      	mov	r2, r6
 8006180:	4620      	mov	r0, r4
 8006182:	f000 fe1b 	bl	8006dbc <__pow5mult>
 8006186:	ee18 2a10 	vmov	r2, s16
 800618a:	4601      	mov	r1, r0
 800618c:	4607      	mov	r7, r0
 800618e:	4620      	mov	r0, r4
 8006190:	f000 fd6a 	bl	8006c68 <__multiply>
 8006194:	ee18 1a10 	vmov	r1, s16
 8006198:	4680      	mov	r8, r0
 800619a:	4620      	mov	r0, r4
 800619c:	f000 fc96 	bl	8006acc <_Bfree>
 80061a0:	ee08 8a10 	vmov	s16, r8
 80061a4:	9b07      	ldr	r3, [sp, #28]
 80061a6:	1b9a      	subs	r2, r3, r6
 80061a8:	d006      	beq.n	80061b8 <_dtoa_r+0x7a0>
 80061aa:	ee18 1a10 	vmov	r1, s16
 80061ae:	4620      	mov	r0, r4
 80061b0:	f000 fe04 	bl	8006dbc <__pow5mult>
 80061b4:	ee08 0a10 	vmov	s16, r0
 80061b8:	2101      	movs	r1, #1
 80061ba:	4620      	mov	r0, r4
 80061bc:	f000 fd3e 	bl	8006c3c <__i2b>
 80061c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	4606      	mov	r6, r0
 80061c6:	f340 8088 	ble.w	80062da <_dtoa_r+0x8c2>
 80061ca:	461a      	mov	r2, r3
 80061cc:	4601      	mov	r1, r0
 80061ce:	4620      	mov	r0, r4
 80061d0:	f000 fdf4 	bl	8006dbc <__pow5mult>
 80061d4:	9b06      	ldr	r3, [sp, #24]
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	4606      	mov	r6, r0
 80061da:	f340 8081 	ble.w	80062e0 <_dtoa_r+0x8c8>
 80061de:	f04f 0800 	mov.w	r8, #0
 80061e2:	6933      	ldr	r3, [r6, #16]
 80061e4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80061e8:	6918      	ldr	r0, [r3, #16]
 80061ea:	f000 fcd7 	bl	8006b9c <__hi0bits>
 80061ee:	f1c0 0020 	rsb	r0, r0, #32
 80061f2:	9b05      	ldr	r3, [sp, #20]
 80061f4:	4418      	add	r0, r3
 80061f6:	f010 001f 	ands.w	r0, r0, #31
 80061fa:	f000 8092 	beq.w	8006322 <_dtoa_r+0x90a>
 80061fe:	f1c0 0320 	rsb	r3, r0, #32
 8006202:	2b04      	cmp	r3, #4
 8006204:	f340 808a 	ble.w	800631c <_dtoa_r+0x904>
 8006208:	f1c0 001c 	rsb	r0, r0, #28
 800620c:	9b04      	ldr	r3, [sp, #16]
 800620e:	4403      	add	r3, r0
 8006210:	9304      	str	r3, [sp, #16]
 8006212:	9b05      	ldr	r3, [sp, #20]
 8006214:	4403      	add	r3, r0
 8006216:	4405      	add	r5, r0
 8006218:	9305      	str	r3, [sp, #20]
 800621a:	9b04      	ldr	r3, [sp, #16]
 800621c:	2b00      	cmp	r3, #0
 800621e:	dd07      	ble.n	8006230 <_dtoa_r+0x818>
 8006220:	ee18 1a10 	vmov	r1, s16
 8006224:	461a      	mov	r2, r3
 8006226:	4620      	mov	r0, r4
 8006228:	f000 fe22 	bl	8006e70 <__lshift>
 800622c:	ee08 0a10 	vmov	s16, r0
 8006230:	9b05      	ldr	r3, [sp, #20]
 8006232:	2b00      	cmp	r3, #0
 8006234:	dd05      	ble.n	8006242 <_dtoa_r+0x82a>
 8006236:	4631      	mov	r1, r6
 8006238:	461a      	mov	r2, r3
 800623a:	4620      	mov	r0, r4
 800623c:	f000 fe18 	bl	8006e70 <__lshift>
 8006240:	4606      	mov	r6, r0
 8006242:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006244:	2b00      	cmp	r3, #0
 8006246:	d06e      	beq.n	8006326 <_dtoa_r+0x90e>
 8006248:	ee18 0a10 	vmov	r0, s16
 800624c:	4631      	mov	r1, r6
 800624e:	f000 fe7f 	bl	8006f50 <__mcmp>
 8006252:	2800      	cmp	r0, #0
 8006254:	da67      	bge.n	8006326 <_dtoa_r+0x90e>
 8006256:	9b00      	ldr	r3, [sp, #0]
 8006258:	3b01      	subs	r3, #1
 800625a:	ee18 1a10 	vmov	r1, s16
 800625e:	9300      	str	r3, [sp, #0]
 8006260:	220a      	movs	r2, #10
 8006262:	2300      	movs	r3, #0
 8006264:	4620      	mov	r0, r4
 8006266:	f000 fc53 	bl	8006b10 <__multadd>
 800626a:	9b08      	ldr	r3, [sp, #32]
 800626c:	ee08 0a10 	vmov	s16, r0
 8006270:	2b00      	cmp	r3, #0
 8006272:	f000 81b1 	beq.w	80065d8 <_dtoa_r+0xbc0>
 8006276:	2300      	movs	r3, #0
 8006278:	4639      	mov	r1, r7
 800627a:	220a      	movs	r2, #10
 800627c:	4620      	mov	r0, r4
 800627e:	f000 fc47 	bl	8006b10 <__multadd>
 8006282:	9b02      	ldr	r3, [sp, #8]
 8006284:	2b00      	cmp	r3, #0
 8006286:	4607      	mov	r7, r0
 8006288:	f300 808e 	bgt.w	80063a8 <_dtoa_r+0x990>
 800628c:	9b06      	ldr	r3, [sp, #24]
 800628e:	2b02      	cmp	r3, #2
 8006290:	dc51      	bgt.n	8006336 <_dtoa_r+0x91e>
 8006292:	e089      	b.n	80063a8 <_dtoa_r+0x990>
 8006294:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006296:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800629a:	e74b      	b.n	8006134 <_dtoa_r+0x71c>
 800629c:	9b03      	ldr	r3, [sp, #12]
 800629e:	1e5e      	subs	r6, r3, #1
 80062a0:	9b07      	ldr	r3, [sp, #28]
 80062a2:	42b3      	cmp	r3, r6
 80062a4:	bfbf      	itttt	lt
 80062a6:	9b07      	ldrlt	r3, [sp, #28]
 80062a8:	9607      	strlt	r6, [sp, #28]
 80062aa:	1af2      	sublt	r2, r6, r3
 80062ac:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80062ae:	bfb6      	itet	lt
 80062b0:	189b      	addlt	r3, r3, r2
 80062b2:	1b9e      	subge	r6, r3, r6
 80062b4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80062b6:	9b03      	ldr	r3, [sp, #12]
 80062b8:	bfb8      	it	lt
 80062ba:	2600      	movlt	r6, #0
 80062bc:	2b00      	cmp	r3, #0
 80062be:	bfb7      	itett	lt
 80062c0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80062c4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80062c8:	1a9d      	sublt	r5, r3, r2
 80062ca:	2300      	movlt	r3, #0
 80062cc:	e734      	b.n	8006138 <_dtoa_r+0x720>
 80062ce:	9e07      	ldr	r6, [sp, #28]
 80062d0:	9d04      	ldr	r5, [sp, #16]
 80062d2:	9f08      	ldr	r7, [sp, #32]
 80062d4:	e73b      	b.n	800614e <_dtoa_r+0x736>
 80062d6:	9a07      	ldr	r2, [sp, #28]
 80062d8:	e767      	b.n	80061aa <_dtoa_r+0x792>
 80062da:	9b06      	ldr	r3, [sp, #24]
 80062dc:	2b01      	cmp	r3, #1
 80062de:	dc18      	bgt.n	8006312 <_dtoa_r+0x8fa>
 80062e0:	f1ba 0f00 	cmp.w	sl, #0
 80062e4:	d115      	bne.n	8006312 <_dtoa_r+0x8fa>
 80062e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80062ea:	b993      	cbnz	r3, 8006312 <_dtoa_r+0x8fa>
 80062ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80062f0:	0d1b      	lsrs	r3, r3, #20
 80062f2:	051b      	lsls	r3, r3, #20
 80062f4:	b183      	cbz	r3, 8006318 <_dtoa_r+0x900>
 80062f6:	9b04      	ldr	r3, [sp, #16]
 80062f8:	3301      	adds	r3, #1
 80062fa:	9304      	str	r3, [sp, #16]
 80062fc:	9b05      	ldr	r3, [sp, #20]
 80062fe:	3301      	adds	r3, #1
 8006300:	9305      	str	r3, [sp, #20]
 8006302:	f04f 0801 	mov.w	r8, #1
 8006306:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006308:	2b00      	cmp	r3, #0
 800630a:	f47f af6a 	bne.w	80061e2 <_dtoa_r+0x7ca>
 800630e:	2001      	movs	r0, #1
 8006310:	e76f      	b.n	80061f2 <_dtoa_r+0x7da>
 8006312:	f04f 0800 	mov.w	r8, #0
 8006316:	e7f6      	b.n	8006306 <_dtoa_r+0x8ee>
 8006318:	4698      	mov	r8, r3
 800631a:	e7f4      	b.n	8006306 <_dtoa_r+0x8ee>
 800631c:	f43f af7d 	beq.w	800621a <_dtoa_r+0x802>
 8006320:	4618      	mov	r0, r3
 8006322:	301c      	adds	r0, #28
 8006324:	e772      	b.n	800620c <_dtoa_r+0x7f4>
 8006326:	9b03      	ldr	r3, [sp, #12]
 8006328:	2b00      	cmp	r3, #0
 800632a:	dc37      	bgt.n	800639c <_dtoa_r+0x984>
 800632c:	9b06      	ldr	r3, [sp, #24]
 800632e:	2b02      	cmp	r3, #2
 8006330:	dd34      	ble.n	800639c <_dtoa_r+0x984>
 8006332:	9b03      	ldr	r3, [sp, #12]
 8006334:	9302      	str	r3, [sp, #8]
 8006336:	9b02      	ldr	r3, [sp, #8]
 8006338:	b96b      	cbnz	r3, 8006356 <_dtoa_r+0x93e>
 800633a:	4631      	mov	r1, r6
 800633c:	2205      	movs	r2, #5
 800633e:	4620      	mov	r0, r4
 8006340:	f000 fbe6 	bl	8006b10 <__multadd>
 8006344:	4601      	mov	r1, r0
 8006346:	4606      	mov	r6, r0
 8006348:	ee18 0a10 	vmov	r0, s16
 800634c:	f000 fe00 	bl	8006f50 <__mcmp>
 8006350:	2800      	cmp	r0, #0
 8006352:	f73f adbb 	bgt.w	8005ecc <_dtoa_r+0x4b4>
 8006356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006358:	9d01      	ldr	r5, [sp, #4]
 800635a:	43db      	mvns	r3, r3
 800635c:	9300      	str	r3, [sp, #0]
 800635e:	f04f 0800 	mov.w	r8, #0
 8006362:	4631      	mov	r1, r6
 8006364:	4620      	mov	r0, r4
 8006366:	f000 fbb1 	bl	8006acc <_Bfree>
 800636a:	2f00      	cmp	r7, #0
 800636c:	f43f aea4 	beq.w	80060b8 <_dtoa_r+0x6a0>
 8006370:	f1b8 0f00 	cmp.w	r8, #0
 8006374:	d005      	beq.n	8006382 <_dtoa_r+0x96a>
 8006376:	45b8      	cmp	r8, r7
 8006378:	d003      	beq.n	8006382 <_dtoa_r+0x96a>
 800637a:	4641      	mov	r1, r8
 800637c:	4620      	mov	r0, r4
 800637e:	f000 fba5 	bl	8006acc <_Bfree>
 8006382:	4639      	mov	r1, r7
 8006384:	4620      	mov	r0, r4
 8006386:	f000 fba1 	bl	8006acc <_Bfree>
 800638a:	e695      	b.n	80060b8 <_dtoa_r+0x6a0>
 800638c:	2600      	movs	r6, #0
 800638e:	4637      	mov	r7, r6
 8006390:	e7e1      	b.n	8006356 <_dtoa_r+0x93e>
 8006392:	9700      	str	r7, [sp, #0]
 8006394:	4637      	mov	r7, r6
 8006396:	e599      	b.n	8005ecc <_dtoa_r+0x4b4>
 8006398:	40240000 	.word	0x40240000
 800639c:	9b08      	ldr	r3, [sp, #32]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	f000 80ca 	beq.w	8006538 <_dtoa_r+0xb20>
 80063a4:	9b03      	ldr	r3, [sp, #12]
 80063a6:	9302      	str	r3, [sp, #8]
 80063a8:	2d00      	cmp	r5, #0
 80063aa:	dd05      	ble.n	80063b8 <_dtoa_r+0x9a0>
 80063ac:	4639      	mov	r1, r7
 80063ae:	462a      	mov	r2, r5
 80063b0:	4620      	mov	r0, r4
 80063b2:	f000 fd5d 	bl	8006e70 <__lshift>
 80063b6:	4607      	mov	r7, r0
 80063b8:	f1b8 0f00 	cmp.w	r8, #0
 80063bc:	d05b      	beq.n	8006476 <_dtoa_r+0xa5e>
 80063be:	6879      	ldr	r1, [r7, #4]
 80063c0:	4620      	mov	r0, r4
 80063c2:	f000 fb43 	bl	8006a4c <_Balloc>
 80063c6:	4605      	mov	r5, r0
 80063c8:	b928      	cbnz	r0, 80063d6 <_dtoa_r+0x9be>
 80063ca:	4b87      	ldr	r3, [pc, #540]	; (80065e8 <_dtoa_r+0xbd0>)
 80063cc:	4602      	mov	r2, r0
 80063ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 80063d2:	f7ff bb3b 	b.w	8005a4c <_dtoa_r+0x34>
 80063d6:	693a      	ldr	r2, [r7, #16]
 80063d8:	3202      	adds	r2, #2
 80063da:	0092      	lsls	r2, r2, #2
 80063dc:	f107 010c 	add.w	r1, r7, #12
 80063e0:	300c      	adds	r0, #12
 80063e2:	f7fe fcbd 	bl	8004d60 <memcpy>
 80063e6:	2201      	movs	r2, #1
 80063e8:	4629      	mov	r1, r5
 80063ea:	4620      	mov	r0, r4
 80063ec:	f000 fd40 	bl	8006e70 <__lshift>
 80063f0:	9b01      	ldr	r3, [sp, #4]
 80063f2:	f103 0901 	add.w	r9, r3, #1
 80063f6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80063fa:	4413      	add	r3, r2
 80063fc:	9305      	str	r3, [sp, #20]
 80063fe:	f00a 0301 	and.w	r3, sl, #1
 8006402:	46b8      	mov	r8, r7
 8006404:	9304      	str	r3, [sp, #16]
 8006406:	4607      	mov	r7, r0
 8006408:	4631      	mov	r1, r6
 800640a:	ee18 0a10 	vmov	r0, s16
 800640e:	f7ff fa75 	bl	80058fc <quorem>
 8006412:	4641      	mov	r1, r8
 8006414:	9002      	str	r0, [sp, #8]
 8006416:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800641a:	ee18 0a10 	vmov	r0, s16
 800641e:	f000 fd97 	bl	8006f50 <__mcmp>
 8006422:	463a      	mov	r2, r7
 8006424:	9003      	str	r0, [sp, #12]
 8006426:	4631      	mov	r1, r6
 8006428:	4620      	mov	r0, r4
 800642a:	f000 fdad 	bl	8006f88 <__mdiff>
 800642e:	68c2      	ldr	r2, [r0, #12]
 8006430:	f109 3bff 	add.w	fp, r9, #4294967295
 8006434:	4605      	mov	r5, r0
 8006436:	bb02      	cbnz	r2, 800647a <_dtoa_r+0xa62>
 8006438:	4601      	mov	r1, r0
 800643a:	ee18 0a10 	vmov	r0, s16
 800643e:	f000 fd87 	bl	8006f50 <__mcmp>
 8006442:	4602      	mov	r2, r0
 8006444:	4629      	mov	r1, r5
 8006446:	4620      	mov	r0, r4
 8006448:	9207      	str	r2, [sp, #28]
 800644a:	f000 fb3f 	bl	8006acc <_Bfree>
 800644e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006452:	ea43 0102 	orr.w	r1, r3, r2
 8006456:	9b04      	ldr	r3, [sp, #16]
 8006458:	430b      	orrs	r3, r1
 800645a:	464d      	mov	r5, r9
 800645c:	d10f      	bne.n	800647e <_dtoa_r+0xa66>
 800645e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006462:	d02a      	beq.n	80064ba <_dtoa_r+0xaa2>
 8006464:	9b03      	ldr	r3, [sp, #12]
 8006466:	2b00      	cmp	r3, #0
 8006468:	dd02      	ble.n	8006470 <_dtoa_r+0xa58>
 800646a:	9b02      	ldr	r3, [sp, #8]
 800646c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006470:	f88b a000 	strb.w	sl, [fp]
 8006474:	e775      	b.n	8006362 <_dtoa_r+0x94a>
 8006476:	4638      	mov	r0, r7
 8006478:	e7ba      	b.n	80063f0 <_dtoa_r+0x9d8>
 800647a:	2201      	movs	r2, #1
 800647c:	e7e2      	b.n	8006444 <_dtoa_r+0xa2c>
 800647e:	9b03      	ldr	r3, [sp, #12]
 8006480:	2b00      	cmp	r3, #0
 8006482:	db04      	blt.n	800648e <_dtoa_r+0xa76>
 8006484:	9906      	ldr	r1, [sp, #24]
 8006486:	430b      	orrs	r3, r1
 8006488:	9904      	ldr	r1, [sp, #16]
 800648a:	430b      	orrs	r3, r1
 800648c:	d122      	bne.n	80064d4 <_dtoa_r+0xabc>
 800648e:	2a00      	cmp	r2, #0
 8006490:	ddee      	ble.n	8006470 <_dtoa_r+0xa58>
 8006492:	ee18 1a10 	vmov	r1, s16
 8006496:	2201      	movs	r2, #1
 8006498:	4620      	mov	r0, r4
 800649a:	f000 fce9 	bl	8006e70 <__lshift>
 800649e:	4631      	mov	r1, r6
 80064a0:	ee08 0a10 	vmov	s16, r0
 80064a4:	f000 fd54 	bl	8006f50 <__mcmp>
 80064a8:	2800      	cmp	r0, #0
 80064aa:	dc03      	bgt.n	80064b4 <_dtoa_r+0xa9c>
 80064ac:	d1e0      	bne.n	8006470 <_dtoa_r+0xa58>
 80064ae:	f01a 0f01 	tst.w	sl, #1
 80064b2:	d0dd      	beq.n	8006470 <_dtoa_r+0xa58>
 80064b4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80064b8:	d1d7      	bne.n	800646a <_dtoa_r+0xa52>
 80064ba:	2339      	movs	r3, #57	; 0x39
 80064bc:	f88b 3000 	strb.w	r3, [fp]
 80064c0:	462b      	mov	r3, r5
 80064c2:	461d      	mov	r5, r3
 80064c4:	3b01      	subs	r3, #1
 80064c6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80064ca:	2a39      	cmp	r2, #57	; 0x39
 80064cc:	d071      	beq.n	80065b2 <_dtoa_r+0xb9a>
 80064ce:	3201      	adds	r2, #1
 80064d0:	701a      	strb	r2, [r3, #0]
 80064d2:	e746      	b.n	8006362 <_dtoa_r+0x94a>
 80064d4:	2a00      	cmp	r2, #0
 80064d6:	dd07      	ble.n	80064e8 <_dtoa_r+0xad0>
 80064d8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80064dc:	d0ed      	beq.n	80064ba <_dtoa_r+0xaa2>
 80064de:	f10a 0301 	add.w	r3, sl, #1
 80064e2:	f88b 3000 	strb.w	r3, [fp]
 80064e6:	e73c      	b.n	8006362 <_dtoa_r+0x94a>
 80064e8:	9b05      	ldr	r3, [sp, #20]
 80064ea:	f809 ac01 	strb.w	sl, [r9, #-1]
 80064ee:	4599      	cmp	r9, r3
 80064f0:	d047      	beq.n	8006582 <_dtoa_r+0xb6a>
 80064f2:	ee18 1a10 	vmov	r1, s16
 80064f6:	2300      	movs	r3, #0
 80064f8:	220a      	movs	r2, #10
 80064fa:	4620      	mov	r0, r4
 80064fc:	f000 fb08 	bl	8006b10 <__multadd>
 8006500:	45b8      	cmp	r8, r7
 8006502:	ee08 0a10 	vmov	s16, r0
 8006506:	f04f 0300 	mov.w	r3, #0
 800650a:	f04f 020a 	mov.w	r2, #10
 800650e:	4641      	mov	r1, r8
 8006510:	4620      	mov	r0, r4
 8006512:	d106      	bne.n	8006522 <_dtoa_r+0xb0a>
 8006514:	f000 fafc 	bl	8006b10 <__multadd>
 8006518:	4680      	mov	r8, r0
 800651a:	4607      	mov	r7, r0
 800651c:	f109 0901 	add.w	r9, r9, #1
 8006520:	e772      	b.n	8006408 <_dtoa_r+0x9f0>
 8006522:	f000 faf5 	bl	8006b10 <__multadd>
 8006526:	4639      	mov	r1, r7
 8006528:	4680      	mov	r8, r0
 800652a:	2300      	movs	r3, #0
 800652c:	220a      	movs	r2, #10
 800652e:	4620      	mov	r0, r4
 8006530:	f000 faee 	bl	8006b10 <__multadd>
 8006534:	4607      	mov	r7, r0
 8006536:	e7f1      	b.n	800651c <_dtoa_r+0xb04>
 8006538:	9b03      	ldr	r3, [sp, #12]
 800653a:	9302      	str	r3, [sp, #8]
 800653c:	9d01      	ldr	r5, [sp, #4]
 800653e:	ee18 0a10 	vmov	r0, s16
 8006542:	4631      	mov	r1, r6
 8006544:	f7ff f9da 	bl	80058fc <quorem>
 8006548:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800654c:	9b01      	ldr	r3, [sp, #4]
 800654e:	f805 ab01 	strb.w	sl, [r5], #1
 8006552:	1aea      	subs	r2, r5, r3
 8006554:	9b02      	ldr	r3, [sp, #8]
 8006556:	4293      	cmp	r3, r2
 8006558:	dd09      	ble.n	800656e <_dtoa_r+0xb56>
 800655a:	ee18 1a10 	vmov	r1, s16
 800655e:	2300      	movs	r3, #0
 8006560:	220a      	movs	r2, #10
 8006562:	4620      	mov	r0, r4
 8006564:	f000 fad4 	bl	8006b10 <__multadd>
 8006568:	ee08 0a10 	vmov	s16, r0
 800656c:	e7e7      	b.n	800653e <_dtoa_r+0xb26>
 800656e:	9b02      	ldr	r3, [sp, #8]
 8006570:	2b00      	cmp	r3, #0
 8006572:	bfc8      	it	gt
 8006574:	461d      	movgt	r5, r3
 8006576:	9b01      	ldr	r3, [sp, #4]
 8006578:	bfd8      	it	le
 800657a:	2501      	movle	r5, #1
 800657c:	441d      	add	r5, r3
 800657e:	f04f 0800 	mov.w	r8, #0
 8006582:	ee18 1a10 	vmov	r1, s16
 8006586:	2201      	movs	r2, #1
 8006588:	4620      	mov	r0, r4
 800658a:	f000 fc71 	bl	8006e70 <__lshift>
 800658e:	4631      	mov	r1, r6
 8006590:	ee08 0a10 	vmov	s16, r0
 8006594:	f000 fcdc 	bl	8006f50 <__mcmp>
 8006598:	2800      	cmp	r0, #0
 800659a:	dc91      	bgt.n	80064c0 <_dtoa_r+0xaa8>
 800659c:	d102      	bne.n	80065a4 <_dtoa_r+0xb8c>
 800659e:	f01a 0f01 	tst.w	sl, #1
 80065a2:	d18d      	bne.n	80064c0 <_dtoa_r+0xaa8>
 80065a4:	462b      	mov	r3, r5
 80065a6:	461d      	mov	r5, r3
 80065a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80065ac:	2a30      	cmp	r2, #48	; 0x30
 80065ae:	d0fa      	beq.n	80065a6 <_dtoa_r+0xb8e>
 80065b0:	e6d7      	b.n	8006362 <_dtoa_r+0x94a>
 80065b2:	9a01      	ldr	r2, [sp, #4]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d184      	bne.n	80064c2 <_dtoa_r+0xaaa>
 80065b8:	9b00      	ldr	r3, [sp, #0]
 80065ba:	3301      	adds	r3, #1
 80065bc:	9300      	str	r3, [sp, #0]
 80065be:	2331      	movs	r3, #49	; 0x31
 80065c0:	7013      	strb	r3, [r2, #0]
 80065c2:	e6ce      	b.n	8006362 <_dtoa_r+0x94a>
 80065c4:	4b09      	ldr	r3, [pc, #36]	; (80065ec <_dtoa_r+0xbd4>)
 80065c6:	f7ff ba95 	b.w	8005af4 <_dtoa_r+0xdc>
 80065ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	f47f aa6e 	bne.w	8005aae <_dtoa_r+0x96>
 80065d2:	4b07      	ldr	r3, [pc, #28]	; (80065f0 <_dtoa_r+0xbd8>)
 80065d4:	f7ff ba8e 	b.w	8005af4 <_dtoa_r+0xdc>
 80065d8:	9b02      	ldr	r3, [sp, #8]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	dcae      	bgt.n	800653c <_dtoa_r+0xb24>
 80065de:	9b06      	ldr	r3, [sp, #24]
 80065e0:	2b02      	cmp	r3, #2
 80065e2:	f73f aea8 	bgt.w	8006336 <_dtoa_r+0x91e>
 80065e6:	e7a9      	b.n	800653c <_dtoa_r+0xb24>
 80065e8:	08007af3 	.word	0x08007af3
 80065ec:	08007a50 	.word	0x08007a50
 80065f0:	08007a74 	.word	0x08007a74

080065f4 <__sflush_r>:
 80065f4:	898a      	ldrh	r2, [r1, #12]
 80065f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065fa:	4605      	mov	r5, r0
 80065fc:	0710      	lsls	r0, r2, #28
 80065fe:	460c      	mov	r4, r1
 8006600:	d458      	bmi.n	80066b4 <__sflush_r+0xc0>
 8006602:	684b      	ldr	r3, [r1, #4]
 8006604:	2b00      	cmp	r3, #0
 8006606:	dc05      	bgt.n	8006614 <__sflush_r+0x20>
 8006608:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800660a:	2b00      	cmp	r3, #0
 800660c:	dc02      	bgt.n	8006614 <__sflush_r+0x20>
 800660e:	2000      	movs	r0, #0
 8006610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006614:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006616:	2e00      	cmp	r6, #0
 8006618:	d0f9      	beq.n	800660e <__sflush_r+0x1a>
 800661a:	2300      	movs	r3, #0
 800661c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006620:	682f      	ldr	r7, [r5, #0]
 8006622:	602b      	str	r3, [r5, #0]
 8006624:	d032      	beq.n	800668c <__sflush_r+0x98>
 8006626:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006628:	89a3      	ldrh	r3, [r4, #12]
 800662a:	075a      	lsls	r2, r3, #29
 800662c:	d505      	bpl.n	800663a <__sflush_r+0x46>
 800662e:	6863      	ldr	r3, [r4, #4]
 8006630:	1ac0      	subs	r0, r0, r3
 8006632:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006634:	b10b      	cbz	r3, 800663a <__sflush_r+0x46>
 8006636:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006638:	1ac0      	subs	r0, r0, r3
 800663a:	2300      	movs	r3, #0
 800663c:	4602      	mov	r2, r0
 800663e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006640:	6a21      	ldr	r1, [r4, #32]
 8006642:	4628      	mov	r0, r5
 8006644:	47b0      	blx	r6
 8006646:	1c43      	adds	r3, r0, #1
 8006648:	89a3      	ldrh	r3, [r4, #12]
 800664a:	d106      	bne.n	800665a <__sflush_r+0x66>
 800664c:	6829      	ldr	r1, [r5, #0]
 800664e:	291d      	cmp	r1, #29
 8006650:	d82c      	bhi.n	80066ac <__sflush_r+0xb8>
 8006652:	4a2a      	ldr	r2, [pc, #168]	; (80066fc <__sflush_r+0x108>)
 8006654:	40ca      	lsrs	r2, r1
 8006656:	07d6      	lsls	r6, r2, #31
 8006658:	d528      	bpl.n	80066ac <__sflush_r+0xb8>
 800665a:	2200      	movs	r2, #0
 800665c:	6062      	str	r2, [r4, #4]
 800665e:	04d9      	lsls	r1, r3, #19
 8006660:	6922      	ldr	r2, [r4, #16]
 8006662:	6022      	str	r2, [r4, #0]
 8006664:	d504      	bpl.n	8006670 <__sflush_r+0x7c>
 8006666:	1c42      	adds	r2, r0, #1
 8006668:	d101      	bne.n	800666e <__sflush_r+0x7a>
 800666a:	682b      	ldr	r3, [r5, #0]
 800666c:	b903      	cbnz	r3, 8006670 <__sflush_r+0x7c>
 800666e:	6560      	str	r0, [r4, #84]	; 0x54
 8006670:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006672:	602f      	str	r7, [r5, #0]
 8006674:	2900      	cmp	r1, #0
 8006676:	d0ca      	beq.n	800660e <__sflush_r+0x1a>
 8006678:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800667c:	4299      	cmp	r1, r3
 800667e:	d002      	beq.n	8006686 <__sflush_r+0x92>
 8006680:	4628      	mov	r0, r5
 8006682:	f000 fd7d 	bl	8007180 <_free_r>
 8006686:	2000      	movs	r0, #0
 8006688:	6360      	str	r0, [r4, #52]	; 0x34
 800668a:	e7c1      	b.n	8006610 <__sflush_r+0x1c>
 800668c:	6a21      	ldr	r1, [r4, #32]
 800668e:	2301      	movs	r3, #1
 8006690:	4628      	mov	r0, r5
 8006692:	47b0      	blx	r6
 8006694:	1c41      	adds	r1, r0, #1
 8006696:	d1c7      	bne.n	8006628 <__sflush_r+0x34>
 8006698:	682b      	ldr	r3, [r5, #0]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d0c4      	beq.n	8006628 <__sflush_r+0x34>
 800669e:	2b1d      	cmp	r3, #29
 80066a0:	d001      	beq.n	80066a6 <__sflush_r+0xb2>
 80066a2:	2b16      	cmp	r3, #22
 80066a4:	d101      	bne.n	80066aa <__sflush_r+0xb6>
 80066a6:	602f      	str	r7, [r5, #0]
 80066a8:	e7b1      	b.n	800660e <__sflush_r+0x1a>
 80066aa:	89a3      	ldrh	r3, [r4, #12]
 80066ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066b0:	81a3      	strh	r3, [r4, #12]
 80066b2:	e7ad      	b.n	8006610 <__sflush_r+0x1c>
 80066b4:	690f      	ldr	r7, [r1, #16]
 80066b6:	2f00      	cmp	r7, #0
 80066b8:	d0a9      	beq.n	800660e <__sflush_r+0x1a>
 80066ba:	0793      	lsls	r3, r2, #30
 80066bc:	680e      	ldr	r6, [r1, #0]
 80066be:	bf08      	it	eq
 80066c0:	694b      	ldreq	r3, [r1, #20]
 80066c2:	600f      	str	r7, [r1, #0]
 80066c4:	bf18      	it	ne
 80066c6:	2300      	movne	r3, #0
 80066c8:	eba6 0807 	sub.w	r8, r6, r7
 80066cc:	608b      	str	r3, [r1, #8]
 80066ce:	f1b8 0f00 	cmp.w	r8, #0
 80066d2:	dd9c      	ble.n	800660e <__sflush_r+0x1a>
 80066d4:	6a21      	ldr	r1, [r4, #32]
 80066d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80066d8:	4643      	mov	r3, r8
 80066da:	463a      	mov	r2, r7
 80066dc:	4628      	mov	r0, r5
 80066de:	47b0      	blx	r6
 80066e0:	2800      	cmp	r0, #0
 80066e2:	dc06      	bgt.n	80066f2 <__sflush_r+0xfe>
 80066e4:	89a3      	ldrh	r3, [r4, #12]
 80066e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80066ea:	81a3      	strh	r3, [r4, #12]
 80066ec:	f04f 30ff 	mov.w	r0, #4294967295
 80066f0:	e78e      	b.n	8006610 <__sflush_r+0x1c>
 80066f2:	4407      	add	r7, r0
 80066f4:	eba8 0800 	sub.w	r8, r8, r0
 80066f8:	e7e9      	b.n	80066ce <__sflush_r+0xda>
 80066fa:	bf00      	nop
 80066fc:	20400001 	.word	0x20400001

08006700 <_fflush_r>:
 8006700:	b538      	push	{r3, r4, r5, lr}
 8006702:	690b      	ldr	r3, [r1, #16]
 8006704:	4605      	mov	r5, r0
 8006706:	460c      	mov	r4, r1
 8006708:	b913      	cbnz	r3, 8006710 <_fflush_r+0x10>
 800670a:	2500      	movs	r5, #0
 800670c:	4628      	mov	r0, r5
 800670e:	bd38      	pop	{r3, r4, r5, pc}
 8006710:	b118      	cbz	r0, 800671a <_fflush_r+0x1a>
 8006712:	6983      	ldr	r3, [r0, #24]
 8006714:	b90b      	cbnz	r3, 800671a <_fflush_r+0x1a>
 8006716:	f000 f887 	bl	8006828 <__sinit>
 800671a:	4b14      	ldr	r3, [pc, #80]	; (800676c <_fflush_r+0x6c>)
 800671c:	429c      	cmp	r4, r3
 800671e:	d11b      	bne.n	8006758 <_fflush_r+0x58>
 8006720:	686c      	ldr	r4, [r5, #4]
 8006722:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d0ef      	beq.n	800670a <_fflush_r+0xa>
 800672a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800672c:	07d0      	lsls	r0, r2, #31
 800672e:	d404      	bmi.n	800673a <_fflush_r+0x3a>
 8006730:	0599      	lsls	r1, r3, #22
 8006732:	d402      	bmi.n	800673a <_fflush_r+0x3a>
 8006734:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006736:	f000 f91a 	bl	800696e <__retarget_lock_acquire_recursive>
 800673a:	4628      	mov	r0, r5
 800673c:	4621      	mov	r1, r4
 800673e:	f7ff ff59 	bl	80065f4 <__sflush_r>
 8006742:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006744:	07da      	lsls	r2, r3, #31
 8006746:	4605      	mov	r5, r0
 8006748:	d4e0      	bmi.n	800670c <_fflush_r+0xc>
 800674a:	89a3      	ldrh	r3, [r4, #12]
 800674c:	059b      	lsls	r3, r3, #22
 800674e:	d4dd      	bmi.n	800670c <_fflush_r+0xc>
 8006750:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006752:	f000 f90d 	bl	8006970 <__retarget_lock_release_recursive>
 8006756:	e7d9      	b.n	800670c <_fflush_r+0xc>
 8006758:	4b05      	ldr	r3, [pc, #20]	; (8006770 <_fflush_r+0x70>)
 800675a:	429c      	cmp	r4, r3
 800675c:	d101      	bne.n	8006762 <_fflush_r+0x62>
 800675e:	68ac      	ldr	r4, [r5, #8]
 8006760:	e7df      	b.n	8006722 <_fflush_r+0x22>
 8006762:	4b04      	ldr	r3, [pc, #16]	; (8006774 <_fflush_r+0x74>)
 8006764:	429c      	cmp	r4, r3
 8006766:	bf08      	it	eq
 8006768:	68ec      	ldreq	r4, [r5, #12]
 800676a:	e7da      	b.n	8006722 <_fflush_r+0x22>
 800676c:	08007b24 	.word	0x08007b24
 8006770:	08007b44 	.word	0x08007b44
 8006774:	08007b04 	.word	0x08007b04

08006778 <std>:
 8006778:	2300      	movs	r3, #0
 800677a:	b510      	push	{r4, lr}
 800677c:	4604      	mov	r4, r0
 800677e:	e9c0 3300 	strd	r3, r3, [r0]
 8006782:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006786:	6083      	str	r3, [r0, #8]
 8006788:	8181      	strh	r1, [r0, #12]
 800678a:	6643      	str	r3, [r0, #100]	; 0x64
 800678c:	81c2      	strh	r2, [r0, #14]
 800678e:	6183      	str	r3, [r0, #24]
 8006790:	4619      	mov	r1, r3
 8006792:	2208      	movs	r2, #8
 8006794:	305c      	adds	r0, #92	; 0x5c
 8006796:	f7fe faf1 	bl	8004d7c <memset>
 800679a:	4b05      	ldr	r3, [pc, #20]	; (80067b0 <std+0x38>)
 800679c:	6263      	str	r3, [r4, #36]	; 0x24
 800679e:	4b05      	ldr	r3, [pc, #20]	; (80067b4 <std+0x3c>)
 80067a0:	62a3      	str	r3, [r4, #40]	; 0x28
 80067a2:	4b05      	ldr	r3, [pc, #20]	; (80067b8 <std+0x40>)
 80067a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80067a6:	4b05      	ldr	r3, [pc, #20]	; (80067bc <std+0x44>)
 80067a8:	6224      	str	r4, [r4, #32]
 80067aa:	6323      	str	r3, [r4, #48]	; 0x30
 80067ac:	bd10      	pop	{r4, pc}
 80067ae:	bf00      	nop
 80067b0:	08007615 	.word	0x08007615
 80067b4:	08007637 	.word	0x08007637
 80067b8:	0800766f 	.word	0x0800766f
 80067bc:	08007693 	.word	0x08007693

080067c0 <_cleanup_r>:
 80067c0:	4901      	ldr	r1, [pc, #4]	; (80067c8 <_cleanup_r+0x8>)
 80067c2:	f000 b8af 	b.w	8006924 <_fwalk_reent>
 80067c6:	bf00      	nop
 80067c8:	08006701 	.word	0x08006701

080067cc <__sfmoreglue>:
 80067cc:	b570      	push	{r4, r5, r6, lr}
 80067ce:	2268      	movs	r2, #104	; 0x68
 80067d0:	1e4d      	subs	r5, r1, #1
 80067d2:	4355      	muls	r5, r2
 80067d4:	460e      	mov	r6, r1
 80067d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80067da:	f000 fd3d 	bl	8007258 <_malloc_r>
 80067de:	4604      	mov	r4, r0
 80067e0:	b140      	cbz	r0, 80067f4 <__sfmoreglue+0x28>
 80067e2:	2100      	movs	r1, #0
 80067e4:	e9c0 1600 	strd	r1, r6, [r0]
 80067e8:	300c      	adds	r0, #12
 80067ea:	60a0      	str	r0, [r4, #8]
 80067ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80067f0:	f7fe fac4 	bl	8004d7c <memset>
 80067f4:	4620      	mov	r0, r4
 80067f6:	bd70      	pop	{r4, r5, r6, pc}

080067f8 <__sfp_lock_acquire>:
 80067f8:	4801      	ldr	r0, [pc, #4]	; (8006800 <__sfp_lock_acquire+0x8>)
 80067fa:	f000 b8b8 	b.w	800696e <__retarget_lock_acquire_recursive>
 80067fe:	bf00      	nop
 8006800:	200003d1 	.word	0x200003d1

08006804 <__sfp_lock_release>:
 8006804:	4801      	ldr	r0, [pc, #4]	; (800680c <__sfp_lock_release+0x8>)
 8006806:	f000 b8b3 	b.w	8006970 <__retarget_lock_release_recursive>
 800680a:	bf00      	nop
 800680c:	200003d1 	.word	0x200003d1

08006810 <__sinit_lock_acquire>:
 8006810:	4801      	ldr	r0, [pc, #4]	; (8006818 <__sinit_lock_acquire+0x8>)
 8006812:	f000 b8ac 	b.w	800696e <__retarget_lock_acquire_recursive>
 8006816:	bf00      	nop
 8006818:	200003d2 	.word	0x200003d2

0800681c <__sinit_lock_release>:
 800681c:	4801      	ldr	r0, [pc, #4]	; (8006824 <__sinit_lock_release+0x8>)
 800681e:	f000 b8a7 	b.w	8006970 <__retarget_lock_release_recursive>
 8006822:	bf00      	nop
 8006824:	200003d2 	.word	0x200003d2

08006828 <__sinit>:
 8006828:	b510      	push	{r4, lr}
 800682a:	4604      	mov	r4, r0
 800682c:	f7ff fff0 	bl	8006810 <__sinit_lock_acquire>
 8006830:	69a3      	ldr	r3, [r4, #24]
 8006832:	b11b      	cbz	r3, 800683c <__sinit+0x14>
 8006834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006838:	f7ff bff0 	b.w	800681c <__sinit_lock_release>
 800683c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006840:	6523      	str	r3, [r4, #80]	; 0x50
 8006842:	4b13      	ldr	r3, [pc, #76]	; (8006890 <__sinit+0x68>)
 8006844:	4a13      	ldr	r2, [pc, #76]	; (8006894 <__sinit+0x6c>)
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	62a2      	str	r2, [r4, #40]	; 0x28
 800684a:	42a3      	cmp	r3, r4
 800684c:	bf04      	itt	eq
 800684e:	2301      	moveq	r3, #1
 8006850:	61a3      	streq	r3, [r4, #24]
 8006852:	4620      	mov	r0, r4
 8006854:	f000 f820 	bl	8006898 <__sfp>
 8006858:	6060      	str	r0, [r4, #4]
 800685a:	4620      	mov	r0, r4
 800685c:	f000 f81c 	bl	8006898 <__sfp>
 8006860:	60a0      	str	r0, [r4, #8]
 8006862:	4620      	mov	r0, r4
 8006864:	f000 f818 	bl	8006898 <__sfp>
 8006868:	2200      	movs	r2, #0
 800686a:	60e0      	str	r0, [r4, #12]
 800686c:	2104      	movs	r1, #4
 800686e:	6860      	ldr	r0, [r4, #4]
 8006870:	f7ff ff82 	bl	8006778 <std>
 8006874:	68a0      	ldr	r0, [r4, #8]
 8006876:	2201      	movs	r2, #1
 8006878:	2109      	movs	r1, #9
 800687a:	f7ff ff7d 	bl	8006778 <std>
 800687e:	68e0      	ldr	r0, [r4, #12]
 8006880:	2202      	movs	r2, #2
 8006882:	2112      	movs	r1, #18
 8006884:	f7ff ff78 	bl	8006778 <std>
 8006888:	2301      	movs	r3, #1
 800688a:	61a3      	str	r3, [r4, #24]
 800688c:	e7d2      	b.n	8006834 <__sinit+0xc>
 800688e:	bf00      	nop
 8006890:	08007a3c 	.word	0x08007a3c
 8006894:	080067c1 	.word	0x080067c1

08006898 <__sfp>:
 8006898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800689a:	4607      	mov	r7, r0
 800689c:	f7ff ffac 	bl	80067f8 <__sfp_lock_acquire>
 80068a0:	4b1e      	ldr	r3, [pc, #120]	; (800691c <__sfp+0x84>)
 80068a2:	681e      	ldr	r6, [r3, #0]
 80068a4:	69b3      	ldr	r3, [r6, #24]
 80068a6:	b913      	cbnz	r3, 80068ae <__sfp+0x16>
 80068a8:	4630      	mov	r0, r6
 80068aa:	f7ff ffbd 	bl	8006828 <__sinit>
 80068ae:	3648      	adds	r6, #72	; 0x48
 80068b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80068b4:	3b01      	subs	r3, #1
 80068b6:	d503      	bpl.n	80068c0 <__sfp+0x28>
 80068b8:	6833      	ldr	r3, [r6, #0]
 80068ba:	b30b      	cbz	r3, 8006900 <__sfp+0x68>
 80068bc:	6836      	ldr	r6, [r6, #0]
 80068be:	e7f7      	b.n	80068b0 <__sfp+0x18>
 80068c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80068c4:	b9d5      	cbnz	r5, 80068fc <__sfp+0x64>
 80068c6:	4b16      	ldr	r3, [pc, #88]	; (8006920 <__sfp+0x88>)
 80068c8:	60e3      	str	r3, [r4, #12]
 80068ca:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80068ce:	6665      	str	r5, [r4, #100]	; 0x64
 80068d0:	f000 f84c 	bl	800696c <__retarget_lock_init_recursive>
 80068d4:	f7ff ff96 	bl	8006804 <__sfp_lock_release>
 80068d8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80068dc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80068e0:	6025      	str	r5, [r4, #0]
 80068e2:	61a5      	str	r5, [r4, #24]
 80068e4:	2208      	movs	r2, #8
 80068e6:	4629      	mov	r1, r5
 80068e8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80068ec:	f7fe fa46 	bl	8004d7c <memset>
 80068f0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80068f4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80068f8:	4620      	mov	r0, r4
 80068fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068fc:	3468      	adds	r4, #104	; 0x68
 80068fe:	e7d9      	b.n	80068b4 <__sfp+0x1c>
 8006900:	2104      	movs	r1, #4
 8006902:	4638      	mov	r0, r7
 8006904:	f7ff ff62 	bl	80067cc <__sfmoreglue>
 8006908:	4604      	mov	r4, r0
 800690a:	6030      	str	r0, [r6, #0]
 800690c:	2800      	cmp	r0, #0
 800690e:	d1d5      	bne.n	80068bc <__sfp+0x24>
 8006910:	f7ff ff78 	bl	8006804 <__sfp_lock_release>
 8006914:	230c      	movs	r3, #12
 8006916:	603b      	str	r3, [r7, #0]
 8006918:	e7ee      	b.n	80068f8 <__sfp+0x60>
 800691a:	bf00      	nop
 800691c:	08007a3c 	.word	0x08007a3c
 8006920:	ffff0001 	.word	0xffff0001

08006924 <_fwalk_reent>:
 8006924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006928:	4606      	mov	r6, r0
 800692a:	4688      	mov	r8, r1
 800692c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006930:	2700      	movs	r7, #0
 8006932:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006936:	f1b9 0901 	subs.w	r9, r9, #1
 800693a:	d505      	bpl.n	8006948 <_fwalk_reent+0x24>
 800693c:	6824      	ldr	r4, [r4, #0]
 800693e:	2c00      	cmp	r4, #0
 8006940:	d1f7      	bne.n	8006932 <_fwalk_reent+0xe>
 8006942:	4638      	mov	r0, r7
 8006944:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006948:	89ab      	ldrh	r3, [r5, #12]
 800694a:	2b01      	cmp	r3, #1
 800694c:	d907      	bls.n	800695e <_fwalk_reent+0x3a>
 800694e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006952:	3301      	adds	r3, #1
 8006954:	d003      	beq.n	800695e <_fwalk_reent+0x3a>
 8006956:	4629      	mov	r1, r5
 8006958:	4630      	mov	r0, r6
 800695a:	47c0      	blx	r8
 800695c:	4307      	orrs	r7, r0
 800695e:	3568      	adds	r5, #104	; 0x68
 8006960:	e7e9      	b.n	8006936 <_fwalk_reent+0x12>
	...

08006964 <_localeconv_r>:
 8006964:	4800      	ldr	r0, [pc, #0]	; (8006968 <_localeconv_r+0x4>)
 8006966:	4770      	bx	lr
 8006968:	20000160 	.word	0x20000160

0800696c <__retarget_lock_init_recursive>:
 800696c:	4770      	bx	lr

0800696e <__retarget_lock_acquire_recursive>:
 800696e:	4770      	bx	lr

08006970 <__retarget_lock_release_recursive>:
 8006970:	4770      	bx	lr

08006972 <__swhatbuf_r>:
 8006972:	b570      	push	{r4, r5, r6, lr}
 8006974:	460e      	mov	r6, r1
 8006976:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800697a:	2900      	cmp	r1, #0
 800697c:	b096      	sub	sp, #88	; 0x58
 800697e:	4614      	mov	r4, r2
 8006980:	461d      	mov	r5, r3
 8006982:	da08      	bge.n	8006996 <__swhatbuf_r+0x24>
 8006984:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006988:	2200      	movs	r2, #0
 800698a:	602a      	str	r2, [r5, #0]
 800698c:	061a      	lsls	r2, r3, #24
 800698e:	d410      	bmi.n	80069b2 <__swhatbuf_r+0x40>
 8006990:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006994:	e00e      	b.n	80069b4 <__swhatbuf_r+0x42>
 8006996:	466a      	mov	r2, sp
 8006998:	f000 fed2 	bl	8007740 <_fstat_r>
 800699c:	2800      	cmp	r0, #0
 800699e:	dbf1      	blt.n	8006984 <__swhatbuf_r+0x12>
 80069a0:	9a01      	ldr	r2, [sp, #4]
 80069a2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80069a6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80069aa:	425a      	negs	r2, r3
 80069ac:	415a      	adcs	r2, r3
 80069ae:	602a      	str	r2, [r5, #0]
 80069b0:	e7ee      	b.n	8006990 <__swhatbuf_r+0x1e>
 80069b2:	2340      	movs	r3, #64	; 0x40
 80069b4:	2000      	movs	r0, #0
 80069b6:	6023      	str	r3, [r4, #0]
 80069b8:	b016      	add	sp, #88	; 0x58
 80069ba:	bd70      	pop	{r4, r5, r6, pc}

080069bc <__smakebuf_r>:
 80069bc:	898b      	ldrh	r3, [r1, #12]
 80069be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80069c0:	079d      	lsls	r5, r3, #30
 80069c2:	4606      	mov	r6, r0
 80069c4:	460c      	mov	r4, r1
 80069c6:	d507      	bpl.n	80069d8 <__smakebuf_r+0x1c>
 80069c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80069cc:	6023      	str	r3, [r4, #0]
 80069ce:	6123      	str	r3, [r4, #16]
 80069d0:	2301      	movs	r3, #1
 80069d2:	6163      	str	r3, [r4, #20]
 80069d4:	b002      	add	sp, #8
 80069d6:	bd70      	pop	{r4, r5, r6, pc}
 80069d8:	ab01      	add	r3, sp, #4
 80069da:	466a      	mov	r2, sp
 80069dc:	f7ff ffc9 	bl	8006972 <__swhatbuf_r>
 80069e0:	9900      	ldr	r1, [sp, #0]
 80069e2:	4605      	mov	r5, r0
 80069e4:	4630      	mov	r0, r6
 80069e6:	f000 fc37 	bl	8007258 <_malloc_r>
 80069ea:	b948      	cbnz	r0, 8006a00 <__smakebuf_r+0x44>
 80069ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069f0:	059a      	lsls	r2, r3, #22
 80069f2:	d4ef      	bmi.n	80069d4 <__smakebuf_r+0x18>
 80069f4:	f023 0303 	bic.w	r3, r3, #3
 80069f8:	f043 0302 	orr.w	r3, r3, #2
 80069fc:	81a3      	strh	r3, [r4, #12]
 80069fe:	e7e3      	b.n	80069c8 <__smakebuf_r+0xc>
 8006a00:	4b0d      	ldr	r3, [pc, #52]	; (8006a38 <__smakebuf_r+0x7c>)
 8006a02:	62b3      	str	r3, [r6, #40]	; 0x28
 8006a04:	89a3      	ldrh	r3, [r4, #12]
 8006a06:	6020      	str	r0, [r4, #0]
 8006a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a0c:	81a3      	strh	r3, [r4, #12]
 8006a0e:	9b00      	ldr	r3, [sp, #0]
 8006a10:	6163      	str	r3, [r4, #20]
 8006a12:	9b01      	ldr	r3, [sp, #4]
 8006a14:	6120      	str	r0, [r4, #16]
 8006a16:	b15b      	cbz	r3, 8006a30 <__smakebuf_r+0x74>
 8006a18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a1c:	4630      	mov	r0, r6
 8006a1e:	f000 fea1 	bl	8007764 <_isatty_r>
 8006a22:	b128      	cbz	r0, 8006a30 <__smakebuf_r+0x74>
 8006a24:	89a3      	ldrh	r3, [r4, #12]
 8006a26:	f023 0303 	bic.w	r3, r3, #3
 8006a2a:	f043 0301 	orr.w	r3, r3, #1
 8006a2e:	81a3      	strh	r3, [r4, #12]
 8006a30:	89a0      	ldrh	r0, [r4, #12]
 8006a32:	4305      	orrs	r5, r0
 8006a34:	81a5      	strh	r5, [r4, #12]
 8006a36:	e7cd      	b.n	80069d4 <__smakebuf_r+0x18>
 8006a38:	080067c1 	.word	0x080067c1

08006a3c <malloc>:
 8006a3c:	4b02      	ldr	r3, [pc, #8]	; (8006a48 <malloc+0xc>)
 8006a3e:	4601      	mov	r1, r0
 8006a40:	6818      	ldr	r0, [r3, #0]
 8006a42:	f000 bc09 	b.w	8007258 <_malloc_r>
 8006a46:	bf00      	nop
 8006a48:	2000000c 	.word	0x2000000c

08006a4c <_Balloc>:
 8006a4c:	b570      	push	{r4, r5, r6, lr}
 8006a4e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006a50:	4604      	mov	r4, r0
 8006a52:	460d      	mov	r5, r1
 8006a54:	b976      	cbnz	r6, 8006a74 <_Balloc+0x28>
 8006a56:	2010      	movs	r0, #16
 8006a58:	f7ff fff0 	bl	8006a3c <malloc>
 8006a5c:	4602      	mov	r2, r0
 8006a5e:	6260      	str	r0, [r4, #36]	; 0x24
 8006a60:	b920      	cbnz	r0, 8006a6c <_Balloc+0x20>
 8006a62:	4b18      	ldr	r3, [pc, #96]	; (8006ac4 <_Balloc+0x78>)
 8006a64:	4818      	ldr	r0, [pc, #96]	; (8006ac8 <_Balloc+0x7c>)
 8006a66:	2166      	movs	r1, #102	; 0x66
 8006a68:	f000 fe2a 	bl	80076c0 <__assert_func>
 8006a6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006a70:	6006      	str	r6, [r0, #0]
 8006a72:	60c6      	str	r6, [r0, #12]
 8006a74:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006a76:	68f3      	ldr	r3, [r6, #12]
 8006a78:	b183      	cbz	r3, 8006a9c <_Balloc+0x50>
 8006a7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006a7c:	68db      	ldr	r3, [r3, #12]
 8006a7e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006a82:	b9b8      	cbnz	r0, 8006ab4 <_Balloc+0x68>
 8006a84:	2101      	movs	r1, #1
 8006a86:	fa01 f605 	lsl.w	r6, r1, r5
 8006a8a:	1d72      	adds	r2, r6, #5
 8006a8c:	0092      	lsls	r2, r2, #2
 8006a8e:	4620      	mov	r0, r4
 8006a90:	f000 fb60 	bl	8007154 <_calloc_r>
 8006a94:	b160      	cbz	r0, 8006ab0 <_Balloc+0x64>
 8006a96:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006a9a:	e00e      	b.n	8006aba <_Balloc+0x6e>
 8006a9c:	2221      	movs	r2, #33	; 0x21
 8006a9e:	2104      	movs	r1, #4
 8006aa0:	4620      	mov	r0, r4
 8006aa2:	f000 fb57 	bl	8007154 <_calloc_r>
 8006aa6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006aa8:	60f0      	str	r0, [r6, #12]
 8006aaa:	68db      	ldr	r3, [r3, #12]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d1e4      	bne.n	8006a7a <_Balloc+0x2e>
 8006ab0:	2000      	movs	r0, #0
 8006ab2:	bd70      	pop	{r4, r5, r6, pc}
 8006ab4:	6802      	ldr	r2, [r0, #0]
 8006ab6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006aba:	2300      	movs	r3, #0
 8006abc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006ac0:	e7f7      	b.n	8006ab2 <_Balloc+0x66>
 8006ac2:	bf00      	nop
 8006ac4:	08007a81 	.word	0x08007a81
 8006ac8:	08007b64 	.word	0x08007b64

08006acc <_Bfree>:
 8006acc:	b570      	push	{r4, r5, r6, lr}
 8006ace:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006ad0:	4605      	mov	r5, r0
 8006ad2:	460c      	mov	r4, r1
 8006ad4:	b976      	cbnz	r6, 8006af4 <_Bfree+0x28>
 8006ad6:	2010      	movs	r0, #16
 8006ad8:	f7ff ffb0 	bl	8006a3c <malloc>
 8006adc:	4602      	mov	r2, r0
 8006ade:	6268      	str	r0, [r5, #36]	; 0x24
 8006ae0:	b920      	cbnz	r0, 8006aec <_Bfree+0x20>
 8006ae2:	4b09      	ldr	r3, [pc, #36]	; (8006b08 <_Bfree+0x3c>)
 8006ae4:	4809      	ldr	r0, [pc, #36]	; (8006b0c <_Bfree+0x40>)
 8006ae6:	218a      	movs	r1, #138	; 0x8a
 8006ae8:	f000 fdea 	bl	80076c0 <__assert_func>
 8006aec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006af0:	6006      	str	r6, [r0, #0]
 8006af2:	60c6      	str	r6, [r0, #12]
 8006af4:	b13c      	cbz	r4, 8006b06 <_Bfree+0x3a>
 8006af6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006af8:	6862      	ldr	r2, [r4, #4]
 8006afa:	68db      	ldr	r3, [r3, #12]
 8006afc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006b00:	6021      	str	r1, [r4, #0]
 8006b02:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006b06:	bd70      	pop	{r4, r5, r6, pc}
 8006b08:	08007a81 	.word	0x08007a81
 8006b0c:	08007b64 	.word	0x08007b64

08006b10 <__multadd>:
 8006b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b14:	690d      	ldr	r5, [r1, #16]
 8006b16:	4607      	mov	r7, r0
 8006b18:	460c      	mov	r4, r1
 8006b1a:	461e      	mov	r6, r3
 8006b1c:	f101 0c14 	add.w	ip, r1, #20
 8006b20:	2000      	movs	r0, #0
 8006b22:	f8dc 3000 	ldr.w	r3, [ip]
 8006b26:	b299      	uxth	r1, r3
 8006b28:	fb02 6101 	mla	r1, r2, r1, r6
 8006b2c:	0c1e      	lsrs	r6, r3, #16
 8006b2e:	0c0b      	lsrs	r3, r1, #16
 8006b30:	fb02 3306 	mla	r3, r2, r6, r3
 8006b34:	b289      	uxth	r1, r1
 8006b36:	3001      	adds	r0, #1
 8006b38:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006b3c:	4285      	cmp	r5, r0
 8006b3e:	f84c 1b04 	str.w	r1, [ip], #4
 8006b42:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006b46:	dcec      	bgt.n	8006b22 <__multadd+0x12>
 8006b48:	b30e      	cbz	r6, 8006b8e <__multadd+0x7e>
 8006b4a:	68a3      	ldr	r3, [r4, #8]
 8006b4c:	42ab      	cmp	r3, r5
 8006b4e:	dc19      	bgt.n	8006b84 <__multadd+0x74>
 8006b50:	6861      	ldr	r1, [r4, #4]
 8006b52:	4638      	mov	r0, r7
 8006b54:	3101      	adds	r1, #1
 8006b56:	f7ff ff79 	bl	8006a4c <_Balloc>
 8006b5a:	4680      	mov	r8, r0
 8006b5c:	b928      	cbnz	r0, 8006b6a <__multadd+0x5a>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	4b0c      	ldr	r3, [pc, #48]	; (8006b94 <__multadd+0x84>)
 8006b62:	480d      	ldr	r0, [pc, #52]	; (8006b98 <__multadd+0x88>)
 8006b64:	21b5      	movs	r1, #181	; 0xb5
 8006b66:	f000 fdab 	bl	80076c0 <__assert_func>
 8006b6a:	6922      	ldr	r2, [r4, #16]
 8006b6c:	3202      	adds	r2, #2
 8006b6e:	f104 010c 	add.w	r1, r4, #12
 8006b72:	0092      	lsls	r2, r2, #2
 8006b74:	300c      	adds	r0, #12
 8006b76:	f7fe f8f3 	bl	8004d60 <memcpy>
 8006b7a:	4621      	mov	r1, r4
 8006b7c:	4638      	mov	r0, r7
 8006b7e:	f7ff ffa5 	bl	8006acc <_Bfree>
 8006b82:	4644      	mov	r4, r8
 8006b84:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006b88:	3501      	adds	r5, #1
 8006b8a:	615e      	str	r6, [r3, #20]
 8006b8c:	6125      	str	r5, [r4, #16]
 8006b8e:	4620      	mov	r0, r4
 8006b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b94:	08007af3 	.word	0x08007af3
 8006b98:	08007b64 	.word	0x08007b64

08006b9c <__hi0bits>:
 8006b9c:	0c03      	lsrs	r3, r0, #16
 8006b9e:	041b      	lsls	r3, r3, #16
 8006ba0:	b9d3      	cbnz	r3, 8006bd8 <__hi0bits+0x3c>
 8006ba2:	0400      	lsls	r0, r0, #16
 8006ba4:	2310      	movs	r3, #16
 8006ba6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006baa:	bf04      	itt	eq
 8006bac:	0200      	lsleq	r0, r0, #8
 8006bae:	3308      	addeq	r3, #8
 8006bb0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006bb4:	bf04      	itt	eq
 8006bb6:	0100      	lsleq	r0, r0, #4
 8006bb8:	3304      	addeq	r3, #4
 8006bba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006bbe:	bf04      	itt	eq
 8006bc0:	0080      	lsleq	r0, r0, #2
 8006bc2:	3302      	addeq	r3, #2
 8006bc4:	2800      	cmp	r0, #0
 8006bc6:	db05      	blt.n	8006bd4 <__hi0bits+0x38>
 8006bc8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006bcc:	f103 0301 	add.w	r3, r3, #1
 8006bd0:	bf08      	it	eq
 8006bd2:	2320      	moveq	r3, #32
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	4770      	bx	lr
 8006bd8:	2300      	movs	r3, #0
 8006bda:	e7e4      	b.n	8006ba6 <__hi0bits+0xa>

08006bdc <__lo0bits>:
 8006bdc:	6803      	ldr	r3, [r0, #0]
 8006bde:	f013 0207 	ands.w	r2, r3, #7
 8006be2:	4601      	mov	r1, r0
 8006be4:	d00b      	beq.n	8006bfe <__lo0bits+0x22>
 8006be6:	07da      	lsls	r2, r3, #31
 8006be8:	d423      	bmi.n	8006c32 <__lo0bits+0x56>
 8006bea:	0798      	lsls	r0, r3, #30
 8006bec:	bf49      	itett	mi
 8006bee:	085b      	lsrmi	r3, r3, #1
 8006bf0:	089b      	lsrpl	r3, r3, #2
 8006bf2:	2001      	movmi	r0, #1
 8006bf4:	600b      	strmi	r3, [r1, #0]
 8006bf6:	bf5c      	itt	pl
 8006bf8:	600b      	strpl	r3, [r1, #0]
 8006bfa:	2002      	movpl	r0, #2
 8006bfc:	4770      	bx	lr
 8006bfe:	b298      	uxth	r0, r3
 8006c00:	b9a8      	cbnz	r0, 8006c2e <__lo0bits+0x52>
 8006c02:	0c1b      	lsrs	r3, r3, #16
 8006c04:	2010      	movs	r0, #16
 8006c06:	b2da      	uxtb	r2, r3
 8006c08:	b90a      	cbnz	r2, 8006c0e <__lo0bits+0x32>
 8006c0a:	3008      	adds	r0, #8
 8006c0c:	0a1b      	lsrs	r3, r3, #8
 8006c0e:	071a      	lsls	r2, r3, #28
 8006c10:	bf04      	itt	eq
 8006c12:	091b      	lsreq	r3, r3, #4
 8006c14:	3004      	addeq	r0, #4
 8006c16:	079a      	lsls	r2, r3, #30
 8006c18:	bf04      	itt	eq
 8006c1a:	089b      	lsreq	r3, r3, #2
 8006c1c:	3002      	addeq	r0, #2
 8006c1e:	07da      	lsls	r2, r3, #31
 8006c20:	d403      	bmi.n	8006c2a <__lo0bits+0x4e>
 8006c22:	085b      	lsrs	r3, r3, #1
 8006c24:	f100 0001 	add.w	r0, r0, #1
 8006c28:	d005      	beq.n	8006c36 <__lo0bits+0x5a>
 8006c2a:	600b      	str	r3, [r1, #0]
 8006c2c:	4770      	bx	lr
 8006c2e:	4610      	mov	r0, r2
 8006c30:	e7e9      	b.n	8006c06 <__lo0bits+0x2a>
 8006c32:	2000      	movs	r0, #0
 8006c34:	4770      	bx	lr
 8006c36:	2020      	movs	r0, #32
 8006c38:	4770      	bx	lr
	...

08006c3c <__i2b>:
 8006c3c:	b510      	push	{r4, lr}
 8006c3e:	460c      	mov	r4, r1
 8006c40:	2101      	movs	r1, #1
 8006c42:	f7ff ff03 	bl	8006a4c <_Balloc>
 8006c46:	4602      	mov	r2, r0
 8006c48:	b928      	cbnz	r0, 8006c56 <__i2b+0x1a>
 8006c4a:	4b05      	ldr	r3, [pc, #20]	; (8006c60 <__i2b+0x24>)
 8006c4c:	4805      	ldr	r0, [pc, #20]	; (8006c64 <__i2b+0x28>)
 8006c4e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006c52:	f000 fd35 	bl	80076c0 <__assert_func>
 8006c56:	2301      	movs	r3, #1
 8006c58:	6144      	str	r4, [r0, #20]
 8006c5a:	6103      	str	r3, [r0, #16]
 8006c5c:	bd10      	pop	{r4, pc}
 8006c5e:	bf00      	nop
 8006c60:	08007af3 	.word	0x08007af3
 8006c64:	08007b64 	.word	0x08007b64

08006c68 <__multiply>:
 8006c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c6c:	4691      	mov	r9, r2
 8006c6e:	690a      	ldr	r2, [r1, #16]
 8006c70:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006c74:	429a      	cmp	r2, r3
 8006c76:	bfb8      	it	lt
 8006c78:	460b      	movlt	r3, r1
 8006c7a:	460c      	mov	r4, r1
 8006c7c:	bfbc      	itt	lt
 8006c7e:	464c      	movlt	r4, r9
 8006c80:	4699      	movlt	r9, r3
 8006c82:	6927      	ldr	r7, [r4, #16]
 8006c84:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006c88:	68a3      	ldr	r3, [r4, #8]
 8006c8a:	6861      	ldr	r1, [r4, #4]
 8006c8c:	eb07 060a 	add.w	r6, r7, sl
 8006c90:	42b3      	cmp	r3, r6
 8006c92:	b085      	sub	sp, #20
 8006c94:	bfb8      	it	lt
 8006c96:	3101      	addlt	r1, #1
 8006c98:	f7ff fed8 	bl	8006a4c <_Balloc>
 8006c9c:	b930      	cbnz	r0, 8006cac <__multiply+0x44>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	4b44      	ldr	r3, [pc, #272]	; (8006db4 <__multiply+0x14c>)
 8006ca2:	4845      	ldr	r0, [pc, #276]	; (8006db8 <__multiply+0x150>)
 8006ca4:	f240 115d 	movw	r1, #349	; 0x15d
 8006ca8:	f000 fd0a 	bl	80076c0 <__assert_func>
 8006cac:	f100 0514 	add.w	r5, r0, #20
 8006cb0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006cb4:	462b      	mov	r3, r5
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	4543      	cmp	r3, r8
 8006cba:	d321      	bcc.n	8006d00 <__multiply+0x98>
 8006cbc:	f104 0314 	add.w	r3, r4, #20
 8006cc0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006cc4:	f109 0314 	add.w	r3, r9, #20
 8006cc8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006ccc:	9202      	str	r2, [sp, #8]
 8006cce:	1b3a      	subs	r2, r7, r4
 8006cd0:	3a15      	subs	r2, #21
 8006cd2:	f022 0203 	bic.w	r2, r2, #3
 8006cd6:	3204      	adds	r2, #4
 8006cd8:	f104 0115 	add.w	r1, r4, #21
 8006cdc:	428f      	cmp	r7, r1
 8006cde:	bf38      	it	cc
 8006ce0:	2204      	movcc	r2, #4
 8006ce2:	9201      	str	r2, [sp, #4]
 8006ce4:	9a02      	ldr	r2, [sp, #8]
 8006ce6:	9303      	str	r3, [sp, #12]
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d80c      	bhi.n	8006d06 <__multiply+0x9e>
 8006cec:	2e00      	cmp	r6, #0
 8006cee:	dd03      	ble.n	8006cf8 <__multiply+0x90>
 8006cf0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d05a      	beq.n	8006dae <__multiply+0x146>
 8006cf8:	6106      	str	r6, [r0, #16]
 8006cfa:	b005      	add	sp, #20
 8006cfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d00:	f843 2b04 	str.w	r2, [r3], #4
 8006d04:	e7d8      	b.n	8006cb8 <__multiply+0x50>
 8006d06:	f8b3 a000 	ldrh.w	sl, [r3]
 8006d0a:	f1ba 0f00 	cmp.w	sl, #0
 8006d0e:	d024      	beq.n	8006d5a <__multiply+0xf2>
 8006d10:	f104 0e14 	add.w	lr, r4, #20
 8006d14:	46a9      	mov	r9, r5
 8006d16:	f04f 0c00 	mov.w	ip, #0
 8006d1a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006d1e:	f8d9 1000 	ldr.w	r1, [r9]
 8006d22:	fa1f fb82 	uxth.w	fp, r2
 8006d26:	b289      	uxth	r1, r1
 8006d28:	fb0a 110b 	mla	r1, sl, fp, r1
 8006d2c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006d30:	f8d9 2000 	ldr.w	r2, [r9]
 8006d34:	4461      	add	r1, ip
 8006d36:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006d3a:	fb0a c20b 	mla	r2, sl, fp, ip
 8006d3e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006d42:	b289      	uxth	r1, r1
 8006d44:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006d48:	4577      	cmp	r7, lr
 8006d4a:	f849 1b04 	str.w	r1, [r9], #4
 8006d4e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006d52:	d8e2      	bhi.n	8006d1a <__multiply+0xb2>
 8006d54:	9a01      	ldr	r2, [sp, #4]
 8006d56:	f845 c002 	str.w	ip, [r5, r2]
 8006d5a:	9a03      	ldr	r2, [sp, #12]
 8006d5c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006d60:	3304      	adds	r3, #4
 8006d62:	f1b9 0f00 	cmp.w	r9, #0
 8006d66:	d020      	beq.n	8006daa <__multiply+0x142>
 8006d68:	6829      	ldr	r1, [r5, #0]
 8006d6a:	f104 0c14 	add.w	ip, r4, #20
 8006d6e:	46ae      	mov	lr, r5
 8006d70:	f04f 0a00 	mov.w	sl, #0
 8006d74:	f8bc b000 	ldrh.w	fp, [ip]
 8006d78:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006d7c:	fb09 220b 	mla	r2, r9, fp, r2
 8006d80:	4492      	add	sl, r2
 8006d82:	b289      	uxth	r1, r1
 8006d84:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006d88:	f84e 1b04 	str.w	r1, [lr], #4
 8006d8c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006d90:	f8be 1000 	ldrh.w	r1, [lr]
 8006d94:	0c12      	lsrs	r2, r2, #16
 8006d96:	fb09 1102 	mla	r1, r9, r2, r1
 8006d9a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006d9e:	4567      	cmp	r7, ip
 8006da0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006da4:	d8e6      	bhi.n	8006d74 <__multiply+0x10c>
 8006da6:	9a01      	ldr	r2, [sp, #4]
 8006da8:	50a9      	str	r1, [r5, r2]
 8006daa:	3504      	adds	r5, #4
 8006dac:	e79a      	b.n	8006ce4 <__multiply+0x7c>
 8006dae:	3e01      	subs	r6, #1
 8006db0:	e79c      	b.n	8006cec <__multiply+0x84>
 8006db2:	bf00      	nop
 8006db4:	08007af3 	.word	0x08007af3
 8006db8:	08007b64 	.word	0x08007b64

08006dbc <__pow5mult>:
 8006dbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006dc0:	4615      	mov	r5, r2
 8006dc2:	f012 0203 	ands.w	r2, r2, #3
 8006dc6:	4606      	mov	r6, r0
 8006dc8:	460f      	mov	r7, r1
 8006dca:	d007      	beq.n	8006ddc <__pow5mult+0x20>
 8006dcc:	4c25      	ldr	r4, [pc, #148]	; (8006e64 <__pow5mult+0xa8>)
 8006dce:	3a01      	subs	r2, #1
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006dd6:	f7ff fe9b 	bl	8006b10 <__multadd>
 8006dda:	4607      	mov	r7, r0
 8006ddc:	10ad      	asrs	r5, r5, #2
 8006dde:	d03d      	beq.n	8006e5c <__pow5mult+0xa0>
 8006de0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006de2:	b97c      	cbnz	r4, 8006e04 <__pow5mult+0x48>
 8006de4:	2010      	movs	r0, #16
 8006de6:	f7ff fe29 	bl	8006a3c <malloc>
 8006dea:	4602      	mov	r2, r0
 8006dec:	6270      	str	r0, [r6, #36]	; 0x24
 8006dee:	b928      	cbnz	r0, 8006dfc <__pow5mult+0x40>
 8006df0:	4b1d      	ldr	r3, [pc, #116]	; (8006e68 <__pow5mult+0xac>)
 8006df2:	481e      	ldr	r0, [pc, #120]	; (8006e6c <__pow5mult+0xb0>)
 8006df4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006df8:	f000 fc62 	bl	80076c0 <__assert_func>
 8006dfc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006e00:	6004      	str	r4, [r0, #0]
 8006e02:	60c4      	str	r4, [r0, #12]
 8006e04:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006e08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006e0c:	b94c      	cbnz	r4, 8006e22 <__pow5mult+0x66>
 8006e0e:	f240 2171 	movw	r1, #625	; 0x271
 8006e12:	4630      	mov	r0, r6
 8006e14:	f7ff ff12 	bl	8006c3c <__i2b>
 8006e18:	2300      	movs	r3, #0
 8006e1a:	f8c8 0008 	str.w	r0, [r8, #8]
 8006e1e:	4604      	mov	r4, r0
 8006e20:	6003      	str	r3, [r0, #0]
 8006e22:	f04f 0900 	mov.w	r9, #0
 8006e26:	07eb      	lsls	r3, r5, #31
 8006e28:	d50a      	bpl.n	8006e40 <__pow5mult+0x84>
 8006e2a:	4639      	mov	r1, r7
 8006e2c:	4622      	mov	r2, r4
 8006e2e:	4630      	mov	r0, r6
 8006e30:	f7ff ff1a 	bl	8006c68 <__multiply>
 8006e34:	4639      	mov	r1, r7
 8006e36:	4680      	mov	r8, r0
 8006e38:	4630      	mov	r0, r6
 8006e3a:	f7ff fe47 	bl	8006acc <_Bfree>
 8006e3e:	4647      	mov	r7, r8
 8006e40:	106d      	asrs	r5, r5, #1
 8006e42:	d00b      	beq.n	8006e5c <__pow5mult+0xa0>
 8006e44:	6820      	ldr	r0, [r4, #0]
 8006e46:	b938      	cbnz	r0, 8006e58 <__pow5mult+0x9c>
 8006e48:	4622      	mov	r2, r4
 8006e4a:	4621      	mov	r1, r4
 8006e4c:	4630      	mov	r0, r6
 8006e4e:	f7ff ff0b 	bl	8006c68 <__multiply>
 8006e52:	6020      	str	r0, [r4, #0]
 8006e54:	f8c0 9000 	str.w	r9, [r0]
 8006e58:	4604      	mov	r4, r0
 8006e5a:	e7e4      	b.n	8006e26 <__pow5mult+0x6a>
 8006e5c:	4638      	mov	r0, r7
 8006e5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e62:	bf00      	nop
 8006e64:	08007cb0 	.word	0x08007cb0
 8006e68:	08007a81 	.word	0x08007a81
 8006e6c:	08007b64 	.word	0x08007b64

08006e70 <__lshift>:
 8006e70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e74:	460c      	mov	r4, r1
 8006e76:	6849      	ldr	r1, [r1, #4]
 8006e78:	6923      	ldr	r3, [r4, #16]
 8006e7a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006e7e:	68a3      	ldr	r3, [r4, #8]
 8006e80:	4607      	mov	r7, r0
 8006e82:	4691      	mov	r9, r2
 8006e84:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006e88:	f108 0601 	add.w	r6, r8, #1
 8006e8c:	42b3      	cmp	r3, r6
 8006e8e:	db0b      	blt.n	8006ea8 <__lshift+0x38>
 8006e90:	4638      	mov	r0, r7
 8006e92:	f7ff fddb 	bl	8006a4c <_Balloc>
 8006e96:	4605      	mov	r5, r0
 8006e98:	b948      	cbnz	r0, 8006eae <__lshift+0x3e>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	4b2a      	ldr	r3, [pc, #168]	; (8006f48 <__lshift+0xd8>)
 8006e9e:	482b      	ldr	r0, [pc, #172]	; (8006f4c <__lshift+0xdc>)
 8006ea0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006ea4:	f000 fc0c 	bl	80076c0 <__assert_func>
 8006ea8:	3101      	adds	r1, #1
 8006eaa:	005b      	lsls	r3, r3, #1
 8006eac:	e7ee      	b.n	8006e8c <__lshift+0x1c>
 8006eae:	2300      	movs	r3, #0
 8006eb0:	f100 0114 	add.w	r1, r0, #20
 8006eb4:	f100 0210 	add.w	r2, r0, #16
 8006eb8:	4618      	mov	r0, r3
 8006eba:	4553      	cmp	r3, sl
 8006ebc:	db37      	blt.n	8006f2e <__lshift+0xbe>
 8006ebe:	6920      	ldr	r0, [r4, #16]
 8006ec0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006ec4:	f104 0314 	add.w	r3, r4, #20
 8006ec8:	f019 091f 	ands.w	r9, r9, #31
 8006ecc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006ed0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006ed4:	d02f      	beq.n	8006f36 <__lshift+0xc6>
 8006ed6:	f1c9 0e20 	rsb	lr, r9, #32
 8006eda:	468a      	mov	sl, r1
 8006edc:	f04f 0c00 	mov.w	ip, #0
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	fa02 f209 	lsl.w	r2, r2, r9
 8006ee6:	ea42 020c 	orr.w	r2, r2, ip
 8006eea:	f84a 2b04 	str.w	r2, [sl], #4
 8006eee:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ef2:	4298      	cmp	r0, r3
 8006ef4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006ef8:	d8f2      	bhi.n	8006ee0 <__lshift+0x70>
 8006efa:	1b03      	subs	r3, r0, r4
 8006efc:	3b15      	subs	r3, #21
 8006efe:	f023 0303 	bic.w	r3, r3, #3
 8006f02:	3304      	adds	r3, #4
 8006f04:	f104 0215 	add.w	r2, r4, #21
 8006f08:	4290      	cmp	r0, r2
 8006f0a:	bf38      	it	cc
 8006f0c:	2304      	movcc	r3, #4
 8006f0e:	f841 c003 	str.w	ip, [r1, r3]
 8006f12:	f1bc 0f00 	cmp.w	ip, #0
 8006f16:	d001      	beq.n	8006f1c <__lshift+0xac>
 8006f18:	f108 0602 	add.w	r6, r8, #2
 8006f1c:	3e01      	subs	r6, #1
 8006f1e:	4638      	mov	r0, r7
 8006f20:	612e      	str	r6, [r5, #16]
 8006f22:	4621      	mov	r1, r4
 8006f24:	f7ff fdd2 	bl	8006acc <_Bfree>
 8006f28:	4628      	mov	r0, r5
 8006f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f2e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006f32:	3301      	adds	r3, #1
 8006f34:	e7c1      	b.n	8006eba <__lshift+0x4a>
 8006f36:	3904      	subs	r1, #4
 8006f38:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f3c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006f40:	4298      	cmp	r0, r3
 8006f42:	d8f9      	bhi.n	8006f38 <__lshift+0xc8>
 8006f44:	e7ea      	b.n	8006f1c <__lshift+0xac>
 8006f46:	bf00      	nop
 8006f48:	08007af3 	.word	0x08007af3
 8006f4c:	08007b64 	.word	0x08007b64

08006f50 <__mcmp>:
 8006f50:	b530      	push	{r4, r5, lr}
 8006f52:	6902      	ldr	r2, [r0, #16]
 8006f54:	690c      	ldr	r4, [r1, #16]
 8006f56:	1b12      	subs	r2, r2, r4
 8006f58:	d10e      	bne.n	8006f78 <__mcmp+0x28>
 8006f5a:	f100 0314 	add.w	r3, r0, #20
 8006f5e:	3114      	adds	r1, #20
 8006f60:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006f64:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006f68:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006f6c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006f70:	42a5      	cmp	r5, r4
 8006f72:	d003      	beq.n	8006f7c <__mcmp+0x2c>
 8006f74:	d305      	bcc.n	8006f82 <__mcmp+0x32>
 8006f76:	2201      	movs	r2, #1
 8006f78:	4610      	mov	r0, r2
 8006f7a:	bd30      	pop	{r4, r5, pc}
 8006f7c:	4283      	cmp	r3, r0
 8006f7e:	d3f3      	bcc.n	8006f68 <__mcmp+0x18>
 8006f80:	e7fa      	b.n	8006f78 <__mcmp+0x28>
 8006f82:	f04f 32ff 	mov.w	r2, #4294967295
 8006f86:	e7f7      	b.n	8006f78 <__mcmp+0x28>

08006f88 <__mdiff>:
 8006f88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f8c:	460c      	mov	r4, r1
 8006f8e:	4606      	mov	r6, r0
 8006f90:	4611      	mov	r1, r2
 8006f92:	4620      	mov	r0, r4
 8006f94:	4690      	mov	r8, r2
 8006f96:	f7ff ffdb 	bl	8006f50 <__mcmp>
 8006f9a:	1e05      	subs	r5, r0, #0
 8006f9c:	d110      	bne.n	8006fc0 <__mdiff+0x38>
 8006f9e:	4629      	mov	r1, r5
 8006fa0:	4630      	mov	r0, r6
 8006fa2:	f7ff fd53 	bl	8006a4c <_Balloc>
 8006fa6:	b930      	cbnz	r0, 8006fb6 <__mdiff+0x2e>
 8006fa8:	4b3a      	ldr	r3, [pc, #232]	; (8007094 <__mdiff+0x10c>)
 8006faa:	4602      	mov	r2, r0
 8006fac:	f240 2132 	movw	r1, #562	; 0x232
 8006fb0:	4839      	ldr	r0, [pc, #228]	; (8007098 <__mdiff+0x110>)
 8006fb2:	f000 fb85 	bl	80076c0 <__assert_func>
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006fbc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fc0:	bfa4      	itt	ge
 8006fc2:	4643      	movge	r3, r8
 8006fc4:	46a0      	movge	r8, r4
 8006fc6:	4630      	mov	r0, r6
 8006fc8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006fcc:	bfa6      	itte	ge
 8006fce:	461c      	movge	r4, r3
 8006fd0:	2500      	movge	r5, #0
 8006fd2:	2501      	movlt	r5, #1
 8006fd4:	f7ff fd3a 	bl	8006a4c <_Balloc>
 8006fd8:	b920      	cbnz	r0, 8006fe4 <__mdiff+0x5c>
 8006fda:	4b2e      	ldr	r3, [pc, #184]	; (8007094 <__mdiff+0x10c>)
 8006fdc:	4602      	mov	r2, r0
 8006fde:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006fe2:	e7e5      	b.n	8006fb0 <__mdiff+0x28>
 8006fe4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006fe8:	6926      	ldr	r6, [r4, #16]
 8006fea:	60c5      	str	r5, [r0, #12]
 8006fec:	f104 0914 	add.w	r9, r4, #20
 8006ff0:	f108 0514 	add.w	r5, r8, #20
 8006ff4:	f100 0e14 	add.w	lr, r0, #20
 8006ff8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006ffc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007000:	f108 0210 	add.w	r2, r8, #16
 8007004:	46f2      	mov	sl, lr
 8007006:	2100      	movs	r1, #0
 8007008:	f859 3b04 	ldr.w	r3, [r9], #4
 800700c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007010:	fa1f f883 	uxth.w	r8, r3
 8007014:	fa11 f18b 	uxtah	r1, r1, fp
 8007018:	0c1b      	lsrs	r3, r3, #16
 800701a:	eba1 0808 	sub.w	r8, r1, r8
 800701e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007022:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007026:	fa1f f888 	uxth.w	r8, r8
 800702a:	1419      	asrs	r1, r3, #16
 800702c:	454e      	cmp	r6, r9
 800702e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007032:	f84a 3b04 	str.w	r3, [sl], #4
 8007036:	d8e7      	bhi.n	8007008 <__mdiff+0x80>
 8007038:	1b33      	subs	r3, r6, r4
 800703a:	3b15      	subs	r3, #21
 800703c:	f023 0303 	bic.w	r3, r3, #3
 8007040:	3304      	adds	r3, #4
 8007042:	3415      	adds	r4, #21
 8007044:	42a6      	cmp	r6, r4
 8007046:	bf38      	it	cc
 8007048:	2304      	movcc	r3, #4
 800704a:	441d      	add	r5, r3
 800704c:	4473      	add	r3, lr
 800704e:	469e      	mov	lr, r3
 8007050:	462e      	mov	r6, r5
 8007052:	4566      	cmp	r6, ip
 8007054:	d30e      	bcc.n	8007074 <__mdiff+0xec>
 8007056:	f10c 0203 	add.w	r2, ip, #3
 800705a:	1b52      	subs	r2, r2, r5
 800705c:	f022 0203 	bic.w	r2, r2, #3
 8007060:	3d03      	subs	r5, #3
 8007062:	45ac      	cmp	ip, r5
 8007064:	bf38      	it	cc
 8007066:	2200      	movcc	r2, #0
 8007068:	441a      	add	r2, r3
 800706a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800706e:	b17b      	cbz	r3, 8007090 <__mdiff+0x108>
 8007070:	6107      	str	r7, [r0, #16]
 8007072:	e7a3      	b.n	8006fbc <__mdiff+0x34>
 8007074:	f856 8b04 	ldr.w	r8, [r6], #4
 8007078:	fa11 f288 	uxtah	r2, r1, r8
 800707c:	1414      	asrs	r4, r2, #16
 800707e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007082:	b292      	uxth	r2, r2
 8007084:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007088:	f84e 2b04 	str.w	r2, [lr], #4
 800708c:	1421      	asrs	r1, r4, #16
 800708e:	e7e0      	b.n	8007052 <__mdiff+0xca>
 8007090:	3f01      	subs	r7, #1
 8007092:	e7ea      	b.n	800706a <__mdiff+0xe2>
 8007094:	08007af3 	.word	0x08007af3
 8007098:	08007b64 	.word	0x08007b64

0800709c <__d2b>:
 800709c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80070a0:	4689      	mov	r9, r1
 80070a2:	2101      	movs	r1, #1
 80070a4:	ec57 6b10 	vmov	r6, r7, d0
 80070a8:	4690      	mov	r8, r2
 80070aa:	f7ff fccf 	bl	8006a4c <_Balloc>
 80070ae:	4604      	mov	r4, r0
 80070b0:	b930      	cbnz	r0, 80070c0 <__d2b+0x24>
 80070b2:	4602      	mov	r2, r0
 80070b4:	4b25      	ldr	r3, [pc, #148]	; (800714c <__d2b+0xb0>)
 80070b6:	4826      	ldr	r0, [pc, #152]	; (8007150 <__d2b+0xb4>)
 80070b8:	f240 310a 	movw	r1, #778	; 0x30a
 80070bc:	f000 fb00 	bl	80076c0 <__assert_func>
 80070c0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80070c4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80070c8:	bb35      	cbnz	r5, 8007118 <__d2b+0x7c>
 80070ca:	2e00      	cmp	r6, #0
 80070cc:	9301      	str	r3, [sp, #4]
 80070ce:	d028      	beq.n	8007122 <__d2b+0x86>
 80070d0:	4668      	mov	r0, sp
 80070d2:	9600      	str	r6, [sp, #0]
 80070d4:	f7ff fd82 	bl	8006bdc <__lo0bits>
 80070d8:	9900      	ldr	r1, [sp, #0]
 80070da:	b300      	cbz	r0, 800711e <__d2b+0x82>
 80070dc:	9a01      	ldr	r2, [sp, #4]
 80070de:	f1c0 0320 	rsb	r3, r0, #32
 80070e2:	fa02 f303 	lsl.w	r3, r2, r3
 80070e6:	430b      	orrs	r3, r1
 80070e8:	40c2      	lsrs	r2, r0
 80070ea:	6163      	str	r3, [r4, #20]
 80070ec:	9201      	str	r2, [sp, #4]
 80070ee:	9b01      	ldr	r3, [sp, #4]
 80070f0:	61a3      	str	r3, [r4, #24]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	bf14      	ite	ne
 80070f6:	2202      	movne	r2, #2
 80070f8:	2201      	moveq	r2, #1
 80070fa:	6122      	str	r2, [r4, #16]
 80070fc:	b1d5      	cbz	r5, 8007134 <__d2b+0x98>
 80070fe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007102:	4405      	add	r5, r0
 8007104:	f8c9 5000 	str.w	r5, [r9]
 8007108:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800710c:	f8c8 0000 	str.w	r0, [r8]
 8007110:	4620      	mov	r0, r4
 8007112:	b003      	add	sp, #12
 8007114:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007118:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800711c:	e7d5      	b.n	80070ca <__d2b+0x2e>
 800711e:	6161      	str	r1, [r4, #20]
 8007120:	e7e5      	b.n	80070ee <__d2b+0x52>
 8007122:	a801      	add	r0, sp, #4
 8007124:	f7ff fd5a 	bl	8006bdc <__lo0bits>
 8007128:	9b01      	ldr	r3, [sp, #4]
 800712a:	6163      	str	r3, [r4, #20]
 800712c:	2201      	movs	r2, #1
 800712e:	6122      	str	r2, [r4, #16]
 8007130:	3020      	adds	r0, #32
 8007132:	e7e3      	b.n	80070fc <__d2b+0x60>
 8007134:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007138:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800713c:	f8c9 0000 	str.w	r0, [r9]
 8007140:	6918      	ldr	r0, [r3, #16]
 8007142:	f7ff fd2b 	bl	8006b9c <__hi0bits>
 8007146:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800714a:	e7df      	b.n	800710c <__d2b+0x70>
 800714c:	08007af3 	.word	0x08007af3
 8007150:	08007b64 	.word	0x08007b64

08007154 <_calloc_r>:
 8007154:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007156:	fba1 2402 	umull	r2, r4, r1, r2
 800715a:	b94c      	cbnz	r4, 8007170 <_calloc_r+0x1c>
 800715c:	4611      	mov	r1, r2
 800715e:	9201      	str	r2, [sp, #4]
 8007160:	f000 f87a 	bl	8007258 <_malloc_r>
 8007164:	9a01      	ldr	r2, [sp, #4]
 8007166:	4605      	mov	r5, r0
 8007168:	b930      	cbnz	r0, 8007178 <_calloc_r+0x24>
 800716a:	4628      	mov	r0, r5
 800716c:	b003      	add	sp, #12
 800716e:	bd30      	pop	{r4, r5, pc}
 8007170:	220c      	movs	r2, #12
 8007172:	6002      	str	r2, [r0, #0]
 8007174:	2500      	movs	r5, #0
 8007176:	e7f8      	b.n	800716a <_calloc_r+0x16>
 8007178:	4621      	mov	r1, r4
 800717a:	f7fd fdff 	bl	8004d7c <memset>
 800717e:	e7f4      	b.n	800716a <_calloc_r+0x16>

08007180 <_free_r>:
 8007180:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007182:	2900      	cmp	r1, #0
 8007184:	d044      	beq.n	8007210 <_free_r+0x90>
 8007186:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800718a:	9001      	str	r0, [sp, #4]
 800718c:	2b00      	cmp	r3, #0
 800718e:	f1a1 0404 	sub.w	r4, r1, #4
 8007192:	bfb8      	it	lt
 8007194:	18e4      	addlt	r4, r4, r3
 8007196:	f000 fb19 	bl	80077cc <__malloc_lock>
 800719a:	4a1e      	ldr	r2, [pc, #120]	; (8007214 <_free_r+0x94>)
 800719c:	9801      	ldr	r0, [sp, #4]
 800719e:	6813      	ldr	r3, [r2, #0]
 80071a0:	b933      	cbnz	r3, 80071b0 <_free_r+0x30>
 80071a2:	6063      	str	r3, [r4, #4]
 80071a4:	6014      	str	r4, [r2, #0]
 80071a6:	b003      	add	sp, #12
 80071a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80071ac:	f000 bb14 	b.w	80077d8 <__malloc_unlock>
 80071b0:	42a3      	cmp	r3, r4
 80071b2:	d908      	bls.n	80071c6 <_free_r+0x46>
 80071b4:	6825      	ldr	r5, [r4, #0]
 80071b6:	1961      	adds	r1, r4, r5
 80071b8:	428b      	cmp	r3, r1
 80071ba:	bf01      	itttt	eq
 80071bc:	6819      	ldreq	r1, [r3, #0]
 80071be:	685b      	ldreq	r3, [r3, #4]
 80071c0:	1949      	addeq	r1, r1, r5
 80071c2:	6021      	streq	r1, [r4, #0]
 80071c4:	e7ed      	b.n	80071a2 <_free_r+0x22>
 80071c6:	461a      	mov	r2, r3
 80071c8:	685b      	ldr	r3, [r3, #4]
 80071ca:	b10b      	cbz	r3, 80071d0 <_free_r+0x50>
 80071cc:	42a3      	cmp	r3, r4
 80071ce:	d9fa      	bls.n	80071c6 <_free_r+0x46>
 80071d0:	6811      	ldr	r1, [r2, #0]
 80071d2:	1855      	adds	r5, r2, r1
 80071d4:	42a5      	cmp	r5, r4
 80071d6:	d10b      	bne.n	80071f0 <_free_r+0x70>
 80071d8:	6824      	ldr	r4, [r4, #0]
 80071da:	4421      	add	r1, r4
 80071dc:	1854      	adds	r4, r2, r1
 80071de:	42a3      	cmp	r3, r4
 80071e0:	6011      	str	r1, [r2, #0]
 80071e2:	d1e0      	bne.n	80071a6 <_free_r+0x26>
 80071e4:	681c      	ldr	r4, [r3, #0]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	6053      	str	r3, [r2, #4]
 80071ea:	4421      	add	r1, r4
 80071ec:	6011      	str	r1, [r2, #0]
 80071ee:	e7da      	b.n	80071a6 <_free_r+0x26>
 80071f0:	d902      	bls.n	80071f8 <_free_r+0x78>
 80071f2:	230c      	movs	r3, #12
 80071f4:	6003      	str	r3, [r0, #0]
 80071f6:	e7d6      	b.n	80071a6 <_free_r+0x26>
 80071f8:	6825      	ldr	r5, [r4, #0]
 80071fa:	1961      	adds	r1, r4, r5
 80071fc:	428b      	cmp	r3, r1
 80071fe:	bf04      	itt	eq
 8007200:	6819      	ldreq	r1, [r3, #0]
 8007202:	685b      	ldreq	r3, [r3, #4]
 8007204:	6063      	str	r3, [r4, #4]
 8007206:	bf04      	itt	eq
 8007208:	1949      	addeq	r1, r1, r5
 800720a:	6021      	streq	r1, [r4, #0]
 800720c:	6054      	str	r4, [r2, #4]
 800720e:	e7ca      	b.n	80071a6 <_free_r+0x26>
 8007210:	b003      	add	sp, #12
 8007212:	bd30      	pop	{r4, r5, pc}
 8007214:	200003d4 	.word	0x200003d4

08007218 <sbrk_aligned>:
 8007218:	b570      	push	{r4, r5, r6, lr}
 800721a:	4e0e      	ldr	r6, [pc, #56]	; (8007254 <sbrk_aligned+0x3c>)
 800721c:	460c      	mov	r4, r1
 800721e:	6831      	ldr	r1, [r6, #0]
 8007220:	4605      	mov	r5, r0
 8007222:	b911      	cbnz	r1, 800722a <sbrk_aligned+0x12>
 8007224:	f000 f9e6 	bl	80075f4 <_sbrk_r>
 8007228:	6030      	str	r0, [r6, #0]
 800722a:	4621      	mov	r1, r4
 800722c:	4628      	mov	r0, r5
 800722e:	f000 f9e1 	bl	80075f4 <_sbrk_r>
 8007232:	1c43      	adds	r3, r0, #1
 8007234:	d00a      	beq.n	800724c <sbrk_aligned+0x34>
 8007236:	1cc4      	adds	r4, r0, #3
 8007238:	f024 0403 	bic.w	r4, r4, #3
 800723c:	42a0      	cmp	r0, r4
 800723e:	d007      	beq.n	8007250 <sbrk_aligned+0x38>
 8007240:	1a21      	subs	r1, r4, r0
 8007242:	4628      	mov	r0, r5
 8007244:	f000 f9d6 	bl	80075f4 <_sbrk_r>
 8007248:	3001      	adds	r0, #1
 800724a:	d101      	bne.n	8007250 <sbrk_aligned+0x38>
 800724c:	f04f 34ff 	mov.w	r4, #4294967295
 8007250:	4620      	mov	r0, r4
 8007252:	bd70      	pop	{r4, r5, r6, pc}
 8007254:	200003d8 	.word	0x200003d8

08007258 <_malloc_r>:
 8007258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800725c:	1ccd      	adds	r5, r1, #3
 800725e:	f025 0503 	bic.w	r5, r5, #3
 8007262:	3508      	adds	r5, #8
 8007264:	2d0c      	cmp	r5, #12
 8007266:	bf38      	it	cc
 8007268:	250c      	movcc	r5, #12
 800726a:	2d00      	cmp	r5, #0
 800726c:	4607      	mov	r7, r0
 800726e:	db01      	blt.n	8007274 <_malloc_r+0x1c>
 8007270:	42a9      	cmp	r1, r5
 8007272:	d905      	bls.n	8007280 <_malloc_r+0x28>
 8007274:	230c      	movs	r3, #12
 8007276:	603b      	str	r3, [r7, #0]
 8007278:	2600      	movs	r6, #0
 800727a:	4630      	mov	r0, r6
 800727c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007280:	4e2e      	ldr	r6, [pc, #184]	; (800733c <_malloc_r+0xe4>)
 8007282:	f000 faa3 	bl	80077cc <__malloc_lock>
 8007286:	6833      	ldr	r3, [r6, #0]
 8007288:	461c      	mov	r4, r3
 800728a:	bb34      	cbnz	r4, 80072da <_malloc_r+0x82>
 800728c:	4629      	mov	r1, r5
 800728e:	4638      	mov	r0, r7
 8007290:	f7ff ffc2 	bl	8007218 <sbrk_aligned>
 8007294:	1c43      	adds	r3, r0, #1
 8007296:	4604      	mov	r4, r0
 8007298:	d14d      	bne.n	8007336 <_malloc_r+0xde>
 800729a:	6834      	ldr	r4, [r6, #0]
 800729c:	4626      	mov	r6, r4
 800729e:	2e00      	cmp	r6, #0
 80072a0:	d140      	bne.n	8007324 <_malloc_r+0xcc>
 80072a2:	6823      	ldr	r3, [r4, #0]
 80072a4:	4631      	mov	r1, r6
 80072a6:	4638      	mov	r0, r7
 80072a8:	eb04 0803 	add.w	r8, r4, r3
 80072ac:	f000 f9a2 	bl	80075f4 <_sbrk_r>
 80072b0:	4580      	cmp	r8, r0
 80072b2:	d13a      	bne.n	800732a <_malloc_r+0xd2>
 80072b4:	6821      	ldr	r1, [r4, #0]
 80072b6:	3503      	adds	r5, #3
 80072b8:	1a6d      	subs	r5, r5, r1
 80072ba:	f025 0503 	bic.w	r5, r5, #3
 80072be:	3508      	adds	r5, #8
 80072c0:	2d0c      	cmp	r5, #12
 80072c2:	bf38      	it	cc
 80072c4:	250c      	movcc	r5, #12
 80072c6:	4629      	mov	r1, r5
 80072c8:	4638      	mov	r0, r7
 80072ca:	f7ff ffa5 	bl	8007218 <sbrk_aligned>
 80072ce:	3001      	adds	r0, #1
 80072d0:	d02b      	beq.n	800732a <_malloc_r+0xd2>
 80072d2:	6823      	ldr	r3, [r4, #0]
 80072d4:	442b      	add	r3, r5
 80072d6:	6023      	str	r3, [r4, #0]
 80072d8:	e00e      	b.n	80072f8 <_malloc_r+0xa0>
 80072da:	6822      	ldr	r2, [r4, #0]
 80072dc:	1b52      	subs	r2, r2, r5
 80072de:	d41e      	bmi.n	800731e <_malloc_r+0xc6>
 80072e0:	2a0b      	cmp	r2, #11
 80072e2:	d916      	bls.n	8007312 <_malloc_r+0xba>
 80072e4:	1961      	adds	r1, r4, r5
 80072e6:	42a3      	cmp	r3, r4
 80072e8:	6025      	str	r5, [r4, #0]
 80072ea:	bf18      	it	ne
 80072ec:	6059      	strne	r1, [r3, #4]
 80072ee:	6863      	ldr	r3, [r4, #4]
 80072f0:	bf08      	it	eq
 80072f2:	6031      	streq	r1, [r6, #0]
 80072f4:	5162      	str	r2, [r4, r5]
 80072f6:	604b      	str	r3, [r1, #4]
 80072f8:	4638      	mov	r0, r7
 80072fa:	f104 060b 	add.w	r6, r4, #11
 80072fe:	f000 fa6b 	bl	80077d8 <__malloc_unlock>
 8007302:	f026 0607 	bic.w	r6, r6, #7
 8007306:	1d23      	adds	r3, r4, #4
 8007308:	1af2      	subs	r2, r6, r3
 800730a:	d0b6      	beq.n	800727a <_malloc_r+0x22>
 800730c:	1b9b      	subs	r3, r3, r6
 800730e:	50a3      	str	r3, [r4, r2]
 8007310:	e7b3      	b.n	800727a <_malloc_r+0x22>
 8007312:	6862      	ldr	r2, [r4, #4]
 8007314:	42a3      	cmp	r3, r4
 8007316:	bf0c      	ite	eq
 8007318:	6032      	streq	r2, [r6, #0]
 800731a:	605a      	strne	r2, [r3, #4]
 800731c:	e7ec      	b.n	80072f8 <_malloc_r+0xa0>
 800731e:	4623      	mov	r3, r4
 8007320:	6864      	ldr	r4, [r4, #4]
 8007322:	e7b2      	b.n	800728a <_malloc_r+0x32>
 8007324:	4634      	mov	r4, r6
 8007326:	6876      	ldr	r6, [r6, #4]
 8007328:	e7b9      	b.n	800729e <_malloc_r+0x46>
 800732a:	230c      	movs	r3, #12
 800732c:	603b      	str	r3, [r7, #0]
 800732e:	4638      	mov	r0, r7
 8007330:	f000 fa52 	bl	80077d8 <__malloc_unlock>
 8007334:	e7a1      	b.n	800727a <_malloc_r+0x22>
 8007336:	6025      	str	r5, [r4, #0]
 8007338:	e7de      	b.n	80072f8 <_malloc_r+0xa0>
 800733a:	bf00      	nop
 800733c:	200003d4 	.word	0x200003d4

08007340 <__sfputc_r>:
 8007340:	6893      	ldr	r3, [r2, #8]
 8007342:	3b01      	subs	r3, #1
 8007344:	2b00      	cmp	r3, #0
 8007346:	b410      	push	{r4}
 8007348:	6093      	str	r3, [r2, #8]
 800734a:	da08      	bge.n	800735e <__sfputc_r+0x1e>
 800734c:	6994      	ldr	r4, [r2, #24]
 800734e:	42a3      	cmp	r3, r4
 8007350:	db01      	blt.n	8007356 <__sfputc_r+0x16>
 8007352:	290a      	cmp	r1, #10
 8007354:	d103      	bne.n	800735e <__sfputc_r+0x1e>
 8007356:	f85d 4b04 	ldr.w	r4, [sp], #4
 800735a:	f7fe ba0f 	b.w	800577c <__swbuf_r>
 800735e:	6813      	ldr	r3, [r2, #0]
 8007360:	1c58      	adds	r0, r3, #1
 8007362:	6010      	str	r0, [r2, #0]
 8007364:	7019      	strb	r1, [r3, #0]
 8007366:	4608      	mov	r0, r1
 8007368:	f85d 4b04 	ldr.w	r4, [sp], #4
 800736c:	4770      	bx	lr

0800736e <__sfputs_r>:
 800736e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007370:	4606      	mov	r6, r0
 8007372:	460f      	mov	r7, r1
 8007374:	4614      	mov	r4, r2
 8007376:	18d5      	adds	r5, r2, r3
 8007378:	42ac      	cmp	r4, r5
 800737a:	d101      	bne.n	8007380 <__sfputs_r+0x12>
 800737c:	2000      	movs	r0, #0
 800737e:	e007      	b.n	8007390 <__sfputs_r+0x22>
 8007380:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007384:	463a      	mov	r2, r7
 8007386:	4630      	mov	r0, r6
 8007388:	f7ff ffda 	bl	8007340 <__sfputc_r>
 800738c:	1c43      	adds	r3, r0, #1
 800738e:	d1f3      	bne.n	8007378 <__sfputs_r+0xa>
 8007390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007394 <_vfiprintf_r>:
 8007394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007398:	460d      	mov	r5, r1
 800739a:	b09d      	sub	sp, #116	; 0x74
 800739c:	4614      	mov	r4, r2
 800739e:	4698      	mov	r8, r3
 80073a0:	4606      	mov	r6, r0
 80073a2:	b118      	cbz	r0, 80073ac <_vfiprintf_r+0x18>
 80073a4:	6983      	ldr	r3, [r0, #24]
 80073a6:	b90b      	cbnz	r3, 80073ac <_vfiprintf_r+0x18>
 80073a8:	f7ff fa3e 	bl	8006828 <__sinit>
 80073ac:	4b89      	ldr	r3, [pc, #548]	; (80075d4 <_vfiprintf_r+0x240>)
 80073ae:	429d      	cmp	r5, r3
 80073b0:	d11b      	bne.n	80073ea <_vfiprintf_r+0x56>
 80073b2:	6875      	ldr	r5, [r6, #4]
 80073b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80073b6:	07d9      	lsls	r1, r3, #31
 80073b8:	d405      	bmi.n	80073c6 <_vfiprintf_r+0x32>
 80073ba:	89ab      	ldrh	r3, [r5, #12]
 80073bc:	059a      	lsls	r2, r3, #22
 80073be:	d402      	bmi.n	80073c6 <_vfiprintf_r+0x32>
 80073c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80073c2:	f7ff fad4 	bl	800696e <__retarget_lock_acquire_recursive>
 80073c6:	89ab      	ldrh	r3, [r5, #12]
 80073c8:	071b      	lsls	r3, r3, #28
 80073ca:	d501      	bpl.n	80073d0 <_vfiprintf_r+0x3c>
 80073cc:	692b      	ldr	r3, [r5, #16]
 80073ce:	b9eb      	cbnz	r3, 800740c <_vfiprintf_r+0x78>
 80073d0:	4629      	mov	r1, r5
 80073d2:	4630      	mov	r0, r6
 80073d4:	f7fe fa24 	bl	8005820 <__swsetup_r>
 80073d8:	b1c0      	cbz	r0, 800740c <_vfiprintf_r+0x78>
 80073da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80073dc:	07dc      	lsls	r4, r3, #31
 80073de:	d50e      	bpl.n	80073fe <_vfiprintf_r+0x6a>
 80073e0:	f04f 30ff 	mov.w	r0, #4294967295
 80073e4:	b01d      	add	sp, #116	; 0x74
 80073e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073ea:	4b7b      	ldr	r3, [pc, #492]	; (80075d8 <_vfiprintf_r+0x244>)
 80073ec:	429d      	cmp	r5, r3
 80073ee:	d101      	bne.n	80073f4 <_vfiprintf_r+0x60>
 80073f0:	68b5      	ldr	r5, [r6, #8]
 80073f2:	e7df      	b.n	80073b4 <_vfiprintf_r+0x20>
 80073f4:	4b79      	ldr	r3, [pc, #484]	; (80075dc <_vfiprintf_r+0x248>)
 80073f6:	429d      	cmp	r5, r3
 80073f8:	bf08      	it	eq
 80073fa:	68f5      	ldreq	r5, [r6, #12]
 80073fc:	e7da      	b.n	80073b4 <_vfiprintf_r+0x20>
 80073fe:	89ab      	ldrh	r3, [r5, #12]
 8007400:	0598      	lsls	r0, r3, #22
 8007402:	d4ed      	bmi.n	80073e0 <_vfiprintf_r+0x4c>
 8007404:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007406:	f7ff fab3 	bl	8006970 <__retarget_lock_release_recursive>
 800740a:	e7e9      	b.n	80073e0 <_vfiprintf_r+0x4c>
 800740c:	2300      	movs	r3, #0
 800740e:	9309      	str	r3, [sp, #36]	; 0x24
 8007410:	2320      	movs	r3, #32
 8007412:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007416:	f8cd 800c 	str.w	r8, [sp, #12]
 800741a:	2330      	movs	r3, #48	; 0x30
 800741c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80075e0 <_vfiprintf_r+0x24c>
 8007420:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007424:	f04f 0901 	mov.w	r9, #1
 8007428:	4623      	mov	r3, r4
 800742a:	469a      	mov	sl, r3
 800742c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007430:	b10a      	cbz	r2, 8007436 <_vfiprintf_r+0xa2>
 8007432:	2a25      	cmp	r2, #37	; 0x25
 8007434:	d1f9      	bne.n	800742a <_vfiprintf_r+0x96>
 8007436:	ebba 0b04 	subs.w	fp, sl, r4
 800743a:	d00b      	beq.n	8007454 <_vfiprintf_r+0xc0>
 800743c:	465b      	mov	r3, fp
 800743e:	4622      	mov	r2, r4
 8007440:	4629      	mov	r1, r5
 8007442:	4630      	mov	r0, r6
 8007444:	f7ff ff93 	bl	800736e <__sfputs_r>
 8007448:	3001      	adds	r0, #1
 800744a:	f000 80aa 	beq.w	80075a2 <_vfiprintf_r+0x20e>
 800744e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007450:	445a      	add	r2, fp
 8007452:	9209      	str	r2, [sp, #36]	; 0x24
 8007454:	f89a 3000 	ldrb.w	r3, [sl]
 8007458:	2b00      	cmp	r3, #0
 800745a:	f000 80a2 	beq.w	80075a2 <_vfiprintf_r+0x20e>
 800745e:	2300      	movs	r3, #0
 8007460:	f04f 32ff 	mov.w	r2, #4294967295
 8007464:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007468:	f10a 0a01 	add.w	sl, sl, #1
 800746c:	9304      	str	r3, [sp, #16]
 800746e:	9307      	str	r3, [sp, #28]
 8007470:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007474:	931a      	str	r3, [sp, #104]	; 0x68
 8007476:	4654      	mov	r4, sl
 8007478:	2205      	movs	r2, #5
 800747a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800747e:	4858      	ldr	r0, [pc, #352]	; (80075e0 <_vfiprintf_r+0x24c>)
 8007480:	f7f8 fed6 	bl	8000230 <memchr>
 8007484:	9a04      	ldr	r2, [sp, #16]
 8007486:	b9d8      	cbnz	r0, 80074c0 <_vfiprintf_r+0x12c>
 8007488:	06d1      	lsls	r1, r2, #27
 800748a:	bf44      	itt	mi
 800748c:	2320      	movmi	r3, #32
 800748e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007492:	0713      	lsls	r3, r2, #28
 8007494:	bf44      	itt	mi
 8007496:	232b      	movmi	r3, #43	; 0x2b
 8007498:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800749c:	f89a 3000 	ldrb.w	r3, [sl]
 80074a0:	2b2a      	cmp	r3, #42	; 0x2a
 80074a2:	d015      	beq.n	80074d0 <_vfiprintf_r+0x13c>
 80074a4:	9a07      	ldr	r2, [sp, #28]
 80074a6:	4654      	mov	r4, sl
 80074a8:	2000      	movs	r0, #0
 80074aa:	f04f 0c0a 	mov.w	ip, #10
 80074ae:	4621      	mov	r1, r4
 80074b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80074b4:	3b30      	subs	r3, #48	; 0x30
 80074b6:	2b09      	cmp	r3, #9
 80074b8:	d94e      	bls.n	8007558 <_vfiprintf_r+0x1c4>
 80074ba:	b1b0      	cbz	r0, 80074ea <_vfiprintf_r+0x156>
 80074bc:	9207      	str	r2, [sp, #28]
 80074be:	e014      	b.n	80074ea <_vfiprintf_r+0x156>
 80074c0:	eba0 0308 	sub.w	r3, r0, r8
 80074c4:	fa09 f303 	lsl.w	r3, r9, r3
 80074c8:	4313      	orrs	r3, r2
 80074ca:	9304      	str	r3, [sp, #16]
 80074cc:	46a2      	mov	sl, r4
 80074ce:	e7d2      	b.n	8007476 <_vfiprintf_r+0xe2>
 80074d0:	9b03      	ldr	r3, [sp, #12]
 80074d2:	1d19      	adds	r1, r3, #4
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	9103      	str	r1, [sp, #12]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	bfbb      	ittet	lt
 80074dc:	425b      	neglt	r3, r3
 80074de:	f042 0202 	orrlt.w	r2, r2, #2
 80074e2:	9307      	strge	r3, [sp, #28]
 80074e4:	9307      	strlt	r3, [sp, #28]
 80074e6:	bfb8      	it	lt
 80074e8:	9204      	strlt	r2, [sp, #16]
 80074ea:	7823      	ldrb	r3, [r4, #0]
 80074ec:	2b2e      	cmp	r3, #46	; 0x2e
 80074ee:	d10c      	bne.n	800750a <_vfiprintf_r+0x176>
 80074f0:	7863      	ldrb	r3, [r4, #1]
 80074f2:	2b2a      	cmp	r3, #42	; 0x2a
 80074f4:	d135      	bne.n	8007562 <_vfiprintf_r+0x1ce>
 80074f6:	9b03      	ldr	r3, [sp, #12]
 80074f8:	1d1a      	adds	r2, r3, #4
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	9203      	str	r2, [sp, #12]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	bfb8      	it	lt
 8007502:	f04f 33ff 	movlt.w	r3, #4294967295
 8007506:	3402      	adds	r4, #2
 8007508:	9305      	str	r3, [sp, #20]
 800750a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80075f0 <_vfiprintf_r+0x25c>
 800750e:	7821      	ldrb	r1, [r4, #0]
 8007510:	2203      	movs	r2, #3
 8007512:	4650      	mov	r0, sl
 8007514:	f7f8 fe8c 	bl	8000230 <memchr>
 8007518:	b140      	cbz	r0, 800752c <_vfiprintf_r+0x198>
 800751a:	2340      	movs	r3, #64	; 0x40
 800751c:	eba0 000a 	sub.w	r0, r0, sl
 8007520:	fa03 f000 	lsl.w	r0, r3, r0
 8007524:	9b04      	ldr	r3, [sp, #16]
 8007526:	4303      	orrs	r3, r0
 8007528:	3401      	adds	r4, #1
 800752a:	9304      	str	r3, [sp, #16]
 800752c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007530:	482c      	ldr	r0, [pc, #176]	; (80075e4 <_vfiprintf_r+0x250>)
 8007532:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007536:	2206      	movs	r2, #6
 8007538:	f7f8 fe7a 	bl	8000230 <memchr>
 800753c:	2800      	cmp	r0, #0
 800753e:	d03f      	beq.n	80075c0 <_vfiprintf_r+0x22c>
 8007540:	4b29      	ldr	r3, [pc, #164]	; (80075e8 <_vfiprintf_r+0x254>)
 8007542:	bb1b      	cbnz	r3, 800758c <_vfiprintf_r+0x1f8>
 8007544:	9b03      	ldr	r3, [sp, #12]
 8007546:	3307      	adds	r3, #7
 8007548:	f023 0307 	bic.w	r3, r3, #7
 800754c:	3308      	adds	r3, #8
 800754e:	9303      	str	r3, [sp, #12]
 8007550:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007552:	443b      	add	r3, r7
 8007554:	9309      	str	r3, [sp, #36]	; 0x24
 8007556:	e767      	b.n	8007428 <_vfiprintf_r+0x94>
 8007558:	fb0c 3202 	mla	r2, ip, r2, r3
 800755c:	460c      	mov	r4, r1
 800755e:	2001      	movs	r0, #1
 8007560:	e7a5      	b.n	80074ae <_vfiprintf_r+0x11a>
 8007562:	2300      	movs	r3, #0
 8007564:	3401      	adds	r4, #1
 8007566:	9305      	str	r3, [sp, #20]
 8007568:	4619      	mov	r1, r3
 800756a:	f04f 0c0a 	mov.w	ip, #10
 800756e:	4620      	mov	r0, r4
 8007570:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007574:	3a30      	subs	r2, #48	; 0x30
 8007576:	2a09      	cmp	r2, #9
 8007578:	d903      	bls.n	8007582 <_vfiprintf_r+0x1ee>
 800757a:	2b00      	cmp	r3, #0
 800757c:	d0c5      	beq.n	800750a <_vfiprintf_r+0x176>
 800757e:	9105      	str	r1, [sp, #20]
 8007580:	e7c3      	b.n	800750a <_vfiprintf_r+0x176>
 8007582:	fb0c 2101 	mla	r1, ip, r1, r2
 8007586:	4604      	mov	r4, r0
 8007588:	2301      	movs	r3, #1
 800758a:	e7f0      	b.n	800756e <_vfiprintf_r+0x1da>
 800758c:	ab03      	add	r3, sp, #12
 800758e:	9300      	str	r3, [sp, #0]
 8007590:	462a      	mov	r2, r5
 8007592:	4b16      	ldr	r3, [pc, #88]	; (80075ec <_vfiprintf_r+0x258>)
 8007594:	a904      	add	r1, sp, #16
 8007596:	4630      	mov	r0, r6
 8007598:	f7fd fc98 	bl	8004ecc <_printf_float>
 800759c:	4607      	mov	r7, r0
 800759e:	1c78      	adds	r0, r7, #1
 80075a0:	d1d6      	bne.n	8007550 <_vfiprintf_r+0x1bc>
 80075a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80075a4:	07d9      	lsls	r1, r3, #31
 80075a6:	d405      	bmi.n	80075b4 <_vfiprintf_r+0x220>
 80075a8:	89ab      	ldrh	r3, [r5, #12]
 80075aa:	059a      	lsls	r2, r3, #22
 80075ac:	d402      	bmi.n	80075b4 <_vfiprintf_r+0x220>
 80075ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80075b0:	f7ff f9de 	bl	8006970 <__retarget_lock_release_recursive>
 80075b4:	89ab      	ldrh	r3, [r5, #12]
 80075b6:	065b      	lsls	r3, r3, #25
 80075b8:	f53f af12 	bmi.w	80073e0 <_vfiprintf_r+0x4c>
 80075bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80075be:	e711      	b.n	80073e4 <_vfiprintf_r+0x50>
 80075c0:	ab03      	add	r3, sp, #12
 80075c2:	9300      	str	r3, [sp, #0]
 80075c4:	462a      	mov	r2, r5
 80075c6:	4b09      	ldr	r3, [pc, #36]	; (80075ec <_vfiprintf_r+0x258>)
 80075c8:	a904      	add	r1, sp, #16
 80075ca:	4630      	mov	r0, r6
 80075cc:	f7fd ff22 	bl	8005414 <_printf_i>
 80075d0:	e7e4      	b.n	800759c <_vfiprintf_r+0x208>
 80075d2:	bf00      	nop
 80075d4:	08007b24 	.word	0x08007b24
 80075d8:	08007b44 	.word	0x08007b44
 80075dc:	08007b04 	.word	0x08007b04
 80075e0:	08007cbc 	.word	0x08007cbc
 80075e4:	08007cc6 	.word	0x08007cc6
 80075e8:	08004ecd 	.word	0x08004ecd
 80075ec:	0800736f 	.word	0x0800736f
 80075f0:	08007cc2 	.word	0x08007cc2

080075f4 <_sbrk_r>:
 80075f4:	b538      	push	{r3, r4, r5, lr}
 80075f6:	4d06      	ldr	r5, [pc, #24]	; (8007610 <_sbrk_r+0x1c>)
 80075f8:	2300      	movs	r3, #0
 80075fa:	4604      	mov	r4, r0
 80075fc:	4608      	mov	r0, r1
 80075fe:	602b      	str	r3, [r5, #0]
 8007600:	f7fa f87c 	bl	80016fc <_sbrk>
 8007604:	1c43      	adds	r3, r0, #1
 8007606:	d102      	bne.n	800760e <_sbrk_r+0x1a>
 8007608:	682b      	ldr	r3, [r5, #0]
 800760a:	b103      	cbz	r3, 800760e <_sbrk_r+0x1a>
 800760c:	6023      	str	r3, [r4, #0]
 800760e:	bd38      	pop	{r3, r4, r5, pc}
 8007610:	200003dc 	.word	0x200003dc

08007614 <__sread>:
 8007614:	b510      	push	{r4, lr}
 8007616:	460c      	mov	r4, r1
 8007618:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800761c:	f000 f8e2 	bl	80077e4 <_read_r>
 8007620:	2800      	cmp	r0, #0
 8007622:	bfab      	itete	ge
 8007624:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007626:	89a3      	ldrhlt	r3, [r4, #12]
 8007628:	181b      	addge	r3, r3, r0
 800762a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800762e:	bfac      	ite	ge
 8007630:	6563      	strge	r3, [r4, #84]	; 0x54
 8007632:	81a3      	strhlt	r3, [r4, #12]
 8007634:	bd10      	pop	{r4, pc}

08007636 <__swrite>:
 8007636:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800763a:	461f      	mov	r7, r3
 800763c:	898b      	ldrh	r3, [r1, #12]
 800763e:	05db      	lsls	r3, r3, #23
 8007640:	4605      	mov	r5, r0
 8007642:	460c      	mov	r4, r1
 8007644:	4616      	mov	r6, r2
 8007646:	d505      	bpl.n	8007654 <__swrite+0x1e>
 8007648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800764c:	2302      	movs	r3, #2
 800764e:	2200      	movs	r2, #0
 8007650:	f000 f898 	bl	8007784 <_lseek_r>
 8007654:	89a3      	ldrh	r3, [r4, #12]
 8007656:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800765a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800765e:	81a3      	strh	r3, [r4, #12]
 8007660:	4632      	mov	r2, r6
 8007662:	463b      	mov	r3, r7
 8007664:	4628      	mov	r0, r5
 8007666:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800766a:	f000 b817 	b.w	800769c <_write_r>

0800766e <__sseek>:
 800766e:	b510      	push	{r4, lr}
 8007670:	460c      	mov	r4, r1
 8007672:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007676:	f000 f885 	bl	8007784 <_lseek_r>
 800767a:	1c43      	adds	r3, r0, #1
 800767c:	89a3      	ldrh	r3, [r4, #12]
 800767e:	bf15      	itete	ne
 8007680:	6560      	strne	r0, [r4, #84]	; 0x54
 8007682:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007686:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800768a:	81a3      	strheq	r3, [r4, #12]
 800768c:	bf18      	it	ne
 800768e:	81a3      	strhne	r3, [r4, #12]
 8007690:	bd10      	pop	{r4, pc}

08007692 <__sclose>:
 8007692:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007696:	f000 b831 	b.w	80076fc <_close_r>
	...

0800769c <_write_r>:
 800769c:	b538      	push	{r3, r4, r5, lr}
 800769e:	4d07      	ldr	r5, [pc, #28]	; (80076bc <_write_r+0x20>)
 80076a0:	4604      	mov	r4, r0
 80076a2:	4608      	mov	r0, r1
 80076a4:	4611      	mov	r1, r2
 80076a6:	2200      	movs	r2, #0
 80076a8:	602a      	str	r2, [r5, #0]
 80076aa:	461a      	mov	r2, r3
 80076ac:	f7f9 ffd6 	bl	800165c <_write>
 80076b0:	1c43      	adds	r3, r0, #1
 80076b2:	d102      	bne.n	80076ba <_write_r+0x1e>
 80076b4:	682b      	ldr	r3, [r5, #0]
 80076b6:	b103      	cbz	r3, 80076ba <_write_r+0x1e>
 80076b8:	6023      	str	r3, [r4, #0]
 80076ba:	bd38      	pop	{r3, r4, r5, pc}
 80076bc:	200003dc 	.word	0x200003dc

080076c0 <__assert_func>:
 80076c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80076c2:	4614      	mov	r4, r2
 80076c4:	461a      	mov	r2, r3
 80076c6:	4b09      	ldr	r3, [pc, #36]	; (80076ec <__assert_func+0x2c>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4605      	mov	r5, r0
 80076cc:	68d8      	ldr	r0, [r3, #12]
 80076ce:	b14c      	cbz	r4, 80076e4 <__assert_func+0x24>
 80076d0:	4b07      	ldr	r3, [pc, #28]	; (80076f0 <__assert_func+0x30>)
 80076d2:	9100      	str	r1, [sp, #0]
 80076d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80076d8:	4906      	ldr	r1, [pc, #24]	; (80076f4 <__assert_func+0x34>)
 80076da:	462b      	mov	r3, r5
 80076dc:	f000 f81e 	bl	800771c <fiprintf>
 80076e0:	f000 f89f 	bl	8007822 <abort>
 80076e4:	4b04      	ldr	r3, [pc, #16]	; (80076f8 <__assert_func+0x38>)
 80076e6:	461c      	mov	r4, r3
 80076e8:	e7f3      	b.n	80076d2 <__assert_func+0x12>
 80076ea:	bf00      	nop
 80076ec:	2000000c 	.word	0x2000000c
 80076f0:	08007ccd 	.word	0x08007ccd
 80076f4:	08007cda 	.word	0x08007cda
 80076f8:	08007d08 	.word	0x08007d08

080076fc <_close_r>:
 80076fc:	b538      	push	{r3, r4, r5, lr}
 80076fe:	4d06      	ldr	r5, [pc, #24]	; (8007718 <_close_r+0x1c>)
 8007700:	2300      	movs	r3, #0
 8007702:	4604      	mov	r4, r0
 8007704:	4608      	mov	r0, r1
 8007706:	602b      	str	r3, [r5, #0]
 8007708:	f7f9 ffc4 	bl	8001694 <_close>
 800770c:	1c43      	adds	r3, r0, #1
 800770e:	d102      	bne.n	8007716 <_close_r+0x1a>
 8007710:	682b      	ldr	r3, [r5, #0]
 8007712:	b103      	cbz	r3, 8007716 <_close_r+0x1a>
 8007714:	6023      	str	r3, [r4, #0]
 8007716:	bd38      	pop	{r3, r4, r5, pc}
 8007718:	200003dc 	.word	0x200003dc

0800771c <fiprintf>:
 800771c:	b40e      	push	{r1, r2, r3}
 800771e:	b503      	push	{r0, r1, lr}
 8007720:	4601      	mov	r1, r0
 8007722:	ab03      	add	r3, sp, #12
 8007724:	4805      	ldr	r0, [pc, #20]	; (800773c <fiprintf+0x20>)
 8007726:	f853 2b04 	ldr.w	r2, [r3], #4
 800772a:	6800      	ldr	r0, [r0, #0]
 800772c:	9301      	str	r3, [sp, #4]
 800772e:	f7ff fe31 	bl	8007394 <_vfiprintf_r>
 8007732:	b002      	add	sp, #8
 8007734:	f85d eb04 	ldr.w	lr, [sp], #4
 8007738:	b003      	add	sp, #12
 800773a:	4770      	bx	lr
 800773c:	2000000c 	.word	0x2000000c

08007740 <_fstat_r>:
 8007740:	b538      	push	{r3, r4, r5, lr}
 8007742:	4d07      	ldr	r5, [pc, #28]	; (8007760 <_fstat_r+0x20>)
 8007744:	2300      	movs	r3, #0
 8007746:	4604      	mov	r4, r0
 8007748:	4608      	mov	r0, r1
 800774a:	4611      	mov	r1, r2
 800774c:	602b      	str	r3, [r5, #0]
 800774e:	f7f9 ffad 	bl	80016ac <_fstat>
 8007752:	1c43      	adds	r3, r0, #1
 8007754:	d102      	bne.n	800775c <_fstat_r+0x1c>
 8007756:	682b      	ldr	r3, [r5, #0]
 8007758:	b103      	cbz	r3, 800775c <_fstat_r+0x1c>
 800775a:	6023      	str	r3, [r4, #0]
 800775c:	bd38      	pop	{r3, r4, r5, pc}
 800775e:	bf00      	nop
 8007760:	200003dc 	.word	0x200003dc

08007764 <_isatty_r>:
 8007764:	b538      	push	{r3, r4, r5, lr}
 8007766:	4d06      	ldr	r5, [pc, #24]	; (8007780 <_isatty_r+0x1c>)
 8007768:	2300      	movs	r3, #0
 800776a:	4604      	mov	r4, r0
 800776c:	4608      	mov	r0, r1
 800776e:	602b      	str	r3, [r5, #0]
 8007770:	f7f9 ffac 	bl	80016cc <_isatty>
 8007774:	1c43      	adds	r3, r0, #1
 8007776:	d102      	bne.n	800777e <_isatty_r+0x1a>
 8007778:	682b      	ldr	r3, [r5, #0]
 800777a:	b103      	cbz	r3, 800777e <_isatty_r+0x1a>
 800777c:	6023      	str	r3, [r4, #0]
 800777e:	bd38      	pop	{r3, r4, r5, pc}
 8007780:	200003dc 	.word	0x200003dc

08007784 <_lseek_r>:
 8007784:	b538      	push	{r3, r4, r5, lr}
 8007786:	4d07      	ldr	r5, [pc, #28]	; (80077a4 <_lseek_r+0x20>)
 8007788:	4604      	mov	r4, r0
 800778a:	4608      	mov	r0, r1
 800778c:	4611      	mov	r1, r2
 800778e:	2200      	movs	r2, #0
 8007790:	602a      	str	r2, [r5, #0]
 8007792:	461a      	mov	r2, r3
 8007794:	f7f9 ffa5 	bl	80016e2 <_lseek>
 8007798:	1c43      	adds	r3, r0, #1
 800779a:	d102      	bne.n	80077a2 <_lseek_r+0x1e>
 800779c:	682b      	ldr	r3, [r5, #0]
 800779e:	b103      	cbz	r3, 80077a2 <_lseek_r+0x1e>
 80077a0:	6023      	str	r3, [r4, #0]
 80077a2:	bd38      	pop	{r3, r4, r5, pc}
 80077a4:	200003dc 	.word	0x200003dc

080077a8 <__ascii_mbtowc>:
 80077a8:	b082      	sub	sp, #8
 80077aa:	b901      	cbnz	r1, 80077ae <__ascii_mbtowc+0x6>
 80077ac:	a901      	add	r1, sp, #4
 80077ae:	b142      	cbz	r2, 80077c2 <__ascii_mbtowc+0x1a>
 80077b0:	b14b      	cbz	r3, 80077c6 <__ascii_mbtowc+0x1e>
 80077b2:	7813      	ldrb	r3, [r2, #0]
 80077b4:	600b      	str	r3, [r1, #0]
 80077b6:	7812      	ldrb	r2, [r2, #0]
 80077b8:	1e10      	subs	r0, r2, #0
 80077ba:	bf18      	it	ne
 80077bc:	2001      	movne	r0, #1
 80077be:	b002      	add	sp, #8
 80077c0:	4770      	bx	lr
 80077c2:	4610      	mov	r0, r2
 80077c4:	e7fb      	b.n	80077be <__ascii_mbtowc+0x16>
 80077c6:	f06f 0001 	mvn.w	r0, #1
 80077ca:	e7f8      	b.n	80077be <__ascii_mbtowc+0x16>

080077cc <__malloc_lock>:
 80077cc:	4801      	ldr	r0, [pc, #4]	; (80077d4 <__malloc_lock+0x8>)
 80077ce:	f7ff b8ce 	b.w	800696e <__retarget_lock_acquire_recursive>
 80077d2:	bf00      	nop
 80077d4:	200003d0 	.word	0x200003d0

080077d8 <__malloc_unlock>:
 80077d8:	4801      	ldr	r0, [pc, #4]	; (80077e0 <__malloc_unlock+0x8>)
 80077da:	f7ff b8c9 	b.w	8006970 <__retarget_lock_release_recursive>
 80077de:	bf00      	nop
 80077e0:	200003d0 	.word	0x200003d0

080077e4 <_read_r>:
 80077e4:	b538      	push	{r3, r4, r5, lr}
 80077e6:	4d07      	ldr	r5, [pc, #28]	; (8007804 <_read_r+0x20>)
 80077e8:	4604      	mov	r4, r0
 80077ea:	4608      	mov	r0, r1
 80077ec:	4611      	mov	r1, r2
 80077ee:	2200      	movs	r2, #0
 80077f0:	602a      	str	r2, [r5, #0]
 80077f2:	461a      	mov	r2, r3
 80077f4:	f7f9 ff15 	bl	8001622 <_read>
 80077f8:	1c43      	adds	r3, r0, #1
 80077fa:	d102      	bne.n	8007802 <_read_r+0x1e>
 80077fc:	682b      	ldr	r3, [r5, #0]
 80077fe:	b103      	cbz	r3, 8007802 <_read_r+0x1e>
 8007800:	6023      	str	r3, [r4, #0]
 8007802:	bd38      	pop	{r3, r4, r5, pc}
 8007804:	200003dc 	.word	0x200003dc

08007808 <__ascii_wctomb>:
 8007808:	b149      	cbz	r1, 800781e <__ascii_wctomb+0x16>
 800780a:	2aff      	cmp	r2, #255	; 0xff
 800780c:	bf85      	ittet	hi
 800780e:	238a      	movhi	r3, #138	; 0x8a
 8007810:	6003      	strhi	r3, [r0, #0]
 8007812:	700a      	strbls	r2, [r1, #0]
 8007814:	f04f 30ff 	movhi.w	r0, #4294967295
 8007818:	bf98      	it	ls
 800781a:	2001      	movls	r0, #1
 800781c:	4770      	bx	lr
 800781e:	4608      	mov	r0, r1
 8007820:	4770      	bx	lr

08007822 <abort>:
 8007822:	b508      	push	{r3, lr}
 8007824:	2006      	movs	r0, #6
 8007826:	f000 f82b 	bl	8007880 <raise>
 800782a:	2001      	movs	r0, #1
 800782c:	f7f9 feef 	bl	800160e <_exit>

08007830 <_raise_r>:
 8007830:	291f      	cmp	r1, #31
 8007832:	b538      	push	{r3, r4, r5, lr}
 8007834:	4604      	mov	r4, r0
 8007836:	460d      	mov	r5, r1
 8007838:	d904      	bls.n	8007844 <_raise_r+0x14>
 800783a:	2316      	movs	r3, #22
 800783c:	6003      	str	r3, [r0, #0]
 800783e:	f04f 30ff 	mov.w	r0, #4294967295
 8007842:	bd38      	pop	{r3, r4, r5, pc}
 8007844:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007846:	b112      	cbz	r2, 800784e <_raise_r+0x1e>
 8007848:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800784c:	b94b      	cbnz	r3, 8007862 <_raise_r+0x32>
 800784e:	4620      	mov	r0, r4
 8007850:	f000 f830 	bl	80078b4 <_getpid_r>
 8007854:	462a      	mov	r2, r5
 8007856:	4601      	mov	r1, r0
 8007858:	4620      	mov	r0, r4
 800785a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800785e:	f000 b817 	b.w	8007890 <_kill_r>
 8007862:	2b01      	cmp	r3, #1
 8007864:	d00a      	beq.n	800787c <_raise_r+0x4c>
 8007866:	1c59      	adds	r1, r3, #1
 8007868:	d103      	bne.n	8007872 <_raise_r+0x42>
 800786a:	2316      	movs	r3, #22
 800786c:	6003      	str	r3, [r0, #0]
 800786e:	2001      	movs	r0, #1
 8007870:	e7e7      	b.n	8007842 <_raise_r+0x12>
 8007872:	2400      	movs	r4, #0
 8007874:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007878:	4628      	mov	r0, r5
 800787a:	4798      	blx	r3
 800787c:	2000      	movs	r0, #0
 800787e:	e7e0      	b.n	8007842 <_raise_r+0x12>

08007880 <raise>:
 8007880:	4b02      	ldr	r3, [pc, #8]	; (800788c <raise+0xc>)
 8007882:	4601      	mov	r1, r0
 8007884:	6818      	ldr	r0, [r3, #0]
 8007886:	f7ff bfd3 	b.w	8007830 <_raise_r>
 800788a:	bf00      	nop
 800788c:	2000000c 	.word	0x2000000c

08007890 <_kill_r>:
 8007890:	b538      	push	{r3, r4, r5, lr}
 8007892:	4d07      	ldr	r5, [pc, #28]	; (80078b0 <_kill_r+0x20>)
 8007894:	2300      	movs	r3, #0
 8007896:	4604      	mov	r4, r0
 8007898:	4608      	mov	r0, r1
 800789a:	4611      	mov	r1, r2
 800789c:	602b      	str	r3, [r5, #0]
 800789e:	f7f9 fea6 	bl	80015ee <_kill>
 80078a2:	1c43      	adds	r3, r0, #1
 80078a4:	d102      	bne.n	80078ac <_kill_r+0x1c>
 80078a6:	682b      	ldr	r3, [r5, #0]
 80078a8:	b103      	cbz	r3, 80078ac <_kill_r+0x1c>
 80078aa:	6023      	str	r3, [r4, #0]
 80078ac:	bd38      	pop	{r3, r4, r5, pc}
 80078ae:	bf00      	nop
 80078b0:	200003dc 	.word	0x200003dc

080078b4 <_getpid_r>:
 80078b4:	f7f9 be93 	b.w	80015de <_getpid>

080078b8 <_init>:
 80078b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ba:	bf00      	nop
 80078bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078be:	bc08      	pop	{r3}
 80078c0:	469e      	mov	lr, r3
 80078c2:	4770      	bx	lr

080078c4 <_fini>:
 80078c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078c6:	bf00      	nop
 80078c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078ca:	bc08      	pop	{r3}
 80078cc:	469e      	mov	lr, r3
 80078ce:	4770      	bx	lr
