
Capteurs-Chaines-de-Mesures.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028ac  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002a8c  08002a8c  00012a8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ac4  08002ac4  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08002ac4  08002ac4  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ac4  08002ac4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ac4  08002ac4  00012ac4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ac8  08002ac8  00012ac8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002acc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d78  20000010  08002adc  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d88  08002adc  00020d88  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f2f  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f8f  00000000  00000000  00028f6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a50  00000000  00000000  0002af00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000948  00000000  00000000  0002b950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e0ba  00000000  00000000  0002c298  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000abcd  00000000  00000000  0004a352  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b9260  00000000  00000000  00054f1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010e17f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002754  00000000  00000000  0010e1d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000010 	.word	0x20000010
 80001fc:	00000000 	.word	0x00000000
 8000200:	08002a74 	.word	0x08002a74

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000014 	.word	0x20000014
 800021c:	08002a74 	.word	0x08002a74

08000220 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000220:	b5b0      	push	{r4, r5, r7, lr}
 8000222:	b086      	sub	sp, #24
 8000224:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000226:	4b09      	ldr	r3, [pc, #36]	; (800024c <MX_FREERTOS_Init+0x2c>)
 8000228:	1d3c      	adds	r4, r7, #4
 800022a:	461d      	mov	r5, r3
 800022c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800022e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000230:	682b      	ldr	r3, [r5, #0]
 8000232:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000234:	1d3b      	adds	r3, r7, #4
 8000236:	2100      	movs	r1, #0
 8000238:	4618      	mov	r0, r3
 800023a:	f001 fa64 	bl	8001706 <osThreadCreate>
 800023e:	4603      	mov	r3, r0
 8000240:	4a03      	ldr	r2, [pc, #12]	; (8000250 <MX_FREERTOS_Init+0x30>)
 8000242:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000244:	bf00      	nop
 8000246:	3718      	adds	r7, #24
 8000248:	46bd      	mov	sp, r7
 800024a:	bdb0      	pop	{r4, r5, r7, pc}
 800024c:	08002a98 	.word	0x08002a98
 8000250:	2000002c 	.word	0x2000002c

08000254 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b082      	sub	sp, #8
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800025c:	2001      	movs	r0, #1
 800025e:	f001 fa79 	bl	8001754 <osDelay>
 8000262:	e7fb      	b.n	800025c <StartDefaultTask+0x8>

08000264 <MX_GPIO_Init>:
        * EXTI
     PA2   ------> LPUART1_TX
     PA3   ------> LPUART1_RX
*/
void MX_GPIO_Init(void)
{
 8000264:	b580      	push	{r7, lr}
 8000266:	b08a      	sub	sp, #40	; 0x28
 8000268:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800026a:	f107 0314 	add.w	r3, r7, #20
 800026e:	2200      	movs	r2, #0
 8000270:	601a      	str	r2, [r3, #0]
 8000272:	605a      	str	r2, [r3, #4]
 8000274:	609a      	str	r2, [r3, #8]
 8000276:	60da      	str	r2, [r3, #12]
 8000278:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800027a:	4b34      	ldr	r3, [pc, #208]	; (800034c <MX_GPIO_Init+0xe8>)
 800027c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800027e:	4a33      	ldr	r2, [pc, #204]	; (800034c <MX_GPIO_Init+0xe8>)
 8000280:	f043 0304 	orr.w	r3, r3, #4
 8000284:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000286:	4b31      	ldr	r3, [pc, #196]	; (800034c <MX_GPIO_Init+0xe8>)
 8000288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800028a:	f003 0304 	and.w	r3, r3, #4
 800028e:	613b      	str	r3, [r7, #16]
 8000290:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000292:	4b2e      	ldr	r3, [pc, #184]	; (800034c <MX_GPIO_Init+0xe8>)
 8000294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000296:	4a2d      	ldr	r2, [pc, #180]	; (800034c <MX_GPIO_Init+0xe8>)
 8000298:	f043 0320 	orr.w	r3, r3, #32
 800029c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800029e:	4b2b      	ldr	r3, [pc, #172]	; (800034c <MX_GPIO_Init+0xe8>)
 80002a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002a2:	f003 0320 	and.w	r3, r3, #32
 80002a6:	60fb      	str	r3, [r7, #12]
 80002a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002aa:	4b28      	ldr	r3, [pc, #160]	; (800034c <MX_GPIO_Init+0xe8>)
 80002ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ae:	4a27      	ldr	r2, [pc, #156]	; (800034c <MX_GPIO_Init+0xe8>)
 80002b0:	f043 0301 	orr.w	r3, r3, #1
 80002b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002b6:	4b25      	ldr	r3, [pc, #148]	; (800034c <MX_GPIO_Init+0xe8>)
 80002b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002ba:	f003 0301 	and.w	r3, r3, #1
 80002be:	60bb      	str	r3, [r7, #8]
 80002c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002c2:	4b22      	ldr	r3, [pc, #136]	; (800034c <MX_GPIO_Init+0xe8>)
 80002c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002c6:	4a21      	ldr	r2, [pc, #132]	; (800034c <MX_GPIO_Init+0xe8>)
 80002c8:	f043 0302 	orr.w	r3, r3, #2
 80002cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002ce:	4b1f      	ldr	r3, [pc, #124]	; (800034c <MX_GPIO_Init+0xe8>)
 80002d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002d2:	f003 0302 	and.w	r3, r3, #2
 80002d6:	607b      	str	r3, [r7, #4]
 80002d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80002da:	2200      	movs	r2, #0
 80002dc:	2120      	movs	r1, #32
 80002de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002e2:	f000 fc29 	bl	8000b38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80002e6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80002ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80002ec:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80002f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002f2:	2300      	movs	r3, #0
 80002f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80002f6:	f107 0314 	add.w	r3, r7, #20
 80002fa:	4619      	mov	r1, r3
 80002fc:	4814      	ldr	r0, [pc, #80]	; (8000350 <MX_GPIO_Init+0xec>)
 80002fe:	f000 fa99 	bl	8000834 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000302:	230c      	movs	r3, #12
 8000304:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000306:	2302      	movs	r3, #2
 8000308:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800030a:	2300      	movs	r3, #0
 800030c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800030e:	2300      	movs	r3, #0
 8000310:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000312:	230c      	movs	r3, #12
 8000314:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000316:	f107 0314 	add.w	r3, r7, #20
 800031a:	4619      	mov	r1, r3
 800031c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000320:	f000 fa88 	bl	8000834 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000324:	2320      	movs	r3, #32
 8000326:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000328:	2301      	movs	r3, #1
 800032a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800032c:	2300      	movs	r3, #0
 800032e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000330:	2300      	movs	r3, #0
 8000332:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000334:	f107 0314 	add.w	r3, r7, #20
 8000338:	4619      	mov	r1, r3
 800033a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800033e:	f000 fa79 	bl	8000834 <HAL_GPIO_Init>

}
 8000342:	bf00      	nop
 8000344:	3728      	adds	r7, #40	; 0x28
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	40021000 	.word	0x40021000
 8000350:	48000800 	.word	0x48000800

08000354 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000358:	f000 f8f5 	bl	8000546 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800035c:	f000 f817 	bl	800038e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000360:	f7ff ff80 	bl	8000264 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 8000364:	2201      	movs	r2, #1
 8000366:	2120      	movs	r1, #32
 8000368:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800036c:	f000 fbe4 	bl	8000b38 <HAL_GPIO_WritePin>
    HAL_Delay(2000);
 8000370:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000374:	f000 f958 	bl	8000628 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);
 8000378:	2200      	movs	r2, #0
 800037a:	2120      	movs	r1, #32
 800037c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000380:	f000 fbda 	bl	8000b38 <HAL_GPIO_WritePin>
    BSP_LCD_Clear(LCD_COLOR_WHITE);
    */
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000384:	f7ff ff4c 	bl	8000220 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000388:	f001 f9b6 	bl	80016f8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800038c:	e7fe      	b.n	800038c <main+0x38>

0800038e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800038e:	b580      	push	{r7, lr}
 8000390:	b094      	sub	sp, #80	; 0x50
 8000392:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000394:	f107 0318 	add.w	r3, r7, #24
 8000398:	2238      	movs	r2, #56	; 0x38
 800039a:	2100      	movs	r1, #0
 800039c:	4618      	mov	r0, r3
 800039e:	f002 fb61 	bl	8002a64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003a2:	1d3b      	adds	r3, r7, #4
 80003a4:	2200      	movs	r2, #0
 80003a6:	601a      	str	r2, [r3, #0]
 80003a8:	605a      	str	r2, [r3, #4]
 80003aa:	609a      	str	r2, [r3, #8]
 80003ac:	60da      	str	r2, [r3, #12]
 80003ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80003b0:	2000      	movs	r0, #0
 80003b2:	f000 fbd9 	bl	8000b68 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80003b6:	2302      	movs	r3, #2
 80003b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80003be:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003c0:	2340      	movs	r3, #64	; 0x40
 80003c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003c4:	2302      	movs	r3, #2
 80003c6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80003c8:	2302      	movs	r3, #2
 80003ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80003cc:	2304      	movs	r3, #4
 80003ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80003d0:	2355      	movs	r3, #85	; 0x55
 80003d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80003d4:	2302      	movs	r3, #2
 80003d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80003d8:	2302      	movs	r3, #2
 80003da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80003dc:	2302      	movs	r3, #2
 80003de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003e0:	f107 0318 	add.w	r3, r7, #24
 80003e4:	4618      	mov	r0, r3
 80003e6:	f000 fc73 	bl	8000cd0 <HAL_RCC_OscConfig>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d001      	beq.n	80003f4 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80003f0:	f000 f818 	bl	8000424 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003f4:	230f      	movs	r3, #15
 80003f6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003f8:	2303      	movs	r3, #3
 80003fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003fc:	2300      	movs	r3, #0
 80003fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000400:	2300      	movs	r3, #0
 8000402:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000404:	2300      	movs	r3, #0
 8000406:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000408:	1d3b      	adds	r3, r7, #4
 800040a:	2104      	movs	r1, #4
 800040c:	4618      	mov	r0, r3
 800040e:	f000 ff77 	bl	8001300 <HAL_RCC_ClockConfig>
 8000412:	4603      	mov	r3, r0
 8000414:	2b00      	cmp	r3, #0
 8000416:	d001      	beq.n	800041c <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000418:	f000 f804 	bl	8000424 <Error_Handler>
  }
}
 800041c:	bf00      	nop
 800041e:	3750      	adds	r7, #80	; 0x50
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}

08000424 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000424:	b480      	push	{r7}
 8000426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000428:	bf00      	nop
 800042a:	46bd      	mov	sp, r7
 800042c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000430:	4770      	bx	lr
	...

08000434 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800043a:	4b12      	ldr	r3, [pc, #72]	; (8000484 <HAL_MspInit+0x50>)
 800043c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800043e:	4a11      	ldr	r2, [pc, #68]	; (8000484 <HAL_MspInit+0x50>)
 8000440:	f043 0301 	orr.w	r3, r3, #1
 8000444:	6613      	str	r3, [r2, #96]	; 0x60
 8000446:	4b0f      	ldr	r3, [pc, #60]	; (8000484 <HAL_MspInit+0x50>)
 8000448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800044a:	f003 0301 	and.w	r3, r3, #1
 800044e:	607b      	str	r3, [r7, #4]
 8000450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000452:	4b0c      	ldr	r3, [pc, #48]	; (8000484 <HAL_MspInit+0x50>)
 8000454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000456:	4a0b      	ldr	r2, [pc, #44]	; (8000484 <HAL_MspInit+0x50>)
 8000458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800045c:	6593      	str	r3, [r2, #88]	; 0x58
 800045e:	4b09      	ldr	r3, [pc, #36]	; (8000484 <HAL_MspInit+0x50>)
 8000460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000466:	603b      	str	r3, [r7, #0]
 8000468:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800046a:	2200      	movs	r2, #0
 800046c:	210f      	movs	r1, #15
 800046e:	f06f 0001 	mvn.w	r0, #1
 8000472:	f000 f9b8 	bl	80007e6 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000476:	f000 fc1b 	bl	8000cb0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800047a:	bf00      	nop
 800047c:	3708      	adds	r7, #8
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	40021000 	.word	0x40021000

08000488 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800048c:	e7fe      	b.n	800048c <NMI_Handler+0x4>

0800048e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800048e:	b480      	push	{r7}
 8000490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000492:	e7fe      	b.n	8000492 <HardFault_Handler+0x4>

08000494 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000494:	b480      	push	{r7}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000498:	e7fe      	b.n	8000498 <MemManage_Handler+0x4>

0800049a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800049a:	b480      	push	{r7}
 800049c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800049e:	e7fe      	b.n	800049e <BusFault_Handler+0x4>

080004a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004a4:	e7fe      	b.n	80004a4 <UsageFault_Handler+0x4>

080004a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004a6:	b480      	push	{r7}
 80004a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004aa:	bf00      	nop
 80004ac:	46bd      	mov	sp, r7
 80004ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b2:	4770      	bx	lr

080004b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004b8:	f000 f898 	bl	80005ec <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80004bc:	f001 fe34 	bl	8002128 <xTaskGetSchedulerState>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b01      	cmp	r3, #1
 80004c4:	d001      	beq.n	80004ca <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80004c6:	f002 f86f 	bl	80025a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004ca:	bf00      	nop
 80004cc:	bd80      	pop	{r7, pc}
	...

080004d0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80004d4:	4b06      	ldr	r3, [pc, #24]	; (80004f0 <SystemInit+0x20>)
 80004d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004da:	4a05      	ldr	r2, [pc, #20]	; (80004f0 <SystemInit+0x20>)
 80004dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004e4:	bf00      	nop
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	e000ed00 	.word	0xe000ed00

080004f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004f4:	480d      	ldr	r0, [pc, #52]	; (800052c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004f6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004f8:	480d      	ldr	r0, [pc, #52]	; (8000530 <LoopForever+0x6>)
  ldr r1, =_edata
 80004fa:	490e      	ldr	r1, [pc, #56]	; (8000534 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004fc:	4a0e      	ldr	r2, [pc, #56]	; (8000538 <LoopForever+0xe>)
  movs r3, #0
 80004fe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000500:	e002      	b.n	8000508 <LoopCopyDataInit>

08000502 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000502:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000504:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000506:	3304      	adds	r3, #4

08000508 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000508:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800050a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800050c:	d3f9      	bcc.n	8000502 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800050e:	4a0b      	ldr	r2, [pc, #44]	; (800053c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000510:	4c0b      	ldr	r4, [pc, #44]	; (8000540 <LoopForever+0x16>)
  movs r3, #0
 8000512:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000514:	e001      	b.n	800051a <LoopFillZerobss>

08000516 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000516:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000518:	3204      	adds	r2, #4

0800051a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800051a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800051c:	d3fb      	bcc.n	8000516 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800051e:	f7ff ffd7 	bl	80004d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000522:	f002 fa7b 	bl	8002a1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000526:	f7ff ff15 	bl	8000354 <main>

0800052a <LoopForever>:

LoopForever:
    b LoopForever
 800052a:	e7fe      	b.n	800052a <LoopForever>
  ldr   r0, =_estack
 800052c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000530:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000534:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000538:	08002acc 	.word	0x08002acc
  ldr r2, =_sbss
 800053c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000540:	20000d88 	.word	0x20000d88

08000544 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000544:	e7fe      	b.n	8000544 <ADC1_2_IRQHandler>

08000546 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000546:	b580      	push	{r7, lr}
 8000548:	b082      	sub	sp, #8
 800054a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800054c:	2300      	movs	r3, #0
 800054e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000550:	2003      	movs	r0, #3
 8000552:	f000 f93d 	bl	80007d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000556:	200f      	movs	r0, #15
 8000558:	f000 f80e 	bl	8000578 <HAL_InitTick>
 800055c:	4603      	mov	r3, r0
 800055e:	2b00      	cmp	r3, #0
 8000560:	d002      	beq.n	8000568 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000562:	2301      	movs	r3, #1
 8000564:	71fb      	strb	r3, [r7, #7]
 8000566:	e001      	b.n	800056c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000568:	f7ff ff64 	bl	8000434 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800056c:	79fb      	ldrb	r3, [r7, #7]

}
 800056e:	4618      	mov	r0, r3
 8000570:	3708      	adds	r7, #8
 8000572:	46bd      	mov	sp, r7
 8000574:	bd80      	pop	{r7, pc}
	...

08000578 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b084      	sub	sp, #16
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000580:	2300      	movs	r3, #0
 8000582:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000584:	4b16      	ldr	r3, [pc, #88]	; (80005e0 <HAL_InitTick+0x68>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	2b00      	cmp	r3, #0
 800058a:	d022      	beq.n	80005d2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800058c:	4b15      	ldr	r3, [pc, #84]	; (80005e4 <HAL_InitTick+0x6c>)
 800058e:	681a      	ldr	r2, [r3, #0]
 8000590:	4b13      	ldr	r3, [pc, #76]	; (80005e0 <HAL_InitTick+0x68>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000598:	fbb1 f3f3 	udiv	r3, r1, r3
 800059c:	fbb2 f3f3 	udiv	r3, r2, r3
 80005a0:	4618      	mov	r0, r3
 80005a2:	f000 f93a 	bl	800081a <HAL_SYSTICK_Config>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d10f      	bne.n	80005cc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2b0f      	cmp	r3, #15
 80005b0:	d809      	bhi.n	80005c6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005b2:	2200      	movs	r2, #0
 80005b4:	6879      	ldr	r1, [r7, #4]
 80005b6:	f04f 30ff 	mov.w	r0, #4294967295
 80005ba:	f000 f914 	bl	80007e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005be:	4a0a      	ldr	r2, [pc, #40]	; (80005e8 <HAL_InitTick+0x70>)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	6013      	str	r3, [r2, #0]
 80005c4:	e007      	b.n	80005d6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80005c6:	2301      	movs	r3, #1
 80005c8:	73fb      	strb	r3, [r7, #15]
 80005ca:	e004      	b.n	80005d6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80005cc:	2301      	movs	r3, #1
 80005ce:	73fb      	strb	r3, [r7, #15]
 80005d0:	e001      	b.n	80005d6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80005d2:	2301      	movs	r3, #1
 80005d4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80005d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	3710      	adds	r7, #16
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	20000008 	.word	0x20000008
 80005e4:	20000000 	.word	0x20000000
 80005e8:	20000004 	.word	0x20000004

080005ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005f0:	4b05      	ldr	r3, [pc, #20]	; (8000608 <HAL_IncTick+0x1c>)
 80005f2:	681a      	ldr	r2, [r3, #0]
 80005f4:	4b05      	ldr	r3, [pc, #20]	; (800060c <HAL_IncTick+0x20>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4413      	add	r3, r2
 80005fa:	4a03      	ldr	r2, [pc, #12]	; (8000608 <HAL_IncTick+0x1c>)
 80005fc:	6013      	str	r3, [r2, #0]
}
 80005fe:	bf00      	nop
 8000600:	46bd      	mov	sp, r7
 8000602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000606:	4770      	bx	lr
 8000608:	20000030 	.word	0x20000030
 800060c:	20000008 	.word	0x20000008

08000610 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  return uwTick;
 8000614:	4b03      	ldr	r3, [pc, #12]	; (8000624 <HAL_GetTick+0x14>)
 8000616:	681b      	ldr	r3, [r3, #0]
}
 8000618:	4618      	mov	r0, r3
 800061a:	46bd      	mov	sp, r7
 800061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000620:	4770      	bx	lr
 8000622:	bf00      	nop
 8000624:	20000030 	.word	0x20000030

08000628 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000630:	f7ff ffee 	bl	8000610 <HAL_GetTick>
 8000634:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000640:	d004      	beq.n	800064c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000642:	4b09      	ldr	r3, [pc, #36]	; (8000668 <HAL_Delay+0x40>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	68fa      	ldr	r2, [r7, #12]
 8000648:	4413      	add	r3, r2
 800064a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800064c:	bf00      	nop
 800064e:	f7ff ffdf 	bl	8000610 <HAL_GetTick>
 8000652:	4602      	mov	r2, r0
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	1ad3      	subs	r3, r2, r3
 8000658:	68fa      	ldr	r2, [r7, #12]
 800065a:	429a      	cmp	r2, r3
 800065c:	d8f7      	bhi.n	800064e <HAL_Delay+0x26>
  {
  }
}
 800065e:	bf00      	nop
 8000660:	bf00      	nop
 8000662:	3710      	adds	r7, #16
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000008 	.word	0x20000008

0800066c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800066c:	b480      	push	{r7}
 800066e:	b085      	sub	sp, #20
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	f003 0307 	and.w	r3, r3, #7
 800067a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800067c:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <__NVIC_SetPriorityGrouping+0x44>)
 800067e:	68db      	ldr	r3, [r3, #12]
 8000680:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000682:	68ba      	ldr	r2, [r7, #8]
 8000684:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000688:	4013      	ands	r3, r2
 800068a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000694:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800069c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800069e:	4a04      	ldr	r2, [pc, #16]	; (80006b0 <__NVIC_SetPriorityGrouping+0x44>)
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	60d3      	str	r3, [r2, #12]
}
 80006a4:	bf00      	nop
 80006a6:	3714      	adds	r7, #20
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr
 80006b0:	e000ed00 	.word	0xe000ed00

080006b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006b8:	4b04      	ldr	r3, [pc, #16]	; (80006cc <__NVIC_GetPriorityGrouping+0x18>)
 80006ba:	68db      	ldr	r3, [r3, #12]
 80006bc:	0a1b      	lsrs	r3, r3, #8
 80006be:	f003 0307 	and.w	r3, r3, #7
}
 80006c2:	4618      	mov	r0, r3
 80006c4:	46bd      	mov	sp, r7
 80006c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ca:	4770      	bx	lr
 80006cc:	e000ed00 	.word	0xe000ed00

080006d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	6039      	str	r1, [r7, #0]
 80006da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	db0a      	blt.n	80006fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	b2da      	uxtb	r2, r3
 80006e8:	490c      	ldr	r1, [pc, #48]	; (800071c <__NVIC_SetPriority+0x4c>)
 80006ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ee:	0112      	lsls	r2, r2, #4
 80006f0:	b2d2      	uxtb	r2, r2
 80006f2:	440b      	add	r3, r1
 80006f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006f8:	e00a      	b.n	8000710 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	b2da      	uxtb	r2, r3
 80006fe:	4908      	ldr	r1, [pc, #32]	; (8000720 <__NVIC_SetPriority+0x50>)
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	f003 030f 	and.w	r3, r3, #15
 8000706:	3b04      	subs	r3, #4
 8000708:	0112      	lsls	r2, r2, #4
 800070a:	b2d2      	uxtb	r2, r2
 800070c:	440b      	add	r3, r1
 800070e:	761a      	strb	r2, [r3, #24]
}
 8000710:	bf00      	nop
 8000712:	370c      	adds	r7, #12
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr
 800071c:	e000e100 	.word	0xe000e100
 8000720:	e000ed00 	.word	0xe000ed00

08000724 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000724:	b480      	push	{r7}
 8000726:	b089      	sub	sp, #36	; 0x24
 8000728:	af00      	add	r7, sp, #0
 800072a:	60f8      	str	r0, [r7, #12]
 800072c:	60b9      	str	r1, [r7, #8]
 800072e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	f003 0307 	and.w	r3, r3, #7
 8000736:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000738:	69fb      	ldr	r3, [r7, #28]
 800073a:	f1c3 0307 	rsb	r3, r3, #7
 800073e:	2b04      	cmp	r3, #4
 8000740:	bf28      	it	cs
 8000742:	2304      	movcs	r3, #4
 8000744:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000746:	69fb      	ldr	r3, [r7, #28]
 8000748:	3304      	adds	r3, #4
 800074a:	2b06      	cmp	r3, #6
 800074c:	d902      	bls.n	8000754 <NVIC_EncodePriority+0x30>
 800074e:	69fb      	ldr	r3, [r7, #28]
 8000750:	3b03      	subs	r3, #3
 8000752:	e000      	b.n	8000756 <NVIC_EncodePriority+0x32>
 8000754:	2300      	movs	r3, #0
 8000756:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000758:	f04f 32ff 	mov.w	r2, #4294967295
 800075c:	69bb      	ldr	r3, [r7, #24]
 800075e:	fa02 f303 	lsl.w	r3, r2, r3
 8000762:	43da      	mvns	r2, r3
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	401a      	ands	r2, r3
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800076c:	f04f 31ff 	mov.w	r1, #4294967295
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	fa01 f303 	lsl.w	r3, r1, r3
 8000776:	43d9      	mvns	r1, r3
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800077c:	4313      	orrs	r3, r2
         );
}
 800077e:	4618      	mov	r0, r3
 8000780:	3724      	adds	r7, #36	; 0x24
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
	...

0800078c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	3b01      	subs	r3, #1
 8000798:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800079c:	d301      	bcc.n	80007a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800079e:	2301      	movs	r3, #1
 80007a0:	e00f      	b.n	80007c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007a2:	4a0a      	ldr	r2, [pc, #40]	; (80007cc <SysTick_Config+0x40>)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	3b01      	subs	r3, #1
 80007a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007aa:	210f      	movs	r1, #15
 80007ac:	f04f 30ff 	mov.w	r0, #4294967295
 80007b0:	f7ff ff8e 	bl	80006d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007b4:	4b05      	ldr	r3, [pc, #20]	; (80007cc <SysTick_Config+0x40>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007ba:	4b04      	ldr	r3, [pc, #16]	; (80007cc <SysTick_Config+0x40>)
 80007bc:	2207      	movs	r2, #7
 80007be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007c0:	2300      	movs	r3, #0
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	e000e010 	.word	0xe000e010

080007d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	f7ff ff47 	bl	800066c <__NVIC_SetPriorityGrouping>
}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	b086      	sub	sp, #24
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	4603      	mov	r3, r0
 80007ee:	60b9      	str	r1, [r7, #8]
 80007f0:	607a      	str	r2, [r7, #4]
 80007f2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007f4:	f7ff ff5e 	bl	80006b4 <__NVIC_GetPriorityGrouping>
 80007f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007fa:	687a      	ldr	r2, [r7, #4]
 80007fc:	68b9      	ldr	r1, [r7, #8]
 80007fe:	6978      	ldr	r0, [r7, #20]
 8000800:	f7ff ff90 	bl	8000724 <NVIC_EncodePriority>
 8000804:	4602      	mov	r2, r0
 8000806:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800080a:	4611      	mov	r1, r2
 800080c:	4618      	mov	r0, r3
 800080e:	f7ff ff5f 	bl	80006d0 <__NVIC_SetPriority>
}
 8000812:	bf00      	nop
 8000814:	3718      	adds	r7, #24
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}

0800081a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800081a:	b580      	push	{r7, lr}
 800081c:	b082      	sub	sp, #8
 800081e:	af00      	add	r7, sp, #0
 8000820:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000822:	6878      	ldr	r0, [r7, #4]
 8000824:	f7ff ffb2 	bl	800078c <SysTick_Config>
 8000828:	4603      	mov	r3, r0
}
 800082a:	4618      	mov	r0, r3
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
	...

08000834 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000834:	b480      	push	{r7}
 8000836:	b087      	sub	sp, #28
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
 800083c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800083e:	2300      	movs	r3, #0
 8000840:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000842:	e15a      	b.n	8000afa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	681a      	ldr	r2, [r3, #0]
 8000848:	2101      	movs	r1, #1
 800084a:	697b      	ldr	r3, [r7, #20]
 800084c:	fa01 f303 	lsl.w	r3, r1, r3
 8000850:	4013      	ands	r3, r2
 8000852:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	2b00      	cmp	r3, #0
 8000858:	f000 814c 	beq.w	8000af4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	685b      	ldr	r3, [r3, #4]
 8000860:	f003 0303 	and.w	r3, r3, #3
 8000864:	2b01      	cmp	r3, #1
 8000866:	d005      	beq.n	8000874 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000868:	683b      	ldr	r3, [r7, #0]
 800086a:	685b      	ldr	r3, [r3, #4]
 800086c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000870:	2b02      	cmp	r3, #2
 8000872:	d130      	bne.n	80008d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	689b      	ldr	r3, [r3, #8]
 8000878:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800087a:	697b      	ldr	r3, [r7, #20]
 800087c:	005b      	lsls	r3, r3, #1
 800087e:	2203      	movs	r2, #3
 8000880:	fa02 f303 	lsl.w	r3, r2, r3
 8000884:	43db      	mvns	r3, r3
 8000886:	693a      	ldr	r2, [r7, #16]
 8000888:	4013      	ands	r3, r2
 800088a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	68da      	ldr	r2, [r3, #12]
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	005b      	lsls	r3, r3, #1
 8000894:	fa02 f303 	lsl.w	r3, r2, r3
 8000898:	693a      	ldr	r2, [r7, #16]
 800089a:	4313      	orrs	r3, r2
 800089c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	693a      	ldr	r2, [r7, #16]
 80008a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	685b      	ldr	r3, [r3, #4]
 80008a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80008aa:	2201      	movs	r2, #1
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	fa02 f303 	lsl.w	r3, r2, r3
 80008b2:	43db      	mvns	r3, r3
 80008b4:	693a      	ldr	r2, [r7, #16]
 80008b6:	4013      	ands	r3, r2
 80008b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	091b      	lsrs	r3, r3, #4
 80008c0:	f003 0201 	and.w	r2, r3, #1
 80008c4:	697b      	ldr	r3, [r7, #20]
 80008c6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ca:	693a      	ldr	r2, [r7, #16]
 80008cc:	4313      	orrs	r3, r2
 80008ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	693a      	ldr	r2, [r7, #16]
 80008d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	685b      	ldr	r3, [r3, #4]
 80008da:	f003 0303 	and.w	r3, r3, #3
 80008de:	2b03      	cmp	r3, #3
 80008e0:	d017      	beq.n	8000912 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	68db      	ldr	r3, [r3, #12]
 80008e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	005b      	lsls	r3, r3, #1
 80008ec:	2203      	movs	r2, #3
 80008ee:	fa02 f303 	lsl.w	r3, r2, r3
 80008f2:	43db      	mvns	r3, r3
 80008f4:	693a      	ldr	r2, [r7, #16]
 80008f6:	4013      	ands	r3, r2
 80008f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80008fa:	683b      	ldr	r3, [r7, #0]
 80008fc:	689a      	ldr	r2, [r3, #8]
 80008fe:	697b      	ldr	r3, [r7, #20]
 8000900:	005b      	lsls	r3, r3, #1
 8000902:	fa02 f303 	lsl.w	r3, r2, r3
 8000906:	693a      	ldr	r2, [r7, #16]
 8000908:	4313      	orrs	r3, r2
 800090a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	693a      	ldr	r2, [r7, #16]
 8000910:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	f003 0303 	and.w	r3, r3, #3
 800091a:	2b02      	cmp	r3, #2
 800091c:	d123      	bne.n	8000966 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	08da      	lsrs	r2, r3, #3
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	3208      	adds	r2, #8
 8000926:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800092a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800092c:	697b      	ldr	r3, [r7, #20]
 800092e:	f003 0307 	and.w	r3, r3, #7
 8000932:	009b      	lsls	r3, r3, #2
 8000934:	220f      	movs	r2, #15
 8000936:	fa02 f303 	lsl.w	r3, r2, r3
 800093a:	43db      	mvns	r3, r3
 800093c:	693a      	ldr	r2, [r7, #16]
 800093e:	4013      	ands	r3, r2
 8000940:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	691a      	ldr	r2, [r3, #16]
 8000946:	697b      	ldr	r3, [r7, #20]
 8000948:	f003 0307 	and.w	r3, r3, #7
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	fa02 f303 	lsl.w	r3, r2, r3
 8000952:	693a      	ldr	r2, [r7, #16]
 8000954:	4313      	orrs	r3, r2
 8000956:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	08da      	lsrs	r2, r3, #3
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	3208      	adds	r2, #8
 8000960:	6939      	ldr	r1, [r7, #16]
 8000962:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800096c:	697b      	ldr	r3, [r7, #20]
 800096e:	005b      	lsls	r3, r3, #1
 8000970:	2203      	movs	r2, #3
 8000972:	fa02 f303 	lsl.w	r3, r2, r3
 8000976:	43db      	mvns	r3, r3
 8000978:	693a      	ldr	r2, [r7, #16]
 800097a:	4013      	ands	r3, r2
 800097c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	685b      	ldr	r3, [r3, #4]
 8000982:	f003 0203 	and.w	r2, r3, #3
 8000986:	697b      	ldr	r3, [r7, #20]
 8000988:	005b      	lsls	r3, r3, #1
 800098a:	fa02 f303 	lsl.w	r3, r2, r3
 800098e:	693a      	ldr	r2, [r7, #16]
 8000990:	4313      	orrs	r3, r2
 8000992:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	693a      	ldr	r2, [r7, #16]
 8000998:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	f000 80a6 	beq.w	8000af4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a8:	4b5b      	ldr	r3, [pc, #364]	; (8000b18 <HAL_GPIO_Init+0x2e4>)
 80009aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ac:	4a5a      	ldr	r2, [pc, #360]	; (8000b18 <HAL_GPIO_Init+0x2e4>)
 80009ae:	f043 0301 	orr.w	r3, r3, #1
 80009b2:	6613      	str	r3, [r2, #96]	; 0x60
 80009b4:	4b58      	ldr	r3, [pc, #352]	; (8000b18 <HAL_GPIO_Init+0x2e4>)
 80009b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009b8:	f003 0301 	and.w	r3, r3, #1
 80009bc:	60bb      	str	r3, [r7, #8]
 80009be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80009c0:	4a56      	ldr	r2, [pc, #344]	; (8000b1c <HAL_GPIO_Init+0x2e8>)
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	089b      	lsrs	r3, r3, #2
 80009c6:	3302      	adds	r3, #2
 80009c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	f003 0303 	and.w	r3, r3, #3
 80009d4:	009b      	lsls	r3, r3, #2
 80009d6:	220f      	movs	r2, #15
 80009d8:	fa02 f303 	lsl.w	r3, r2, r3
 80009dc:	43db      	mvns	r3, r3
 80009de:	693a      	ldr	r2, [r7, #16]
 80009e0:	4013      	ands	r3, r2
 80009e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80009ea:	d01f      	beq.n	8000a2c <HAL_GPIO_Init+0x1f8>
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	4a4c      	ldr	r2, [pc, #304]	; (8000b20 <HAL_GPIO_Init+0x2ec>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	d019      	beq.n	8000a28 <HAL_GPIO_Init+0x1f4>
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	4a4b      	ldr	r2, [pc, #300]	; (8000b24 <HAL_GPIO_Init+0x2f0>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d013      	beq.n	8000a24 <HAL_GPIO_Init+0x1f0>
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	4a4a      	ldr	r2, [pc, #296]	; (8000b28 <HAL_GPIO_Init+0x2f4>)
 8000a00:	4293      	cmp	r3, r2
 8000a02:	d00d      	beq.n	8000a20 <HAL_GPIO_Init+0x1ec>
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	4a49      	ldr	r2, [pc, #292]	; (8000b2c <HAL_GPIO_Init+0x2f8>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d007      	beq.n	8000a1c <HAL_GPIO_Init+0x1e8>
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	4a48      	ldr	r2, [pc, #288]	; (8000b30 <HAL_GPIO_Init+0x2fc>)
 8000a10:	4293      	cmp	r3, r2
 8000a12:	d101      	bne.n	8000a18 <HAL_GPIO_Init+0x1e4>
 8000a14:	2305      	movs	r3, #5
 8000a16:	e00a      	b.n	8000a2e <HAL_GPIO_Init+0x1fa>
 8000a18:	2306      	movs	r3, #6
 8000a1a:	e008      	b.n	8000a2e <HAL_GPIO_Init+0x1fa>
 8000a1c:	2304      	movs	r3, #4
 8000a1e:	e006      	b.n	8000a2e <HAL_GPIO_Init+0x1fa>
 8000a20:	2303      	movs	r3, #3
 8000a22:	e004      	b.n	8000a2e <HAL_GPIO_Init+0x1fa>
 8000a24:	2302      	movs	r3, #2
 8000a26:	e002      	b.n	8000a2e <HAL_GPIO_Init+0x1fa>
 8000a28:	2301      	movs	r3, #1
 8000a2a:	e000      	b.n	8000a2e <HAL_GPIO_Init+0x1fa>
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	697a      	ldr	r2, [r7, #20]
 8000a30:	f002 0203 	and.w	r2, r2, #3
 8000a34:	0092      	lsls	r2, r2, #2
 8000a36:	4093      	lsls	r3, r2
 8000a38:	693a      	ldr	r2, [r7, #16]
 8000a3a:	4313      	orrs	r3, r2
 8000a3c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a3e:	4937      	ldr	r1, [pc, #220]	; (8000b1c <HAL_GPIO_Init+0x2e8>)
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	089b      	lsrs	r3, r3, #2
 8000a44:	3302      	adds	r3, #2
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a4c:	4b39      	ldr	r3, [pc, #228]	; (8000b34 <HAL_GPIO_Init+0x300>)
 8000a4e:	689b      	ldr	r3, [r3, #8]
 8000a50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	43db      	mvns	r3, r3
 8000a56:	693a      	ldr	r2, [r7, #16]
 8000a58:	4013      	ands	r3, r2
 8000a5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	685b      	ldr	r3, [r3, #4]
 8000a60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d003      	beq.n	8000a70 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8000a68:	693a      	ldr	r2, [r7, #16]
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000a70:	4a30      	ldr	r2, [pc, #192]	; (8000b34 <HAL_GPIO_Init+0x300>)
 8000a72:	693b      	ldr	r3, [r7, #16]
 8000a74:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000a76:	4b2f      	ldr	r3, [pc, #188]	; (8000b34 <HAL_GPIO_Init+0x300>)
 8000a78:	68db      	ldr	r3, [r3, #12]
 8000a7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	43db      	mvns	r3, r3
 8000a80:	693a      	ldr	r2, [r7, #16]
 8000a82:	4013      	ands	r3, r2
 8000a84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d003      	beq.n	8000a9a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	4313      	orrs	r3, r2
 8000a98:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000a9a:	4a26      	ldr	r2, [pc, #152]	; (8000b34 <HAL_GPIO_Init+0x300>)
 8000a9c:	693b      	ldr	r3, [r7, #16]
 8000a9e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8000aa0:	4b24      	ldr	r3, [pc, #144]	; (8000b34 <HAL_GPIO_Init+0x300>)
 8000aa2:	685b      	ldr	r3, [r3, #4]
 8000aa4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	43db      	mvns	r3, r3
 8000aaa:	693a      	ldr	r2, [r7, #16]
 8000aac:	4013      	ands	r3, r2
 8000aae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	685b      	ldr	r3, [r3, #4]
 8000ab4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d003      	beq.n	8000ac4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000abc:	693a      	ldr	r2, [r7, #16]
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ac4:	4a1b      	ldr	r2, [pc, #108]	; (8000b34 <HAL_GPIO_Init+0x300>)
 8000ac6:	693b      	ldr	r3, [r7, #16]
 8000ac8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000aca:	4b1a      	ldr	r3, [pc, #104]	; (8000b34 <HAL_GPIO_Init+0x300>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	43db      	mvns	r3, r3
 8000ad4:	693a      	ldr	r2, [r7, #16]
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d003      	beq.n	8000aee <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000ae6:	693a      	ldr	r2, [r7, #16]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	4313      	orrs	r3, r2
 8000aec:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000aee:	4a11      	ldr	r2, [pc, #68]	; (8000b34 <HAL_GPIO_Init+0x300>)
 8000af0:	693b      	ldr	r3, [r7, #16]
 8000af2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	3301      	adds	r3, #1
 8000af8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	fa22 f303 	lsr.w	r3, r2, r3
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	f47f ae9d 	bne.w	8000844 <HAL_GPIO_Init+0x10>
  }
}
 8000b0a:	bf00      	nop
 8000b0c:	bf00      	nop
 8000b0e:	371c      	adds	r7, #28
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	40010000 	.word	0x40010000
 8000b20:	48000400 	.word	0x48000400
 8000b24:	48000800 	.word	0x48000800
 8000b28:	48000c00 	.word	0x48000c00
 8000b2c:	48001000 	.word	0x48001000
 8000b30:	48001400 	.word	0x48001400
 8000b34:	40010400 	.word	0x40010400

08000b38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	460b      	mov	r3, r1
 8000b42:	807b      	strh	r3, [r7, #2]
 8000b44:	4613      	mov	r3, r2
 8000b46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b48:	787b      	ldrb	r3, [r7, #1]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d003      	beq.n	8000b56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b4e:	887a      	ldrh	r2, [r7, #2]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b54:	e002      	b.n	8000b5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b56:	887a      	ldrh	r2, [r7, #2]
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b5c:	bf00      	nop
 8000b5e:	370c      	adds	r7, #12
 8000b60:	46bd      	mov	sp, r7
 8000b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b66:	4770      	bx	lr

08000b68 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b085      	sub	sp, #20
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d141      	bne.n	8000bfa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000b76:	4b4b      	ldr	r3, [pc, #300]	; (8000ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000b7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b82:	d131      	bne.n	8000be8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000b84:	4b47      	ldr	r3, [pc, #284]	; (8000ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000b86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000b8a:	4a46      	ldr	r2, [pc, #280]	; (8000ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000b8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000b90:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b94:	4b43      	ldr	r3, [pc, #268]	; (8000ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000b9c:	4a41      	ldr	r2, [pc, #260]	; (8000ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000b9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ba2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000ba4:	4b40      	ldr	r3, [pc, #256]	; (8000ca8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2232      	movs	r2, #50	; 0x32
 8000baa:	fb02 f303 	mul.w	r3, r2, r3
 8000bae:	4a3f      	ldr	r2, [pc, #252]	; (8000cac <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8000bb4:	0c9b      	lsrs	r3, r3, #18
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000bba:	e002      	b.n	8000bc2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	3b01      	subs	r3, #1
 8000bc0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000bc2:	4b38      	ldr	r3, [pc, #224]	; (8000ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000bc4:	695b      	ldr	r3, [r3, #20]
 8000bc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000bce:	d102      	bne.n	8000bd6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d1f2      	bne.n	8000bbc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000bd6:	4b33      	ldr	r3, [pc, #204]	; (8000ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000bd8:	695b      	ldr	r3, [r3, #20]
 8000bda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000be2:	d158      	bne.n	8000c96 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000be4:	2303      	movs	r3, #3
 8000be6:	e057      	b.n	8000c98 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000be8:	4b2e      	ldr	r3, [pc, #184]	; (8000ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000bea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000bee:	4a2d      	ldr	r2, [pc, #180]	; (8000ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000bf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000bf4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000bf8:	e04d      	b.n	8000c96 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c00:	d141      	bne.n	8000c86 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8000c02:	4b28      	ldr	r3, [pc, #160]	; (8000ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000c0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c0e:	d131      	bne.n	8000c74 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000c10:	4b24      	ldr	r3, [pc, #144]	; (8000ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000c16:	4a23      	ldr	r2, [pc, #140]	; (8000ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c1c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c20:	4b20      	ldr	r3, [pc, #128]	; (8000ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c28:	4a1e      	ldr	r2, [pc, #120]	; (8000ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c2e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000c30:	4b1d      	ldr	r3, [pc, #116]	; (8000ca8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2232      	movs	r2, #50	; 0x32
 8000c36:	fb02 f303 	mul.w	r3, r2, r3
 8000c3a:	4a1c      	ldr	r2, [pc, #112]	; (8000cac <HAL_PWREx_ControlVoltageScaling+0x144>)
 8000c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c40:	0c9b      	lsrs	r3, r3, #18
 8000c42:	3301      	adds	r3, #1
 8000c44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c46:	e002      	b.n	8000c4e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	3b01      	subs	r3, #1
 8000c4c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000c4e:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c50:	695b      	ldr	r3, [r3, #20]
 8000c52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c5a:	d102      	bne.n	8000c62 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d1f2      	bne.n	8000c48 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000c62:	4b10      	ldr	r3, [pc, #64]	; (8000ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c64:	695b      	ldr	r3, [r3, #20]
 8000c66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c6e:	d112      	bne.n	8000c96 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8000c70:	2303      	movs	r3, #3
 8000c72:	e011      	b.n	8000c98 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8000c74:	4b0b      	ldr	r3, [pc, #44]	; (8000ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000c7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c80:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8000c84:	e007      	b.n	8000c96 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c86:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000c8e:	4a05      	ldr	r2, [pc, #20]	; (8000ca4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8000c90:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c94:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8000c96:	2300      	movs	r3, #0
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3714      	adds	r7, #20
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	40007000 	.word	0x40007000
 8000ca8:	20000000 	.word	0x20000000
 8000cac:	431bde83 	.word	0x431bde83

08000cb0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000cb4:	4b05      	ldr	r3, [pc, #20]	; (8000ccc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000cb6:	689b      	ldr	r3, [r3, #8]
 8000cb8:	4a04      	ldr	r2, [pc, #16]	; (8000ccc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8000cba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cbe:	6093      	str	r3, [r2, #8]
}
 8000cc0:	bf00      	nop
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	40007000 	.word	0x40007000

08000cd0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b088      	sub	sp, #32
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d101      	bne.n	8000ce2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cde:	2301      	movs	r3, #1
 8000ce0:	e306      	b.n	80012f0 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d075      	beq.n	8000dda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000cee:	4b97      	ldr	r3, [pc, #604]	; (8000f4c <HAL_RCC_OscConfig+0x27c>)
 8000cf0:	689b      	ldr	r3, [r3, #8]
 8000cf2:	f003 030c 	and.w	r3, r3, #12
 8000cf6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000cf8:	4b94      	ldr	r3, [pc, #592]	; (8000f4c <HAL_RCC_OscConfig+0x27c>)
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	f003 0303 	and.w	r3, r3, #3
 8000d00:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8000d02:	69bb      	ldr	r3, [r7, #24]
 8000d04:	2b0c      	cmp	r3, #12
 8000d06:	d102      	bne.n	8000d0e <HAL_RCC_OscConfig+0x3e>
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	2b03      	cmp	r3, #3
 8000d0c:	d002      	beq.n	8000d14 <HAL_RCC_OscConfig+0x44>
 8000d0e:	69bb      	ldr	r3, [r7, #24]
 8000d10:	2b08      	cmp	r3, #8
 8000d12:	d10b      	bne.n	8000d2c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d14:	4b8d      	ldr	r3, [pc, #564]	; (8000f4c <HAL_RCC_OscConfig+0x27c>)
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d05b      	beq.n	8000dd8 <HAL_RCC_OscConfig+0x108>
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	685b      	ldr	r3, [r3, #4]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d157      	bne.n	8000dd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	e2e1      	b.n	80012f0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d34:	d106      	bne.n	8000d44 <HAL_RCC_OscConfig+0x74>
 8000d36:	4b85      	ldr	r3, [pc, #532]	; (8000f4c <HAL_RCC_OscConfig+0x27c>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	4a84      	ldr	r2, [pc, #528]	; (8000f4c <HAL_RCC_OscConfig+0x27c>)
 8000d3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d40:	6013      	str	r3, [r2, #0]
 8000d42:	e01d      	b.n	8000d80 <HAL_RCC_OscConfig+0xb0>
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d4c:	d10c      	bne.n	8000d68 <HAL_RCC_OscConfig+0x98>
 8000d4e:	4b7f      	ldr	r3, [pc, #508]	; (8000f4c <HAL_RCC_OscConfig+0x27c>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a7e      	ldr	r2, [pc, #504]	; (8000f4c <HAL_RCC_OscConfig+0x27c>)
 8000d54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d58:	6013      	str	r3, [r2, #0]
 8000d5a:	4b7c      	ldr	r3, [pc, #496]	; (8000f4c <HAL_RCC_OscConfig+0x27c>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4a7b      	ldr	r2, [pc, #492]	; (8000f4c <HAL_RCC_OscConfig+0x27c>)
 8000d60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d64:	6013      	str	r3, [r2, #0]
 8000d66:	e00b      	b.n	8000d80 <HAL_RCC_OscConfig+0xb0>
 8000d68:	4b78      	ldr	r3, [pc, #480]	; (8000f4c <HAL_RCC_OscConfig+0x27c>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a77      	ldr	r2, [pc, #476]	; (8000f4c <HAL_RCC_OscConfig+0x27c>)
 8000d6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d72:	6013      	str	r3, [r2, #0]
 8000d74:	4b75      	ldr	r3, [pc, #468]	; (8000f4c <HAL_RCC_OscConfig+0x27c>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a74      	ldr	r2, [pc, #464]	; (8000f4c <HAL_RCC_OscConfig+0x27c>)
 8000d7a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d013      	beq.n	8000db0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d88:	f7ff fc42 	bl	8000610 <HAL_GetTick>
 8000d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000d8e:	e008      	b.n	8000da2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d90:	f7ff fc3e 	bl	8000610 <HAL_GetTick>
 8000d94:	4602      	mov	r2, r0
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	1ad3      	subs	r3, r2, r3
 8000d9a:	2b64      	cmp	r3, #100	; 0x64
 8000d9c:	d901      	bls.n	8000da2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000d9e:	2303      	movs	r3, #3
 8000da0:	e2a6      	b.n	80012f0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000da2:	4b6a      	ldr	r3, [pc, #424]	; (8000f4c <HAL_RCC_OscConfig+0x27c>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d0f0      	beq.n	8000d90 <HAL_RCC_OscConfig+0xc0>
 8000dae:	e014      	b.n	8000dda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000db0:	f7ff fc2e 	bl	8000610 <HAL_GetTick>
 8000db4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000db6:	e008      	b.n	8000dca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000db8:	f7ff fc2a 	bl	8000610 <HAL_GetTick>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	2b64      	cmp	r3, #100	; 0x64
 8000dc4:	d901      	bls.n	8000dca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	e292      	b.n	80012f0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000dca:	4b60      	ldr	r3, [pc, #384]	; (8000f4c <HAL_RCC_OscConfig+0x27c>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d1f0      	bne.n	8000db8 <HAL_RCC_OscConfig+0xe8>
 8000dd6:	e000      	b.n	8000dda <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000dd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f003 0302 	and.w	r3, r3, #2
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d075      	beq.n	8000ed2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000de6:	4b59      	ldr	r3, [pc, #356]	; (8000f4c <HAL_RCC_OscConfig+0x27c>)
 8000de8:	689b      	ldr	r3, [r3, #8]
 8000dea:	f003 030c 	and.w	r3, r3, #12
 8000dee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000df0:	4b56      	ldr	r3, [pc, #344]	; (8000f4c <HAL_RCC_OscConfig+0x27c>)
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	f003 0303 	and.w	r3, r3, #3
 8000df8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8000dfa:	69bb      	ldr	r3, [r7, #24]
 8000dfc:	2b0c      	cmp	r3, #12
 8000dfe:	d102      	bne.n	8000e06 <HAL_RCC_OscConfig+0x136>
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	2b02      	cmp	r3, #2
 8000e04:	d002      	beq.n	8000e0c <HAL_RCC_OscConfig+0x13c>
 8000e06:	69bb      	ldr	r3, [r7, #24]
 8000e08:	2b04      	cmp	r3, #4
 8000e0a:	d11f      	bne.n	8000e4c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000e0c:	4b4f      	ldr	r3, [pc, #316]	; (8000f4c <HAL_RCC_OscConfig+0x27c>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d005      	beq.n	8000e24 <HAL_RCC_OscConfig+0x154>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d101      	bne.n	8000e24 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8000e20:	2301      	movs	r3, #1
 8000e22:	e265      	b.n	80012f0 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e24:	4b49      	ldr	r3, [pc, #292]	; (8000f4c <HAL_RCC_OscConfig+0x27c>)
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	691b      	ldr	r3, [r3, #16]
 8000e30:	061b      	lsls	r3, r3, #24
 8000e32:	4946      	ldr	r1, [pc, #280]	; (8000f4c <HAL_RCC_OscConfig+0x27c>)
 8000e34:	4313      	orrs	r3, r2
 8000e36:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000e38:	4b45      	ldr	r3, [pc, #276]	; (8000f50 <HAL_RCC_OscConfig+0x280>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff fb9b 	bl	8000578 <HAL_InitTick>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d043      	beq.n	8000ed0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	e251      	b.n	80012f0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d023      	beq.n	8000e9c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e54:	4b3d      	ldr	r3, [pc, #244]	; (8000f4c <HAL_RCC_OscConfig+0x27c>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a3c      	ldr	r2, [pc, #240]	; (8000f4c <HAL_RCC_OscConfig+0x27c>)
 8000e5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e60:	f7ff fbd6 	bl	8000610 <HAL_GetTick>
 8000e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000e66:	e008      	b.n	8000e7a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e68:	f7ff fbd2 	bl	8000610 <HAL_GetTick>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	693b      	ldr	r3, [r7, #16]
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	2b02      	cmp	r3, #2
 8000e74:	d901      	bls.n	8000e7a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8000e76:	2303      	movs	r3, #3
 8000e78:	e23a      	b.n	80012f0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000e7a:	4b34      	ldr	r3, [pc, #208]	; (8000f4c <HAL_RCC_OscConfig+0x27c>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d0f0      	beq.n	8000e68 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e86:	4b31      	ldr	r3, [pc, #196]	; (8000f4c <HAL_RCC_OscConfig+0x27c>)
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	691b      	ldr	r3, [r3, #16]
 8000e92:	061b      	lsls	r3, r3, #24
 8000e94:	492d      	ldr	r1, [pc, #180]	; (8000f4c <HAL_RCC_OscConfig+0x27c>)
 8000e96:	4313      	orrs	r3, r2
 8000e98:	604b      	str	r3, [r1, #4]
 8000e9a:	e01a      	b.n	8000ed2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e9c:	4b2b      	ldr	r3, [pc, #172]	; (8000f4c <HAL_RCC_OscConfig+0x27c>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a2a      	ldr	r2, [pc, #168]	; (8000f4c <HAL_RCC_OscConfig+0x27c>)
 8000ea2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000ea6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ea8:	f7ff fbb2 	bl	8000610 <HAL_GetTick>
 8000eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000eae:	e008      	b.n	8000ec2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000eb0:	f7ff fbae 	bl	8000610 <HAL_GetTick>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	2b02      	cmp	r3, #2
 8000ebc:	d901      	bls.n	8000ec2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8000ebe:	2303      	movs	r3, #3
 8000ec0:	e216      	b.n	80012f0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000ec2:	4b22      	ldr	r3, [pc, #136]	; (8000f4c <HAL_RCC_OscConfig+0x27c>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d1f0      	bne.n	8000eb0 <HAL_RCC_OscConfig+0x1e0>
 8000ece:	e000      	b.n	8000ed2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ed0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f003 0308 	and.w	r3, r3, #8
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d041      	beq.n	8000f62 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	695b      	ldr	r3, [r3, #20]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d01c      	beq.n	8000f20 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000ee6:	4b19      	ldr	r3, [pc, #100]	; (8000f4c <HAL_RCC_OscConfig+0x27c>)
 8000ee8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000eec:	4a17      	ldr	r2, [pc, #92]	; (8000f4c <HAL_RCC_OscConfig+0x27c>)
 8000eee:	f043 0301 	orr.w	r3, r3, #1
 8000ef2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ef6:	f7ff fb8b 	bl	8000610 <HAL_GetTick>
 8000efa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000efc:	e008      	b.n	8000f10 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000efe:	f7ff fb87 	bl	8000610 <HAL_GetTick>
 8000f02:	4602      	mov	r2, r0
 8000f04:	693b      	ldr	r3, [r7, #16]
 8000f06:	1ad3      	subs	r3, r2, r3
 8000f08:	2b02      	cmp	r3, #2
 8000f0a:	d901      	bls.n	8000f10 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	e1ef      	b.n	80012f0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000f10:	4b0e      	ldr	r3, [pc, #56]	; (8000f4c <HAL_RCC_OscConfig+0x27c>)
 8000f12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f16:	f003 0302 	and.w	r3, r3, #2
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d0ef      	beq.n	8000efe <HAL_RCC_OscConfig+0x22e>
 8000f1e:	e020      	b.n	8000f62 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f20:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <HAL_RCC_OscConfig+0x27c>)
 8000f22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f26:	4a09      	ldr	r2, [pc, #36]	; (8000f4c <HAL_RCC_OscConfig+0x27c>)
 8000f28:	f023 0301 	bic.w	r3, r3, #1
 8000f2c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f30:	f7ff fb6e 	bl	8000610 <HAL_GetTick>
 8000f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000f36:	e00d      	b.n	8000f54 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f38:	f7ff fb6a 	bl	8000610 <HAL_GetTick>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	693b      	ldr	r3, [r7, #16]
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	d906      	bls.n	8000f54 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8000f46:	2303      	movs	r3, #3
 8000f48:	e1d2      	b.n	80012f0 <HAL_RCC_OscConfig+0x620>
 8000f4a:	bf00      	nop
 8000f4c:	40021000 	.word	0x40021000
 8000f50:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000f54:	4b8c      	ldr	r3, [pc, #560]	; (8001188 <HAL_RCC_OscConfig+0x4b8>)
 8000f56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f5a:	f003 0302 	and.w	r3, r3, #2
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d1ea      	bne.n	8000f38 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f003 0304 	and.w	r3, r3, #4
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	f000 80a6 	beq.w	80010bc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f70:	2300      	movs	r3, #0
 8000f72:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8000f74:	4b84      	ldr	r3, [pc, #528]	; (8001188 <HAL_RCC_OscConfig+0x4b8>)
 8000f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d101      	bne.n	8000f84 <HAL_RCC_OscConfig+0x2b4>
 8000f80:	2301      	movs	r3, #1
 8000f82:	e000      	b.n	8000f86 <HAL_RCC_OscConfig+0x2b6>
 8000f84:	2300      	movs	r3, #0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d00d      	beq.n	8000fa6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f8a:	4b7f      	ldr	r3, [pc, #508]	; (8001188 <HAL_RCC_OscConfig+0x4b8>)
 8000f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f8e:	4a7e      	ldr	r2, [pc, #504]	; (8001188 <HAL_RCC_OscConfig+0x4b8>)
 8000f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f94:	6593      	str	r3, [r2, #88]	; 0x58
 8000f96:	4b7c      	ldr	r3, [pc, #496]	; (8001188 <HAL_RCC_OscConfig+0x4b8>)
 8000f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000fa6:	4b79      	ldr	r3, [pc, #484]	; (800118c <HAL_RCC_OscConfig+0x4bc>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d118      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000fb2:	4b76      	ldr	r3, [pc, #472]	; (800118c <HAL_RCC_OscConfig+0x4bc>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4a75      	ldr	r2, [pc, #468]	; (800118c <HAL_RCC_OscConfig+0x4bc>)
 8000fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fbe:	f7ff fb27 	bl	8000610 <HAL_GetTick>
 8000fc2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000fc4:	e008      	b.n	8000fd8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fc6:	f7ff fb23 	bl	8000610 <HAL_GetTick>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	693b      	ldr	r3, [r7, #16]
 8000fce:	1ad3      	subs	r3, r2, r3
 8000fd0:	2b02      	cmp	r3, #2
 8000fd2:	d901      	bls.n	8000fd8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8000fd4:	2303      	movs	r3, #3
 8000fd6:	e18b      	b.n	80012f0 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000fd8:	4b6c      	ldr	r3, [pc, #432]	; (800118c <HAL_RCC_OscConfig+0x4bc>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d0f0      	beq.n	8000fc6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	689b      	ldr	r3, [r3, #8]
 8000fe8:	2b01      	cmp	r3, #1
 8000fea:	d108      	bne.n	8000ffe <HAL_RCC_OscConfig+0x32e>
 8000fec:	4b66      	ldr	r3, [pc, #408]	; (8001188 <HAL_RCC_OscConfig+0x4b8>)
 8000fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ff2:	4a65      	ldr	r2, [pc, #404]	; (8001188 <HAL_RCC_OscConfig+0x4b8>)
 8000ff4:	f043 0301 	orr.w	r3, r3, #1
 8000ff8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000ffc:	e024      	b.n	8001048 <HAL_RCC_OscConfig+0x378>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	2b05      	cmp	r3, #5
 8001004:	d110      	bne.n	8001028 <HAL_RCC_OscConfig+0x358>
 8001006:	4b60      	ldr	r3, [pc, #384]	; (8001188 <HAL_RCC_OscConfig+0x4b8>)
 8001008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800100c:	4a5e      	ldr	r2, [pc, #376]	; (8001188 <HAL_RCC_OscConfig+0x4b8>)
 800100e:	f043 0304 	orr.w	r3, r3, #4
 8001012:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001016:	4b5c      	ldr	r3, [pc, #368]	; (8001188 <HAL_RCC_OscConfig+0x4b8>)
 8001018:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800101c:	4a5a      	ldr	r2, [pc, #360]	; (8001188 <HAL_RCC_OscConfig+0x4b8>)
 800101e:	f043 0301 	orr.w	r3, r3, #1
 8001022:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001026:	e00f      	b.n	8001048 <HAL_RCC_OscConfig+0x378>
 8001028:	4b57      	ldr	r3, [pc, #348]	; (8001188 <HAL_RCC_OscConfig+0x4b8>)
 800102a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800102e:	4a56      	ldr	r2, [pc, #344]	; (8001188 <HAL_RCC_OscConfig+0x4b8>)
 8001030:	f023 0301 	bic.w	r3, r3, #1
 8001034:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001038:	4b53      	ldr	r3, [pc, #332]	; (8001188 <HAL_RCC_OscConfig+0x4b8>)
 800103a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800103e:	4a52      	ldr	r2, [pc, #328]	; (8001188 <HAL_RCC_OscConfig+0x4b8>)
 8001040:	f023 0304 	bic.w	r3, r3, #4
 8001044:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	689b      	ldr	r3, [r3, #8]
 800104c:	2b00      	cmp	r3, #0
 800104e:	d016      	beq.n	800107e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001050:	f7ff fade 	bl	8000610 <HAL_GetTick>
 8001054:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001056:	e00a      	b.n	800106e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001058:	f7ff fada 	bl	8000610 <HAL_GetTick>
 800105c:	4602      	mov	r2, r0
 800105e:	693b      	ldr	r3, [r7, #16]
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	f241 3288 	movw	r2, #5000	; 0x1388
 8001066:	4293      	cmp	r3, r2
 8001068:	d901      	bls.n	800106e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800106a:	2303      	movs	r3, #3
 800106c:	e140      	b.n	80012f0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800106e:	4b46      	ldr	r3, [pc, #280]	; (8001188 <HAL_RCC_OscConfig+0x4b8>)
 8001070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001074:	f003 0302 	and.w	r3, r3, #2
 8001078:	2b00      	cmp	r3, #0
 800107a:	d0ed      	beq.n	8001058 <HAL_RCC_OscConfig+0x388>
 800107c:	e015      	b.n	80010aa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800107e:	f7ff fac7 	bl	8000610 <HAL_GetTick>
 8001082:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001084:	e00a      	b.n	800109c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001086:	f7ff fac3 	bl	8000610 <HAL_GetTick>
 800108a:	4602      	mov	r2, r0
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	1ad3      	subs	r3, r2, r3
 8001090:	f241 3288 	movw	r2, #5000	; 0x1388
 8001094:	4293      	cmp	r3, r2
 8001096:	d901      	bls.n	800109c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001098:	2303      	movs	r3, #3
 800109a:	e129      	b.n	80012f0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800109c:	4b3a      	ldr	r3, [pc, #232]	; (8001188 <HAL_RCC_OscConfig+0x4b8>)
 800109e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010a2:	f003 0302 	and.w	r3, r3, #2
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d1ed      	bne.n	8001086 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80010aa:	7ffb      	ldrb	r3, [r7, #31]
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d105      	bne.n	80010bc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010b0:	4b35      	ldr	r3, [pc, #212]	; (8001188 <HAL_RCC_OscConfig+0x4b8>)
 80010b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b4:	4a34      	ldr	r2, [pc, #208]	; (8001188 <HAL_RCC_OscConfig+0x4b8>)
 80010b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80010ba:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f003 0320 	and.w	r3, r3, #32
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d03c      	beq.n	8001142 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d01c      	beq.n	800110a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80010d0:	4b2d      	ldr	r3, [pc, #180]	; (8001188 <HAL_RCC_OscConfig+0x4b8>)
 80010d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80010d6:	4a2c      	ldr	r2, [pc, #176]	; (8001188 <HAL_RCC_OscConfig+0x4b8>)
 80010d8:	f043 0301 	orr.w	r3, r3, #1
 80010dc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010e0:	f7ff fa96 	bl	8000610 <HAL_GetTick>
 80010e4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80010e6:	e008      	b.n	80010fa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80010e8:	f7ff fa92 	bl	8000610 <HAL_GetTick>
 80010ec:	4602      	mov	r2, r0
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	2b02      	cmp	r3, #2
 80010f4:	d901      	bls.n	80010fa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80010f6:	2303      	movs	r3, #3
 80010f8:	e0fa      	b.n	80012f0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80010fa:	4b23      	ldr	r3, [pc, #140]	; (8001188 <HAL_RCC_OscConfig+0x4b8>)
 80010fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001100:	f003 0302 	and.w	r3, r3, #2
 8001104:	2b00      	cmp	r3, #0
 8001106:	d0ef      	beq.n	80010e8 <HAL_RCC_OscConfig+0x418>
 8001108:	e01b      	b.n	8001142 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800110a:	4b1f      	ldr	r3, [pc, #124]	; (8001188 <HAL_RCC_OscConfig+0x4b8>)
 800110c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001110:	4a1d      	ldr	r2, [pc, #116]	; (8001188 <HAL_RCC_OscConfig+0x4b8>)
 8001112:	f023 0301 	bic.w	r3, r3, #1
 8001116:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800111a:	f7ff fa79 	bl	8000610 <HAL_GetTick>
 800111e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001120:	e008      	b.n	8001134 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001122:	f7ff fa75 	bl	8000610 <HAL_GetTick>
 8001126:	4602      	mov	r2, r0
 8001128:	693b      	ldr	r3, [r7, #16]
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	2b02      	cmp	r3, #2
 800112e:	d901      	bls.n	8001134 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001130:	2303      	movs	r3, #3
 8001132:	e0dd      	b.n	80012f0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001134:	4b14      	ldr	r3, [pc, #80]	; (8001188 <HAL_RCC_OscConfig+0x4b8>)
 8001136:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	2b00      	cmp	r3, #0
 8001140:	d1ef      	bne.n	8001122 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	69db      	ldr	r3, [r3, #28]
 8001146:	2b00      	cmp	r3, #0
 8001148:	f000 80d1 	beq.w	80012ee <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800114c:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <HAL_RCC_OscConfig+0x4b8>)
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	f003 030c 	and.w	r3, r3, #12
 8001154:	2b0c      	cmp	r3, #12
 8001156:	f000 808b 	beq.w	8001270 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	69db      	ldr	r3, [r3, #28]
 800115e:	2b02      	cmp	r3, #2
 8001160:	d15e      	bne.n	8001220 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001162:	4b09      	ldr	r3, [pc, #36]	; (8001188 <HAL_RCC_OscConfig+0x4b8>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a08      	ldr	r2, [pc, #32]	; (8001188 <HAL_RCC_OscConfig+0x4b8>)
 8001168:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800116c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800116e:	f7ff fa4f 	bl	8000610 <HAL_GetTick>
 8001172:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001174:	e00c      	b.n	8001190 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001176:	f7ff fa4b 	bl	8000610 <HAL_GetTick>
 800117a:	4602      	mov	r2, r0
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	2b02      	cmp	r3, #2
 8001182:	d905      	bls.n	8001190 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001184:	2303      	movs	r3, #3
 8001186:	e0b3      	b.n	80012f0 <HAL_RCC_OscConfig+0x620>
 8001188:	40021000 	.word	0x40021000
 800118c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001190:	4b59      	ldr	r3, [pc, #356]	; (80012f8 <HAL_RCC_OscConfig+0x628>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001198:	2b00      	cmp	r3, #0
 800119a:	d1ec      	bne.n	8001176 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800119c:	4b56      	ldr	r3, [pc, #344]	; (80012f8 <HAL_RCC_OscConfig+0x628>)
 800119e:	68da      	ldr	r2, [r3, #12]
 80011a0:	4b56      	ldr	r3, [pc, #344]	; (80012fc <HAL_RCC_OscConfig+0x62c>)
 80011a2:	4013      	ands	r3, r2
 80011a4:	687a      	ldr	r2, [r7, #4]
 80011a6:	6a11      	ldr	r1, [r2, #32]
 80011a8:	687a      	ldr	r2, [r7, #4]
 80011aa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80011ac:	3a01      	subs	r2, #1
 80011ae:	0112      	lsls	r2, r2, #4
 80011b0:	4311      	orrs	r1, r2
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80011b6:	0212      	lsls	r2, r2, #8
 80011b8:	4311      	orrs	r1, r2
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80011be:	0852      	lsrs	r2, r2, #1
 80011c0:	3a01      	subs	r2, #1
 80011c2:	0552      	lsls	r2, r2, #21
 80011c4:	4311      	orrs	r1, r2
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80011ca:	0852      	lsrs	r2, r2, #1
 80011cc:	3a01      	subs	r2, #1
 80011ce:	0652      	lsls	r2, r2, #25
 80011d0:	4311      	orrs	r1, r2
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80011d6:	06d2      	lsls	r2, r2, #27
 80011d8:	430a      	orrs	r2, r1
 80011da:	4947      	ldr	r1, [pc, #284]	; (80012f8 <HAL_RCC_OscConfig+0x628>)
 80011dc:	4313      	orrs	r3, r2
 80011de:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011e0:	4b45      	ldr	r3, [pc, #276]	; (80012f8 <HAL_RCC_OscConfig+0x628>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	4a44      	ldr	r2, [pc, #272]	; (80012f8 <HAL_RCC_OscConfig+0x628>)
 80011e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80011ea:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80011ec:	4b42      	ldr	r3, [pc, #264]	; (80012f8 <HAL_RCC_OscConfig+0x628>)
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	4a41      	ldr	r2, [pc, #260]	; (80012f8 <HAL_RCC_OscConfig+0x628>)
 80011f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80011f6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011f8:	f7ff fa0a 	bl	8000610 <HAL_GetTick>
 80011fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80011fe:	e008      	b.n	8001212 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001200:	f7ff fa06 	bl	8000610 <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	693b      	ldr	r3, [r7, #16]
 8001208:	1ad3      	subs	r3, r2, r3
 800120a:	2b02      	cmp	r3, #2
 800120c:	d901      	bls.n	8001212 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800120e:	2303      	movs	r3, #3
 8001210:	e06e      	b.n	80012f0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001212:	4b39      	ldr	r3, [pc, #228]	; (80012f8 <HAL_RCC_OscConfig+0x628>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d0f0      	beq.n	8001200 <HAL_RCC_OscConfig+0x530>
 800121e:	e066      	b.n	80012ee <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001220:	4b35      	ldr	r3, [pc, #212]	; (80012f8 <HAL_RCC_OscConfig+0x628>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a34      	ldr	r2, [pc, #208]	; (80012f8 <HAL_RCC_OscConfig+0x628>)
 8001226:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800122a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800122c:	4b32      	ldr	r3, [pc, #200]	; (80012f8 <HAL_RCC_OscConfig+0x628>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	4a31      	ldr	r2, [pc, #196]	; (80012f8 <HAL_RCC_OscConfig+0x628>)
 8001232:	f023 0303 	bic.w	r3, r3, #3
 8001236:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001238:	4b2f      	ldr	r3, [pc, #188]	; (80012f8 <HAL_RCC_OscConfig+0x628>)
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	4a2e      	ldr	r2, [pc, #184]	; (80012f8 <HAL_RCC_OscConfig+0x628>)
 800123e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001242:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001246:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001248:	f7ff f9e2 	bl	8000610 <HAL_GetTick>
 800124c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800124e:	e008      	b.n	8001262 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001250:	f7ff f9de 	bl	8000610 <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	2b02      	cmp	r3, #2
 800125c:	d901      	bls.n	8001262 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	e046      	b.n	80012f0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001262:	4b25      	ldr	r3, [pc, #148]	; (80012f8 <HAL_RCC_OscConfig+0x628>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800126a:	2b00      	cmp	r3, #0
 800126c:	d1f0      	bne.n	8001250 <HAL_RCC_OscConfig+0x580>
 800126e:	e03e      	b.n	80012ee <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	69db      	ldr	r3, [r3, #28]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d101      	bne.n	800127c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	e039      	b.n	80012f0 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800127c:	4b1e      	ldr	r3, [pc, #120]	; (80012f8 <HAL_RCC_OscConfig+0x628>)
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001282:	697b      	ldr	r3, [r7, #20]
 8001284:	f003 0203 	and.w	r2, r3, #3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6a1b      	ldr	r3, [r3, #32]
 800128c:	429a      	cmp	r2, r3
 800128e:	d12c      	bne.n	80012ea <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800129a:	3b01      	subs	r3, #1
 800129c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800129e:	429a      	cmp	r2, r3
 80012a0:	d123      	bne.n	80012ea <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ac:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d11b      	bne.n	80012ea <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80012b2:	697b      	ldr	r3, [r7, #20]
 80012b4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012bc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80012be:	429a      	cmp	r2, r3
 80012c0:	d113      	bne.n	80012ea <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012cc:	085b      	lsrs	r3, r3, #1
 80012ce:	3b01      	subs	r3, #1
 80012d0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80012d2:	429a      	cmp	r2, r3
 80012d4:	d109      	bne.n	80012ea <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012e0:	085b      	lsrs	r3, r3, #1
 80012e2:	3b01      	subs	r3, #1
 80012e4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d001      	beq.n	80012ee <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e000      	b.n	80012f0 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80012ee:	2300      	movs	r3, #0
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3720      	adds	r7, #32
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40021000 	.word	0x40021000
 80012fc:	019f800c 	.word	0x019f800c

08001300 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800130a:	2300      	movs	r3, #0
 800130c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d101      	bne.n	8001318 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e11e      	b.n	8001556 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001318:	4b91      	ldr	r3, [pc, #580]	; (8001560 <HAL_RCC_ClockConfig+0x260>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 030f 	and.w	r3, r3, #15
 8001320:	683a      	ldr	r2, [r7, #0]
 8001322:	429a      	cmp	r2, r3
 8001324:	d910      	bls.n	8001348 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001326:	4b8e      	ldr	r3, [pc, #568]	; (8001560 <HAL_RCC_ClockConfig+0x260>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f023 020f 	bic.w	r2, r3, #15
 800132e:	498c      	ldr	r1, [pc, #560]	; (8001560 <HAL_RCC_ClockConfig+0x260>)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	4313      	orrs	r3, r2
 8001334:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001336:	4b8a      	ldr	r3, [pc, #552]	; (8001560 <HAL_RCC_ClockConfig+0x260>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 030f 	and.w	r3, r3, #15
 800133e:	683a      	ldr	r2, [r7, #0]
 8001340:	429a      	cmp	r2, r3
 8001342:	d001      	beq.n	8001348 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	e106      	b.n	8001556 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 0301 	and.w	r3, r3, #1
 8001350:	2b00      	cmp	r3, #0
 8001352:	d073      	beq.n	800143c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	2b03      	cmp	r3, #3
 800135a:	d129      	bne.n	80013b0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800135c:	4b81      	ldr	r3, [pc, #516]	; (8001564 <HAL_RCC_ClockConfig+0x264>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d101      	bne.n	800136c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	e0f4      	b.n	8001556 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800136c:	f000 f966 	bl	800163c <RCC_GetSysClockFreqFromPLLSource>
 8001370:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001372:	693b      	ldr	r3, [r7, #16]
 8001374:	4a7c      	ldr	r2, [pc, #496]	; (8001568 <HAL_RCC_ClockConfig+0x268>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d93f      	bls.n	80013fa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800137a:	4b7a      	ldr	r3, [pc, #488]	; (8001564 <HAL_RCC_ClockConfig+0x264>)
 800137c:	689b      	ldr	r3, [r3, #8]
 800137e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d009      	beq.n	800139a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800138e:	2b00      	cmp	r3, #0
 8001390:	d033      	beq.n	80013fa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001396:	2b00      	cmp	r3, #0
 8001398:	d12f      	bne.n	80013fa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800139a:	4b72      	ldr	r3, [pc, #456]	; (8001564 <HAL_RCC_ClockConfig+0x264>)
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80013a2:	4a70      	ldr	r2, [pc, #448]	; (8001564 <HAL_RCC_ClockConfig+0x264>)
 80013a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013a8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80013aa:	2380      	movs	r3, #128	; 0x80
 80013ac:	617b      	str	r3, [r7, #20]
 80013ae:	e024      	b.n	80013fa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d107      	bne.n	80013c8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80013b8:	4b6a      	ldr	r3, [pc, #424]	; (8001564 <HAL_RCC_ClockConfig+0x264>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d109      	bne.n	80013d8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e0c6      	b.n	8001556 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013c8:	4b66      	ldr	r3, [pc, #408]	; (8001564 <HAL_RCC_ClockConfig+0x264>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d101      	bne.n	80013d8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	e0be      	b.n	8001556 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80013d8:	f000 f8ce 	bl	8001578 <HAL_RCC_GetSysClockFreq>
 80013dc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	4a61      	ldr	r2, [pc, #388]	; (8001568 <HAL_RCC_ClockConfig+0x268>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d909      	bls.n	80013fa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80013e6:	4b5f      	ldr	r3, [pc, #380]	; (8001564 <HAL_RCC_ClockConfig+0x264>)
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80013ee:	4a5d      	ldr	r2, [pc, #372]	; (8001564 <HAL_RCC_ClockConfig+0x264>)
 80013f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013f4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80013f6:	2380      	movs	r3, #128	; 0x80
 80013f8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80013fa:	4b5a      	ldr	r3, [pc, #360]	; (8001564 <HAL_RCC_ClockConfig+0x264>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	f023 0203 	bic.w	r2, r3, #3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	4957      	ldr	r1, [pc, #348]	; (8001564 <HAL_RCC_ClockConfig+0x264>)
 8001408:	4313      	orrs	r3, r2
 800140a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800140c:	f7ff f900 	bl	8000610 <HAL_GetTick>
 8001410:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001412:	e00a      	b.n	800142a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001414:	f7ff f8fc 	bl	8000610 <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001422:	4293      	cmp	r3, r2
 8001424:	d901      	bls.n	800142a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e095      	b.n	8001556 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800142a:	4b4e      	ldr	r3, [pc, #312]	; (8001564 <HAL_RCC_ClockConfig+0x264>)
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	f003 020c 	and.w	r2, r3, #12
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	429a      	cmp	r2, r3
 800143a:	d1eb      	bne.n	8001414 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0302 	and.w	r3, r3, #2
 8001444:	2b00      	cmp	r3, #0
 8001446:	d023      	beq.n	8001490 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	f003 0304 	and.w	r3, r3, #4
 8001450:	2b00      	cmp	r3, #0
 8001452:	d005      	beq.n	8001460 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001454:	4b43      	ldr	r3, [pc, #268]	; (8001564 <HAL_RCC_ClockConfig+0x264>)
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	4a42      	ldr	r2, [pc, #264]	; (8001564 <HAL_RCC_ClockConfig+0x264>)
 800145a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800145e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0308 	and.w	r3, r3, #8
 8001468:	2b00      	cmp	r3, #0
 800146a:	d007      	beq.n	800147c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800146c:	4b3d      	ldr	r3, [pc, #244]	; (8001564 <HAL_RCC_ClockConfig+0x264>)
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001474:	4a3b      	ldr	r2, [pc, #236]	; (8001564 <HAL_RCC_ClockConfig+0x264>)
 8001476:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800147a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800147c:	4b39      	ldr	r3, [pc, #228]	; (8001564 <HAL_RCC_ClockConfig+0x264>)
 800147e:	689b      	ldr	r3, [r3, #8]
 8001480:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	4936      	ldr	r1, [pc, #216]	; (8001564 <HAL_RCC_ClockConfig+0x264>)
 800148a:	4313      	orrs	r3, r2
 800148c:	608b      	str	r3, [r1, #8]
 800148e:	e008      	b.n	80014a2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	2b80      	cmp	r3, #128	; 0x80
 8001494:	d105      	bne.n	80014a2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001496:	4b33      	ldr	r3, [pc, #204]	; (8001564 <HAL_RCC_ClockConfig+0x264>)
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	4a32      	ldr	r2, [pc, #200]	; (8001564 <HAL_RCC_ClockConfig+0x264>)
 800149c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80014a0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014a2:	4b2f      	ldr	r3, [pc, #188]	; (8001560 <HAL_RCC_ClockConfig+0x260>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 030f 	and.w	r3, r3, #15
 80014aa:	683a      	ldr	r2, [r7, #0]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d21d      	bcs.n	80014ec <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014b0:	4b2b      	ldr	r3, [pc, #172]	; (8001560 <HAL_RCC_ClockConfig+0x260>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f023 020f 	bic.w	r2, r3, #15
 80014b8:	4929      	ldr	r1, [pc, #164]	; (8001560 <HAL_RCC_ClockConfig+0x260>)
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	4313      	orrs	r3, r2
 80014be:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80014c0:	f7ff f8a6 	bl	8000610 <HAL_GetTick>
 80014c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014c6:	e00a      	b.n	80014de <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014c8:	f7ff f8a2 	bl	8000610 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d901      	bls.n	80014de <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e03b      	b.n	8001556 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014de:	4b20      	ldr	r3, [pc, #128]	; (8001560 <HAL_RCC_ClockConfig+0x260>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 030f 	and.w	r3, r3, #15
 80014e6:	683a      	ldr	r2, [r7, #0]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d1ed      	bne.n	80014c8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0304 	and.w	r3, r3, #4
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d008      	beq.n	800150a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014f8:	4b1a      	ldr	r3, [pc, #104]	; (8001564 <HAL_RCC_ClockConfig+0x264>)
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	68db      	ldr	r3, [r3, #12]
 8001504:	4917      	ldr	r1, [pc, #92]	; (8001564 <HAL_RCC_ClockConfig+0x264>)
 8001506:	4313      	orrs	r3, r2
 8001508:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0308 	and.w	r3, r3, #8
 8001512:	2b00      	cmp	r3, #0
 8001514:	d009      	beq.n	800152a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001516:	4b13      	ldr	r3, [pc, #76]	; (8001564 <HAL_RCC_ClockConfig+0x264>)
 8001518:	689b      	ldr	r3, [r3, #8]
 800151a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	691b      	ldr	r3, [r3, #16]
 8001522:	00db      	lsls	r3, r3, #3
 8001524:	490f      	ldr	r1, [pc, #60]	; (8001564 <HAL_RCC_ClockConfig+0x264>)
 8001526:	4313      	orrs	r3, r2
 8001528:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800152a:	f000 f825 	bl	8001578 <HAL_RCC_GetSysClockFreq>
 800152e:	4602      	mov	r2, r0
 8001530:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <HAL_RCC_ClockConfig+0x264>)
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	091b      	lsrs	r3, r3, #4
 8001536:	f003 030f 	and.w	r3, r3, #15
 800153a:	490c      	ldr	r1, [pc, #48]	; (800156c <HAL_RCC_ClockConfig+0x26c>)
 800153c:	5ccb      	ldrb	r3, [r1, r3]
 800153e:	f003 031f 	and.w	r3, r3, #31
 8001542:	fa22 f303 	lsr.w	r3, r2, r3
 8001546:	4a0a      	ldr	r2, [pc, #40]	; (8001570 <HAL_RCC_ClockConfig+0x270>)
 8001548:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800154a:	4b0a      	ldr	r3, [pc, #40]	; (8001574 <HAL_RCC_ClockConfig+0x274>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4618      	mov	r0, r3
 8001550:	f7ff f812 	bl	8000578 <HAL_InitTick>
 8001554:	4603      	mov	r3, r0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3718      	adds	r7, #24
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40022000 	.word	0x40022000
 8001564:	40021000 	.word	0x40021000
 8001568:	04c4b400 	.word	0x04c4b400
 800156c:	08002ab4 	.word	0x08002ab4
 8001570:	20000000 	.word	0x20000000
 8001574:	20000004 	.word	0x20000004

08001578 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001578:	b480      	push	{r7}
 800157a:	b087      	sub	sp, #28
 800157c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800157e:	4b2c      	ldr	r3, [pc, #176]	; (8001630 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001580:	689b      	ldr	r3, [r3, #8]
 8001582:	f003 030c 	and.w	r3, r3, #12
 8001586:	2b04      	cmp	r3, #4
 8001588:	d102      	bne.n	8001590 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800158a:	4b2a      	ldr	r3, [pc, #168]	; (8001634 <HAL_RCC_GetSysClockFreq+0xbc>)
 800158c:	613b      	str	r3, [r7, #16]
 800158e:	e047      	b.n	8001620 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001590:	4b27      	ldr	r3, [pc, #156]	; (8001630 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	f003 030c 	and.w	r3, r3, #12
 8001598:	2b08      	cmp	r3, #8
 800159a:	d102      	bne.n	80015a2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800159c:	4b26      	ldr	r3, [pc, #152]	; (8001638 <HAL_RCC_GetSysClockFreq+0xc0>)
 800159e:	613b      	str	r3, [r7, #16]
 80015a0:	e03e      	b.n	8001620 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80015a2:	4b23      	ldr	r3, [pc, #140]	; (8001630 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015a4:	689b      	ldr	r3, [r3, #8]
 80015a6:	f003 030c 	and.w	r3, r3, #12
 80015aa:	2b0c      	cmp	r3, #12
 80015ac:	d136      	bne.n	800161c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80015ae:	4b20      	ldr	r3, [pc, #128]	; (8001630 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015b0:	68db      	ldr	r3, [r3, #12]
 80015b2:	f003 0303 	and.w	r3, r3, #3
 80015b6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80015b8:	4b1d      	ldr	r3, [pc, #116]	; (8001630 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	091b      	lsrs	r3, r3, #4
 80015be:	f003 030f 	and.w	r3, r3, #15
 80015c2:	3301      	adds	r3, #1
 80015c4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	2b03      	cmp	r3, #3
 80015ca:	d10c      	bne.n	80015e6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80015cc:	4a1a      	ldr	r2, [pc, #104]	; (8001638 <HAL_RCC_GetSysClockFreq+0xc0>)
 80015ce:	68bb      	ldr	r3, [r7, #8]
 80015d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80015d4:	4a16      	ldr	r2, [pc, #88]	; (8001630 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015d6:	68d2      	ldr	r2, [r2, #12]
 80015d8:	0a12      	lsrs	r2, r2, #8
 80015da:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80015de:	fb02 f303 	mul.w	r3, r2, r3
 80015e2:	617b      	str	r3, [r7, #20]
      break;
 80015e4:	e00c      	b.n	8001600 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80015e6:	4a13      	ldr	r2, [pc, #76]	; (8001634 <HAL_RCC_GetSysClockFreq+0xbc>)
 80015e8:	68bb      	ldr	r3, [r7, #8]
 80015ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80015ee:	4a10      	ldr	r2, [pc, #64]	; (8001630 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015f0:	68d2      	ldr	r2, [r2, #12]
 80015f2:	0a12      	lsrs	r2, r2, #8
 80015f4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80015f8:	fb02 f303 	mul.w	r3, r2, r3
 80015fc:	617b      	str	r3, [r7, #20]
      break;
 80015fe:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001600:	4b0b      	ldr	r3, [pc, #44]	; (8001630 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001602:	68db      	ldr	r3, [r3, #12]
 8001604:	0e5b      	lsrs	r3, r3, #25
 8001606:	f003 0303 	and.w	r3, r3, #3
 800160a:	3301      	adds	r3, #1
 800160c:	005b      	lsls	r3, r3, #1
 800160e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001610:	697a      	ldr	r2, [r7, #20]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	fbb2 f3f3 	udiv	r3, r2, r3
 8001618:	613b      	str	r3, [r7, #16]
 800161a:	e001      	b.n	8001620 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800161c:	2300      	movs	r3, #0
 800161e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001620:	693b      	ldr	r3, [r7, #16]
}
 8001622:	4618      	mov	r0, r3
 8001624:	371c      	adds	r7, #28
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
 800162e:	bf00      	nop
 8001630:	40021000 	.word	0x40021000
 8001634:	00f42400 	.word	0x00f42400
 8001638:	016e3600 	.word	0x016e3600

0800163c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800163c:	b480      	push	{r7}
 800163e:	b087      	sub	sp, #28
 8001640:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001642:	4b1e      	ldr	r3, [pc, #120]	; (80016bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001644:	68db      	ldr	r3, [r3, #12]
 8001646:	f003 0303 	and.w	r3, r3, #3
 800164a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800164c:	4b1b      	ldr	r3, [pc, #108]	; (80016bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800164e:	68db      	ldr	r3, [r3, #12]
 8001650:	091b      	lsrs	r3, r3, #4
 8001652:	f003 030f 	and.w	r3, r3, #15
 8001656:	3301      	adds	r3, #1
 8001658:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	2b03      	cmp	r3, #3
 800165e:	d10c      	bne.n	800167a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001660:	4a17      	ldr	r2, [pc, #92]	; (80016c0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	fbb2 f3f3 	udiv	r3, r2, r3
 8001668:	4a14      	ldr	r2, [pc, #80]	; (80016bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800166a:	68d2      	ldr	r2, [r2, #12]
 800166c:	0a12      	lsrs	r2, r2, #8
 800166e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001672:	fb02 f303 	mul.w	r3, r2, r3
 8001676:	617b      	str	r3, [r7, #20]
    break;
 8001678:	e00c      	b.n	8001694 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800167a:	4a12      	ldr	r2, [pc, #72]	; (80016c4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001682:	4a0e      	ldr	r2, [pc, #56]	; (80016bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001684:	68d2      	ldr	r2, [r2, #12]
 8001686:	0a12      	lsrs	r2, r2, #8
 8001688:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800168c:	fb02 f303 	mul.w	r3, r2, r3
 8001690:	617b      	str	r3, [r7, #20]
    break;
 8001692:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001694:	4b09      	ldr	r3, [pc, #36]	; (80016bc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	0e5b      	lsrs	r3, r3, #25
 800169a:	f003 0303 	and.w	r3, r3, #3
 800169e:	3301      	adds	r3, #1
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80016a4:	697a      	ldr	r2, [r7, #20]
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ac:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80016ae:	687b      	ldr	r3, [r7, #4]
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	371c      	adds	r7, #28
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr
 80016bc:	40021000 	.word	0x40021000
 80016c0:	016e3600 	.word	0x016e3600
 80016c4:	00f42400 	.word	0x00f42400

080016c8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	4603      	mov	r3, r0
 80016d0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80016d2:	2300      	movs	r3, #0
 80016d4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80016d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016da:	2b84      	cmp	r3, #132	; 0x84
 80016dc:	d005      	beq.n	80016ea <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80016de:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	4413      	add	r3, r2
 80016e6:	3303      	adds	r3, #3
 80016e8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80016ea:	68fb      	ldr	r3, [r7, #12]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3714      	adds	r7, #20
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80016fc:	f000 fa58 	bl	8001bb0 <vTaskStartScheduler>
  
  return osOK;
 8001700:	2300      	movs	r3, #0
}
 8001702:	4618      	mov	r0, r3
 8001704:	bd80      	pop	{r7, pc}

08001706 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001706:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001708:	b087      	sub	sp, #28
 800170a:	af02      	add	r7, sp, #8
 800170c:	6078      	str	r0, [r7, #4]
 800170e:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	685c      	ldr	r4, [r3, #4]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800171c:	b29e      	uxth	r6, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001724:	4618      	mov	r0, r3
 8001726:	f7ff ffcf 	bl	80016c8 <makeFreeRtosPriority>
 800172a:	4602      	mov	r2, r0
 800172c:	f107 030c 	add.w	r3, r7, #12
 8001730:	9301      	str	r3, [sp, #4]
 8001732:	9200      	str	r2, [sp, #0]
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	4632      	mov	r2, r6
 8001738:	4629      	mov	r1, r5
 800173a:	4620      	mov	r0, r4
 800173c:	f000 f8d2 	bl	80018e4 <xTaskCreate>
 8001740:	4603      	mov	r3, r0
 8001742:	2b01      	cmp	r3, #1
 8001744:	d001      	beq.n	800174a <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8001746:	2300      	movs	r3, #0
 8001748:	e000      	b.n	800174c <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800174a:	68fb      	ldr	r3, [r7, #12]
}
 800174c:	4618      	mov	r0, r3
 800174e:	3714      	adds	r7, #20
 8001750:	46bd      	mov	sp, r7
 8001752:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001754 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <osDelay+0x16>
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	e000      	b.n	800176c <osDelay+0x18>
 800176a:	2301      	movs	r3, #1
 800176c:	4618      	mov	r0, r3
 800176e:	f000 f9eb 	bl	8001b48 <vTaskDelay>
  
  return osOK;
 8001772:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001774:	4618      	mov	r0, r3
 8001776:	3710      	adds	r7, #16
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f103 0208 	add.w	r2, r3, #8
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	f04f 32ff 	mov.w	r2, #4294967295
 8001794:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	f103 0208 	add.w	r2, r3, #8
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f103 0208 	add.w	r2, r3, #8
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr

080017bc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	2200      	movs	r2, #0
 80017c8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80017ca:	bf00      	nop
 80017cc:	370c      	adds	r7, #12
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr

080017d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80017d6:	b480      	push	{r7}
 80017d8:	b085      	sub	sp, #20
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
 80017de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	68fa      	ldr	r2, [r7, #12]
 80017ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	689a      	ldr	r2, [r3, #8]
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	683a      	ldr	r2, [r7, #0]
 80017fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	683a      	ldr	r2, [r7, #0]
 8001800:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	1c5a      	adds	r2, r3, #1
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	601a      	str	r2, [r3, #0]
}
 8001812:	bf00      	nop
 8001814:	3714      	adds	r7, #20
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800181e:	b480      	push	{r7}
 8001820:	b085      	sub	sp, #20
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
 8001826:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001834:	d103      	bne.n	800183e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	691b      	ldr	r3, [r3, #16]
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	e00c      	b.n	8001858 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	3308      	adds	r3, #8
 8001842:	60fb      	str	r3, [r7, #12]
 8001844:	e002      	b.n	800184c <vListInsert+0x2e>
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	68ba      	ldr	r2, [r7, #8]
 8001854:	429a      	cmp	r2, r3
 8001856:	d2f6      	bcs.n	8001846 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	685a      	ldr	r2, [r3, #4]
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	68fa      	ldr	r2, [r7, #12]
 800186c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	1c5a      	adds	r2, r3, #1
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	601a      	str	r2, [r3, #0]
}
 8001884:	bf00      	nop
 8001886:	3714      	adds	r7, #20
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	691b      	ldr	r3, [r3, #16]
 800189c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	6892      	ldr	r2, [r2, #8]
 80018a6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	687a      	ldr	r2, [r7, #4]
 80018ae:	6852      	ldr	r2, [r2, #4]
 80018b0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d103      	bne.n	80018c4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689a      	ldr	r2, [r3, #8]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	1e5a      	subs	r2, r3, #1
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681b      	ldr	r3, [r3, #0]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3714      	adds	r7, #20
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b08c      	sub	sp, #48	; 0x30
 80018e8:	af04      	add	r7, sp, #16
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	603b      	str	r3, [r7, #0]
 80018f0:	4613      	mov	r3, r2
 80018f2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80018f4:	88fb      	ldrh	r3, [r7, #6]
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	4618      	mov	r0, r3
 80018fa:	f000 fea5 	bl	8002648 <pvPortMalloc>
 80018fe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d00e      	beq.n	8001924 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001906:	2054      	movs	r0, #84	; 0x54
 8001908:	f000 fe9e 	bl	8002648 <pvPortMalloc>
 800190c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d003      	beq.n	800191c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	697a      	ldr	r2, [r7, #20]
 8001918:	631a      	str	r2, [r3, #48]	; 0x30
 800191a:	e005      	b.n	8001928 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800191c:	6978      	ldr	r0, [r7, #20]
 800191e:	f000 ff5f 	bl	80027e0 <vPortFree>
 8001922:	e001      	b.n	8001928 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001924:	2300      	movs	r3, #0
 8001926:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d013      	beq.n	8001956 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800192e:	88fa      	ldrh	r2, [r7, #6]
 8001930:	2300      	movs	r3, #0
 8001932:	9303      	str	r3, [sp, #12]
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	9302      	str	r3, [sp, #8]
 8001938:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800193a:	9301      	str	r3, [sp, #4]
 800193c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800193e:	9300      	str	r3, [sp, #0]
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	68b9      	ldr	r1, [r7, #8]
 8001944:	68f8      	ldr	r0, [r7, #12]
 8001946:	f000 f80e 	bl	8001966 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800194a:	69f8      	ldr	r0, [r7, #28]
 800194c:	f000 f892 	bl	8001a74 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001950:	2301      	movs	r3, #1
 8001952:	61bb      	str	r3, [r7, #24]
 8001954:	e002      	b.n	800195c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001956:	f04f 33ff 	mov.w	r3, #4294967295
 800195a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800195c:	69bb      	ldr	r3, [r7, #24]
	}
 800195e:	4618      	mov	r0, r3
 8001960:	3720      	adds	r7, #32
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}

08001966 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001966:	b580      	push	{r7, lr}
 8001968:	b088      	sub	sp, #32
 800196a:	af00      	add	r7, sp, #0
 800196c:	60f8      	str	r0, [r7, #12]
 800196e:	60b9      	str	r1, [r7, #8]
 8001970:	607a      	str	r2, [r7, #4]
 8001972:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001976:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800197e:	3b01      	subs	r3, #1
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	4413      	add	r3, r2
 8001984:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	f023 0307 	bic.w	r3, r3, #7
 800198c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	f003 0307 	and.w	r3, r3, #7
 8001994:	2b00      	cmp	r3, #0
 8001996:	d00a      	beq.n	80019ae <prvInitialiseNewTask+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800199c:	f383 8811 	msr	BASEPRI, r3
 80019a0:	f3bf 8f6f 	isb	sy
 80019a4:	f3bf 8f4f 	dsb	sy
 80019a8:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80019aa:	bf00      	nop
 80019ac:	e7fe      	b.n	80019ac <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d01f      	beq.n	80019f4 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80019b4:	2300      	movs	r3, #0
 80019b6:	61fb      	str	r3, [r7, #28]
 80019b8:	e012      	b.n	80019e0 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80019ba:	68ba      	ldr	r2, [r7, #8]
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	4413      	add	r3, r2
 80019c0:	7819      	ldrb	r1, [r3, #0]
 80019c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	4413      	add	r3, r2
 80019c8:	3334      	adds	r3, #52	; 0x34
 80019ca:	460a      	mov	r2, r1
 80019cc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80019ce:	68ba      	ldr	r2, [r7, #8]
 80019d0:	69fb      	ldr	r3, [r7, #28]
 80019d2:	4413      	add	r3, r2
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d006      	beq.n	80019e8 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	3301      	adds	r3, #1
 80019de:	61fb      	str	r3, [r7, #28]
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	2b0f      	cmp	r3, #15
 80019e4:	d9e9      	bls.n	80019ba <prvInitialiseNewTask+0x54>
 80019e6:	e000      	b.n	80019ea <prvInitialiseNewTask+0x84>
			{
				break;
 80019e8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80019ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019ec:	2200      	movs	r2, #0
 80019ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80019f2:	e003      	b.n	80019fc <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80019f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80019f6:	2200      	movs	r2, #0
 80019f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80019fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019fe:	2b06      	cmp	r3, #6
 8001a00:	d901      	bls.n	8001a06 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001a02:	2306      	movs	r3, #6
 8001a04:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a0a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a10:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001a12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a14:	2200      	movs	r2, #0
 8001a16:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a1a:	3304      	adds	r3, #4
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff fecd 	bl	80017bc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a24:	3318      	adds	r3, #24
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7ff fec8 	bl	80017bc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a30:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a34:	f1c3 0207 	rsb	r2, r3, #7
 8001a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a3a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a40:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a44:	2200      	movs	r2, #0
 8001a46:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001a50:	683a      	ldr	r2, [r7, #0]
 8001a52:	68f9      	ldr	r1, [r7, #12]
 8001a54:	69b8      	ldr	r0, [r7, #24]
 8001a56:	f000 fbeb 	bl	8002230 <pxPortInitialiseStack>
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a5e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8001a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d002      	beq.n	8001a6c <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a6a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001a6c:	bf00      	nop
 8001a6e:	3720      	adds	r7, #32
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}

08001a74 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001a7c:	f000 fd02 	bl	8002484 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001a80:	4b2a      	ldr	r3, [pc, #168]	; (8001b2c <prvAddNewTaskToReadyList+0xb8>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	3301      	adds	r3, #1
 8001a86:	4a29      	ldr	r2, [pc, #164]	; (8001b2c <prvAddNewTaskToReadyList+0xb8>)
 8001a88:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001a8a:	4b29      	ldr	r3, [pc, #164]	; (8001b30 <prvAddNewTaskToReadyList+0xbc>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d109      	bne.n	8001aa6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001a92:	4a27      	ldr	r2, [pc, #156]	; (8001b30 <prvAddNewTaskToReadyList+0xbc>)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001a98:	4b24      	ldr	r3, [pc, #144]	; (8001b2c <prvAddNewTaskToReadyList+0xb8>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d110      	bne.n	8001ac2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001aa0:	f000 faa4 	bl	8001fec <prvInitialiseTaskLists>
 8001aa4:	e00d      	b.n	8001ac2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001aa6:	4b23      	ldr	r3, [pc, #140]	; (8001b34 <prvAddNewTaskToReadyList+0xc0>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d109      	bne.n	8001ac2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001aae:	4b20      	ldr	r3, [pc, #128]	; (8001b30 <prvAddNewTaskToReadyList+0xbc>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d802      	bhi.n	8001ac2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001abc:	4a1c      	ldr	r2, [pc, #112]	; (8001b30 <prvAddNewTaskToReadyList+0xbc>)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001ac2:	4b1d      	ldr	r3, [pc, #116]	; (8001b38 <prvAddNewTaskToReadyList+0xc4>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	4a1b      	ldr	r2, [pc, #108]	; (8001b38 <prvAddNewTaskToReadyList+0xc4>)
 8001aca:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	409a      	lsls	r2, r3
 8001ad4:	4b19      	ldr	r3, [pc, #100]	; (8001b3c <prvAddNewTaskToReadyList+0xc8>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	4a18      	ldr	r2, [pc, #96]	; (8001b3c <prvAddNewTaskToReadyList+0xc8>)
 8001adc:	6013      	str	r3, [r2, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	4413      	add	r3, r2
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	4a15      	ldr	r2, [pc, #84]	; (8001b40 <prvAddNewTaskToReadyList+0xcc>)
 8001aec:	441a      	add	r2, r3
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	3304      	adds	r3, #4
 8001af2:	4619      	mov	r1, r3
 8001af4:	4610      	mov	r0, r2
 8001af6:	f7ff fe6e 	bl	80017d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001afa:	f000 fcf3 	bl	80024e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001afe:	4b0d      	ldr	r3, [pc, #52]	; (8001b34 <prvAddNewTaskToReadyList+0xc0>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d00e      	beq.n	8001b24 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001b06:	4b0a      	ldr	r3, [pc, #40]	; (8001b30 <prvAddNewTaskToReadyList+0xbc>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d207      	bcs.n	8001b24 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001b14:	4b0b      	ldr	r3, [pc, #44]	; (8001b44 <prvAddNewTaskToReadyList+0xd0>)
 8001b16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b1a:	601a      	str	r2, [r3, #0]
 8001b1c:	f3bf 8f4f 	dsb	sy
 8001b20:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001b24:	bf00      	nop
 8001b26:	3708      	adds	r7, #8
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bd80      	pop	{r7, pc}
 8001b2c:	20000134 	.word	0x20000134
 8001b30:	20000034 	.word	0x20000034
 8001b34:	20000140 	.word	0x20000140
 8001b38:	20000150 	.word	0x20000150
 8001b3c:	2000013c 	.word	0x2000013c
 8001b40:	20000038 	.word	0x20000038
 8001b44:	e000ed04 	.word	0xe000ed04

08001b48 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8001b50:	2300      	movs	r3, #0
 8001b52:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d017      	beq.n	8001b8a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8001b5a:	4b13      	ldr	r3, [pc, #76]	; (8001ba8 <vTaskDelay+0x60>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d00a      	beq.n	8001b78 <vTaskDelay+0x30>
	__asm volatile
 8001b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b66:	f383 8811 	msr	BASEPRI, r3
 8001b6a:	f3bf 8f6f 	isb	sy
 8001b6e:	f3bf 8f4f 	dsb	sy
 8001b72:	60bb      	str	r3, [r7, #8]
}
 8001b74:	bf00      	nop
 8001b76:	e7fe      	b.n	8001b76 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8001b78:	f000 f862 	bl	8001c40 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f000 faf0 	bl	8002164 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8001b84:	f000 f86a 	bl	8001c5c <xTaskResumeAll>
 8001b88:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d107      	bne.n	8001ba0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8001b90:	4b06      	ldr	r3, [pc, #24]	; (8001bac <vTaskDelay+0x64>)
 8001b92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	f3bf 8f4f 	dsb	sy
 8001b9c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001ba0:	bf00      	nop
 8001ba2:	3710      	adds	r7, #16
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	2000015c 	.word	0x2000015c
 8001bac:	e000ed04 	.word	0xe000ed04

08001bb0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b086      	sub	sp, #24
 8001bb4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8001bb6:	4b1c      	ldr	r3, [pc, #112]	; (8001c28 <vTaskStartScheduler+0x78>)
 8001bb8:	9301      	str	r3, [sp, #4]
 8001bba:	2300      	movs	r3, #0
 8001bbc:	9300      	str	r3, [sp, #0]
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	2280      	movs	r2, #128	; 0x80
 8001bc2:	491a      	ldr	r1, [pc, #104]	; (8001c2c <vTaskStartScheduler+0x7c>)
 8001bc4:	481a      	ldr	r0, [pc, #104]	; (8001c30 <vTaskStartScheduler+0x80>)
 8001bc6:	f7ff fe8d 	bl	80018e4 <xTaskCreate>
 8001bca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d116      	bne.n	8001c00 <vTaskStartScheduler+0x50>
	__asm volatile
 8001bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bd6:	f383 8811 	msr	BASEPRI, r3
 8001bda:	f3bf 8f6f 	isb	sy
 8001bde:	f3bf 8f4f 	dsb	sy
 8001be2:	60bb      	str	r3, [r7, #8]
}
 8001be4:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001be6:	4b13      	ldr	r3, [pc, #76]	; (8001c34 <vTaskStartScheduler+0x84>)
 8001be8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001bee:	4b12      	ldr	r3, [pc, #72]	; (8001c38 <vTaskStartScheduler+0x88>)
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001bf4:	4b11      	ldr	r3, [pc, #68]	; (8001c3c <vTaskStartScheduler+0x8c>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8001bfa:	f000 fba1 	bl	8002340 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8001bfe:	e00e      	b.n	8001c1e <vTaskStartScheduler+0x6e>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c06:	d10a      	bne.n	8001c1e <vTaskStartScheduler+0x6e>
	__asm volatile
 8001c08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c0c:	f383 8811 	msr	BASEPRI, r3
 8001c10:	f3bf 8f6f 	isb	sy
 8001c14:	f3bf 8f4f 	dsb	sy
 8001c18:	607b      	str	r3, [r7, #4]
}
 8001c1a:	bf00      	nop
 8001c1c:	e7fe      	b.n	8001c1c <vTaskStartScheduler+0x6c>
}
 8001c1e:	bf00      	nop
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	20000158 	.word	0x20000158
 8001c2c:	08002aac 	.word	0x08002aac
 8001c30:	08001fbd 	.word	0x08001fbd
 8001c34:	20000154 	.word	0x20000154
 8001c38:	20000140 	.word	0x20000140
 8001c3c:	20000138 	.word	0x20000138

08001c40 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8001c44:	4b04      	ldr	r3, [pc, #16]	; (8001c58 <vTaskSuspendAll+0x18>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	3301      	adds	r3, #1
 8001c4a:	4a03      	ldr	r2, [pc, #12]	; (8001c58 <vTaskSuspendAll+0x18>)
 8001c4c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8001c4e:	bf00      	nop
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	2000015c 	.word	0x2000015c

08001c5c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8001c62:	2300      	movs	r3, #0
 8001c64:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8001c66:	2300      	movs	r3, #0
 8001c68:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001c6a:	4b41      	ldr	r3, [pc, #260]	; (8001d70 <xTaskResumeAll+0x114>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d10a      	bne.n	8001c88 <xTaskResumeAll+0x2c>
	__asm volatile
 8001c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001c76:	f383 8811 	msr	BASEPRI, r3
 8001c7a:	f3bf 8f6f 	isb	sy
 8001c7e:	f3bf 8f4f 	dsb	sy
 8001c82:	603b      	str	r3, [r7, #0]
}
 8001c84:	bf00      	nop
 8001c86:	e7fe      	b.n	8001c86 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8001c88:	f000 fbfc 	bl	8002484 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001c8c:	4b38      	ldr	r3, [pc, #224]	; (8001d70 <xTaskResumeAll+0x114>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	3b01      	subs	r3, #1
 8001c92:	4a37      	ldr	r2, [pc, #220]	; (8001d70 <xTaskResumeAll+0x114>)
 8001c94:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001c96:	4b36      	ldr	r3, [pc, #216]	; (8001d70 <xTaskResumeAll+0x114>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d161      	bne.n	8001d62 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001c9e:	4b35      	ldr	r3, [pc, #212]	; (8001d74 <xTaskResumeAll+0x118>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d05d      	beq.n	8001d62 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001ca6:	e02e      	b.n	8001d06 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001ca8:	4b33      	ldr	r3, [pc, #204]	; (8001d78 <xTaskResumeAll+0x11c>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	3318      	adds	r3, #24
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff fdeb 	bl	8001890 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	3304      	adds	r3, #4
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff fde6 	bl	8001890 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cc8:	2201      	movs	r2, #1
 8001cca:	409a      	lsls	r2, r3
 8001ccc:	4b2b      	ldr	r3, [pc, #172]	; (8001d7c <xTaskResumeAll+0x120>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	4a2a      	ldr	r2, [pc, #168]	; (8001d7c <xTaskResumeAll+0x120>)
 8001cd4:	6013      	str	r3, [r2, #0]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cda:	4613      	mov	r3, r2
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	4413      	add	r3, r2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	4a27      	ldr	r2, [pc, #156]	; (8001d80 <xTaskResumeAll+0x124>)
 8001ce4:	441a      	add	r2, r3
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	3304      	adds	r3, #4
 8001cea:	4619      	mov	r1, r3
 8001cec:	4610      	mov	r0, r2
 8001cee:	f7ff fd72 	bl	80017d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cf6:	4b23      	ldr	r3, [pc, #140]	; (8001d84 <xTaskResumeAll+0x128>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d302      	bcc.n	8001d06 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8001d00:	4b21      	ldr	r3, [pc, #132]	; (8001d88 <xTaskResumeAll+0x12c>)
 8001d02:	2201      	movs	r2, #1
 8001d04:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001d06:	4b1c      	ldr	r3, [pc, #112]	; (8001d78 <xTaskResumeAll+0x11c>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d1cc      	bne.n	8001ca8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d001      	beq.n	8001d18 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8001d14:	f000 f9e8 	bl	80020e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001d18:	4b1c      	ldr	r3, [pc, #112]	; (8001d8c <xTaskResumeAll+0x130>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d010      	beq.n	8001d46 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8001d24:	f000 f836 	bl	8001d94 <xTaskIncrementTick>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d002      	beq.n	8001d34 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8001d2e:	4b16      	ldr	r3, [pc, #88]	; (8001d88 <xTaskResumeAll+0x12c>)
 8001d30:	2201      	movs	r2, #1
 8001d32:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	3b01      	subs	r3, #1
 8001d38:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d1f1      	bne.n	8001d24 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8001d40:	4b12      	ldr	r3, [pc, #72]	; (8001d8c <xTaskResumeAll+0x130>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8001d46:	4b10      	ldr	r3, [pc, #64]	; (8001d88 <xTaskResumeAll+0x12c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d009      	beq.n	8001d62 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001d52:	4b0f      	ldr	r3, [pc, #60]	; (8001d90 <xTaskResumeAll+0x134>)
 8001d54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	f3bf 8f4f 	dsb	sy
 8001d5e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001d62:	f000 fbbf 	bl	80024e4 <vPortExitCritical>

	return xAlreadyYielded;
 8001d66:	68bb      	ldr	r3, [r7, #8]
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3710      	adds	r7, #16
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	2000015c 	.word	0x2000015c
 8001d74:	20000134 	.word	0x20000134
 8001d78:	200000f4 	.word	0x200000f4
 8001d7c:	2000013c 	.word	0x2000013c
 8001d80:	20000038 	.word	0x20000038
 8001d84:	20000034 	.word	0x20000034
 8001d88:	20000148 	.word	0x20000148
 8001d8c:	20000144 	.word	0x20000144
 8001d90:	e000ed04 	.word	0xe000ed04

08001d94 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001d9e:	4b4e      	ldr	r3, [pc, #312]	; (8001ed8 <xTaskIncrementTick+0x144>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	f040 808e 	bne.w	8001ec4 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001da8:	4b4c      	ldr	r3, [pc, #304]	; (8001edc <xTaskIncrementTick+0x148>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	3301      	adds	r3, #1
 8001dae:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001db0:	4a4a      	ldr	r2, [pc, #296]	; (8001edc <xTaskIncrementTick+0x148>)
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d120      	bne.n	8001dfe <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8001dbc:	4b48      	ldr	r3, [pc, #288]	; (8001ee0 <xTaskIncrementTick+0x14c>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d00a      	beq.n	8001ddc <xTaskIncrementTick+0x48>
	__asm volatile
 8001dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001dca:	f383 8811 	msr	BASEPRI, r3
 8001dce:	f3bf 8f6f 	isb	sy
 8001dd2:	f3bf 8f4f 	dsb	sy
 8001dd6:	603b      	str	r3, [r7, #0]
}
 8001dd8:	bf00      	nop
 8001dda:	e7fe      	b.n	8001dda <xTaskIncrementTick+0x46>
 8001ddc:	4b40      	ldr	r3, [pc, #256]	; (8001ee0 <xTaskIncrementTick+0x14c>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	60fb      	str	r3, [r7, #12]
 8001de2:	4b40      	ldr	r3, [pc, #256]	; (8001ee4 <xTaskIncrementTick+0x150>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a3e      	ldr	r2, [pc, #248]	; (8001ee0 <xTaskIncrementTick+0x14c>)
 8001de8:	6013      	str	r3, [r2, #0]
 8001dea:	4a3e      	ldr	r2, [pc, #248]	; (8001ee4 <xTaskIncrementTick+0x150>)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6013      	str	r3, [r2, #0]
 8001df0:	4b3d      	ldr	r3, [pc, #244]	; (8001ee8 <xTaskIncrementTick+0x154>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	3301      	adds	r3, #1
 8001df6:	4a3c      	ldr	r2, [pc, #240]	; (8001ee8 <xTaskIncrementTick+0x154>)
 8001df8:	6013      	str	r3, [r2, #0]
 8001dfa:	f000 f975 	bl	80020e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001dfe:	4b3b      	ldr	r3, [pc, #236]	; (8001eec <xTaskIncrementTick+0x158>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	693a      	ldr	r2, [r7, #16]
 8001e04:	429a      	cmp	r2, r3
 8001e06:	d348      	bcc.n	8001e9a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001e08:	4b35      	ldr	r3, [pc, #212]	; (8001ee0 <xTaskIncrementTick+0x14c>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d104      	bne.n	8001e1c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e12:	4b36      	ldr	r3, [pc, #216]	; (8001eec <xTaskIncrementTick+0x158>)
 8001e14:	f04f 32ff 	mov.w	r2, #4294967295
 8001e18:	601a      	str	r2, [r3, #0]
					break;
 8001e1a:	e03e      	b.n	8001e9a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001e1c:	4b30      	ldr	r3, [pc, #192]	; (8001ee0 <xTaskIncrementTick+0x14c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	68db      	ldr	r3, [r3, #12]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d203      	bcs.n	8001e3c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001e34:	4a2d      	ldr	r2, [pc, #180]	; (8001eec <xTaskIncrementTick+0x158>)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001e3a:	e02e      	b.n	8001e9a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	3304      	adds	r3, #4
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff fd25 	bl	8001890 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d004      	beq.n	8001e58 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	3318      	adds	r3, #24
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff fd1c 	bl	8001890 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	409a      	lsls	r2, r3
 8001e60:	4b23      	ldr	r3, [pc, #140]	; (8001ef0 <xTaskIncrementTick+0x15c>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	4a22      	ldr	r2, [pc, #136]	; (8001ef0 <xTaskIncrementTick+0x15c>)
 8001e68:	6013      	str	r3, [r2, #0]
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e6e:	4613      	mov	r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	4413      	add	r3, r2
 8001e74:	009b      	lsls	r3, r3, #2
 8001e76:	4a1f      	ldr	r2, [pc, #124]	; (8001ef4 <xTaskIncrementTick+0x160>)
 8001e78:	441a      	add	r2, r3
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	3304      	adds	r3, #4
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4610      	mov	r0, r2
 8001e82:	f7ff fca8 	bl	80017d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e8a:	4b1b      	ldr	r3, [pc, #108]	; (8001ef8 <xTaskIncrementTick+0x164>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d3b9      	bcc.n	8001e08 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8001e94:	2301      	movs	r3, #1
 8001e96:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001e98:	e7b6      	b.n	8001e08 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001e9a:	4b17      	ldr	r3, [pc, #92]	; (8001ef8 <xTaskIncrementTick+0x164>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ea0:	4914      	ldr	r1, [pc, #80]	; (8001ef4 <xTaskIncrementTick+0x160>)
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	009b      	lsls	r3, r3, #2
 8001ea6:	4413      	add	r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	440b      	add	r3, r1
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d901      	bls.n	8001eb6 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8001eb6:	4b11      	ldr	r3, [pc, #68]	; (8001efc <xTaskIncrementTick+0x168>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d007      	beq.n	8001ece <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	617b      	str	r3, [r7, #20]
 8001ec2:	e004      	b.n	8001ece <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8001ec4:	4b0e      	ldr	r3, [pc, #56]	; (8001f00 <xTaskIncrementTick+0x16c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	4a0d      	ldr	r2, [pc, #52]	; (8001f00 <xTaskIncrementTick+0x16c>)
 8001ecc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8001ece:	697b      	ldr	r3, [r7, #20]
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3718      	adds	r7, #24
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	2000015c 	.word	0x2000015c
 8001edc:	20000138 	.word	0x20000138
 8001ee0:	200000ec 	.word	0x200000ec
 8001ee4:	200000f0 	.word	0x200000f0
 8001ee8:	2000014c 	.word	0x2000014c
 8001eec:	20000154 	.word	0x20000154
 8001ef0:	2000013c 	.word	0x2000013c
 8001ef4:	20000038 	.word	0x20000038
 8001ef8:	20000034 	.word	0x20000034
 8001efc:	20000148 	.word	0x20000148
 8001f00:	20000144 	.word	0x20000144

08001f04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001f04:	b480      	push	{r7}
 8001f06:	b087      	sub	sp, #28
 8001f08:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001f0a:	4b27      	ldr	r3, [pc, #156]	; (8001fa8 <vTaskSwitchContext+0xa4>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001f12:	4b26      	ldr	r3, [pc, #152]	; (8001fac <vTaskSwitchContext+0xa8>)
 8001f14:	2201      	movs	r2, #1
 8001f16:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001f18:	e03f      	b.n	8001f9a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8001f1a:	4b24      	ldr	r3, [pc, #144]	; (8001fac <vTaskSwitchContext+0xa8>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001f20:	4b23      	ldr	r3, [pc, #140]	; (8001fb0 <vTaskSwitchContext+0xac>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	fab3 f383 	clz	r3, r3
 8001f2c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8001f2e:	7afb      	ldrb	r3, [r7, #11]
 8001f30:	f1c3 031f 	rsb	r3, r3, #31
 8001f34:	617b      	str	r3, [r7, #20]
 8001f36:	491f      	ldr	r1, [pc, #124]	; (8001fb4 <vTaskSwitchContext+0xb0>)
 8001f38:	697a      	ldr	r2, [r7, #20]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	4413      	add	r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	440b      	add	r3, r1
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d10a      	bne.n	8001f60 <vTaskSwitchContext+0x5c>
	__asm volatile
 8001f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f4e:	f383 8811 	msr	BASEPRI, r3
 8001f52:	f3bf 8f6f 	isb	sy
 8001f56:	f3bf 8f4f 	dsb	sy
 8001f5a:	607b      	str	r3, [r7, #4]
}
 8001f5c:	bf00      	nop
 8001f5e:	e7fe      	b.n	8001f5e <vTaskSwitchContext+0x5a>
 8001f60:	697a      	ldr	r2, [r7, #20]
 8001f62:	4613      	mov	r3, r2
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	4413      	add	r3, r2
 8001f68:	009b      	lsls	r3, r3, #2
 8001f6a:	4a12      	ldr	r2, [pc, #72]	; (8001fb4 <vTaskSwitchContext+0xb0>)
 8001f6c:	4413      	add	r3, r2
 8001f6e:	613b      	str	r3, [r7, #16]
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	685a      	ldr	r2, [r3, #4]
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	605a      	str	r2, [r3, #4]
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	685a      	ldr	r2, [r3, #4]
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	3308      	adds	r3, #8
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d104      	bne.n	8001f90 <vTaskSwitchContext+0x8c>
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	685a      	ldr	r2, [r3, #4]
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	605a      	str	r2, [r3, #4]
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	4a08      	ldr	r2, [pc, #32]	; (8001fb8 <vTaskSwitchContext+0xb4>)
 8001f98:	6013      	str	r3, [r2, #0]
}
 8001f9a:	bf00      	nop
 8001f9c:	371c      	adds	r7, #28
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	2000015c 	.word	0x2000015c
 8001fac:	20000148 	.word	0x20000148
 8001fb0:	2000013c 	.word	0x2000013c
 8001fb4:	20000038 	.word	0x20000038
 8001fb8:	20000034 	.word	0x20000034

08001fbc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001fc4:	f000 f852 	bl	800206c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001fc8:	4b06      	ldr	r3, [pc, #24]	; (8001fe4 <prvIdleTask+0x28>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d9f9      	bls.n	8001fc4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8001fd0:	4b05      	ldr	r3, [pc, #20]	; (8001fe8 <prvIdleTask+0x2c>)
 8001fd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	f3bf 8f4f 	dsb	sy
 8001fdc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8001fe0:	e7f0      	b.n	8001fc4 <prvIdleTask+0x8>
 8001fe2:	bf00      	nop
 8001fe4:	20000038 	.word	0x20000038
 8001fe8:	e000ed04 	.word	0xe000ed04

08001fec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	607b      	str	r3, [r7, #4]
 8001ff6:	e00c      	b.n	8002012 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	4413      	add	r3, r2
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	4a12      	ldr	r2, [pc, #72]	; (800204c <prvInitialiseTaskLists+0x60>)
 8002004:	4413      	add	r3, r2
 8002006:	4618      	mov	r0, r3
 8002008:	f7ff fbb8 	bl	800177c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	3301      	adds	r3, #1
 8002010:	607b      	str	r3, [r7, #4]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2b06      	cmp	r3, #6
 8002016:	d9ef      	bls.n	8001ff8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002018:	480d      	ldr	r0, [pc, #52]	; (8002050 <prvInitialiseTaskLists+0x64>)
 800201a:	f7ff fbaf 	bl	800177c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800201e:	480d      	ldr	r0, [pc, #52]	; (8002054 <prvInitialiseTaskLists+0x68>)
 8002020:	f7ff fbac 	bl	800177c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002024:	480c      	ldr	r0, [pc, #48]	; (8002058 <prvInitialiseTaskLists+0x6c>)
 8002026:	f7ff fba9 	bl	800177c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800202a:	480c      	ldr	r0, [pc, #48]	; (800205c <prvInitialiseTaskLists+0x70>)
 800202c:	f7ff fba6 	bl	800177c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002030:	480b      	ldr	r0, [pc, #44]	; (8002060 <prvInitialiseTaskLists+0x74>)
 8002032:	f7ff fba3 	bl	800177c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002036:	4b0b      	ldr	r3, [pc, #44]	; (8002064 <prvInitialiseTaskLists+0x78>)
 8002038:	4a05      	ldr	r2, [pc, #20]	; (8002050 <prvInitialiseTaskLists+0x64>)
 800203a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800203c:	4b0a      	ldr	r3, [pc, #40]	; (8002068 <prvInitialiseTaskLists+0x7c>)
 800203e:	4a05      	ldr	r2, [pc, #20]	; (8002054 <prvInitialiseTaskLists+0x68>)
 8002040:	601a      	str	r2, [r3, #0]
}
 8002042:	bf00      	nop
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	20000038 	.word	0x20000038
 8002050:	200000c4 	.word	0x200000c4
 8002054:	200000d8 	.word	0x200000d8
 8002058:	200000f4 	.word	0x200000f4
 800205c:	20000108 	.word	0x20000108
 8002060:	20000120 	.word	0x20000120
 8002064:	200000ec 	.word	0x200000ec
 8002068:	200000f0 	.word	0x200000f0

0800206c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002072:	e019      	b.n	80020a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8002074:	f000 fa06 	bl	8002484 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002078:	4b10      	ldr	r3, [pc, #64]	; (80020bc <prvCheckTasksWaitingTermination+0x50>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	3304      	adds	r3, #4
 8002084:	4618      	mov	r0, r3
 8002086:	f7ff fc03 	bl	8001890 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800208a:	4b0d      	ldr	r3, [pc, #52]	; (80020c0 <prvCheckTasksWaitingTermination+0x54>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	3b01      	subs	r3, #1
 8002090:	4a0b      	ldr	r2, [pc, #44]	; (80020c0 <prvCheckTasksWaitingTermination+0x54>)
 8002092:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8002094:	4b0b      	ldr	r3, [pc, #44]	; (80020c4 <prvCheckTasksWaitingTermination+0x58>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	3b01      	subs	r3, #1
 800209a:	4a0a      	ldr	r2, [pc, #40]	; (80020c4 <prvCheckTasksWaitingTermination+0x58>)
 800209c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800209e:	f000 fa21 	bl	80024e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 f810 	bl	80020c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80020a8:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <prvCheckTasksWaitingTermination+0x58>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d1e1      	bne.n	8002074 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80020b0:	bf00      	nop
 80020b2:	bf00      	nop
 80020b4:	3708      	adds	r7, #8
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	20000108 	.word	0x20000108
 80020c0:	20000134 	.word	0x20000134
 80020c4:	2000011c 	.word	0x2000011c

080020c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b082      	sub	sp, #8
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d4:	4618      	mov	r0, r3
 80020d6:	f000 fb83 	bl	80027e0 <vPortFree>
			vPortFree( pxTCB );
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f000 fb80 	bl	80027e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80020e0:	bf00      	nop
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}

080020e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80020ee:	4b0c      	ldr	r3, [pc, #48]	; (8002120 <prvResetNextTaskUnblockTime+0x38>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d104      	bne.n	8002102 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80020f8:	4b0a      	ldr	r3, [pc, #40]	; (8002124 <prvResetNextTaskUnblockTime+0x3c>)
 80020fa:	f04f 32ff 	mov.w	r2, #4294967295
 80020fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002100:	e008      	b.n	8002114 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002102:	4b07      	ldr	r3, [pc, #28]	; (8002120 <prvResetNextTaskUnblockTime+0x38>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	4a04      	ldr	r2, [pc, #16]	; (8002124 <prvResetNextTaskUnblockTime+0x3c>)
 8002112:	6013      	str	r3, [r2, #0]
}
 8002114:	bf00      	nop
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	200000ec 	.word	0x200000ec
 8002124:	20000154 	.word	0x20000154

08002128 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8002128:	b480      	push	{r7}
 800212a:	b083      	sub	sp, #12
 800212c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800212e:	4b0b      	ldr	r3, [pc, #44]	; (800215c <xTaskGetSchedulerState+0x34>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d102      	bne.n	800213c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002136:	2301      	movs	r3, #1
 8002138:	607b      	str	r3, [r7, #4]
 800213a:	e008      	b.n	800214e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800213c:	4b08      	ldr	r3, [pc, #32]	; (8002160 <xTaskGetSchedulerState+0x38>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d102      	bne.n	800214a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8002144:	2302      	movs	r3, #2
 8002146:	607b      	str	r3, [r7, #4]
 8002148:	e001      	b.n	800214e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800214a:	2300      	movs	r3, #0
 800214c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800214e:	687b      	ldr	r3, [r7, #4]
	}
 8002150:	4618      	mov	r0, r3
 8002152:	370c      	adds	r7, #12
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr
 800215c:	20000140 	.word	0x20000140
 8002160:	2000015c 	.word	0x2000015c

08002164 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800216e:	4b29      	ldr	r3, [pc, #164]	; (8002214 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002174:	4b28      	ldr	r3, [pc, #160]	; (8002218 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	3304      	adds	r3, #4
 800217a:	4618      	mov	r0, r3
 800217c:	f7ff fb88 	bl	8001890 <uxListRemove>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d10b      	bne.n	800219e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002186:	4b24      	ldr	r3, [pc, #144]	; (8002218 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800218c:	2201      	movs	r2, #1
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	43da      	mvns	r2, r3
 8002194:	4b21      	ldr	r3, [pc, #132]	; (800221c <prvAddCurrentTaskToDelayedList+0xb8>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4013      	ands	r3, r2
 800219a:	4a20      	ldr	r2, [pc, #128]	; (800221c <prvAddCurrentTaskToDelayedList+0xb8>)
 800219c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021a4:	d10a      	bne.n	80021bc <prvAddCurrentTaskToDelayedList+0x58>
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d007      	beq.n	80021bc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80021ac:	4b1a      	ldr	r3, [pc, #104]	; (8002218 <prvAddCurrentTaskToDelayedList+0xb4>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	3304      	adds	r3, #4
 80021b2:	4619      	mov	r1, r3
 80021b4:	481a      	ldr	r0, [pc, #104]	; (8002220 <prvAddCurrentTaskToDelayedList+0xbc>)
 80021b6:	f7ff fb0e 	bl	80017d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80021ba:	e026      	b.n	800220a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80021bc:	68fa      	ldr	r2, [r7, #12]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4413      	add	r3, r2
 80021c2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80021c4:	4b14      	ldr	r3, [pc, #80]	; (8002218 <prvAddCurrentTaskToDelayedList+0xb4>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	68ba      	ldr	r2, [r7, #8]
 80021ca:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80021cc:	68ba      	ldr	r2, [r7, #8]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d209      	bcs.n	80021e8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80021d4:	4b13      	ldr	r3, [pc, #76]	; (8002224 <prvAddCurrentTaskToDelayedList+0xc0>)
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	4b0f      	ldr	r3, [pc, #60]	; (8002218 <prvAddCurrentTaskToDelayedList+0xb4>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	3304      	adds	r3, #4
 80021de:	4619      	mov	r1, r3
 80021e0:	4610      	mov	r0, r2
 80021e2:	f7ff fb1c 	bl	800181e <vListInsert>
}
 80021e6:	e010      	b.n	800220a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80021e8:	4b0f      	ldr	r3, [pc, #60]	; (8002228 <prvAddCurrentTaskToDelayedList+0xc4>)
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	4b0a      	ldr	r3, [pc, #40]	; (8002218 <prvAddCurrentTaskToDelayedList+0xb4>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	3304      	adds	r3, #4
 80021f2:	4619      	mov	r1, r3
 80021f4:	4610      	mov	r0, r2
 80021f6:	f7ff fb12 	bl	800181e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80021fa:	4b0c      	ldr	r3, [pc, #48]	; (800222c <prvAddCurrentTaskToDelayedList+0xc8>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	68ba      	ldr	r2, [r7, #8]
 8002200:	429a      	cmp	r2, r3
 8002202:	d202      	bcs.n	800220a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8002204:	4a09      	ldr	r2, [pc, #36]	; (800222c <prvAddCurrentTaskToDelayedList+0xc8>)
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	6013      	str	r3, [r2, #0]
}
 800220a:	bf00      	nop
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	20000138 	.word	0x20000138
 8002218:	20000034 	.word	0x20000034
 800221c:	2000013c 	.word	0x2000013c
 8002220:	20000120 	.word	0x20000120
 8002224:	200000f0 	.word	0x200000f0
 8002228:	200000ec 	.word	0x200000ec
 800222c:	20000154 	.word	0x20000154

08002230 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	3b04      	subs	r3, #4
 8002240:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002248:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	3b04      	subs	r3, #4
 800224e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	f023 0201 	bic.w	r2, r3, #1
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	3b04      	subs	r3, #4
 800225e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002260:	4a0c      	ldr	r2, [pc, #48]	; (8002294 <pxPortInitialiseStack+0x64>)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	3b14      	subs	r3, #20
 800226a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	3b04      	subs	r3, #4
 8002276:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	f06f 0202 	mvn.w	r2, #2
 800227e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	3b20      	subs	r3, #32
 8002284:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002286:	68fb      	ldr	r3, [r7, #12]
}
 8002288:	4618      	mov	r0, r3
 800228a:	3714      	adds	r7, #20
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr
 8002294:	08002299 	.word	0x08002299

08002298 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002298:	b480      	push	{r7}
 800229a:	b085      	sub	sp, #20
 800229c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800229e:	2300      	movs	r3, #0
 80022a0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80022a2:	4b12      	ldr	r3, [pc, #72]	; (80022ec <prvTaskExitError+0x54>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022aa:	d00a      	beq.n	80022c2 <prvTaskExitError+0x2a>
	__asm volatile
 80022ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022b0:	f383 8811 	msr	BASEPRI, r3
 80022b4:	f3bf 8f6f 	isb	sy
 80022b8:	f3bf 8f4f 	dsb	sy
 80022bc:	60fb      	str	r3, [r7, #12]
}
 80022be:	bf00      	nop
 80022c0:	e7fe      	b.n	80022c0 <prvTaskExitError+0x28>
	__asm volatile
 80022c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022c6:	f383 8811 	msr	BASEPRI, r3
 80022ca:	f3bf 8f6f 	isb	sy
 80022ce:	f3bf 8f4f 	dsb	sy
 80022d2:	60bb      	str	r3, [r7, #8]
}
 80022d4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80022d6:	bf00      	nop
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d0fc      	beq.n	80022d8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80022de:	bf00      	nop
 80022e0:	bf00      	nop
 80022e2:	3714      	adds	r7, #20
 80022e4:	46bd      	mov	sp, r7
 80022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ea:	4770      	bx	lr
 80022ec:	2000000c 	.word	0x2000000c

080022f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80022f0:	4b07      	ldr	r3, [pc, #28]	; (8002310 <pxCurrentTCBConst2>)
 80022f2:	6819      	ldr	r1, [r3, #0]
 80022f4:	6808      	ldr	r0, [r1, #0]
 80022f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022fa:	f380 8809 	msr	PSP, r0
 80022fe:	f3bf 8f6f 	isb	sy
 8002302:	f04f 0000 	mov.w	r0, #0
 8002306:	f380 8811 	msr	BASEPRI, r0
 800230a:	4770      	bx	lr
 800230c:	f3af 8000 	nop.w

08002310 <pxCurrentTCBConst2>:
 8002310:	20000034 	.word	0x20000034
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8002314:	bf00      	nop
 8002316:	bf00      	nop

08002318 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8002318:	4808      	ldr	r0, [pc, #32]	; (800233c <prvPortStartFirstTask+0x24>)
 800231a:	6800      	ldr	r0, [r0, #0]
 800231c:	6800      	ldr	r0, [r0, #0]
 800231e:	f380 8808 	msr	MSP, r0
 8002322:	f04f 0000 	mov.w	r0, #0
 8002326:	f380 8814 	msr	CONTROL, r0
 800232a:	b662      	cpsie	i
 800232c:	b661      	cpsie	f
 800232e:	f3bf 8f4f 	dsb	sy
 8002332:	f3bf 8f6f 	isb	sy
 8002336:	df00      	svc	0
 8002338:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800233a:	bf00      	nop
 800233c:	e000ed08 	.word	0xe000ed08

08002340 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002346:	4b46      	ldr	r3, [pc, #280]	; (8002460 <xPortStartScheduler+0x120>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a46      	ldr	r2, [pc, #280]	; (8002464 <xPortStartScheduler+0x124>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d10a      	bne.n	8002366 <xPortStartScheduler+0x26>
	__asm volatile
 8002350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002354:	f383 8811 	msr	BASEPRI, r3
 8002358:	f3bf 8f6f 	isb	sy
 800235c:	f3bf 8f4f 	dsb	sy
 8002360:	613b      	str	r3, [r7, #16]
}
 8002362:	bf00      	nop
 8002364:	e7fe      	b.n	8002364 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002366:	4b3e      	ldr	r3, [pc, #248]	; (8002460 <xPortStartScheduler+0x120>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a3f      	ldr	r2, [pc, #252]	; (8002468 <xPortStartScheduler+0x128>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d10a      	bne.n	8002386 <xPortStartScheduler+0x46>
	__asm volatile
 8002370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002374:	f383 8811 	msr	BASEPRI, r3
 8002378:	f3bf 8f6f 	isb	sy
 800237c:	f3bf 8f4f 	dsb	sy
 8002380:	60fb      	str	r3, [r7, #12]
}
 8002382:	bf00      	nop
 8002384:	e7fe      	b.n	8002384 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002386:	4b39      	ldr	r3, [pc, #228]	; (800246c <xPortStartScheduler+0x12c>)
 8002388:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	b2db      	uxtb	r3, r3
 8002390:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002392:	697b      	ldr	r3, [r7, #20]
 8002394:	22ff      	movs	r2, #255	; 0xff
 8002396:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	b2db      	uxtb	r3, r3
 800239e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80023a0:	78fb      	ldrb	r3, [r7, #3]
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80023a8:	b2da      	uxtb	r2, r3
 80023aa:	4b31      	ldr	r3, [pc, #196]	; (8002470 <xPortStartScheduler+0x130>)
 80023ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80023ae:	4b31      	ldr	r3, [pc, #196]	; (8002474 <xPortStartScheduler+0x134>)
 80023b0:	2207      	movs	r2, #7
 80023b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80023b4:	e009      	b.n	80023ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80023b6:	4b2f      	ldr	r3, [pc, #188]	; (8002474 <xPortStartScheduler+0x134>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	3b01      	subs	r3, #1
 80023bc:	4a2d      	ldr	r2, [pc, #180]	; (8002474 <xPortStartScheduler+0x134>)
 80023be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80023c0:	78fb      	ldrb	r3, [r7, #3]
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80023ca:	78fb      	ldrb	r3, [r7, #3]
 80023cc:	b2db      	uxtb	r3, r3
 80023ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023d2:	2b80      	cmp	r3, #128	; 0x80
 80023d4:	d0ef      	beq.n	80023b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80023d6:	4b27      	ldr	r3, [pc, #156]	; (8002474 <xPortStartScheduler+0x134>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f1c3 0307 	rsb	r3, r3, #7
 80023de:	2b04      	cmp	r3, #4
 80023e0:	d00a      	beq.n	80023f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80023e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023e6:	f383 8811 	msr	BASEPRI, r3
 80023ea:	f3bf 8f6f 	isb	sy
 80023ee:	f3bf 8f4f 	dsb	sy
 80023f2:	60bb      	str	r3, [r7, #8]
}
 80023f4:	bf00      	nop
 80023f6:	e7fe      	b.n	80023f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80023f8:	4b1e      	ldr	r3, [pc, #120]	; (8002474 <xPortStartScheduler+0x134>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	021b      	lsls	r3, r3, #8
 80023fe:	4a1d      	ldr	r2, [pc, #116]	; (8002474 <xPortStartScheduler+0x134>)
 8002400:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002402:	4b1c      	ldr	r3, [pc, #112]	; (8002474 <xPortStartScheduler+0x134>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800240a:	4a1a      	ldr	r2, [pc, #104]	; (8002474 <xPortStartScheduler+0x134>)
 800240c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	b2da      	uxtb	r2, r3
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8002416:	4b18      	ldr	r3, [pc, #96]	; (8002478 <xPortStartScheduler+0x138>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a17      	ldr	r2, [pc, #92]	; (8002478 <xPortStartScheduler+0x138>)
 800241c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002420:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8002422:	4b15      	ldr	r3, [pc, #84]	; (8002478 <xPortStartScheduler+0x138>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a14      	ldr	r2, [pc, #80]	; (8002478 <xPortStartScheduler+0x138>)
 8002428:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800242c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800242e:	f000 f8dd 	bl	80025ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002432:	4b12      	ldr	r3, [pc, #72]	; (800247c <xPortStartScheduler+0x13c>)
 8002434:	2200      	movs	r2, #0
 8002436:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002438:	f000 f8fc 	bl	8002634 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800243c:	4b10      	ldr	r3, [pc, #64]	; (8002480 <xPortStartScheduler+0x140>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a0f      	ldr	r2, [pc, #60]	; (8002480 <xPortStartScheduler+0x140>)
 8002442:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002446:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002448:	f7ff ff66 	bl	8002318 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800244c:	f7ff fd5a 	bl	8001f04 <vTaskSwitchContext>
	prvTaskExitError();
 8002450:	f7ff ff22 	bl	8002298 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	3718      	adds	r7, #24
 800245a:	46bd      	mov	sp, r7
 800245c:	bd80      	pop	{r7, pc}
 800245e:	bf00      	nop
 8002460:	e000ed00 	.word	0xe000ed00
 8002464:	410fc271 	.word	0x410fc271
 8002468:	410fc270 	.word	0x410fc270
 800246c:	e000e400 	.word	0xe000e400
 8002470:	20000160 	.word	0x20000160
 8002474:	20000164 	.word	0x20000164
 8002478:	e000ed20 	.word	0xe000ed20
 800247c:	2000000c 	.word	0x2000000c
 8002480:	e000ef34 	.word	0xe000ef34

08002484 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
	__asm volatile
 800248a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800248e:	f383 8811 	msr	BASEPRI, r3
 8002492:	f3bf 8f6f 	isb	sy
 8002496:	f3bf 8f4f 	dsb	sy
 800249a:	607b      	str	r3, [r7, #4]
}
 800249c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800249e:	4b0f      	ldr	r3, [pc, #60]	; (80024dc <vPortEnterCritical+0x58>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	3301      	adds	r3, #1
 80024a4:	4a0d      	ldr	r2, [pc, #52]	; (80024dc <vPortEnterCritical+0x58>)
 80024a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80024a8:	4b0c      	ldr	r3, [pc, #48]	; (80024dc <vPortEnterCritical+0x58>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d10f      	bne.n	80024d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80024b0:	4b0b      	ldr	r3, [pc, #44]	; (80024e0 <vPortEnterCritical+0x5c>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d00a      	beq.n	80024d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80024ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024be:	f383 8811 	msr	BASEPRI, r3
 80024c2:	f3bf 8f6f 	isb	sy
 80024c6:	f3bf 8f4f 	dsb	sy
 80024ca:	603b      	str	r3, [r7, #0]
}
 80024cc:	bf00      	nop
 80024ce:	e7fe      	b.n	80024ce <vPortEnterCritical+0x4a>
	}
}
 80024d0:	bf00      	nop
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr
 80024dc:	2000000c 	.word	0x2000000c
 80024e0:	e000ed04 	.word	0xe000ed04

080024e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80024ea:	4b12      	ldr	r3, [pc, #72]	; (8002534 <vPortExitCritical+0x50>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d10a      	bne.n	8002508 <vPortExitCritical+0x24>
	__asm volatile
 80024f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024f6:	f383 8811 	msr	BASEPRI, r3
 80024fa:	f3bf 8f6f 	isb	sy
 80024fe:	f3bf 8f4f 	dsb	sy
 8002502:	607b      	str	r3, [r7, #4]
}
 8002504:	bf00      	nop
 8002506:	e7fe      	b.n	8002506 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8002508:	4b0a      	ldr	r3, [pc, #40]	; (8002534 <vPortExitCritical+0x50>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	3b01      	subs	r3, #1
 800250e:	4a09      	ldr	r2, [pc, #36]	; (8002534 <vPortExitCritical+0x50>)
 8002510:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8002512:	4b08      	ldr	r3, [pc, #32]	; (8002534 <vPortExitCritical+0x50>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d105      	bne.n	8002526 <vPortExitCritical+0x42>
 800251a:	2300      	movs	r3, #0
 800251c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002524:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8002526:	bf00      	nop
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	2000000c 	.word	0x2000000c
	...

08002540 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002540:	f3ef 8009 	mrs	r0, PSP
 8002544:	f3bf 8f6f 	isb	sy
 8002548:	4b15      	ldr	r3, [pc, #84]	; (80025a0 <pxCurrentTCBConst>)
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	f01e 0f10 	tst.w	lr, #16
 8002550:	bf08      	it	eq
 8002552:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002556:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800255a:	6010      	str	r0, [r2, #0]
 800255c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002560:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002564:	f380 8811 	msr	BASEPRI, r0
 8002568:	f3bf 8f4f 	dsb	sy
 800256c:	f3bf 8f6f 	isb	sy
 8002570:	f7ff fcc8 	bl	8001f04 <vTaskSwitchContext>
 8002574:	f04f 0000 	mov.w	r0, #0
 8002578:	f380 8811 	msr	BASEPRI, r0
 800257c:	bc09      	pop	{r0, r3}
 800257e:	6819      	ldr	r1, [r3, #0]
 8002580:	6808      	ldr	r0, [r1, #0]
 8002582:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002586:	f01e 0f10 	tst.w	lr, #16
 800258a:	bf08      	it	eq
 800258c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002590:	f380 8809 	msr	PSP, r0
 8002594:	f3bf 8f6f 	isb	sy
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop
 800259c:	f3af 8000 	nop.w

080025a0 <pxCurrentTCBConst>:
 80025a0:	20000034 	.word	0x20000034
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80025a4:	bf00      	nop
 80025a6:	bf00      	nop

080025a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
	__asm volatile
 80025ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025b2:	f383 8811 	msr	BASEPRI, r3
 80025b6:	f3bf 8f6f 	isb	sy
 80025ba:	f3bf 8f4f 	dsb	sy
 80025be:	607b      	str	r3, [r7, #4]
}
 80025c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80025c2:	f7ff fbe7 	bl	8001d94 <xTaskIncrementTick>
 80025c6:	4603      	mov	r3, r0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d003      	beq.n	80025d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80025cc:	4b06      	ldr	r3, [pc, #24]	; (80025e8 <xPortSysTickHandler+0x40>)
 80025ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025d2:	601a      	str	r2, [r3, #0]
 80025d4:	2300      	movs	r3, #0
 80025d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	f383 8811 	msr	BASEPRI, r3
}
 80025de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80025e0:	bf00      	nop
 80025e2:	3708      	adds	r7, #8
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	e000ed04 	.word	0xe000ed04

080025ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80025ec:	b480      	push	{r7}
 80025ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80025f0:	4b0b      	ldr	r3, [pc, #44]	; (8002620 <vPortSetupTimerInterrupt+0x34>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80025f6:	4b0b      	ldr	r3, [pc, #44]	; (8002624 <vPortSetupTimerInterrupt+0x38>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80025fc:	4b0a      	ldr	r3, [pc, #40]	; (8002628 <vPortSetupTimerInterrupt+0x3c>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a0a      	ldr	r2, [pc, #40]	; (800262c <vPortSetupTimerInterrupt+0x40>)
 8002602:	fba2 2303 	umull	r2, r3, r2, r3
 8002606:	099b      	lsrs	r3, r3, #6
 8002608:	4a09      	ldr	r2, [pc, #36]	; (8002630 <vPortSetupTimerInterrupt+0x44>)
 800260a:	3b01      	subs	r3, #1
 800260c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800260e:	4b04      	ldr	r3, [pc, #16]	; (8002620 <vPortSetupTimerInterrupt+0x34>)
 8002610:	2207      	movs	r2, #7
 8002612:	601a      	str	r2, [r3, #0]
}
 8002614:	bf00      	nop
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	e000e010 	.word	0xe000e010
 8002624:	e000e018 	.word	0xe000e018
 8002628:	20000000 	.word	0x20000000
 800262c:	10624dd3 	.word	0x10624dd3
 8002630:	e000e014 	.word	0xe000e014

08002634 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002634:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002644 <vPortEnableVFP+0x10>
 8002638:	6801      	ldr	r1, [r0, #0]
 800263a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800263e:	6001      	str	r1, [r0, #0]
 8002640:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8002642:	bf00      	nop
 8002644:	e000ed88 	.word	0xe000ed88

08002648 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b08a      	sub	sp, #40	; 0x28
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002650:	2300      	movs	r3, #0
 8002652:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002654:	f7ff faf4 	bl	8001c40 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002658:	4b5b      	ldr	r3, [pc, #364]	; (80027c8 <pvPortMalloc+0x180>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d101      	bne.n	8002664 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002660:	f000 f920 	bl	80028a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002664:	4b59      	ldr	r3, [pc, #356]	; (80027cc <pvPortMalloc+0x184>)
 8002666:	681a      	ldr	r2, [r3, #0]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	4013      	ands	r3, r2
 800266c:	2b00      	cmp	r3, #0
 800266e:	f040 8093 	bne.w	8002798 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d01d      	beq.n	80026b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8002678:	2208      	movs	r2, #8
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4413      	add	r3, r2
 800267e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	2b00      	cmp	r3, #0
 8002688:	d014      	beq.n	80026b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f023 0307 	bic.w	r3, r3, #7
 8002690:	3308      	adds	r3, #8
 8002692:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f003 0307 	and.w	r3, r3, #7
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00a      	beq.n	80026b4 <pvPortMalloc+0x6c>
	__asm volatile
 800269e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026a2:	f383 8811 	msr	BASEPRI, r3
 80026a6:	f3bf 8f6f 	isb	sy
 80026aa:	f3bf 8f4f 	dsb	sy
 80026ae:	617b      	str	r3, [r7, #20]
}
 80026b0:	bf00      	nop
 80026b2:	e7fe      	b.n	80026b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d06e      	beq.n	8002798 <pvPortMalloc+0x150>
 80026ba:	4b45      	ldr	r3, [pc, #276]	; (80027d0 <pvPortMalloc+0x188>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d869      	bhi.n	8002798 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80026c4:	4b43      	ldr	r3, [pc, #268]	; (80027d4 <pvPortMalloc+0x18c>)
 80026c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80026c8:	4b42      	ldr	r3, [pc, #264]	; (80027d4 <pvPortMalloc+0x18c>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80026ce:	e004      	b.n	80026da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80026d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80026d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80026da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d903      	bls.n	80026ec <pvPortMalloc+0xa4>
 80026e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d1f1      	bne.n	80026d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80026ec:	4b36      	ldr	r3, [pc, #216]	; (80027c8 <pvPortMalloc+0x180>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d050      	beq.n	8002798 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80026f6:	6a3b      	ldr	r3, [r7, #32]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2208      	movs	r2, #8
 80026fc:	4413      	add	r3, r2
 80026fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	6a3b      	ldr	r3, [r7, #32]
 8002706:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270a:	685a      	ldr	r2, [r3, #4]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	1ad2      	subs	r2, r2, r3
 8002710:	2308      	movs	r3, #8
 8002712:	005b      	lsls	r3, r3, #1
 8002714:	429a      	cmp	r2, r3
 8002716:	d91f      	bls.n	8002758 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4413      	add	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	f003 0307 	and.w	r3, r3, #7
 8002726:	2b00      	cmp	r3, #0
 8002728:	d00a      	beq.n	8002740 <pvPortMalloc+0xf8>
	__asm volatile
 800272a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800272e:	f383 8811 	msr	BASEPRI, r3
 8002732:	f3bf 8f6f 	isb	sy
 8002736:	f3bf 8f4f 	dsb	sy
 800273a:	613b      	str	r3, [r7, #16]
}
 800273c:	bf00      	nop
 800273e:	e7fe      	b.n	800273e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002742:	685a      	ldr	r2, [r3, #4]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	1ad2      	subs	r2, r2, r3
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800274c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002752:	69b8      	ldr	r0, [r7, #24]
 8002754:	f000 f908 	bl	8002968 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002758:	4b1d      	ldr	r3, [pc, #116]	; (80027d0 <pvPortMalloc+0x188>)
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	4a1b      	ldr	r2, [pc, #108]	; (80027d0 <pvPortMalloc+0x188>)
 8002764:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002766:	4b1a      	ldr	r3, [pc, #104]	; (80027d0 <pvPortMalloc+0x188>)
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	4b1b      	ldr	r3, [pc, #108]	; (80027d8 <pvPortMalloc+0x190>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	429a      	cmp	r2, r3
 8002770:	d203      	bcs.n	800277a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002772:	4b17      	ldr	r3, [pc, #92]	; (80027d0 <pvPortMalloc+0x188>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a18      	ldr	r2, [pc, #96]	; (80027d8 <pvPortMalloc+0x190>)
 8002778:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800277a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277c:	685a      	ldr	r2, [r3, #4]
 800277e:	4b13      	ldr	r3, [pc, #76]	; (80027cc <pvPortMalloc+0x184>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	431a      	orrs	r2, r3
 8002784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002786:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278a:	2200      	movs	r2, #0
 800278c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800278e:	4b13      	ldr	r3, [pc, #76]	; (80027dc <pvPortMalloc+0x194>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	3301      	adds	r3, #1
 8002794:	4a11      	ldr	r2, [pc, #68]	; (80027dc <pvPortMalloc+0x194>)
 8002796:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002798:	f7ff fa60 	bl	8001c5c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	f003 0307 	and.w	r3, r3, #7
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00a      	beq.n	80027bc <pvPortMalloc+0x174>
	__asm volatile
 80027a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027aa:	f383 8811 	msr	BASEPRI, r3
 80027ae:	f3bf 8f6f 	isb	sy
 80027b2:	f3bf 8f4f 	dsb	sy
 80027b6:	60fb      	str	r3, [r7, #12]
}
 80027b8:	bf00      	nop
 80027ba:	e7fe      	b.n	80027ba <pvPortMalloc+0x172>
	return pvReturn;
 80027bc:	69fb      	ldr	r3, [r7, #28]
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3728      	adds	r7, #40	; 0x28
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	20000d70 	.word	0x20000d70
 80027cc:	20000d84 	.word	0x20000d84
 80027d0:	20000d74 	.word	0x20000d74
 80027d4:	20000d68 	.word	0x20000d68
 80027d8:	20000d78 	.word	0x20000d78
 80027dc:	20000d7c 	.word	0x20000d7c

080027e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d04d      	beq.n	800288e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80027f2:	2308      	movs	r3, #8
 80027f4:	425b      	negs	r3, r3
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	4413      	add	r3, r2
 80027fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	685a      	ldr	r2, [r3, #4]
 8002804:	4b24      	ldr	r3, [pc, #144]	; (8002898 <vPortFree+0xb8>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4013      	ands	r3, r2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d10a      	bne.n	8002824 <vPortFree+0x44>
	__asm volatile
 800280e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002812:	f383 8811 	msr	BASEPRI, r3
 8002816:	f3bf 8f6f 	isb	sy
 800281a:	f3bf 8f4f 	dsb	sy
 800281e:	60fb      	str	r3, [r7, #12]
}
 8002820:	bf00      	nop
 8002822:	e7fe      	b.n	8002822 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d00a      	beq.n	8002842 <vPortFree+0x62>
	__asm volatile
 800282c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002830:	f383 8811 	msr	BASEPRI, r3
 8002834:	f3bf 8f6f 	isb	sy
 8002838:	f3bf 8f4f 	dsb	sy
 800283c:	60bb      	str	r3, [r7, #8]
}
 800283e:	bf00      	nop
 8002840:	e7fe      	b.n	8002840 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	685a      	ldr	r2, [r3, #4]
 8002846:	4b14      	ldr	r3, [pc, #80]	; (8002898 <vPortFree+0xb8>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4013      	ands	r3, r2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d01e      	beq.n	800288e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d11a      	bne.n	800288e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	685a      	ldr	r2, [r3, #4]
 800285c:	4b0e      	ldr	r3, [pc, #56]	; (8002898 <vPortFree+0xb8>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	43db      	mvns	r3, r3
 8002862:	401a      	ands	r2, r3
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002868:	f7ff f9ea 	bl	8001c40 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	685a      	ldr	r2, [r3, #4]
 8002870:	4b0a      	ldr	r3, [pc, #40]	; (800289c <vPortFree+0xbc>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4413      	add	r3, r2
 8002876:	4a09      	ldr	r2, [pc, #36]	; (800289c <vPortFree+0xbc>)
 8002878:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800287a:	6938      	ldr	r0, [r7, #16]
 800287c:	f000 f874 	bl	8002968 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8002880:	4b07      	ldr	r3, [pc, #28]	; (80028a0 <vPortFree+0xc0>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	3301      	adds	r3, #1
 8002886:	4a06      	ldr	r2, [pc, #24]	; (80028a0 <vPortFree+0xc0>)
 8002888:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800288a:	f7ff f9e7 	bl	8001c5c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800288e:	bf00      	nop
 8002890:	3718      	adds	r7, #24
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
 8002896:	bf00      	nop
 8002898:	20000d84 	.word	0x20000d84
 800289c:	20000d74 	.word	0x20000d74
 80028a0:	20000d80 	.word	0x20000d80

080028a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80028aa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80028ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80028b0:	4b27      	ldr	r3, [pc, #156]	; (8002950 <prvHeapInit+0xac>)
 80028b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f003 0307 	and.w	r3, r3, #7
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00c      	beq.n	80028d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	3307      	adds	r3, #7
 80028c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f023 0307 	bic.w	r3, r3, #7
 80028ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80028cc:	68ba      	ldr	r2, [r7, #8]
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	4a1f      	ldr	r2, [pc, #124]	; (8002950 <prvHeapInit+0xac>)
 80028d4:	4413      	add	r3, r2
 80028d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80028dc:	4a1d      	ldr	r2, [pc, #116]	; (8002954 <prvHeapInit+0xb0>)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80028e2:	4b1c      	ldr	r3, [pc, #112]	; (8002954 <prvHeapInit+0xb0>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	68ba      	ldr	r2, [r7, #8]
 80028ec:	4413      	add	r3, r2
 80028ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80028f0:	2208      	movs	r2, #8
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	1a9b      	subs	r3, r3, r2
 80028f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f023 0307 	bic.w	r3, r3, #7
 80028fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	4a15      	ldr	r2, [pc, #84]	; (8002958 <prvHeapInit+0xb4>)
 8002904:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002906:	4b14      	ldr	r3, [pc, #80]	; (8002958 <prvHeapInit+0xb4>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2200      	movs	r2, #0
 800290c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800290e:	4b12      	ldr	r3, [pc, #72]	; (8002958 <prvHeapInit+0xb4>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	2200      	movs	r2, #0
 8002914:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	1ad2      	subs	r2, r2, r3
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002924:	4b0c      	ldr	r3, [pc, #48]	; (8002958 <prvHeapInit+0xb4>)
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	4a0a      	ldr	r2, [pc, #40]	; (800295c <prvHeapInit+0xb8>)
 8002932:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	4a09      	ldr	r2, [pc, #36]	; (8002960 <prvHeapInit+0xbc>)
 800293a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800293c:	4b09      	ldr	r3, [pc, #36]	; (8002964 <prvHeapInit+0xc0>)
 800293e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002942:	601a      	str	r2, [r3, #0]
}
 8002944:	bf00      	nop
 8002946:	3714      	adds	r7, #20
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr
 8002950:	20000168 	.word	0x20000168
 8002954:	20000d68 	.word	0x20000d68
 8002958:	20000d70 	.word	0x20000d70
 800295c:	20000d78 	.word	0x20000d78
 8002960:	20000d74 	.word	0x20000d74
 8002964:	20000d84 	.word	0x20000d84

08002968 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002970:	4b28      	ldr	r3, [pc, #160]	; (8002a14 <prvInsertBlockIntoFreeList+0xac>)
 8002972:	60fb      	str	r3, [r7, #12]
 8002974:	e002      	b.n	800297c <prvInsertBlockIntoFreeList+0x14>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	60fb      	str	r3, [r7, #12]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	429a      	cmp	r2, r3
 8002984:	d8f7      	bhi.n	8002976 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	68ba      	ldr	r2, [r7, #8]
 8002990:	4413      	add	r3, r2
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	429a      	cmp	r2, r3
 8002996:	d108      	bne.n	80029aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	685a      	ldr	r2, [r3, #4]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	441a      	add	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	68ba      	ldr	r2, [r7, #8]
 80029b4:	441a      	add	r2, r3
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d118      	bne.n	80029f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	4b15      	ldr	r3, [pc, #84]	; (8002a18 <prvInsertBlockIntoFreeList+0xb0>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d00d      	beq.n	80029e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685a      	ldr	r2, [r3, #4]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	441a      	add	r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	601a      	str	r2, [r3, #0]
 80029e4:	e008      	b.n	80029f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80029e6:	4b0c      	ldr	r3, [pc, #48]	; (8002a18 <prvInsertBlockIntoFreeList+0xb0>)
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	601a      	str	r2, [r3, #0]
 80029ee:	e003      	b.n	80029f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681a      	ldr	r2, [r3, #0]
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80029f8:	68fa      	ldr	r2, [r7, #12]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d002      	beq.n	8002a06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002a06:	bf00      	nop
 8002a08:	3714      	adds	r7, #20
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	20000d68 	.word	0x20000d68
 8002a18:	20000d70 	.word	0x20000d70

08002a1c <__libc_init_array>:
 8002a1c:	b570      	push	{r4, r5, r6, lr}
 8002a1e:	4d0d      	ldr	r5, [pc, #52]	; (8002a54 <__libc_init_array+0x38>)
 8002a20:	4c0d      	ldr	r4, [pc, #52]	; (8002a58 <__libc_init_array+0x3c>)
 8002a22:	1b64      	subs	r4, r4, r5
 8002a24:	10a4      	asrs	r4, r4, #2
 8002a26:	2600      	movs	r6, #0
 8002a28:	42a6      	cmp	r6, r4
 8002a2a:	d109      	bne.n	8002a40 <__libc_init_array+0x24>
 8002a2c:	4d0b      	ldr	r5, [pc, #44]	; (8002a5c <__libc_init_array+0x40>)
 8002a2e:	4c0c      	ldr	r4, [pc, #48]	; (8002a60 <__libc_init_array+0x44>)
 8002a30:	f000 f820 	bl	8002a74 <_init>
 8002a34:	1b64      	subs	r4, r4, r5
 8002a36:	10a4      	asrs	r4, r4, #2
 8002a38:	2600      	movs	r6, #0
 8002a3a:	42a6      	cmp	r6, r4
 8002a3c:	d105      	bne.n	8002a4a <__libc_init_array+0x2e>
 8002a3e:	bd70      	pop	{r4, r5, r6, pc}
 8002a40:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a44:	4798      	blx	r3
 8002a46:	3601      	adds	r6, #1
 8002a48:	e7ee      	b.n	8002a28 <__libc_init_array+0xc>
 8002a4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a4e:	4798      	blx	r3
 8002a50:	3601      	adds	r6, #1
 8002a52:	e7f2      	b.n	8002a3a <__libc_init_array+0x1e>
 8002a54:	08002ac4 	.word	0x08002ac4
 8002a58:	08002ac4 	.word	0x08002ac4
 8002a5c:	08002ac4 	.word	0x08002ac4
 8002a60:	08002ac8 	.word	0x08002ac8

08002a64 <memset>:
 8002a64:	4402      	add	r2, r0
 8002a66:	4603      	mov	r3, r0
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d100      	bne.n	8002a6e <memset+0xa>
 8002a6c:	4770      	bx	lr
 8002a6e:	f803 1b01 	strb.w	r1, [r3], #1
 8002a72:	e7f9      	b.n	8002a68 <memset+0x4>

08002a74 <_init>:
 8002a74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a76:	bf00      	nop
 8002a78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a7a:	bc08      	pop	{r3}
 8002a7c:	469e      	mov	lr, r3
 8002a7e:	4770      	bx	lr

08002a80 <_fini>:
 8002a80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a82:	bf00      	nop
 8002a84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a86:	bc08      	pop	{r3}
 8002a88:	469e      	mov	lr, r3
 8002a8a:	4770      	bx	lr
