
Capteurs-Chaines-de-Mesures.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007820  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000055c  08007a00  08007a00  00017a00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f5c  08007f5c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007f5c  08007f5c  00017f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f64  08007f64  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f64  08007f64  00017f64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f68  08007f68  00017f68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007f6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  200001e0  08008148  000201e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200003f8  08008148  000203f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013af7  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d58  00000000  00000000  00033d03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc8  00000000  00000000  00036a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e80  00000000  00000000  00037a28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004d5e  00000000  00000000  000388a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014bb1  00000000  00000000  0003d606  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c35ba  00000000  00000000  000521b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00115771  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005064  00000000  00000000  001157c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e0 	.word	0x200001e0
 80001fc:	00000000 	.word	0x00000000
 8000200:	080079e8 	.word	0x080079e8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e4 	.word	0x200001e4
 800021c:	080079e8 	.word	0x080079e8

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b974 	b.w	8000ef8 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468e      	mov	lr, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14d      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4694      	mov	ip, r2
 8000c3a:	d969      	bls.n	8000d10 <__udivmoddi4+0xe8>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b152      	cbz	r2, 8000c58 <__udivmoddi4+0x30>
 8000c42:	fa01 f302 	lsl.w	r3, r1, r2
 8000c46:	f1c2 0120 	rsb	r1, r2, #32
 8000c4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c52:	ea41 0e03 	orr.w	lr, r1, r3
 8000c56:	4094      	lsls	r4, r2
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	0c21      	lsrs	r1, r4, #16
 8000c5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c62:	fa1f f78c 	uxth.w	r7, ip
 8000c66:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c6e:	fb06 f107 	mul.w	r1, r6, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7e:	f080 811f 	bcs.w	8000ec0 <__udivmoddi4+0x298>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 811c 	bls.w	8000ec0 <__udivmoddi4+0x298>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x92>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cac:	f080 810a 	bcs.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	f240 8107 	bls.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	1be4      	subs	r4, r4, r7
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa4>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xc2>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80ef 	beq.w	8000eba <__udivmoddi4+0x292>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x160>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd4>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80f9 	bhi.w	8000eee <__udivmoddi4+0x2c6>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	469e      	mov	lr, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa4>
 8000d0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xec>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 8092 	bne.w	8000e42 <__udivmoddi4+0x21a>
 8000d1e:	eba1 010c 	sub.w	r1, r1, ip
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	2601      	movs	r6, #1
 8000d2c:	0c20      	lsrs	r0, r4, #16
 8000d2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d32:	fb07 1113 	mls	r1, r7, r3, r1
 8000d36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3a:	fb0e f003 	mul.w	r0, lr, r3
 8000d3e:	4288      	cmp	r0, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x12c>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x12a>
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d52:	4643      	mov	r3, r8
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d64:	fb0e fe00 	mul.w	lr, lr, r0
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x156>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d74:	d202      	bcs.n	8000d7c <__udivmoddi4+0x154>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f200 80bb 	bhi.w	8000ef2 <__udivmoddi4+0x2ca>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d86:	e79c      	b.n	8000cc2 <__udivmoddi4+0x9a>
 8000d88:	f1c6 0720 	rsb	r7, r6, #32
 8000d8c:	40b3      	lsls	r3, r6
 8000d8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d96:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	40f9      	lsrs	r1, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	fa00 f306 	lsl.w	r3, r0, r6
 8000daa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dae:	0c20      	lsrs	r0, r4, #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fb09 1118 	mls	r1, r9, r8, r1
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x1b8>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd0:	f080 8088 	bcs.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	f240 8085 	bls.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000de8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df4:	458e      	cmp	lr, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1e2>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e00:	d26c      	bcs.n	8000edc <__udivmoddi4+0x2b4>
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d96a      	bls.n	8000edc <__udivmoddi4+0x2b4>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e12:	eba1 010e 	sub.w	r1, r1, lr
 8000e16:	42a1      	cmp	r1, r4
 8000e18:	46c8      	mov	r8, r9
 8000e1a:	46a6      	mov	lr, r4
 8000e1c:	d356      	bcc.n	8000ecc <__udivmoddi4+0x2a4>
 8000e1e:	d053      	beq.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x212>
 8000e22:	ebb3 0208 	subs.w	r2, r3, r8
 8000e26:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e32:	40f1      	lsrs	r1, r6
 8000e34:	431f      	orrs	r7, r3
 8000e36:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	f1c2 0320 	rsb	r3, r2, #32
 8000e46:	40d8      	lsrs	r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e50:	4091      	lsls	r1, r2
 8000e52:	4301      	orrs	r1, r0
 8000e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e60:	fb07 3610 	mls	r6, r7, r0, r3
 8000e64:	0c0b      	lsrs	r3, r1, #16
 8000e66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	fa04 f402 	lsl.w	r4, r4, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x260>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e7e:	d22f      	bcs.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e80:	429e      	cmp	r6, r3
 8000e82:	d92d      	bls.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	b289      	uxth	r1, r1
 8000e8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e90:	fb07 3316 	mls	r3, r7, r6, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb06 f30e 	mul.w	r3, r6, lr
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x28a>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ea8:	d216      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d914      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eae:	3e02      	subs	r6, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eb8:	e738      	b.n	8000d2c <__udivmoddi4+0x104>
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e705      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e3      	b.n	8000c8c <__udivmoddi4+0x64>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6f8      	b.n	8000cba <__udivmoddi4+0x92>
 8000ec8:	454b      	cmp	r3, r9
 8000eca:	d2a9      	bcs.n	8000e20 <__udivmoddi4+0x1f8>
 8000ecc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7a3      	b.n	8000e20 <__udivmoddi4+0x1f8>
 8000ed8:	4646      	mov	r6, r8
 8000eda:	e7ea      	b.n	8000eb2 <__udivmoddi4+0x28a>
 8000edc:	4620      	mov	r0, r4
 8000ede:	e794      	b.n	8000e0a <__udivmoddi4+0x1e2>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	e7d1      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ee4:	46d0      	mov	r8, sl
 8000ee6:	e77b      	b.n	8000de0 <__udivmoddi4+0x1b8>
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	e732      	b.n	8000d54 <__udivmoddi4+0x12c>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e709      	b.n	8000d06 <__udivmoddi4+0xde>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e742      	b.n	8000d7e <__udivmoddi4+0x156>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <InitCapteur>:
#define ValueResetBMP 0xb6
#define ValueCLKSEL 0x02
uint8_t data[48];


void InitCapteur(I2C_HandleTypeDef* i2cHandle){
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af02      	add	r7, sp, #8
 8000f02:	6078      	str	r0, [r7, #4]

	  if(i2cHandle->Instance==I2C1)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a1b      	ldr	r2, [pc, #108]	; (8000f78 <InitCapteur+0x7c>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d12f      	bne.n	8000f6e <InitCapteur+0x72>
	  {
	/* MPU Reset */
	data[0]=RegisterResetMPU;
 8000f0e:	4b1b      	ldr	r3, [pc, #108]	; (8000f7c <InitCapteur+0x80>)
 8000f10:	226b      	movs	r2, #107	; 0x6b
 8000f12:	701a      	strb	r2, [r3, #0]
	data[1]=ValueResetMPU;
 8000f14:	4b19      	ldr	r3, [pc, #100]	; (8000f7c <InitCapteur+0x80>)
 8000f16:	2280      	movs	r2, #128	; 0x80
 8000f18:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1,AdressMPU, data, 2, HAL_MAX_DELAY);
 8000f1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f1e:	9300      	str	r3, [sp, #0]
 8000f20:	2302      	movs	r3, #2
 8000f22:	4a16      	ldr	r2, [pc, #88]	; (8000f7c <InitCapteur+0x80>)
 8000f24:	21d0      	movs	r1, #208	; 0xd0
 8000f26:	4816      	ldr	r0, [pc, #88]	; (8000f80 <InitCapteur+0x84>)
 8000f28:	f001 f936 	bl	8002198 <HAL_I2C_Master_Transmit>

	/* BMP Reset */
	data[0]=RegisterResetBMP;
 8000f2c:	4b13      	ldr	r3, [pc, #76]	; (8000f7c <InitCapteur+0x80>)
 8000f2e:	22e0      	movs	r2, #224	; 0xe0
 8000f30:	701a      	strb	r2, [r3, #0]
	data[1]=ValueResetBMP;
 8000f32:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <InitCapteur+0x80>)
 8000f34:	22b6      	movs	r2, #182	; 0xb6
 8000f36:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1,AdressBMP, data, 2, HAL_MAX_DELAY);
 8000f38:	f04f 33ff 	mov.w	r3, #4294967295
 8000f3c:	9300      	str	r3, [sp, #0]
 8000f3e:	2302      	movs	r3, #2
 8000f40:	4a0e      	ldr	r2, [pc, #56]	; (8000f7c <InitCapteur+0x80>)
 8000f42:	21ee      	movs	r1, #238	; 0xee
 8000f44:	480e      	ldr	r0, [pc, #56]	; (8000f80 <InitCapteur+0x84>)
 8000f46:	f001 f927 	bl	8002198 <HAL_I2C_Master_Transmit>

	HAL_Delay(100);
 8000f4a:	2064      	movs	r0, #100	; 0x64
 8000f4c:	f000 fdf4 	bl	8001b38 <HAL_Delay>

	/* Choix de l'horloge */
	data[0]=RegisterCLKSEL;
 8000f50:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <InitCapteur+0x80>)
 8000f52:	226b      	movs	r2, #107	; 0x6b
 8000f54:	701a      	strb	r2, [r3, #0]
	data[1]=ValueCLKSEL;
 8000f56:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <InitCapteur+0x80>)
 8000f58:	2202      	movs	r2, #2
 8000f5a:	705a      	strb	r2, [r3, #1]
	HAL_I2C_Master_Transmit(&hi2c1,AdressMPU, data, 2, HAL_MAX_DELAY);
 8000f5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f60:	9300      	str	r3, [sp, #0]
 8000f62:	2302      	movs	r3, #2
 8000f64:	4a05      	ldr	r2, [pc, #20]	; (8000f7c <InitCapteur+0x80>)
 8000f66:	21d0      	movs	r1, #208	; 0xd0
 8000f68:	4805      	ldr	r0, [pc, #20]	; (8000f80 <InitCapteur+0x84>)
 8000f6a:	f001 f915 	bl	8002198 <HAL_I2C_Master_Transmit>


	  }
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40005400 	.word	0x40005400
 8000f7c:	200001fc 	.word	0x200001fc
 8000f80:	2000022c 	.word	0x2000022c
 8000f84:	00000000 	.word	0x00000000

08000f88 <Measure_T>:

void Measure_T(I2C_HandleTypeDef* i2cHandle,double *Temp){
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af02      	add	r7, sp, #8
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
	if(i2cHandle->Instance==I2C1)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4a26      	ldr	r2, [pc, #152]	; (8001030 <Measure_T+0xa8>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d13f      	bne.n	800101c <Measure_T+0x94>
		  {
		data[0]=TEMP_OUT_H;
 8000f9c:	4b25      	ldr	r3, [pc, #148]	; (8001034 <Measure_T+0xac>)
 8000f9e:	2241      	movs	r2, #65	; 0x41
 8000fa0:	701a      	strb	r2, [r3, #0]
		if(HAL_I2C_Master_Transmit(&hi2c1,AdressMPU, data, 1, HAL_MAX_DELAY) != HAL_OK){
 8000fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa6:	9300      	str	r3, [sp, #0]
 8000fa8:	2301      	movs	r3, #1
 8000faa:	4a22      	ldr	r2, [pc, #136]	; (8001034 <Measure_T+0xac>)
 8000fac:	21d0      	movs	r1, #208	; 0xd0
 8000fae:	4822      	ldr	r0, [pc, #136]	; (8001038 <Measure_T+0xb0>)
 8000fb0:	f001 f8f2 	bl	8002198 <HAL_I2C_Master_Transmit>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <Measure_T+0x36>
	    	  	  Error_Handler();
 8000fba:	f000 fb41 	bl	8001640 <Error_Handler>
			  }
		if(HAL_I2C_Master_Receive(&hi2c1,AdressMPU, data, 2, HAL_MAX_DELAY) != HAL_OK){
 8000fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc2:	9300      	str	r3, [sp, #0]
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	4a1b      	ldr	r2, [pc, #108]	; (8001034 <Measure_T+0xac>)
 8000fc8:	21d0      	movs	r1, #208	; 0xd0
 8000fca:	481b      	ldr	r0, [pc, #108]	; (8001038 <Measure_T+0xb0>)
 8000fcc:	f001 f9d8 	bl	8002380 <HAL_I2C_Master_Receive>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <Measure_T+0x52>
		    	  Error_Handler();
 8000fd6:	f000 fb33 	bl	8001640 <Error_Handler>
		      }
		HAL_Delay(1000);
 8000fda:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fde:	f000 fdab 	bl	8001b38 <HAL_Delay>
		*Temp = (((data[0]<<8)+(data[1]) - ROOM_TEMP_OFFSET)/TEMP_SENS) + ROOM_TEMP_OFFSET;
 8000fe2:	4b14      	ldr	r3, [pc, #80]	; (8001034 <Measure_T+0xac>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	021b      	lsls	r3, r3, #8
 8000fe8:	4a12      	ldr	r2, [pc, #72]	; (8001034 <Measure_T+0xac>)
 8000fea:	7852      	ldrb	r2, [r2, #1]
 8000fec:	4413      	add	r3, r2
 8000fee:	3b15      	subs	r3, #21
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f7ff fabf 	bl	8000574 <__aeabi_i2d>
 8000ff6:	a30c      	add	r3, pc, #48	; (adr r3, 8001028 <Measure_T+0xa0>)
 8000ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ffc:	f7ff fc4e 	bl	800089c <__aeabi_ddiv>
 8001000:	4602      	mov	r2, r0
 8001002:	460b      	mov	r3, r1
 8001004:	4610      	mov	r0, r2
 8001006:	4619      	mov	r1, r3
 8001008:	f04f 0200 	mov.w	r2, #0
 800100c:	4b0b      	ldr	r3, [pc, #44]	; (800103c <Measure_T+0xb4>)
 800100e:	f7ff f965 	bl	80002dc <__adddf3>
 8001012:	4602      	mov	r2, r0
 8001014:	460b      	mov	r3, r1
 8001016:	6839      	ldr	r1, [r7, #0]
 8001018:	e9c1 2300 	strd	r2, r3, [r1]
		  }
}
 800101c:	bf00      	nop
 800101e:	3708      	adds	r7, #8
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	f3af 8000 	nop.w
 8001028:	851eb852 	.word	0x851eb852
 800102c:	4074ddeb 	.word	0x4074ddeb
 8001030:	40005400 	.word	0x40005400
 8001034:	200001fc 	.word	0x200001fc
 8001038:	2000022c 	.word	0x2000022c
 800103c:	40350000 	.word	0x40350000

08001040 <Measure_A>:

void Measure_A(I2C_HandleTypeDef* i2cHandle,double* AccelX,double* AccelY,double* AccelZ){
 8001040:	b580      	push	{r7, lr}
 8001042:	b086      	sub	sp, #24
 8001044:	af02      	add	r7, sp, #8
 8001046:	60f8      	str	r0, [r7, #12]
 8001048:	60b9      	str	r1, [r7, #8]
 800104a:	607a      	str	r2, [r7, #4]
 800104c:	603b      	str	r3, [r7, #0]
	if(i2cHandle->Instance==I2C1){
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a31      	ldr	r2, [pc, #196]	; (8001118 <Measure_A+0xd8>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d15a      	bne.n	800110e <Measure_A+0xce>
		data[0]=ACCEL_XOUT_H;
 8001058:	4b30      	ldr	r3, [pc, #192]	; (800111c <Measure_A+0xdc>)
 800105a:	223b      	movs	r2, #59	; 0x3b
 800105c:	701a      	strb	r2, [r3, #0]
		if(HAL_I2C_Master_Transmit(&hi2c1,AdressMPU, data, 1, HAL_MAX_DELAY) != HAL_OK){
 800105e:	f04f 33ff 	mov.w	r3, #4294967295
 8001062:	9300      	str	r3, [sp, #0]
 8001064:	2301      	movs	r3, #1
 8001066:	4a2d      	ldr	r2, [pc, #180]	; (800111c <Measure_A+0xdc>)
 8001068:	21d0      	movs	r1, #208	; 0xd0
 800106a:	482d      	ldr	r0, [pc, #180]	; (8001120 <Measure_A+0xe0>)
 800106c:	f001 f894 	bl	8002198 <HAL_I2C_Master_Transmit>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <Measure_A+0x3a>
	    	  	  Error_Handler();
 8001076:	f000 fae3 	bl	8001640 <Error_Handler>
			  }
		if(HAL_I2C_Master_Receive(&hi2c1,AdressMPU, data, 6, HAL_MAX_DELAY) != HAL_OK){
 800107a:	f04f 33ff 	mov.w	r3, #4294967295
 800107e:	9300      	str	r3, [sp, #0]
 8001080:	2306      	movs	r3, #6
 8001082:	4a26      	ldr	r2, [pc, #152]	; (800111c <Measure_A+0xdc>)
 8001084:	21d0      	movs	r1, #208	; 0xd0
 8001086:	4826      	ldr	r0, [pc, #152]	; (8001120 <Measure_A+0xe0>)
 8001088:	f001 f97a 	bl	8002380 <HAL_I2C_Master_Receive>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <Measure_A+0x56>
		    	  Error_Handler();
 8001092:	f000 fad5 	bl	8001640 <Error_Handler>
		      }
		*AccelX = ((data[0]<<8)+(data[1]))/1000;
 8001096:	4b21      	ldr	r3, [pc, #132]	; (800111c <Measure_A+0xdc>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	021b      	lsls	r3, r3, #8
 800109c:	4a1f      	ldr	r2, [pc, #124]	; (800111c <Measure_A+0xdc>)
 800109e:	7852      	ldrb	r2, [r2, #1]
 80010a0:	4413      	add	r3, r2
 80010a2:	4a20      	ldr	r2, [pc, #128]	; (8001124 <Measure_A+0xe4>)
 80010a4:	fb82 1203 	smull	r1, r2, r2, r3
 80010a8:	1192      	asrs	r2, r2, #6
 80010aa:	17db      	asrs	r3, r3, #31
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff fa60 	bl	8000574 <__aeabi_i2d>
 80010b4:	4602      	mov	r2, r0
 80010b6:	460b      	mov	r3, r1
 80010b8:	68b9      	ldr	r1, [r7, #8]
 80010ba:	e9c1 2300 	strd	r2, r3, [r1]
		*AccelY = ((data[2]<<8)+(data[3]))/1000;
 80010be:	4b17      	ldr	r3, [pc, #92]	; (800111c <Measure_A+0xdc>)
 80010c0:	789b      	ldrb	r3, [r3, #2]
 80010c2:	021b      	lsls	r3, r3, #8
 80010c4:	4a15      	ldr	r2, [pc, #84]	; (800111c <Measure_A+0xdc>)
 80010c6:	78d2      	ldrb	r2, [r2, #3]
 80010c8:	4413      	add	r3, r2
 80010ca:	4a16      	ldr	r2, [pc, #88]	; (8001124 <Measure_A+0xe4>)
 80010cc:	fb82 1203 	smull	r1, r2, r2, r3
 80010d0:	1192      	asrs	r2, r2, #6
 80010d2:	17db      	asrs	r3, r3, #31
 80010d4:	1ad3      	subs	r3, r2, r3
 80010d6:	4618      	mov	r0, r3
 80010d8:	f7ff fa4c 	bl	8000574 <__aeabi_i2d>
 80010dc:	4602      	mov	r2, r0
 80010de:	460b      	mov	r3, r1
 80010e0:	6879      	ldr	r1, [r7, #4]
 80010e2:	e9c1 2300 	strd	r2, r3, [r1]
		*AccelZ = ((data[4]<<8)+(data[5]))/1000;
 80010e6:	4b0d      	ldr	r3, [pc, #52]	; (800111c <Measure_A+0xdc>)
 80010e8:	791b      	ldrb	r3, [r3, #4]
 80010ea:	021b      	lsls	r3, r3, #8
 80010ec:	4a0b      	ldr	r2, [pc, #44]	; (800111c <Measure_A+0xdc>)
 80010ee:	7952      	ldrb	r2, [r2, #5]
 80010f0:	4413      	add	r3, r2
 80010f2:	4a0c      	ldr	r2, [pc, #48]	; (8001124 <Measure_A+0xe4>)
 80010f4:	fb82 1203 	smull	r1, r2, r2, r3
 80010f8:	1192      	asrs	r2, r2, #6
 80010fa:	17db      	asrs	r3, r3, #31
 80010fc:	1ad3      	subs	r3, r2, r3
 80010fe:	4618      	mov	r0, r3
 8001100:	f7ff fa38 	bl	8000574 <__aeabi_i2d>
 8001104:	4602      	mov	r2, r0
 8001106:	460b      	mov	r3, r1
 8001108:	6839      	ldr	r1, [r7, #0]
 800110a:	e9c1 2300 	strd	r2, r3, [r1]
	}
}
 800110e:	bf00      	nop
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40005400 	.word	0x40005400
 800111c:	200001fc 	.word	0x200001fc
 8001120:	2000022c 	.word	0x2000022c
 8001124:	10624dd3 	.word	0x10624dd3

08001128 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA3   ------> LPUART1_RX
*/
void MX_GPIO_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b08a      	sub	sp, #40	; 0x28
 800112c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112e:	f107 0314 	add.w	r3, r7, #20
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]
 800113a:	60da      	str	r2, [r3, #12]
 800113c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800113e:	4b34      	ldr	r3, [pc, #208]	; (8001210 <MX_GPIO_Init+0xe8>)
 8001140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001142:	4a33      	ldr	r2, [pc, #204]	; (8001210 <MX_GPIO_Init+0xe8>)
 8001144:	f043 0304 	orr.w	r3, r3, #4
 8001148:	64d3      	str	r3, [r2, #76]	; 0x4c
 800114a:	4b31      	ldr	r3, [pc, #196]	; (8001210 <MX_GPIO_Init+0xe8>)
 800114c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114e:	f003 0304 	and.w	r3, r3, #4
 8001152:	613b      	str	r3, [r7, #16]
 8001154:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001156:	4b2e      	ldr	r3, [pc, #184]	; (8001210 <MX_GPIO_Init+0xe8>)
 8001158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115a:	4a2d      	ldr	r2, [pc, #180]	; (8001210 <MX_GPIO_Init+0xe8>)
 800115c:	f043 0320 	orr.w	r3, r3, #32
 8001160:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001162:	4b2b      	ldr	r3, [pc, #172]	; (8001210 <MX_GPIO_Init+0xe8>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001166:	f003 0320 	and.w	r3, r3, #32
 800116a:	60fb      	str	r3, [r7, #12]
 800116c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800116e:	4b28      	ldr	r3, [pc, #160]	; (8001210 <MX_GPIO_Init+0xe8>)
 8001170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001172:	4a27      	ldr	r2, [pc, #156]	; (8001210 <MX_GPIO_Init+0xe8>)
 8001174:	f043 0301 	orr.w	r3, r3, #1
 8001178:	64d3      	str	r3, [r2, #76]	; 0x4c
 800117a:	4b25      	ldr	r3, [pc, #148]	; (8001210 <MX_GPIO_Init+0xe8>)
 800117c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	60bb      	str	r3, [r7, #8]
 8001184:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001186:	4b22      	ldr	r3, [pc, #136]	; (8001210 <MX_GPIO_Init+0xe8>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118a:	4a21      	ldr	r2, [pc, #132]	; (8001210 <MX_GPIO_Init+0xe8>)
 800118c:	f043 0302 	orr.w	r3, r3, #2
 8001190:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001192:	4b1f      	ldr	r3, [pc, #124]	; (8001210 <MX_GPIO_Init+0xe8>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800119e:	2200      	movs	r2, #0
 80011a0:	2120      	movs	r1, #32
 80011a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011a6:	f000 ff4f 	bl	8002048 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011b0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011ba:	f107 0314 	add.w	r3, r7, #20
 80011be:	4619      	mov	r1, r3
 80011c0:	4814      	ldr	r0, [pc, #80]	; (8001214 <MX_GPIO_Init+0xec>)
 80011c2:	f000 fdbf 	bl	8001d44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LPUART1_RX_Pin;
 80011c6:	2308      	movs	r3, #8
 80011c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ca:	2302      	movs	r3, #2
 80011cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d2:	2300      	movs	r3, #0
 80011d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80011d6:	230c      	movs	r3, #12
 80011d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LPUART1_RX_GPIO_Port, &GPIO_InitStruct);
 80011da:	f107 0314 	add.w	r3, r7, #20
 80011de:	4619      	mov	r1, r3
 80011e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e4:	f000 fdae 	bl	8001d44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80011e8:	2320      	movs	r3, #32
 80011ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ec:	2301      	movs	r3, #1
 80011ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f4:	2300      	movs	r3, #0
 80011f6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011f8:	f107 0314 	add.w	r3, r7, #20
 80011fc:	4619      	mov	r1, r3
 80011fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001202:	f000 fd9f 	bl	8001d44 <HAL_GPIO_Init>

}
 8001206:	bf00      	nop
 8001208:	3728      	adds	r7, #40	; 0x28
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40021000 	.word	0x40021000
 8001214:	48000800 	.word	0x48000800

08001218 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800121c:	4b1b      	ldr	r3, [pc, #108]	; (800128c <MX_I2C1_Init+0x74>)
 800121e:	4a1c      	ldr	r2, [pc, #112]	; (8001290 <MX_I2C1_Init+0x78>)
 8001220:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 8001222:	4b1a      	ldr	r3, [pc, #104]	; (800128c <MX_I2C1_Init+0x74>)
 8001224:	4a1b      	ldr	r2, [pc, #108]	; (8001294 <MX_I2C1_Init+0x7c>)
 8001226:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001228:	4b18      	ldr	r3, [pc, #96]	; (800128c <MX_I2C1_Init+0x74>)
 800122a:	2200      	movs	r2, #0
 800122c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800122e:	4b17      	ldr	r3, [pc, #92]	; (800128c <MX_I2C1_Init+0x74>)
 8001230:	2201      	movs	r2, #1
 8001232:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001234:	4b15      	ldr	r3, [pc, #84]	; (800128c <MX_I2C1_Init+0x74>)
 8001236:	2200      	movs	r2, #0
 8001238:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800123a:	4b14      	ldr	r3, [pc, #80]	; (800128c <MX_I2C1_Init+0x74>)
 800123c:	2200      	movs	r2, #0
 800123e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001240:	4b12      	ldr	r3, [pc, #72]	; (800128c <MX_I2C1_Init+0x74>)
 8001242:	2200      	movs	r2, #0
 8001244:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001246:	4b11      	ldr	r3, [pc, #68]	; (800128c <MX_I2C1_Init+0x74>)
 8001248:	2200      	movs	r2, #0
 800124a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800124c:	4b0f      	ldr	r3, [pc, #60]	; (800128c <MX_I2C1_Init+0x74>)
 800124e:	2200      	movs	r2, #0
 8001250:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001252:	480e      	ldr	r0, [pc, #56]	; (800128c <MX_I2C1_Init+0x74>)
 8001254:	f000 ff10 	bl	8002078 <HAL_I2C_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800125e:	f000 f9ef 	bl	8001640 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001262:	2100      	movs	r1, #0
 8001264:	4809      	ldr	r0, [pc, #36]	; (800128c <MX_I2C1_Init+0x74>)
 8001266:	f001 fd01 	bl	8002c6c <HAL_I2CEx_ConfigAnalogFilter>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001270:	f000 f9e6 	bl	8001640 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001274:	2100      	movs	r1, #0
 8001276:	4805      	ldr	r0, [pc, #20]	; (800128c <MX_I2C1_Init+0x74>)
 8001278:	f001 fd43 	bl	8002d02 <HAL_I2CEx_ConfigDigitalFilter>
 800127c:	4603      	mov	r3, r0
 800127e:	2b00      	cmp	r3, #0
 8001280:	d001      	beq.n	8001286 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001282:	f000 f9dd 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	2000022c 	.word	0x2000022c
 8001290:	40005400 	.word	0x40005400
 8001294:	30a0a7fb 	.word	0x30a0a7fb

08001298 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b09a      	sub	sp, #104	; 0x68
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012b0:	f107 0310 	add.w	r3, r7, #16
 80012b4:	2244      	movs	r2, #68	; 0x44
 80012b6:	2100      	movs	r1, #0
 80012b8:	4618      	mov	r0, r3
 80012ba:	f003 fdf7 	bl	8004eac <memset>
  if(i2cHandle->Instance==I2C1)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a1f      	ldr	r2, [pc, #124]	; (8001340 <HAL_I2C_MspInit+0xa8>)
 80012c4:	4293      	cmp	r3, r2
 80012c6:	d136      	bne.n	8001336 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80012c8:	2340      	movs	r3, #64	; 0x40
 80012ca:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80012cc:	2300      	movs	r3, #0
 80012ce:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012d0:	f107 0310 	add.w	r3, r7, #16
 80012d4:	4618      	mov	r0, r3
 80012d6:	f002 fb49 	bl	800396c <HAL_RCCEx_PeriphCLKConfig>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80012e0:	f000 f9ae 	bl	8001640 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e4:	4b17      	ldr	r3, [pc, #92]	; (8001344 <HAL_I2C_MspInit+0xac>)
 80012e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e8:	4a16      	ldr	r2, [pc, #88]	; (8001344 <HAL_I2C_MspInit+0xac>)
 80012ea:	f043 0302 	orr.w	r3, r3, #2
 80012ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012f0:	4b14      	ldr	r3, [pc, #80]	; (8001344 <HAL_I2C_MspInit+0xac>)
 80012f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f4:	f003 0302 	and.w	r3, r3, #2
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012fc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001300:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001302:	2312      	movs	r3, #18
 8001304:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130a:	2300      	movs	r3, #0
 800130c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800130e:	2304      	movs	r3, #4
 8001310:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001312:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001316:	4619      	mov	r1, r3
 8001318:	480b      	ldr	r0, [pc, #44]	; (8001348 <HAL_I2C_MspInit+0xb0>)
 800131a:	f000 fd13 	bl	8001d44 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800131e:	4b09      	ldr	r3, [pc, #36]	; (8001344 <HAL_I2C_MspInit+0xac>)
 8001320:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001322:	4a08      	ldr	r2, [pc, #32]	; (8001344 <HAL_I2C_MspInit+0xac>)
 8001324:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001328:	6593      	str	r3, [r2, #88]	; 0x58
 800132a:	4b06      	ldr	r3, [pc, #24]	; (8001344 <HAL_I2C_MspInit+0xac>)
 800132c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800132e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001332:	60bb      	str	r3, [r7, #8]
 8001334:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001336:	bf00      	nop
 8001338:	3768      	adds	r7, #104	; 0x68
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40005400 	.word	0x40005400
 8001344:	40021000 	.word	0x40021000
 8001348:	48000400 	.word	0x48000400

0800134c <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001354:	1d39      	adds	r1, r7, #4
 8001356:	f04f 33ff 	mov.w	r3, #4294967295
 800135a:	2201      	movs	r2, #1
 800135c:	4803      	ldr	r0, [pc, #12]	; (800136c <__io_putchar+0x20>)
 800135e:	f002 fd45 	bl	8003dec <HAL_UART_Transmit>
return ch;
 8001362:	687b      	ldr	r3, [r7, #4]
}
 8001364:	4618      	mov	r0, r3
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	2000029c 	.word	0x2000029c

08001370 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b090      	sub	sp, #64	; 0x40
 8001374:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001376:	f000 fb6e 	bl	8001a56 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800137a:	f000 f915 	bl	80015a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800137e:	f7ff fed3 	bl	8001128 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001382:	f7ff ff49 	bl	8001218 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001386:	f000 fa99 	bl	80018bc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  	HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 800138a:	2201      	movs	r2, #1
 800138c:	2120      	movs	r1, #32
 800138e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001392:	f000 fe59 	bl	8002048 <HAL_GPIO_WritePin>
    HAL_Delay(2000);
 8001396:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800139a:	f000 fbcd 	bl	8001b38 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);
 800139e:	2200      	movs	r2, #0
 80013a0:	2120      	movs	r1, #32
 80013a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013a6:	f000 fe4f 	bl	8002048 <HAL_GPIO_WritePin>

    InitCapteur(&hi2c1);
 80013aa:	486b      	ldr	r0, [pc, #428]	; (8001558 <main+0x1e8>)
 80013ac:	f7ff fda6 	bl	8000efc <InitCapteur>
    BSP_LCD_DisplayStringAt(0, LINE(5), (uint8_t *)mess,CENTER_MODE);
    HAL_Delay(1000);
    BSP_LCD_Clear(LCD_COLOR_WHITE);
    */
    // Go through all possible i2c addresses
	printf("\r\n");
 80013b0:	486a      	ldr	r0, [pc, #424]	; (800155c <main+0x1ec>)
 80013b2:	f004 fa73 	bl	800589c <puts>
	printf("\r\n");
 80013b6:	4869      	ldr	r0, [pc, #420]	; (800155c <main+0x1ec>)
 80013b8:	f004 fa70 	bl	800589c <puts>
    printf("-- Test des adresses disponibles --\r\n");
 80013bc:	4868      	ldr	r0, [pc, #416]	; (8001560 <main+0x1f0>)
 80013be:	f004 fa6d 	bl	800589c <puts>
    	for (uint8_t i = 0; i < 128; i++) {
 80013c2:	2300      	movs	r3, #0
 80013c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80013c8:	e029      	b.n	800141e <main+0xae>
    	  if (HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t)(i<<1), 3, 5) == HAL_OK) {
 80013ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	b299      	uxth	r1, r3
 80013d4:	2305      	movs	r3, #5
 80013d6:	2203      	movs	r2, #3
 80013d8:	485f      	ldr	r0, [pc, #380]	; (8001558 <main+0x1e8>)
 80013da:	f001 f8c7 	bl	800256c <HAL_I2C_IsDeviceReady>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d106      	bne.n	80013f2 <main+0x82>
    		  printf("%2x ", i);
 80013e4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80013e8:	4619      	mov	r1, r3
 80013ea:	485e      	ldr	r0, [pc, #376]	; (8001564 <main+0x1f4>)
 80013ec:	f004 f9d0 	bl	8005790 <iprintf>
 80013f0:	e002      	b.n	80013f8 <main+0x88>
    	  } else {
    		  printf("-- ");
 80013f2:	485d      	ldr	r0, [pc, #372]	; (8001568 <main+0x1f8>)
 80013f4:	f004 f9cc 	bl	8005790 <iprintf>
    	  }
    	  if (i > 0 && (i + 1) % 16 == 0) printf("\n\r");
 80013f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d009      	beq.n	8001414 <main+0xa4>
 8001400:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001404:	3301      	adds	r3, #1
 8001406:	f003 030f 	and.w	r3, r3, #15
 800140a:	2b00      	cmp	r3, #0
 800140c:	d102      	bne.n	8001414 <main+0xa4>
 800140e:	4857      	ldr	r0, [pc, #348]	; (800156c <main+0x1fc>)
 8001410:	f004 f9be 	bl	8005790 <iprintf>
    	for (uint8_t i = 0; i < 128; i++) {
 8001414:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8001418:	3301      	adds	r3, #1
 800141a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800141e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001422:	2b00      	cmp	r3, #0
 8001424:	dad1      	bge.n	80013ca <main+0x5a>
      }

      printf("\n\r");
 8001426:	4851      	ldr	r0, [pc, #324]	; (800156c <main+0x1fc>)
 8001428:	f004 f9b2 	bl	8005790 <iprintf>

      printf("-- Test de l'identite du capteur MPU-9250 --\r\n");
 800142c:	4850      	ldr	r0, [pc, #320]	; (8001570 <main+0x200>)
 800142e:	f004 fa35 	bl	800589c <puts>
      uint8_t data[48];
      data[0]=0x75;
 8001432:	2375      	movs	r3, #117	; 0x75
 8001434:	713b      	strb	r3, [r7, #4]
      printf("Registre d'identification : %x\r\n",data[0]);
 8001436:	793b      	ldrb	r3, [r7, #4]
 8001438:	4619      	mov	r1, r3
 800143a:	484e      	ldr	r0, [pc, #312]	; (8001574 <main+0x204>)
 800143c:	f004 f9a8 	bl	8005790 <iprintf>
      if(HAL_I2C_Master_Transmit(&hi2c1,AdressMPU, data, 1, HAL_MAX_DELAY) != HAL_OK){
 8001440:	1d3a      	adds	r2, r7, #4
 8001442:	f04f 33ff 	mov.w	r3, #4294967295
 8001446:	9300      	str	r3, [sp, #0]
 8001448:	2301      	movs	r3, #1
 800144a:	21d0      	movs	r1, #208	; 0xd0
 800144c:	4842      	ldr	r0, [pc, #264]	; (8001558 <main+0x1e8>)
 800144e:	f000 fea3 	bl	8002198 <HAL_I2C_Master_Transmit>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <main+0xec>
    	  Error_Handler();
 8001458:	f000 f8f2 	bl	8001640 <Error_Handler>
      }
      if(HAL_I2C_Master_Receive(&hi2c1,AdressMPU, data, 1, HAL_MAX_DELAY) != HAL_OK){
 800145c:	1d3a      	adds	r2, r7, #4
 800145e:	f04f 33ff 	mov.w	r3, #4294967295
 8001462:	9300      	str	r3, [sp, #0]
 8001464:	2301      	movs	r3, #1
 8001466:	21d0      	movs	r1, #208	; 0xd0
 8001468:	483b      	ldr	r0, [pc, #236]	; (8001558 <main+0x1e8>)
 800146a:	f000 ff89 	bl	8002380 <HAL_I2C_Master_Receive>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <main+0x108>
    	  Error_Handler();
 8001474:	f000 f8e4 	bl	8001640 <Error_Handler>
      }
      printf("Valeur recu : %x\r\n",data[0]);
 8001478:	793b      	ldrb	r3, [r7, #4]
 800147a:	4619      	mov	r1, r3
 800147c:	483e      	ldr	r0, [pc, #248]	; (8001578 <main+0x208>)
 800147e:	f004 f987 	bl	8005790 <iprintf>
      if (data[0]!=0x71){
 8001482:	793b      	ldrb	r3, [r7, #4]
 8001484:	2b71      	cmp	r3, #113	; 0x71
 8001486:	d005      	beq.n	8001494 <main+0x124>
    	  printf("Error !\r\n");
 8001488:	483c      	ldr	r0, [pc, #240]	; (800157c <main+0x20c>)
 800148a:	f004 fa07 	bl	800589c <puts>
    	  Error_Handler();
 800148e:	f000 f8d7 	bl	8001640 <Error_Handler>
 8001492:	e002      	b.n	800149a <main+0x12a>
      }
      else{
    	  printf("Ok !\r\n");
 8001494:	483a      	ldr	r0, [pc, #232]	; (8001580 <main+0x210>)
 8001496:	f004 fa01 	bl	800589c <puts>
      }
	  printf("\r\n");
 800149a:	4830      	ldr	r0, [pc, #192]	; (800155c <main+0x1ec>)
 800149c:	f004 f9fe 	bl	800589c <puts>
      printf("-- Test de l'identite du capteur BPM-280 --\r\n");
 80014a0:	4838      	ldr	r0, [pc, #224]	; (8001584 <main+0x214>)
 80014a2:	f004 f9fb 	bl	800589c <puts>
      data[0]=0xd0;
 80014a6:	23d0      	movs	r3, #208	; 0xd0
 80014a8:	713b      	strb	r3, [r7, #4]
      printf("Registre d'identification : %x\r\n",data[0]);
 80014aa:	793b      	ldrb	r3, [r7, #4]
 80014ac:	4619      	mov	r1, r3
 80014ae:	4831      	ldr	r0, [pc, #196]	; (8001574 <main+0x204>)
 80014b0:	f004 f96e 	bl	8005790 <iprintf>
      if(HAL_I2C_Master_Transmit(&hi2c1,AdressBMP, data, 1, HAL_MAX_DELAY) != HAL_OK){
 80014b4:	1d3a      	adds	r2, r7, #4
 80014b6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ba:	9300      	str	r3, [sp, #0]
 80014bc:	2301      	movs	r3, #1
 80014be:	21ee      	movs	r1, #238	; 0xee
 80014c0:	4825      	ldr	r0, [pc, #148]	; (8001558 <main+0x1e8>)
 80014c2:	f000 fe69 	bl	8002198 <HAL_I2C_Master_Transmit>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d001      	beq.n	80014d0 <main+0x160>
    	  Error_Handler();
 80014cc:	f000 f8b8 	bl	8001640 <Error_Handler>
      }
      if(HAL_I2C_Master_Receive(&hi2c1,AdressBMP, data, 1, HAL_MAX_DELAY) != HAL_OK){
 80014d0:	1d3a      	adds	r2, r7, #4
 80014d2:	f04f 33ff 	mov.w	r3, #4294967295
 80014d6:	9300      	str	r3, [sp, #0]
 80014d8:	2301      	movs	r3, #1
 80014da:	21ee      	movs	r1, #238	; 0xee
 80014dc:	481e      	ldr	r0, [pc, #120]	; (8001558 <main+0x1e8>)
 80014de:	f000 ff4f 	bl	8002380 <HAL_I2C_Master_Receive>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d001      	beq.n	80014ec <main+0x17c>
    	  Error_Handler();
 80014e8:	f000 f8aa 	bl	8001640 <Error_Handler>
      }
      printf("Valeur recu : %x\r\n",data[0]);
 80014ec:	793b      	ldrb	r3, [r7, #4]
 80014ee:	4619      	mov	r1, r3
 80014f0:	4821      	ldr	r0, [pc, #132]	; (8001578 <main+0x208>)
 80014f2:	f004 f94d 	bl	8005790 <iprintf>
      if (data[0]!=0x58){
 80014f6:	793b      	ldrb	r3, [r7, #4]
 80014f8:	2b58      	cmp	r3, #88	; 0x58
 80014fa:	d005      	beq.n	8001508 <main+0x198>
    	  printf("Error !\r\n");
 80014fc:	481f      	ldr	r0, [pc, #124]	; (800157c <main+0x20c>)
 80014fe:	f004 f9cd 	bl	800589c <puts>
    	  Error_Handler();
 8001502:	f000 f89d 	bl	8001640 <Error_Handler>
 8001506:	e002      	b.n	800150e <main+0x19e>
      }
      else{
    	  printf("Ok !\r\n");
 8001508:	481d      	ldr	r0, [pc, #116]	; (8001580 <main+0x210>)
 800150a:	f004 f9c7 	bl	800589c <puts>
      }

      while (1)
      {
      	Measure_T(&hi2c1,&Temp);
 800150e:	491e      	ldr	r1, [pc, #120]	; (8001588 <main+0x218>)
 8001510:	4811      	ldr	r0, [pc, #68]	; (8001558 <main+0x1e8>)
 8001512:	f7ff fd39 	bl	8000f88 <Measure_T>
        printf("Temperature : %f\r\n",&Temp);
 8001516:	491c      	ldr	r1, [pc, #112]	; (8001588 <main+0x218>)
 8001518:	481c      	ldr	r0, [pc, #112]	; (800158c <main+0x21c>)
 800151a:	f004 f939 	bl	8005790 <iprintf>
    	Measure_A(&hi2c1,&AccelX,&AccelY,&AccelZ);
 800151e:	4b1c      	ldr	r3, [pc, #112]	; (8001590 <main+0x220>)
 8001520:	4a1c      	ldr	r2, [pc, #112]	; (8001594 <main+0x224>)
 8001522:	491d      	ldr	r1, [pc, #116]	; (8001598 <main+0x228>)
 8001524:	480c      	ldr	r0, [pc, #48]	; (8001558 <main+0x1e8>)
 8001526:	f7ff fd8b 	bl	8001040 <Measure_A>
        printf("AX %f\r\n",&AccelX);
 800152a:	491b      	ldr	r1, [pc, #108]	; (8001598 <main+0x228>)
 800152c:	481b      	ldr	r0, [pc, #108]	; (800159c <main+0x22c>)
 800152e:	f004 f92f 	bl	8005790 <iprintf>
        HAL_Delay(100);
 8001532:	2064      	movs	r0, #100	; 0x64
 8001534:	f000 fb00 	bl	8001b38 <HAL_Delay>
        printf("AY %f\r\n",&AccelY);
 8001538:	4916      	ldr	r1, [pc, #88]	; (8001594 <main+0x224>)
 800153a:	4819      	ldr	r0, [pc, #100]	; (80015a0 <main+0x230>)
 800153c:	f004 f928 	bl	8005790 <iprintf>
        HAL_Delay(100);
 8001540:	2064      	movs	r0, #100	; 0x64
 8001542:	f000 faf9 	bl	8001b38 <HAL_Delay>
        printf("AZ %f\r\n",&AccelZ);
 8001546:	4912      	ldr	r1, [pc, #72]	; (8001590 <main+0x220>)
 8001548:	4816      	ldr	r0, [pc, #88]	; (80015a4 <main+0x234>)
 800154a:	f004 f921 	bl	8005790 <iprintf>
    	HAL_Delay(500);
 800154e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001552:	f000 faf1 	bl	8001b38 <HAL_Delay>
      	Measure_T(&hi2c1,&Temp);
 8001556:	e7da      	b.n	800150e <main+0x19e>
 8001558:	2000022c 	.word	0x2000022c
 800155c:	08007a00 	.word	0x08007a00
 8001560:	08007a04 	.word	0x08007a04
 8001564:	08007a2c 	.word	0x08007a2c
 8001568:	08007a34 	.word	0x08007a34
 800156c:	08007a38 	.word	0x08007a38
 8001570:	08007a3c 	.word	0x08007a3c
 8001574:	08007a6c 	.word	0x08007a6c
 8001578:	08007a90 	.word	0x08007a90
 800157c:	08007aa4 	.word	0x08007aa4
 8001580:	08007ab0 	.word	0x08007ab0
 8001584:	08007ab8 	.word	0x08007ab8
 8001588:	20000278 	.word	0x20000278
 800158c:	08007ae8 	.word	0x08007ae8
 8001590:	20000290 	.word	0x20000290
 8001594:	20000288 	.word	0x20000288
 8001598:	20000280 	.word	0x20000280
 800159c:	08007afc 	.word	0x08007afc
 80015a0:	08007b04 	.word	0x08007b04
 80015a4:	08007b0c 	.word	0x08007b0c

080015a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b094      	sub	sp, #80	; 0x50
 80015ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ae:	f107 0318 	add.w	r3, r7, #24
 80015b2:	2238      	movs	r2, #56	; 0x38
 80015b4:	2100      	movs	r1, #0
 80015b6:	4618      	mov	r0, r3
 80015b8:	f003 fc78 	bl	8004eac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015bc:	1d3b      	adds	r3, r7, #4
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]
 80015c4:	609a      	str	r2, [r3, #8]
 80015c6:	60da      	str	r2, [r3, #12]
 80015c8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80015ca:	2000      	movs	r0, #0
 80015cc:	f001 fbe6 	bl	8002d9c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015d0:	2302      	movs	r3, #2
 80015d2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015d8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015da:	2340      	movs	r3, #64	; 0x40
 80015dc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015de:	2302      	movs	r3, #2
 80015e0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015e2:	2302      	movs	r3, #2
 80015e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80015e6:	2304      	movs	r3, #4
 80015e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80015ea:	2355      	movs	r3, #85	; 0x55
 80015ec:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015ee:	2302      	movs	r3, #2
 80015f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015f2:	2302      	movs	r3, #2
 80015f4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015f6:	2302      	movs	r3, #2
 80015f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015fa:	f107 0318 	add.w	r3, r7, #24
 80015fe:	4618      	mov	r0, r3
 8001600:	f001 fc80 	bl	8002f04 <HAL_RCC_OscConfig>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800160a:	f000 f819 	bl	8001640 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800160e:	230f      	movs	r3, #15
 8001610:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001612:	2303      	movs	r3, #3
 8001614:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800161a:	2300      	movs	r3, #0
 800161c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800161e:	2300      	movs	r3, #0
 8001620:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001622:	1d3b      	adds	r3, r7, #4
 8001624:	2104      	movs	r1, #4
 8001626:	4618      	mov	r0, r3
 8001628:	f001 ff84 	bl	8003534 <HAL_RCC_ClockConfig>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001632:	f000 f805 	bl	8001640 <Error_Handler>
  }
}
 8001636:	bf00      	nop
 8001638:	3750      	adds	r7, #80	; 0x50
 800163a:	46bd      	mov	sp, r7
 800163c:	bd80      	pop	{r7, pc}
	...

08001640 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	printf("Une erreur est survenue ! Arret du programme\r\n");
 8001644:	480a      	ldr	r0, [pc, #40]	; (8001670 <Error_Handler+0x30>)
 8001646:	f004 f929 	bl	800589c <puts>
	while(1){
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 800164a:	2201      	movs	r2, #1
 800164c:	2120      	movs	r1, #32
 800164e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001652:	f000 fcf9 	bl	8002048 <HAL_GPIO_WritePin>
	    HAL_Delay(200);
 8001656:	20c8      	movs	r0, #200	; 0xc8
 8001658:	f000 fa6e 	bl	8001b38 <HAL_Delay>
	    HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_RESET);
 800165c:	2200      	movs	r2, #0
 800165e:	2120      	movs	r1, #32
 8001660:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001664:	f000 fcf0 	bl	8002048 <HAL_GPIO_WritePin>
	    HAL_Delay(200);
 8001668:	20c8      	movs	r0, #200	; 0xc8
 800166a:	f000 fa65 	bl	8001b38 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,GPIO_PIN_SET);
 800166e:	e7ec      	b.n	800164a <Error_Handler+0xa>
 8001670:	08007b14 	.word	0x08007b14

08001674 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800167a:	4b12      	ldr	r3, [pc, #72]	; (80016c4 <HAL_MspInit+0x50>)
 800167c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800167e:	4a11      	ldr	r2, [pc, #68]	; (80016c4 <HAL_MspInit+0x50>)
 8001680:	f043 0301 	orr.w	r3, r3, #1
 8001684:	6613      	str	r3, [r2, #96]	; 0x60
 8001686:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <HAL_MspInit+0x50>)
 8001688:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800168a:	f003 0301 	and.w	r3, r3, #1
 800168e:	607b      	str	r3, [r7, #4]
 8001690:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001692:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <HAL_MspInit+0x50>)
 8001694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001696:	4a0b      	ldr	r2, [pc, #44]	; (80016c4 <HAL_MspInit+0x50>)
 8001698:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800169c:	6593      	str	r3, [r2, #88]	; 0x58
 800169e:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <HAL_MspInit+0x50>)
 80016a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016a6:	603b      	str	r3, [r7, #0]
 80016a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80016aa:	2200      	movs	r2, #0
 80016ac:	210f      	movs	r1, #15
 80016ae:	f06f 0001 	mvn.w	r0, #1
 80016b2:	f000 fb20 	bl	8001cf6 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80016b6:	f001 fc15 	bl	8002ee4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ba:	bf00      	nop
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40021000 	.word	0x40021000

080016c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016cc:	e7fe      	b.n	80016cc <NMI_Handler+0x4>

080016ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ce:	b480      	push	{r7}
 80016d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016d2:	e7fe      	b.n	80016d2 <HardFault_Handler+0x4>

080016d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016d8:	e7fe      	b.n	80016d8 <MemManage_Handler+0x4>

080016da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016da:	b480      	push	{r7}
 80016dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016de:	e7fe      	b.n	80016de <BusFault_Handler+0x4>

080016e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016e4:	e7fe      	b.n	80016e4 <UsageFault_Handler+0x4>

080016e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016e6:	b480      	push	{r7}
 80016e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016f8:	f000 fa00 	bl	8001afc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80016fc:	f003 fb12 	bl	8004d24 <xTaskGetSchedulerState>
 8001700:	4603      	mov	r3, r0
 8001702:	2b01      	cmp	r3, #1
 8001704:	d001      	beq.n	800170a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001706:	f003 fb77 	bl	8004df8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}

0800170e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800170e:	b480      	push	{r7}
 8001710:	af00      	add	r7, sp, #0
	return 1;
 8001712:	2301      	movs	r3, #1
}
 8001714:	4618      	mov	r0, r3
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr

0800171e <_kill>:

int _kill(int pid, int sig)
{
 800171e:	b580      	push	{r7, lr}
 8001720:	b082      	sub	sp, #8
 8001722:	af00      	add	r7, sp, #0
 8001724:	6078      	str	r0, [r7, #4]
 8001726:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001728:	f003 fb88 	bl	8004e3c <__errno>
 800172c:	4603      	mov	r3, r0
 800172e:	2216      	movs	r2, #22
 8001730:	601a      	str	r2, [r3, #0]
	return -1;
 8001732:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001736:	4618      	mov	r0, r3
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <_exit>:

void _exit (int status)
{
 800173e:	b580      	push	{r7, lr}
 8001740:	b082      	sub	sp, #8
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001746:	f04f 31ff 	mov.w	r1, #4294967295
 800174a:	6878      	ldr	r0, [r7, #4]
 800174c:	f7ff ffe7 	bl	800171e <_kill>
	while (1) {}		/* Make sure we hang here */
 8001750:	e7fe      	b.n	8001750 <_exit+0x12>

08001752 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	b086      	sub	sp, #24
 8001756:	af00      	add	r7, sp, #0
 8001758:	60f8      	str	r0, [r7, #12]
 800175a:	60b9      	str	r1, [r7, #8]
 800175c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800175e:	2300      	movs	r3, #0
 8001760:	617b      	str	r3, [r7, #20]
 8001762:	e00a      	b.n	800177a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001764:	f3af 8000 	nop.w
 8001768:	4601      	mov	r1, r0
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	1c5a      	adds	r2, r3, #1
 800176e:	60ba      	str	r2, [r7, #8]
 8001770:	b2ca      	uxtb	r2, r1
 8001772:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	3301      	adds	r3, #1
 8001778:	617b      	str	r3, [r7, #20]
 800177a:	697a      	ldr	r2, [r7, #20]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	429a      	cmp	r2, r3
 8001780:	dbf0      	blt.n	8001764 <_read+0x12>
	}

return len;
 8001782:	687b      	ldr	r3, [r7, #4]
}
 8001784:	4618      	mov	r0, r3
 8001786:	3718      	adds	r7, #24
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0
 8001792:	60f8      	str	r0, [r7, #12]
 8001794:	60b9      	str	r1, [r7, #8]
 8001796:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]
 800179c:	e009      	b.n	80017b2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	1c5a      	adds	r2, r3, #1
 80017a2:	60ba      	str	r2, [r7, #8]
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff fdd0 	bl	800134c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	3301      	adds	r3, #1
 80017b0:	617b      	str	r3, [r7, #20]
 80017b2:	697a      	ldr	r2, [r7, #20]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	dbf1      	blt.n	800179e <_write+0x12>
	}
	return len;
 80017ba:	687b      	ldr	r3, [r7, #4]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3718      	adds	r7, #24
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <_close>:

int _close(int file)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
	return -1;
 80017cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017ec:	605a      	str	r2, [r3, #4]
	return 0;
 80017ee:	2300      	movs	r3, #0
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	370c      	adds	r7, #12
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <_isatty>:

int _isatty(int file)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
	return 1;
 8001804:	2301      	movs	r3, #1
}
 8001806:	4618      	mov	r0, r3
 8001808:	370c      	adds	r7, #12
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001812:	b480      	push	{r7}
 8001814:	b085      	sub	sp, #20
 8001816:	af00      	add	r7, sp, #0
 8001818:	60f8      	str	r0, [r7, #12]
 800181a:	60b9      	str	r1, [r7, #8]
 800181c:	607a      	str	r2, [r7, #4]
	return 0;
 800181e:	2300      	movs	r3, #0
}
 8001820:	4618      	mov	r0, r3
 8001822:	3714      	adds	r7, #20
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001834:	4a14      	ldr	r2, [pc, #80]	; (8001888 <_sbrk+0x5c>)
 8001836:	4b15      	ldr	r3, [pc, #84]	; (800188c <_sbrk+0x60>)
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001840:	4b13      	ldr	r3, [pc, #76]	; (8001890 <_sbrk+0x64>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d102      	bne.n	800184e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001848:	4b11      	ldr	r3, [pc, #68]	; (8001890 <_sbrk+0x64>)
 800184a:	4a12      	ldr	r2, [pc, #72]	; (8001894 <_sbrk+0x68>)
 800184c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800184e:	4b10      	ldr	r3, [pc, #64]	; (8001890 <_sbrk+0x64>)
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4413      	add	r3, r2
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	429a      	cmp	r2, r3
 800185a:	d207      	bcs.n	800186c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800185c:	f003 faee 	bl	8004e3c <__errno>
 8001860:	4603      	mov	r3, r0
 8001862:	220c      	movs	r2, #12
 8001864:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001866:	f04f 33ff 	mov.w	r3, #4294967295
 800186a:	e009      	b.n	8001880 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800186c:	4b08      	ldr	r3, [pc, #32]	; (8001890 <_sbrk+0x64>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001872:	4b07      	ldr	r3, [pc, #28]	; (8001890 <_sbrk+0x64>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4413      	add	r3, r2
 800187a:	4a05      	ldr	r2, [pc, #20]	; (8001890 <_sbrk+0x64>)
 800187c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800187e:	68fb      	ldr	r3, [r7, #12]
}
 8001880:	4618      	mov	r0, r3
 8001882:	3718      	adds	r7, #24
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	20008000 	.word	0x20008000
 800188c:	00000400 	.word	0x00000400
 8001890:	20000298 	.word	0x20000298
 8001894:	200003f8 	.word	0x200003f8

08001898 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800189c:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <SystemInit+0x20>)
 800189e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018a2:	4a05      	ldr	r2, [pc, #20]	; (80018b8 <SystemInit+0x20>)
 80018a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	e000ed00 	.word	0xe000ed00

080018bc <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018c0:	4b22      	ldr	r3, [pc, #136]	; (800194c <MX_USART2_UART_Init+0x90>)
 80018c2:	4a23      	ldr	r2, [pc, #140]	; (8001950 <MX_USART2_UART_Init+0x94>)
 80018c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018c6:	4b21      	ldr	r3, [pc, #132]	; (800194c <MX_USART2_UART_Init+0x90>)
 80018c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018ce:	4b1f      	ldr	r3, [pc, #124]	; (800194c <MX_USART2_UART_Init+0x90>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018d4:	4b1d      	ldr	r3, [pc, #116]	; (800194c <MX_USART2_UART_Init+0x90>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018da:	4b1c      	ldr	r3, [pc, #112]	; (800194c <MX_USART2_UART_Init+0x90>)
 80018dc:	2200      	movs	r2, #0
 80018de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018e0:	4b1a      	ldr	r3, [pc, #104]	; (800194c <MX_USART2_UART_Init+0x90>)
 80018e2:	220c      	movs	r2, #12
 80018e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018e6:	4b19      	ldr	r3, [pc, #100]	; (800194c <MX_USART2_UART_Init+0x90>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018ec:	4b17      	ldr	r3, [pc, #92]	; (800194c <MX_USART2_UART_Init+0x90>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018f2:	4b16      	ldr	r3, [pc, #88]	; (800194c <MX_USART2_UART_Init+0x90>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80018f8:	4b14      	ldr	r3, [pc, #80]	; (800194c <MX_USART2_UART_Init+0x90>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018fe:	4b13      	ldr	r3, [pc, #76]	; (800194c <MX_USART2_UART_Init+0x90>)
 8001900:	2200      	movs	r2, #0
 8001902:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001904:	4811      	ldr	r0, [pc, #68]	; (800194c <MX_USART2_UART_Init+0x90>)
 8001906:	f002 fa21 	bl	8003d4c <HAL_UART_Init>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001910:	f7ff fe96 	bl	8001640 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001914:	2100      	movs	r1, #0
 8001916:	480d      	ldr	r0, [pc, #52]	; (800194c <MX_USART2_UART_Init+0x90>)
 8001918:	f002 ffb8 	bl	800488c <HAL_UARTEx_SetTxFifoThreshold>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001922:	f7ff fe8d 	bl	8001640 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001926:	2100      	movs	r1, #0
 8001928:	4808      	ldr	r0, [pc, #32]	; (800194c <MX_USART2_UART_Init+0x90>)
 800192a:	f002 ffed 	bl	8004908 <HAL_UARTEx_SetRxFifoThreshold>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001934:	f7ff fe84 	bl	8001640 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001938:	4804      	ldr	r0, [pc, #16]	; (800194c <MX_USART2_UART_Init+0x90>)
 800193a:	f002 ff6e 	bl	800481a <HAL_UARTEx_DisableFifoMode>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001944:	f7ff fe7c 	bl	8001640 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001948:	bf00      	nop
 800194a:	bd80      	pop	{r7, pc}
 800194c:	2000029c 	.word	0x2000029c
 8001950:	40004400 	.word	0x40004400

08001954 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b09a      	sub	sp, #104	; 0x68
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800195c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]
 8001964:	605a      	str	r2, [r3, #4]
 8001966:	609a      	str	r2, [r3, #8]
 8001968:	60da      	str	r2, [r3, #12]
 800196a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800196c:	f107 0310 	add.w	r3, r7, #16
 8001970:	2244      	movs	r2, #68	; 0x44
 8001972:	2100      	movs	r1, #0
 8001974:	4618      	mov	r0, r3
 8001976:	f003 fa99 	bl	8004eac <memset>
  if(uartHandle->Instance==USART2)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a1f      	ldr	r2, [pc, #124]	; (80019fc <HAL_UART_MspInit+0xa8>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d137      	bne.n	80019f4 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001984:	2302      	movs	r3, #2
 8001986:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001988:	2300      	movs	r3, #0
 800198a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800198c:	f107 0310 	add.w	r3, r7, #16
 8001990:	4618      	mov	r0, r3
 8001992:	f001 ffeb 	bl	800396c <HAL_RCCEx_PeriphCLKConfig>
 8001996:	4603      	mov	r3, r0
 8001998:	2b00      	cmp	r3, #0
 800199a:	d001      	beq.n	80019a0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800199c:	f7ff fe50 	bl	8001640 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019a0:	4b17      	ldr	r3, [pc, #92]	; (8001a00 <HAL_UART_MspInit+0xac>)
 80019a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019a4:	4a16      	ldr	r2, [pc, #88]	; (8001a00 <HAL_UART_MspInit+0xac>)
 80019a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019aa:	6593      	str	r3, [r2, #88]	; 0x58
 80019ac:	4b14      	ldr	r3, [pc, #80]	; (8001a00 <HAL_UART_MspInit+0xac>)
 80019ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b4:	60fb      	str	r3, [r7, #12]
 80019b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b8:	4b11      	ldr	r3, [pc, #68]	; (8001a00 <HAL_UART_MspInit+0xac>)
 80019ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019bc:	4a10      	ldr	r2, [pc, #64]	; (8001a00 <HAL_UART_MspInit+0xac>)
 80019be:	f043 0301 	orr.w	r3, r3, #1
 80019c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019c4:	4b0e      	ldr	r3, [pc, #56]	; (8001a00 <HAL_UART_MspInit+0xac>)
 80019c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c8:	f003 0301 	and.w	r3, r3, #1
 80019cc:	60bb      	str	r3, [r7, #8]
 80019ce:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_15;
 80019d0:	f248 0304 	movw	r3, #32772	; 0x8004
 80019d4:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d6:	2302      	movs	r3, #2
 80019d8:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019da:	2300      	movs	r3, #0
 80019dc:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019de:	2300      	movs	r3, #0
 80019e0:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019e2:	2307      	movs	r3, #7
 80019e4:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80019ea:	4619      	mov	r1, r3
 80019ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019f0:	f000 f9a8 	bl	8001d44 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80019f4:	bf00      	nop
 80019f6:	3768      	adds	r7, #104	; 0x68
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	40004400 	.word	0x40004400
 8001a00:	40021000 	.word	0x40021000

08001a04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a04:	480d      	ldr	r0, [pc, #52]	; (8001a3c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a06:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a08:	480d      	ldr	r0, [pc, #52]	; (8001a40 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a0a:	490e      	ldr	r1, [pc, #56]	; (8001a44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a0c:	4a0e      	ldr	r2, [pc, #56]	; (8001a48 <LoopForever+0xe>)
  movs r3, #0
 8001a0e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001a10:	e002      	b.n	8001a18 <LoopCopyDataInit>

08001a12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a16:	3304      	adds	r3, #4

08001a18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a1c:	d3f9      	bcc.n	8001a12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a1e:	4a0b      	ldr	r2, [pc, #44]	; (8001a4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a20:	4c0b      	ldr	r4, [pc, #44]	; (8001a50 <LoopForever+0x16>)
  movs r3, #0
 8001a22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a24:	e001      	b.n	8001a2a <LoopFillZerobss>

08001a26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a28:	3204      	adds	r2, #4

08001a2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a2c:	d3fb      	bcc.n	8001a26 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a2e:	f7ff ff33 	bl	8001898 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a32:	f003 fa09 	bl	8004e48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a36:	f7ff fc9b 	bl	8001370 <main>

08001a3a <LoopForever>:

LoopForever:
    b LoopForever
 8001a3a:	e7fe      	b.n	8001a3a <LoopForever>
  ldr   r0, =_estack
 8001a3c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001a40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a44:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001a48:	08007f6c 	.word	0x08007f6c
  ldr r2, =_sbss
 8001a4c:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001a50:	200003f8 	.word	0x200003f8

08001a54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a54:	e7fe      	b.n	8001a54 <ADC1_2_IRQHandler>

08001a56 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b082      	sub	sp, #8
 8001a5a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a60:	2003      	movs	r0, #3
 8001a62:	f000 f93d 	bl	8001ce0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a66:	200f      	movs	r0, #15
 8001a68:	f000 f80e 	bl	8001a88 <HAL_InitTick>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d002      	beq.n	8001a78 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
 8001a74:	71fb      	strb	r3, [r7, #7]
 8001a76:	e001      	b.n	8001a7c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a78:	f7ff fdfc 	bl	8001674 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a7c:	79fb      	ldrb	r3, [r7, #7]

}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
	...

08001a88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b084      	sub	sp, #16
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a90:	2300      	movs	r3, #0
 8001a92:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001a94:	4b16      	ldr	r3, [pc, #88]	; (8001af0 <HAL_InitTick+0x68>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d022      	beq.n	8001ae2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001a9c:	4b15      	ldr	r3, [pc, #84]	; (8001af4 <HAL_InitTick+0x6c>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	4b13      	ldr	r3, [pc, #76]	; (8001af0 <HAL_InitTick+0x68>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001aa8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f000 f93a 	bl	8001d2a <HAL_SYSTICK_Config>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d10f      	bne.n	8001adc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2b0f      	cmp	r3, #15
 8001ac0:	d809      	bhi.n	8001ad6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	6879      	ldr	r1, [r7, #4]
 8001ac6:	f04f 30ff 	mov.w	r0, #4294967295
 8001aca:	f000 f914 	bl	8001cf6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ace:	4a0a      	ldr	r2, [pc, #40]	; (8001af8 <HAL_InitTick+0x70>)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6013      	str	r3, [r2, #0]
 8001ad4:	e007      	b.n	8001ae6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	73fb      	strb	r3, [r7, #15]
 8001ada:	e004      	b.n	8001ae6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001adc:	2301      	movs	r3, #1
 8001ade:	73fb      	strb	r3, [r7, #15]
 8001ae0:	e001      	b.n	8001ae6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ae8:	4618      	mov	r0, r3
 8001aea:	3710      	adds	r7, #16
 8001aec:	46bd      	mov	sp, r7
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	20000008 	.word	0x20000008
 8001af4:	20000000 	.word	0x20000000
 8001af8:	20000004 	.word	0x20000004

08001afc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b00:	4b05      	ldr	r3, [pc, #20]	; (8001b18 <HAL_IncTick+0x1c>)
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	4b05      	ldr	r3, [pc, #20]	; (8001b1c <HAL_IncTick+0x20>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4413      	add	r3, r2
 8001b0a:	4a03      	ldr	r2, [pc, #12]	; (8001b18 <HAL_IncTick+0x1c>)
 8001b0c:	6013      	str	r3, [r2, #0]
}
 8001b0e:	bf00      	nop
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	2000032c 	.word	0x2000032c
 8001b1c:	20000008 	.word	0x20000008

08001b20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  return uwTick;
 8001b24:	4b03      	ldr	r3, [pc, #12]	; (8001b34 <HAL_GetTick+0x14>)
 8001b26:	681b      	ldr	r3, [r3, #0]
}
 8001b28:	4618      	mov	r0, r3
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	2000032c 	.word	0x2000032c

08001b38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b084      	sub	sp, #16
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b40:	f7ff ffee 	bl	8001b20 <HAL_GetTick>
 8001b44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b50:	d004      	beq.n	8001b5c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b52:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <HAL_Delay+0x40>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	68fa      	ldr	r2, [r7, #12]
 8001b58:	4413      	add	r3, r2
 8001b5a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b5c:	bf00      	nop
 8001b5e:	f7ff ffdf 	bl	8001b20 <HAL_GetTick>
 8001b62:	4602      	mov	r2, r0
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	68fa      	ldr	r2, [r7, #12]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d8f7      	bhi.n	8001b5e <HAL_Delay+0x26>
  {
  }
}
 8001b6e:	bf00      	nop
 8001b70:	bf00      	nop
 8001b72:	3710      	adds	r7, #16
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	20000008 	.word	0x20000008

08001b7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f003 0307 	and.w	r3, r3, #7
 8001b8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b8c:	4b0c      	ldr	r3, [pc, #48]	; (8001bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001b8e:	68db      	ldr	r3, [r3, #12]
 8001b90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b92:	68ba      	ldr	r2, [r7, #8]
 8001b94:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b98:	4013      	ands	r3, r2
 8001b9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ba4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bae:	4a04      	ldr	r2, [pc, #16]	; (8001bc0 <__NVIC_SetPriorityGrouping+0x44>)
 8001bb0:	68bb      	ldr	r3, [r7, #8]
 8001bb2:	60d3      	str	r3, [r2, #12]
}
 8001bb4:	bf00      	nop
 8001bb6:	3714      	adds	r7, #20
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr
 8001bc0:	e000ed00 	.word	0xe000ed00

08001bc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bc8:	4b04      	ldr	r3, [pc, #16]	; (8001bdc <__NVIC_GetPriorityGrouping+0x18>)
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	0a1b      	lsrs	r3, r3, #8
 8001bce:	f003 0307 	and.w	r3, r3, #7
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr
 8001bdc:	e000ed00 	.word	0xe000ed00

08001be0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	4603      	mov	r3, r0
 8001be8:	6039      	str	r1, [r7, #0]
 8001bea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	db0a      	blt.n	8001c0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	b2da      	uxtb	r2, r3
 8001bf8:	490c      	ldr	r1, [pc, #48]	; (8001c2c <__NVIC_SetPriority+0x4c>)
 8001bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bfe:	0112      	lsls	r2, r2, #4
 8001c00:	b2d2      	uxtb	r2, r2
 8001c02:	440b      	add	r3, r1
 8001c04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c08:	e00a      	b.n	8001c20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	b2da      	uxtb	r2, r3
 8001c0e:	4908      	ldr	r1, [pc, #32]	; (8001c30 <__NVIC_SetPriority+0x50>)
 8001c10:	79fb      	ldrb	r3, [r7, #7]
 8001c12:	f003 030f 	and.w	r3, r3, #15
 8001c16:	3b04      	subs	r3, #4
 8001c18:	0112      	lsls	r2, r2, #4
 8001c1a:	b2d2      	uxtb	r2, r2
 8001c1c:	440b      	add	r3, r1
 8001c1e:	761a      	strb	r2, [r3, #24]
}
 8001c20:	bf00      	nop
 8001c22:	370c      	adds	r7, #12
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr
 8001c2c:	e000e100 	.word	0xe000e100
 8001c30:	e000ed00 	.word	0xe000ed00

08001c34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b089      	sub	sp, #36	; 0x24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f003 0307 	and.w	r3, r3, #7
 8001c46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	f1c3 0307 	rsb	r3, r3, #7
 8001c4e:	2b04      	cmp	r3, #4
 8001c50:	bf28      	it	cs
 8001c52:	2304      	movcs	r3, #4
 8001c54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	3304      	adds	r3, #4
 8001c5a:	2b06      	cmp	r3, #6
 8001c5c:	d902      	bls.n	8001c64 <NVIC_EncodePriority+0x30>
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	3b03      	subs	r3, #3
 8001c62:	e000      	b.n	8001c66 <NVIC_EncodePriority+0x32>
 8001c64:	2300      	movs	r3, #0
 8001c66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c68:	f04f 32ff 	mov.w	r2, #4294967295
 8001c6c:	69bb      	ldr	r3, [r7, #24]
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	43da      	mvns	r2, r3
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	401a      	ands	r2, r3
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	fa01 f303 	lsl.w	r3, r1, r3
 8001c86:	43d9      	mvns	r1, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c8c:	4313      	orrs	r3, r2
         );
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3724      	adds	r7, #36	; 0x24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
	...

08001c9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3b01      	subs	r3, #1
 8001ca8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cac:	d301      	bcc.n	8001cb2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e00f      	b.n	8001cd2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cb2:	4a0a      	ldr	r2, [pc, #40]	; (8001cdc <SysTick_Config+0x40>)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cba:	210f      	movs	r1, #15
 8001cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc0:	f7ff ff8e 	bl	8001be0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cc4:	4b05      	ldr	r3, [pc, #20]	; (8001cdc <SysTick_Config+0x40>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cca:	4b04      	ldr	r3, [pc, #16]	; (8001cdc <SysTick_Config+0x40>)
 8001ccc:	2207      	movs	r2, #7
 8001cce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	e000e010 	.word	0xe000e010

08001ce0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ce8:	6878      	ldr	r0, [r7, #4]
 8001cea:	f7ff ff47 	bl	8001b7c <__NVIC_SetPriorityGrouping>
}
 8001cee:	bf00      	nop
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b086      	sub	sp, #24
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	60b9      	str	r1, [r7, #8]
 8001d00:	607a      	str	r2, [r7, #4]
 8001d02:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d04:	f7ff ff5e 	bl	8001bc4 <__NVIC_GetPriorityGrouping>
 8001d08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	68b9      	ldr	r1, [r7, #8]
 8001d0e:	6978      	ldr	r0, [r7, #20]
 8001d10:	f7ff ff90 	bl	8001c34 <NVIC_EncodePriority>
 8001d14:	4602      	mov	r2, r0
 8001d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d1a:	4611      	mov	r1, r2
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f7ff ff5f 	bl	8001be0 <__NVIC_SetPriority>
}
 8001d22:	bf00      	nop
 8001d24:	3718      	adds	r7, #24
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b082      	sub	sp, #8
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f7ff ffb2 	bl	8001c9c <SysTick_Config>
 8001d38:	4603      	mov	r3, r0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
	...

08001d44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b087      	sub	sp, #28
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001d52:	e15a      	b.n	800200a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	2101      	movs	r1, #1
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d60:	4013      	ands	r3, r2
 8001d62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	f000 814c 	beq.w	8002004 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f003 0303 	and.w	r3, r3, #3
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d005      	beq.n	8001d84 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d130      	bne.n	8001de6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	2203      	movs	r2, #3
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	43db      	mvns	r3, r3
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	68da      	ldr	r2, [r3, #12]
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	693a      	ldr	r2, [r7, #16]
 8001db2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dba:	2201      	movs	r2, #1
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	43db      	mvns	r3, r3
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	091b      	lsrs	r3, r3, #4
 8001dd0:	f003 0201 	and.w	r2, r3, #1
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f003 0303 	and.w	r3, r3, #3
 8001dee:	2b03      	cmp	r3, #3
 8001df0:	d017      	beq.n	8001e22 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	68db      	ldr	r3, [r3, #12]
 8001df6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	005b      	lsls	r3, r3, #1
 8001dfc:	2203      	movs	r2, #3
 8001dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001e02:	43db      	mvns	r3, r3
 8001e04:	693a      	ldr	r2, [r7, #16]
 8001e06:	4013      	ands	r3, r2
 8001e08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	689a      	ldr	r2, [r3, #8]
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	005b      	lsls	r3, r3, #1
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f003 0303 	and.w	r3, r3, #3
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d123      	bne.n	8001e76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e2e:	697b      	ldr	r3, [r7, #20]
 8001e30:	08da      	lsrs	r2, r3, #3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	3208      	adds	r2, #8
 8001e36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	f003 0307 	and.w	r3, r3, #7
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	220f      	movs	r2, #15
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	693a      	ldr	r2, [r7, #16]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	691a      	ldr	r2, [r3, #16]
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	f003 0307 	and.w	r3, r3, #7
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	08da      	lsrs	r2, r3, #3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	3208      	adds	r2, #8
 8001e70:	6939      	ldr	r1, [r7, #16]
 8001e72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	2203      	movs	r2, #3
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	43db      	mvns	r3, r3
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	f003 0203 	and.w	r2, r3, #3
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	f000 80a6 	beq.w	8002004 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eb8:	4b5b      	ldr	r3, [pc, #364]	; (8002028 <HAL_GPIO_Init+0x2e4>)
 8001eba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ebc:	4a5a      	ldr	r2, [pc, #360]	; (8002028 <HAL_GPIO_Init+0x2e4>)
 8001ebe:	f043 0301 	orr.w	r3, r3, #1
 8001ec2:	6613      	str	r3, [r2, #96]	; 0x60
 8001ec4:	4b58      	ldr	r3, [pc, #352]	; (8002028 <HAL_GPIO_Init+0x2e4>)
 8001ec6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ec8:	f003 0301 	and.w	r3, r3, #1
 8001ecc:	60bb      	str	r3, [r7, #8]
 8001ece:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ed0:	4a56      	ldr	r2, [pc, #344]	; (800202c <HAL_GPIO_Init+0x2e8>)
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	089b      	lsrs	r3, r3, #2
 8001ed6:	3302      	adds	r3, #2
 8001ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001edc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	f003 0303 	and.w	r3, r3, #3
 8001ee4:	009b      	lsls	r3, r3, #2
 8001ee6:	220f      	movs	r2, #15
 8001ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eec:	43db      	mvns	r3, r3
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001efa:	d01f      	beq.n	8001f3c <HAL_GPIO_Init+0x1f8>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a4c      	ldr	r2, [pc, #304]	; (8002030 <HAL_GPIO_Init+0x2ec>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d019      	beq.n	8001f38 <HAL_GPIO_Init+0x1f4>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a4b      	ldr	r2, [pc, #300]	; (8002034 <HAL_GPIO_Init+0x2f0>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d013      	beq.n	8001f34 <HAL_GPIO_Init+0x1f0>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a4a      	ldr	r2, [pc, #296]	; (8002038 <HAL_GPIO_Init+0x2f4>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d00d      	beq.n	8001f30 <HAL_GPIO_Init+0x1ec>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4a49      	ldr	r2, [pc, #292]	; (800203c <HAL_GPIO_Init+0x2f8>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d007      	beq.n	8001f2c <HAL_GPIO_Init+0x1e8>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4a48      	ldr	r2, [pc, #288]	; (8002040 <HAL_GPIO_Init+0x2fc>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d101      	bne.n	8001f28 <HAL_GPIO_Init+0x1e4>
 8001f24:	2305      	movs	r3, #5
 8001f26:	e00a      	b.n	8001f3e <HAL_GPIO_Init+0x1fa>
 8001f28:	2306      	movs	r3, #6
 8001f2a:	e008      	b.n	8001f3e <HAL_GPIO_Init+0x1fa>
 8001f2c:	2304      	movs	r3, #4
 8001f2e:	e006      	b.n	8001f3e <HAL_GPIO_Init+0x1fa>
 8001f30:	2303      	movs	r3, #3
 8001f32:	e004      	b.n	8001f3e <HAL_GPIO_Init+0x1fa>
 8001f34:	2302      	movs	r3, #2
 8001f36:	e002      	b.n	8001f3e <HAL_GPIO_Init+0x1fa>
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e000      	b.n	8001f3e <HAL_GPIO_Init+0x1fa>
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	f002 0203 	and.w	r2, r2, #3
 8001f44:	0092      	lsls	r2, r2, #2
 8001f46:	4093      	lsls	r3, r2
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f4e:	4937      	ldr	r1, [pc, #220]	; (800202c <HAL_GPIO_Init+0x2e8>)
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	089b      	lsrs	r3, r3, #2
 8001f54:	3302      	adds	r3, #2
 8001f56:	693a      	ldr	r2, [r7, #16]
 8001f58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f5c:	4b39      	ldr	r3, [pc, #228]	; (8002044 <HAL_GPIO_Init+0x300>)
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	43db      	mvns	r3, r3
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	4013      	ands	r3, r2
 8001f6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d003      	beq.n	8001f80 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001f78:	693a      	ldr	r2, [r7, #16]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f80:	4a30      	ldr	r2, [pc, #192]	; (8002044 <HAL_GPIO_Init+0x300>)
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f86:	4b2f      	ldr	r3, [pc, #188]	; (8002044 <HAL_GPIO_Init+0x300>)
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	43db      	mvns	r3, r3
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	4013      	ands	r3, r2
 8001f94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d003      	beq.n	8001faa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001faa:	4a26      	ldr	r2, [pc, #152]	; (8002044 <HAL_GPIO_Init+0x300>)
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001fb0:	4b24      	ldr	r3, [pc, #144]	; (8002044 <HAL_GPIO_Init+0x300>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d003      	beq.n	8001fd4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001fcc:	693a      	ldr	r2, [r7, #16]
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001fd4:	4a1b      	ldr	r2, [pc, #108]	; (8002044 <HAL_GPIO_Init+0x300>)
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001fda:	4b1a      	ldr	r3, [pc, #104]	; (8002044 <HAL_GPIO_Init+0x300>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	43db      	mvns	r3, r3
 8001fe4:	693a      	ldr	r2, [r7, #16]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001ff6:	693a      	ldr	r2, [r7, #16]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ffe:	4a11      	ldr	r2, [pc, #68]	; (8002044 <HAL_GPIO_Init+0x300>)
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002004:	697b      	ldr	r3, [r7, #20]
 8002006:	3301      	adds	r3, #1
 8002008:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	681a      	ldr	r2, [r3, #0]
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	fa22 f303 	lsr.w	r3, r2, r3
 8002014:	2b00      	cmp	r3, #0
 8002016:	f47f ae9d 	bne.w	8001d54 <HAL_GPIO_Init+0x10>
  }
}
 800201a:	bf00      	nop
 800201c:	bf00      	nop
 800201e:	371c      	adds	r7, #28
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr
 8002028:	40021000 	.word	0x40021000
 800202c:	40010000 	.word	0x40010000
 8002030:	48000400 	.word	0x48000400
 8002034:	48000800 	.word	0x48000800
 8002038:	48000c00 	.word	0x48000c00
 800203c:	48001000 	.word	0x48001000
 8002040:	48001400 	.word	0x48001400
 8002044:	40010400 	.word	0x40010400

08002048 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	460b      	mov	r3, r1
 8002052:	807b      	strh	r3, [r7, #2]
 8002054:	4613      	mov	r3, r2
 8002056:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002058:	787b      	ldrb	r3, [r7, #1]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d003      	beq.n	8002066 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800205e:	887a      	ldrh	r2, [r7, #2]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002064:	e002      	b.n	800206c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002066:	887a      	ldrh	r2, [r7, #2]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800206c:	bf00      	nop
 800206e:	370c      	adds	r7, #12
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e081      	b.n	800218e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002090:	b2db      	uxtb	r3, r3
 8002092:	2b00      	cmp	r3, #0
 8002094:	d106      	bne.n	80020a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f7ff f8fa 	bl	8001298 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2224      	movs	r2, #36	; 0x24
 80020a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f022 0201 	bic.w	r2, r2, #1
 80020ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	685a      	ldr	r2, [r3, #4]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80020c8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	689a      	ldr	r2, [r3, #8]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020d8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	2b01      	cmp	r3, #1
 80020e0:	d107      	bne.n	80020f2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	689a      	ldr	r2, [r3, #8]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020ee:	609a      	str	r2, [r3, #8]
 80020f0:	e006      	b.n	8002100 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689a      	ldr	r2, [r3, #8]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80020fe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	68db      	ldr	r3, [r3, #12]
 8002104:	2b02      	cmp	r3, #2
 8002106:	d104      	bne.n	8002112 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002110:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	6812      	ldr	r2, [r2, #0]
 800211c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002120:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002124:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68da      	ldr	r2, [r3, #12]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002134:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	691a      	ldr	r2, [r3, #16]
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	695b      	ldr	r3, [r3, #20]
 800213e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	430a      	orrs	r2, r1
 800214e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	69d9      	ldr	r1, [r3, #28]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a1a      	ldr	r2, [r3, #32]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	430a      	orrs	r2, r1
 800215e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f042 0201 	orr.w	r2, r2, #1
 800216e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2220      	movs	r2, #32
 800217a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3708      	adds	r7, #8
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
	...

08002198 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b088      	sub	sp, #32
 800219c:	af02      	add	r7, sp, #8
 800219e:	60f8      	str	r0, [r7, #12]
 80021a0:	607a      	str	r2, [r7, #4]
 80021a2:	461a      	mov	r2, r3
 80021a4:	460b      	mov	r3, r1
 80021a6:	817b      	strh	r3, [r7, #10]
 80021a8:	4613      	mov	r3, r2
 80021aa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	2b20      	cmp	r3, #32
 80021b6:	f040 80da 	bne.w	800236e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d101      	bne.n	80021c8 <HAL_I2C_Master_Transmit+0x30>
 80021c4:	2302      	movs	r3, #2
 80021c6:	e0d3      	b.n	8002370 <HAL_I2C_Master_Transmit+0x1d8>
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2201      	movs	r2, #1
 80021cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80021d0:	f7ff fca6 	bl	8001b20 <HAL_GetTick>
 80021d4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	9300      	str	r3, [sp, #0]
 80021da:	2319      	movs	r3, #25
 80021dc:	2201      	movs	r2, #1
 80021de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021e2:	68f8      	ldr	r0, [r7, #12]
 80021e4:	f000 faed 	bl	80027c2 <I2C_WaitOnFlagUntilTimeout>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e0be      	b.n	8002370 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2221      	movs	r2, #33	; 0x21
 80021f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2210      	movs	r2, #16
 80021fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2200      	movs	r2, #0
 8002206:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	893a      	ldrh	r2, [r7, #8]
 8002212:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800221e:	b29b      	uxth	r3, r3
 8002220:	2bff      	cmp	r3, #255	; 0xff
 8002222:	d90e      	bls.n	8002242 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	22ff      	movs	r2, #255	; 0xff
 8002228:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800222e:	b2da      	uxtb	r2, r3
 8002230:	8979      	ldrh	r1, [r7, #10]
 8002232:	4b51      	ldr	r3, [pc, #324]	; (8002378 <HAL_I2C_Master_Transmit+0x1e0>)
 8002234:	9300      	str	r3, [sp, #0]
 8002236:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800223a:	68f8      	ldr	r0, [r7, #12]
 800223c:	f000 fce4 	bl	8002c08 <I2C_TransferConfig>
 8002240:	e06c      	b.n	800231c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002246:	b29a      	uxth	r2, r3
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002250:	b2da      	uxtb	r2, r3
 8002252:	8979      	ldrh	r1, [r7, #10]
 8002254:	4b48      	ldr	r3, [pc, #288]	; (8002378 <HAL_I2C_Master_Transmit+0x1e0>)
 8002256:	9300      	str	r3, [sp, #0]
 8002258:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800225c:	68f8      	ldr	r0, [r7, #12]
 800225e:	f000 fcd3 	bl	8002c08 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002262:	e05b      	b.n	800231c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002264:	697a      	ldr	r2, [r7, #20]
 8002266:	6a39      	ldr	r1, [r7, #32]
 8002268:	68f8      	ldr	r0, [r7, #12]
 800226a:	f000 faea 	bl	8002842 <I2C_WaitOnTXISFlagUntilTimeout>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e07b      	b.n	8002370 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227c:	781a      	ldrb	r2, [r3, #0]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002288:	1c5a      	adds	r2, r3, #1
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002292:	b29b      	uxth	r3, r3
 8002294:	3b01      	subs	r3, #1
 8002296:	b29a      	uxth	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022a0:	3b01      	subs	r3, #1
 80022a2:	b29a      	uxth	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d034      	beq.n	800231c <HAL_I2C_Master_Transmit+0x184>
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d130      	bne.n	800231c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	9300      	str	r3, [sp, #0]
 80022be:	6a3b      	ldr	r3, [r7, #32]
 80022c0:	2200      	movs	r2, #0
 80022c2:	2180      	movs	r1, #128	; 0x80
 80022c4:	68f8      	ldr	r0, [r7, #12]
 80022c6:	f000 fa7c 	bl	80027c2 <I2C_WaitOnFlagUntilTimeout>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e04d      	b.n	8002370 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d8:	b29b      	uxth	r3, r3
 80022da:	2bff      	cmp	r3, #255	; 0xff
 80022dc:	d90e      	bls.n	80022fc <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	22ff      	movs	r2, #255	; 0xff
 80022e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022e8:	b2da      	uxtb	r2, r3
 80022ea:	8979      	ldrh	r1, [r7, #10]
 80022ec:	2300      	movs	r3, #0
 80022ee:	9300      	str	r3, [sp, #0]
 80022f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022f4:	68f8      	ldr	r0, [r7, #12]
 80022f6:	f000 fc87 	bl	8002c08 <I2C_TransferConfig>
 80022fa:	e00f      	b.n	800231c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002300:	b29a      	uxth	r2, r3
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800230a:	b2da      	uxtb	r2, r3
 800230c:	8979      	ldrh	r1, [r7, #10]
 800230e:	2300      	movs	r3, #0
 8002310:	9300      	str	r3, [sp, #0]
 8002312:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002316:	68f8      	ldr	r0, [r7, #12]
 8002318:	f000 fc76 	bl	8002c08 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002320:	b29b      	uxth	r3, r3
 8002322:	2b00      	cmp	r3, #0
 8002324:	d19e      	bne.n	8002264 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002326:	697a      	ldr	r2, [r7, #20]
 8002328:	6a39      	ldr	r1, [r7, #32]
 800232a:	68f8      	ldr	r0, [r7, #12]
 800232c:	f000 fac9 	bl	80028c2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e01a      	b.n	8002370 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2220      	movs	r2, #32
 8002340:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	6859      	ldr	r1, [r3, #4]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	4b0b      	ldr	r3, [pc, #44]	; (800237c <HAL_I2C_Master_Transmit+0x1e4>)
 800234e:	400b      	ands	r3, r1
 8002350:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2220      	movs	r2, #32
 8002356:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800236a:	2300      	movs	r3, #0
 800236c:	e000      	b.n	8002370 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800236e:	2302      	movs	r3, #2
  }
}
 8002370:	4618      	mov	r0, r3
 8002372:	3718      	adds	r7, #24
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	80002000 	.word	0x80002000
 800237c:	fe00e800 	.word	0xfe00e800

08002380 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b088      	sub	sp, #32
 8002384:	af02      	add	r7, sp, #8
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	607a      	str	r2, [r7, #4]
 800238a:	461a      	mov	r2, r3
 800238c:	460b      	mov	r3, r1
 800238e:	817b      	strh	r3, [r7, #10]
 8002390:	4613      	mov	r3, r2
 8002392:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800239a:	b2db      	uxtb	r3, r3
 800239c:	2b20      	cmp	r3, #32
 800239e:	f040 80db 	bne.w	8002558 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d101      	bne.n	80023b0 <HAL_I2C_Master_Receive+0x30>
 80023ac:	2302      	movs	r3, #2
 80023ae:	e0d4      	b.n	800255a <HAL_I2C_Master_Receive+0x1da>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80023b8:	f7ff fbb2 	bl	8001b20 <HAL_GetTick>
 80023bc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	9300      	str	r3, [sp, #0]
 80023c2:	2319      	movs	r3, #25
 80023c4:	2201      	movs	r2, #1
 80023c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023ca:	68f8      	ldr	r0, [r7, #12]
 80023cc:	f000 f9f9 	bl	80027c2 <I2C_WaitOnFlagUntilTimeout>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e0bf      	b.n	800255a <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2222      	movs	r2, #34	; 0x22
 80023de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	2210      	movs	r2, #16
 80023e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2200      	movs	r2, #0
 80023ee:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	893a      	ldrh	r2, [r7, #8]
 80023fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2200      	movs	r2, #0
 8002400:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002406:	b29b      	uxth	r3, r3
 8002408:	2bff      	cmp	r3, #255	; 0xff
 800240a:	d90e      	bls.n	800242a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	22ff      	movs	r2, #255	; 0xff
 8002410:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002416:	b2da      	uxtb	r2, r3
 8002418:	8979      	ldrh	r1, [r7, #10]
 800241a:	4b52      	ldr	r3, [pc, #328]	; (8002564 <HAL_I2C_Master_Receive+0x1e4>)
 800241c:	9300      	str	r3, [sp, #0]
 800241e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002422:	68f8      	ldr	r0, [r7, #12]
 8002424:	f000 fbf0 	bl	8002c08 <I2C_TransferConfig>
 8002428:	e06d      	b.n	8002506 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800242e:	b29a      	uxth	r2, r3
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002438:	b2da      	uxtb	r2, r3
 800243a:	8979      	ldrh	r1, [r7, #10]
 800243c:	4b49      	ldr	r3, [pc, #292]	; (8002564 <HAL_I2C_Master_Receive+0x1e4>)
 800243e:	9300      	str	r3, [sp, #0]
 8002440:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002444:	68f8      	ldr	r0, [r7, #12]
 8002446:	f000 fbdf 	bl	8002c08 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800244a:	e05c      	b.n	8002506 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800244c:	697a      	ldr	r2, [r7, #20]
 800244e:	6a39      	ldr	r1, [r7, #32]
 8002450:	68f8      	ldr	r0, [r7, #12]
 8002452:	f000 fa73 	bl	800293c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e07c      	b.n	800255a <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800246a:	b2d2      	uxtb	r2, r2
 800246c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002472:	1c5a      	adds	r2, r3, #1
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800247c:	3b01      	subs	r3, #1
 800247e:	b29a      	uxth	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002488:	b29b      	uxth	r3, r3
 800248a:	3b01      	subs	r3, #1
 800248c:	b29a      	uxth	r2, r3
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002496:	b29b      	uxth	r3, r3
 8002498:	2b00      	cmp	r3, #0
 800249a:	d034      	beq.n	8002506 <HAL_I2C_Master_Receive+0x186>
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d130      	bne.n	8002506 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	9300      	str	r3, [sp, #0]
 80024a8:	6a3b      	ldr	r3, [r7, #32]
 80024aa:	2200      	movs	r2, #0
 80024ac:	2180      	movs	r1, #128	; 0x80
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f000 f987 	bl	80027c2 <I2C_WaitOnFlagUntilTimeout>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e04d      	b.n	800255a <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	2bff      	cmp	r3, #255	; 0xff
 80024c6:	d90e      	bls.n	80024e6 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	22ff      	movs	r2, #255	; 0xff
 80024cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024d2:	b2da      	uxtb	r2, r3
 80024d4:	8979      	ldrh	r1, [r7, #10]
 80024d6:	2300      	movs	r3, #0
 80024d8:	9300      	str	r3, [sp, #0]
 80024da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024de:	68f8      	ldr	r0, [r7, #12]
 80024e0:	f000 fb92 	bl	8002c08 <I2C_TransferConfig>
 80024e4:	e00f      	b.n	8002506 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ea:	b29a      	uxth	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	8979      	ldrh	r1, [r7, #10]
 80024f8:	2300      	movs	r3, #0
 80024fa:	9300      	str	r3, [sp, #0]
 80024fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002500:	68f8      	ldr	r0, [r7, #12]
 8002502:	f000 fb81 	bl	8002c08 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800250a:	b29b      	uxth	r3, r3
 800250c:	2b00      	cmp	r3, #0
 800250e:	d19d      	bne.n	800244c <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002510:	697a      	ldr	r2, [r7, #20]
 8002512:	6a39      	ldr	r1, [r7, #32]
 8002514:	68f8      	ldr	r0, [r7, #12]
 8002516:	f000 f9d4 	bl	80028c2 <I2C_WaitOnSTOPFlagUntilTimeout>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d001      	beq.n	8002524 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e01a      	b.n	800255a <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	2220      	movs	r2, #32
 800252a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6859      	ldr	r1, [r3, #4]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	4b0c      	ldr	r3, [pc, #48]	; (8002568 <HAL_I2C_Master_Receive+0x1e8>)
 8002538:	400b      	ands	r3, r1
 800253a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2220      	movs	r2, #32
 8002540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	2200      	movs	r2, #0
 8002550:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002554:	2300      	movs	r3, #0
 8002556:	e000      	b.n	800255a <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002558:	2302      	movs	r3, #2
  }
}
 800255a:	4618      	mov	r0, r3
 800255c:	3718      	adds	r7, #24
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	80002400 	.word	0x80002400
 8002568:	fe00e800 	.word	0xfe00e800

0800256c <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b08a      	sub	sp, #40	; 0x28
 8002570:	af02      	add	r7, sp, #8
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	607a      	str	r2, [r7, #4]
 8002576:	603b      	str	r3, [r7, #0]
 8002578:	460b      	mov	r3, r1
 800257a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800257c:	2300      	movs	r3, #0
 800257e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002586:	b2db      	uxtb	r3, r3
 8002588:	2b20      	cmp	r3, #32
 800258a:	f040 80f1 	bne.w	8002770 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002598:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800259c:	d101      	bne.n	80025a2 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800259e:	2302      	movs	r3, #2
 80025a0:	e0e7      	b.n	8002772 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d101      	bne.n	80025b0 <HAL_I2C_IsDeviceReady+0x44>
 80025ac:	2302      	movs	r3, #2
 80025ae:	e0e0      	b.n	8002772 <HAL_I2C_IsDeviceReady+0x206>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2201      	movs	r2, #1
 80025b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2224      	movs	r2, #36	; 0x24
 80025bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	2200      	movs	r2, #0
 80025c4:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d107      	bne.n	80025de <HAL_I2C_IsDeviceReady+0x72>
 80025ce:	897b      	ldrh	r3, [r7, #10]
 80025d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80025d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80025dc:	e004      	b.n	80025e8 <HAL_I2C_IsDeviceReady+0x7c>
 80025de:	897b      	ldrh	r3, [r7, #10]
 80025e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025e4:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80025e8:	68fa      	ldr	r2, [r7, #12]
 80025ea:	6812      	ldr	r2, [r2, #0]
 80025ec:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80025ee:	f7ff fa97 	bl	8001b20 <HAL_GetTick>
 80025f2:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	f003 0320 	and.w	r3, r3, #32
 80025fe:	2b20      	cmp	r3, #32
 8002600:	bf0c      	ite	eq
 8002602:	2301      	moveq	r3, #1
 8002604:	2300      	movne	r3, #0
 8002606:	b2db      	uxtb	r3, r3
 8002608:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	699b      	ldr	r3, [r3, #24]
 8002610:	f003 0310 	and.w	r3, r3, #16
 8002614:	2b10      	cmp	r3, #16
 8002616:	bf0c      	ite	eq
 8002618:	2301      	moveq	r3, #1
 800261a:	2300      	movne	r3, #0
 800261c:	b2db      	uxtb	r3, r3
 800261e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8002620:	e034      	b.n	800268c <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002628:	d01a      	beq.n	8002660 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800262a:	f7ff fa79 	bl	8001b20 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	69bb      	ldr	r3, [r7, #24]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	429a      	cmp	r2, r3
 8002638:	d302      	bcc.n	8002640 <HAL_I2C_IsDeviceReady+0xd4>
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d10f      	bne.n	8002660 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2220      	movs	r2, #32
 8002644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264c:	f043 0220 	orr.w	r2, r3, #32
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e088      	b.n	8002772 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	699b      	ldr	r3, [r3, #24]
 8002666:	f003 0320 	and.w	r3, r3, #32
 800266a:	2b20      	cmp	r3, #32
 800266c:	bf0c      	ite	eq
 800266e:	2301      	moveq	r3, #1
 8002670:	2300      	movne	r3, #0
 8002672:	b2db      	uxtb	r3, r3
 8002674:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	f003 0310 	and.w	r3, r3, #16
 8002680:	2b10      	cmp	r3, #16
 8002682:	bf0c      	ite	eq
 8002684:	2301      	moveq	r3, #1
 8002686:	2300      	movne	r3, #0
 8002688:	b2db      	uxtb	r3, r3
 800268a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800268c:	7ffb      	ldrb	r3, [r7, #31]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d102      	bne.n	8002698 <HAL_I2C_IsDeviceReady+0x12c>
 8002692:	7fbb      	ldrb	r3, [r7, #30]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d0c4      	beq.n	8002622 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	f003 0310 	and.w	r3, r3, #16
 80026a2:	2b10      	cmp	r3, #16
 80026a4:	d01a      	beq.n	80026dc <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	9300      	str	r3, [sp, #0]
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	2200      	movs	r2, #0
 80026ae:	2120      	movs	r1, #32
 80026b0:	68f8      	ldr	r0, [r7, #12]
 80026b2:	f000 f886 	bl	80027c2 <I2C_WaitOnFlagUntilTimeout>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e058      	b.n	8002772 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2220      	movs	r2, #32
 80026c6:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2220      	movs	r2, #32
 80026cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2200      	movs	r2, #0
 80026d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80026d8:	2300      	movs	r3, #0
 80026da:	e04a      	b.n	8002772 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	9300      	str	r3, [sp, #0]
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	2200      	movs	r2, #0
 80026e4:	2120      	movs	r1, #32
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f000 f86b 	bl	80027c2 <I2C_WaitOnFlagUntilTimeout>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e03d      	b.n	8002772 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	2210      	movs	r2, #16
 80026fc:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2220      	movs	r2, #32
 8002704:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	429a      	cmp	r2, r3
 800270c:	d118      	bne.n	8002740 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	685a      	ldr	r2, [r3, #4]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800271c:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	9300      	str	r3, [sp, #0]
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	2200      	movs	r2, #0
 8002726:	2120      	movs	r1, #32
 8002728:	68f8      	ldr	r0, [r7, #12]
 800272a:	f000 f84a 	bl	80027c2 <I2C_WaitOnFlagUntilTimeout>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d001      	beq.n	8002738 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e01c      	b.n	8002772 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	2220      	movs	r2, #32
 800273e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	3301      	adds	r3, #1
 8002744:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	429a      	cmp	r2, r3
 800274c:	f63f af3b 	bhi.w	80025c6 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	2220      	movs	r2, #32
 8002754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800275c:	f043 0220 	orr.w	r2, r3, #32
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800276c:	2301      	movs	r3, #1
 800276e:	e000      	b.n	8002772 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8002770:	2302      	movs	r3, #2
  }
}
 8002772:	4618      	mov	r0, r3
 8002774:	3720      	adds	r7, #32
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800277a:	b480      	push	{r7}
 800277c:	b083      	sub	sp, #12
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b02      	cmp	r3, #2
 800278e:	d103      	bne.n	8002798 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2200      	movs	r2, #0
 8002796:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d007      	beq.n	80027b6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	699a      	ldr	r2, [r3, #24]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f042 0201 	orr.w	r2, r2, #1
 80027b4:	619a      	str	r2, [r3, #24]
  }
}
 80027b6:	bf00      	nop
 80027b8:	370c      	adds	r7, #12
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr

080027c2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80027c2:	b580      	push	{r7, lr}
 80027c4:	b084      	sub	sp, #16
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	60f8      	str	r0, [r7, #12]
 80027ca:	60b9      	str	r1, [r7, #8]
 80027cc:	603b      	str	r3, [r7, #0]
 80027ce:	4613      	mov	r3, r2
 80027d0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027d2:	e022      	b.n	800281a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027da:	d01e      	beq.n	800281a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027dc:	f7ff f9a0 	bl	8001b20 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d302      	bcc.n	80027f2 <I2C_WaitOnFlagUntilTimeout+0x30>
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d113      	bne.n	800281a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f6:	f043 0220 	orr.w	r2, r3, #32
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2220      	movs	r2, #32
 8002802:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e00f      	b.n	800283a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	699a      	ldr	r2, [r3, #24]
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	4013      	ands	r3, r2
 8002824:	68ba      	ldr	r2, [r7, #8]
 8002826:	429a      	cmp	r2, r3
 8002828:	bf0c      	ite	eq
 800282a:	2301      	moveq	r3, #1
 800282c:	2300      	movne	r3, #0
 800282e:	b2db      	uxtb	r3, r3
 8002830:	461a      	mov	r2, r3
 8002832:	79fb      	ldrb	r3, [r7, #7]
 8002834:	429a      	cmp	r2, r3
 8002836:	d0cd      	beq.n	80027d4 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002838:	2300      	movs	r3, #0
}
 800283a:	4618      	mov	r0, r3
 800283c:	3710      	adds	r7, #16
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	b084      	sub	sp, #16
 8002846:	af00      	add	r7, sp, #0
 8002848:	60f8      	str	r0, [r7, #12]
 800284a:	60b9      	str	r1, [r7, #8]
 800284c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800284e:	e02c      	b.n	80028aa <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	68b9      	ldr	r1, [r7, #8]
 8002854:	68f8      	ldr	r0, [r7, #12]
 8002856:	f000 f8eb 	bl	8002a30 <I2C_IsErrorOccurred>
 800285a:	4603      	mov	r3, r0
 800285c:	2b00      	cmp	r3, #0
 800285e:	d001      	beq.n	8002864 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e02a      	b.n	80028ba <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800286a:	d01e      	beq.n	80028aa <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800286c:	f7ff f958 	bl	8001b20 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	68ba      	ldr	r2, [r7, #8]
 8002878:	429a      	cmp	r2, r3
 800287a:	d302      	bcc.n	8002882 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800287c:	68bb      	ldr	r3, [r7, #8]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d113      	bne.n	80028aa <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002886:	f043 0220 	orr.w	r2, r3, #32
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2220      	movs	r2, #32
 8002892:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e007      	b.n	80028ba <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	f003 0302 	and.w	r3, r3, #2
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d1cb      	bne.n	8002850 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}

080028c2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b084      	sub	sp, #16
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	60f8      	str	r0, [r7, #12]
 80028ca:	60b9      	str	r1, [r7, #8]
 80028cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028ce:	e028      	b.n	8002922 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	68b9      	ldr	r1, [r7, #8]
 80028d4:	68f8      	ldr	r0, [r7, #12]
 80028d6:	f000 f8ab 	bl	8002a30 <I2C_IsErrorOccurred>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d001      	beq.n	80028e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e026      	b.n	8002932 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028e4:	f7ff f91c 	bl	8001b20 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	68ba      	ldr	r2, [r7, #8]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d302      	bcc.n	80028fa <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d113      	bne.n	8002922 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fe:	f043 0220 	orr.w	r2, r3, #32
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2220      	movs	r2, #32
 800290a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2200      	movs	r2, #0
 8002912:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2200      	movs	r2, #0
 800291a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e007      	b.n	8002932 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	f003 0320 	and.w	r3, r3, #32
 800292c:	2b20      	cmp	r3, #32
 800292e:	d1cf      	bne.n	80028d0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
	...

0800293c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002948:	e064      	b.n	8002a14 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	68b9      	ldr	r1, [r7, #8]
 800294e:	68f8      	ldr	r0, [r7, #12]
 8002950:	f000 f86e 	bl	8002a30 <I2C_IsErrorOccurred>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d001      	beq.n	800295e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800295a:	2301      	movs	r3, #1
 800295c:	e062      	b.n	8002a24 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	699b      	ldr	r3, [r3, #24]
 8002964:	f003 0320 	and.w	r3, r3, #32
 8002968:	2b20      	cmp	r3, #32
 800296a:	d138      	bne.n	80029de <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	699b      	ldr	r3, [r3, #24]
 8002972:	f003 0304 	and.w	r3, r3, #4
 8002976:	2b04      	cmp	r3, #4
 8002978:	d105      	bne.n	8002986 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002982:	2300      	movs	r3, #0
 8002984:	e04e      	b.n	8002a24 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	699b      	ldr	r3, [r3, #24]
 800298c:	f003 0310 	and.w	r3, r3, #16
 8002990:	2b10      	cmp	r3, #16
 8002992:	d107      	bne.n	80029a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2210      	movs	r2, #16
 800299a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2204      	movs	r2, #4
 80029a0:	645a      	str	r2, [r3, #68]	; 0x44
 80029a2:	e002      	b.n	80029aa <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2220      	movs	r2, #32
 80029b0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	6859      	ldr	r1, [r3, #4]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	4b1b      	ldr	r3, [pc, #108]	; (8002a2c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80029be:	400b      	ands	r3, r1
 80029c0:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2220      	movs	r2, #32
 80029c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e022      	b.n	8002a24 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029de:	f7ff f89f 	bl	8001b20 <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	68ba      	ldr	r2, [r7, #8]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d302      	bcc.n	80029f4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d10f      	bne.n	8002a14 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f8:	f043 0220 	orr.w	r2, r3, #32
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2220      	movs	r2, #32
 8002a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e007      	b.n	8002a24 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	f003 0304 	and.w	r3, r3, #4
 8002a1e:	2b04      	cmp	r3, #4
 8002a20:	d193      	bne.n	800294a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002a22:	2300      	movs	r3, #0
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3710      	adds	r7, #16
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	fe00e800 	.word	0xfe00e800

08002a30 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b08a      	sub	sp, #40	; 0x28
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	60f8      	str	r0, [r7, #12]
 8002a38:	60b9      	str	r1, [r7, #8]
 8002a3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	f003 0310 	and.w	r3, r3, #16
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d075      	beq.n	8002b48 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2210      	movs	r2, #16
 8002a62:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002a64:	e056      	b.n	8002b14 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a6c:	d052      	beq.n	8002b14 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002a6e:	f7ff f857 	bl	8001b20 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	69fb      	ldr	r3, [r7, #28]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	68ba      	ldr	r2, [r7, #8]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d302      	bcc.n	8002a84 <I2C_IsErrorOccurred+0x54>
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d147      	bne.n	8002b14 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a8e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002a96:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002aa2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002aa6:	d12e      	bne.n	8002b06 <I2C_IsErrorOccurred+0xd6>
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002aae:	d02a      	beq.n	8002b06 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002ab0:	7cfb      	ldrb	r3, [r7, #19]
 8002ab2:	2b20      	cmp	r3, #32
 8002ab4:	d027      	beq.n	8002b06 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	685a      	ldr	r2, [r3, #4]
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002ac4:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002ac6:	f7ff f82b 	bl	8001b20 <HAL_GetTick>
 8002aca:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002acc:	e01b      	b.n	8002b06 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002ace:	f7ff f827 	bl	8001b20 <HAL_GetTick>
 8002ad2:	4602      	mov	r2, r0
 8002ad4:	69fb      	ldr	r3, [r7, #28]
 8002ad6:	1ad3      	subs	r3, r2, r3
 8002ad8:	2b19      	cmp	r3, #25
 8002ada:	d914      	bls.n	8002b06 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae0:	f043 0220 	orr.w	r2, r3, #32
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2220      	movs	r2, #32
 8002aec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2200      	movs	r2, #0
 8002af4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2200      	movs	r2, #0
 8002afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	699b      	ldr	r3, [r3, #24]
 8002b0c:	f003 0320 	and.w	r3, r3, #32
 8002b10:	2b20      	cmp	r3, #32
 8002b12:	d1dc      	bne.n	8002ace <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	f003 0320 	and.w	r3, r3, #32
 8002b1e:	2b20      	cmp	r3, #32
 8002b20:	d003      	beq.n	8002b2a <I2C_IsErrorOccurred+0xfa>
 8002b22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d09d      	beq.n	8002a66 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002b2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d103      	bne.n	8002b3a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2220      	movs	r2, #32
 8002b38:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002b3a:	6a3b      	ldr	r3, [r7, #32]
 8002b3c:	f043 0304 	orr.w	r3, r3, #4
 8002b40:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d00b      	beq.n	8002b72 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002b5a:	6a3b      	ldr	r3, [r7, #32]
 8002b5c:	f043 0301 	orr.w	r3, r3, #1
 8002b60:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b6a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002b72:	69bb      	ldr	r3, [r7, #24]
 8002b74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00b      	beq.n	8002b94 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002b7c:	6a3b      	ldr	r3, [r7, #32]
 8002b7e:	f043 0308 	orr.w	r3, r3, #8
 8002b82:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b8c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d00b      	beq.n	8002bb6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002b9e:	6a3b      	ldr	r3, [r7, #32]
 8002ba0:	f043 0302 	orr.w	r3, r3, #2
 8002ba4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002bb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d01c      	beq.n	8002bf8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002bbe:	68f8      	ldr	r0, [r7, #12]
 8002bc0:	f7ff fddb 	bl	800277a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	6859      	ldr	r1, [r3, #4]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681a      	ldr	r2, [r3, #0]
 8002bce:	4b0d      	ldr	r3, [pc, #52]	; (8002c04 <I2C_IsErrorOccurred+0x1d4>)
 8002bd0:	400b      	ands	r3, r1
 8002bd2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bd8:	6a3b      	ldr	r3, [r7, #32]
 8002bda:	431a      	orrs	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2220      	movs	r2, #32
 8002be4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002bf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3728      	adds	r7, #40	; 0x28
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}
 8002c04:	fe00e800 	.word	0xfe00e800

08002c08 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b087      	sub	sp, #28
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	607b      	str	r3, [r7, #4]
 8002c12:	460b      	mov	r3, r1
 8002c14:	817b      	strh	r3, [r7, #10]
 8002c16:	4613      	mov	r3, r2
 8002c18:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c1a:	897b      	ldrh	r3, [r7, #10]
 8002c1c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c20:	7a7b      	ldrb	r3, [r7, #9]
 8002c22:	041b      	lsls	r3, r3, #16
 8002c24:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c28:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002c2e:	6a3b      	ldr	r3, [r7, #32]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002c36:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	685a      	ldr	r2, [r3, #4]
 8002c3e:	6a3b      	ldr	r3, [r7, #32]
 8002c40:	0d5b      	lsrs	r3, r3, #21
 8002c42:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002c46:	4b08      	ldr	r3, [pc, #32]	; (8002c68 <I2C_TransferConfig+0x60>)
 8002c48:	430b      	orrs	r3, r1
 8002c4a:	43db      	mvns	r3, r3
 8002c4c:	ea02 0103 	and.w	r1, r2, r3
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	697a      	ldr	r2, [r7, #20]
 8002c56:	430a      	orrs	r2, r1
 8002c58:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002c5a:	bf00      	nop
 8002c5c:	371c      	adds	r7, #28
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	03ff63ff 	.word	0x03ff63ff

08002c6c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
 8002c74:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c7c:	b2db      	uxtb	r3, r3
 8002c7e:	2b20      	cmp	r3, #32
 8002c80:	d138      	bne.n	8002cf4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d101      	bne.n	8002c90 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002c8c:	2302      	movs	r3, #2
 8002c8e:	e032      	b.n	8002cf6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2224      	movs	r2, #36	; 0x24
 8002c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f022 0201 	bic.w	r2, r2, #1
 8002cae:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002cbe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6819      	ldr	r1, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	683a      	ldr	r2, [r7, #0]
 8002ccc:	430a      	orrs	r2, r1
 8002cce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f042 0201 	orr.w	r2, r2, #1
 8002cde:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2220      	movs	r2, #32
 8002ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	e000      	b.n	8002cf6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002cf4:	2302      	movs	r3, #2
  }
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002d02:	b480      	push	{r7}
 8002d04:	b085      	sub	sp, #20
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
 8002d0a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	2b20      	cmp	r3, #32
 8002d16:	d139      	bne.n	8002d8c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d101      	bne.n	8002d26 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002d22:	2302      	movs	r3, #2
 8002d24:	e033      	b.n	8002d8e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2224      	movs	r2, #36	; 0x24
 8002d32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f022 0201 	bic.w	r2, r2, #1
 8002d44:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d54:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	021b      	lsls	r3, r3, #8
 8002d5a:	68fa      	ldr	r2, [r7, #12]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f042 0201 	orr.w	r2, r2, #1
 8002d76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2220      	movs	r2, #32
 8002d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	e000      	b.n	8002d8e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002d8c:	2302      	movs	r3, #2
  }
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3714      	adds	r7, #20
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr
	...

08002d9c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d141      	bne.n	8002e2e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002daa:	4b4b      	ldr	r3, [pc, #300]	; (8002ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002db2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002db6:	d131      	bne.n	8002e1c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002db8:	4b47      	ldr	r3, [pc, #284]	; (8002ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002dbe:	4a46      	ldr	r2, [pc, #280]	; (8002ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002dc4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002dc8:	4b43      	ldr	r3, [pc, #268]	; (8002ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002dd0:	4a41      	ldr	r2, [pc, #260]	; (8002ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002dd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dd6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002dd8:	4b40      	ldr	r3, [pc, #256]	; (8002edc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2232      	movs	r2, #50	; 0x32
 8002dde:	fb02 f303 	mul.w	r3, r2, r3
 8002de2:	4a3f      	ldr	r2, [pc, #252]	; (8002ee0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002de4:	fba2 2303 	umull	r2, r3, r2, r3
 8002de8:	0c9b      	lsrs	r3, r3, #18
 8002dea:	3301      	adds	r3, #1
 8002dec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002dee:	e002      	b.n	8002df6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	3b01      	subs	r3, #1
 8002df4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002df6:	4b38      	ldr	r3, [pc, #224]	; (8002ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002df8:	695b      	ldr	r3, [r3, #20]
 8002dfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e02:	d102      	bne.n	8002e0a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1f2      	bne.n	8002df0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e0a:	4b33      	ldr	r3, [pc, #204]	; (8002ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e16:	d158      	bne.n	8002eca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e057      	b.n	8002ecc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e1c:	4b2e      	ldr	r3, [pc, #184]	; (8002ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e22:	4a2d      	ldr	r2, [pc, #180]	; (8002ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e28:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002e2c:	e04d      	b.n	8002eca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e34:	d141      	bne.n	8002eba <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e36:	4b28      	ldr	r3, [pc, #160]	; (8002ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e42:	d131      	bne.n	8002ea8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e44:	4b24      	ldr	r3, [pc, #144]	; (8002ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e4a:	4a23      	ldr	r2, [pc, #140]	; (8002ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e50:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e54:	4b20      	ldr	r3, [pc, #128]	; (8002ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e5c:	4a1e      	ldr	r2, [pc, #120]	; (8002ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e62:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e64:	4b1d      	ldr	r3, [pc, #116]	; (8002edc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2232      	movs	r2, #50	; 0x32
 8002e6a:	fb02 f303 	mul.w	r3, r2, r3
 8002e6e:	4a1c      	ldr	r2, [pc, #112]	; (8002ee0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002e70:	fba2 2303 	umull	r2, r3, r2, r3
 8002e74:	0c9b      	lsrs	r3, r3, #18
 8002e76:	3301      	adds	r3, #1
 8002e78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e7a:	e002      	b.n	8002e82 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	3b01      	subs	r3, #1
 8002e80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e82:	4b15      	ldr	r3, [pc, #84]	; (8002ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e8e:	d102      	bne.n	8002e96 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d1f2      	bne.n	8002e7c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e96:	4b10      	ldr	r3, [pc, #64]	; (8002ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ea2:	d112      	bne.n	8002eca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e011      	b.n	8002ecc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ea8:	4b0b      	ldr	r3, [pc, #44]	; (8002ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eaa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002eae:	4a0a      	ldr	r2, [pc, #40]	; (8002ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eb4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002eb8:	e007      	b.n	8002eca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002eba:	4b07      	ldr	r3, [pc, #28]	; (8002ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ec2:	4a05      	ldr	r2, [pc, #20]	; (8002ed8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ec4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ec8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3714      	adds	r7, #20
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed6:	4770      	bx	lr
 8002ed8:	40007000 	.word	0x40007000
 8002edc:	20000000 	.word	0x20000000
 8002ee0:	431bde83 	.word	0x431bde83

08002ee4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002ee8:	4b05      	ldr	r3, [pc, #20]	; (8002f00 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	4a04      	ldr	r2, [pc, #16]	; (8002f00 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002eee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ef2:	6093      	str	r3, [r2, #8]
}
 8002ef4:	bf00      	nop
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	40007000 	.word	0x40007000

08002f04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b088      	sub	sp, #32
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d101      	bne.n	8002f16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e306      	b.n	8003524 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d075      	beq.n	800300e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f22:	4b97      	ldr	r3, [pc, #604]	; (8003180 <HAL_RCC_OscConfig+0x27c>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	f003 030c 	and.w	r3, r3, #12
 8002f2a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f2c:	4b94      	ldr	r3, [pc, #592]	; (8003180 <HAL_RCC_OscConfig+0x27c>)
 8002f2e:	68db      	ldr	r3, [r3, #12]
 8002f30:	f003 0303 	and.w	r3, r3, #3
 8002f34:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	2b0c      	cmp	r3, #12
 8002f3a:	d102      	bne.n	8002f42 <HAL_RCC_OscConfig+0x3e>
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	2b03      	cmp	r3, #3
 8002f40:	d002      	beq.n	8002f48 <HAL_RCC_OscConfig+0x44>
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	2b08      	cmp	r3, #8
 8002f46:	d10b      	bne.n	8002f60 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f48:	4b8d      	ldr	r3, [pc, #564]	; (8003180 <HAL_RCC_OscConfig+0x27c>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d05b      	beq.n	800300c <HAL_RCC_OscConfig+0x108>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d157      	bne.n	800300c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e2e1      	b.n	8003524 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f68:	d106      	bne.n	8002f78 <HAL_RCC_OscConfig+0x74>
 8002f6a:	4b85      	ldr	r3, [pc, #532]	; (8003180 <HAL_RCC_OscConfig+0x27c>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a84      	ldr	r2, [pc, #528]	; (8003180 <HAL_RCC_OscConfig+0x27c>)
 8002f70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f74:	6013      	str	r3, [r2, #0]
 8002f76:	e01d      	b.n	8002fb4 <HAL_RCC_OscConfig+0xb0>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f80:	d10c      	bne.n	8002f9c <HAL_RCC_OscConfig+0x98>
 8002f82:	4b7f      	ldr	r3, [pc, #508]	; (8003180 <HAL_RCC_OscConfig+0x27c>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a7e      	ldr	r2, [pc, #504]	; (8003180 <HAL_RCC_OscConfig+0x27c>)
 8002f88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f8c:	6013      	str	r3, [r2, #0]
 8002f8e:	4b7c      	ldr	r3, [pc, #496]	; (8003180 <HAL_RCC_OscConfig+0x27c>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a7b      	ldr	r2, [pc, #492]	; (8003180 <HAL_RCC_OscConfig+0x27c>)
 8002f94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f98:	6013      	str	r3, [r2, #0]
 8002f9a:	e00b      	b.n	8002fb4 <HAL_RCC_OscConfig+0xb0>
 8002f9c:	4b78      	ldr	r3, [pc, #480]	; (8003180 <HAL_RCC_OscConfig+0x27c>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a77      	ldr	r2, [pc, #476]	; (8003180 <HAL_RCC_OscConfig+0x27c>)
 8002fa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fa6:	6013      	str	r3, [r2, #0]
 8002fa8:	4b75      	ldr	r3, [pc, #468]	; (8003180 <HAL_RCC_OscConfig+0x27c>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a74      	ldr	r2, [pc, #464]	; (8003180 <HAL_RCC_OscConfig+0x27c>)
 8002fae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d013      	beq.n	8002fe4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fbc:	f7fe fdb0 	bl	8001b20 <HAL_GetTick>
 8002fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fc2:	e008      	b.n	8002fd6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fc4:	f7fe fdac 	bl	8001b20 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b64      	cmp	r3, #100	; 0x64
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e2a6      	b.n	8003524 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fd6:	4b6a      	ldr	r3, [pc, #424]	; (8003180 <HAL_RCC_OscConfig+0x27c>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d0f0      	beq.n	8002fc4 <HAL_RCC_OscConfig+0xc0>
 8002fe2:	e014      	b.n	800300e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe4:	f7fe fd9c 	bl	8001b20 <HAL_GetTick>
 8002fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002fea:	e008      	b.n	8002ffe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fec:	f7fe fd98 	bl	8001b20 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b64      	cmp	r3, #100	; 0x64
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e292      	b.n	8003524 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ffe:	4b60      	ldr	r3, [pc, #384]	; (8003180 <HAL_RCC_OscConfig+0x27c>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1f0      	bne.n	8002fec <HAL_RCC_OscConfig+0xe8>
 800300a:	e000      	b.n	800300e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800300c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d075      	beq.n	8003106 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800301a:	4b59      	ldr	r3, [pc, #356]	; (8003180 <HAL_RCC_OscConfig+0x27c>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f003 030c 	and.w	r3, r3, #12
 8003022:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003024:	4b56      	ldr	r3, [pc, #344]	; (8003180 <HAL_RCC_OscConfig+0x27c>)
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	f003 0303 	and.w	r3, r3, #3
 800302c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	2b0c      	cmp	r3, #12
 8003032:	d102      	bne.n	800303a <HAL_RCC_OscConfig+0x136>
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	2b02      	cmp	r3, #2
 8003038:	d002      	beq.n	8003040 <HAL_RCC_OscConfig+0x13c>
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	2b04      	cmp	r3, #4
 800303e:	d11f      	bne.n	8003080 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003040:	4b4f      	ldr	r3, [pc, #316]	; (8003180 <HAL_RCC_OscConfig+0x27c>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003048:	2b00      	cmp	r3, #0
 800304a:	d005      	beq.n	8003058 <HAL_RCC_OscConfig+0x154>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d101      	bne.n	8003058 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	e265      	b.n	8003524 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003058:	4b49      	ldr	r3, [pc, #292]	; (8003180 <HAL_RCC_OscConfig+0x27c>)
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	061b      	lsls	r3, r3, #24
 8003066:	4946      	ldr	r1, [pc, #280]	; (8003180 <HAL_RCC_OscConfig+0x27c>)
 8003068:	4313      	orrs	r3, r2
 800306a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800306c:	4b45      	ldr	r3, [pc, #276]	; (8003184 <HAL_RCC_OscConfig+0x280>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4618      	mov	r0, r3
 8003072:	f7fe fd09 	bl	8001a88 <HAL_InitTick>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d043      	beq.n	8003104 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e251      	b.n	8003524 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d023      	beq.n	80030d0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003088:	4b3d      	ldr	r3, [pc, #244]	; (8003180 <HAL_RCC_OscConfig+0x27c>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a3c      	ldr	r2, [pc, #240]	; (8003180 <HAL_RCC_OscConfig+0x27c>)
 800308e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003092:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003094:	f7fe fd44 	bl	8001b20 <HAL_GetTick>
 8003098:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800309a:	e008      	b.n	80030ae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800309c:	f7fe fd40 	bl	8001b20 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e23a      	b.n	8003524 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80030ae:	4b34      	ldr	r3, [pc, #208]	; (8003180 <HAL_RCC_OscConfig+0x27c>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d0f0      	beq.n	800309c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ba:	4b31      	ldr	r3, [pc, #196]	; (8003180 <HAL_RCC_OscConfig+0x27c>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	061b      	lsls	r3, r3, #24
 80030c8:	492d      	ldr	r1, [pc, #180]	; (8003180 <HAL_RCC_OscConfig+0x27c>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	604b      	str	r3, [r1, #4]
 80030ce:	e01a      	b.n	8003106 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030d0:	4b2b      	ldr	r3, [pc, #172]	; (8003180 <HAL_RCC_OscConfig+0x27c>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a2a      	ldr	r2, [pc, #168]	; (8003180 <HAL_RCC_OscConfig+0x27c>)
 80030d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030dc:	f7fe fd20 	bl	8001b20 <HAL_GetTick>
 80030e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030e2:	e008      	b.n	80030f6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030e4:	f7fe fd1c 	bl	8001b20 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e216      	b.n	8003524 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80030f6:	4b22      	ldr	r3, [pc, #136]	; (8003180 <HAL_RCC_OscConfig+0x27c>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d1f0      	bne.n	80030e4 <HAL_RCC_OscConfig+0x1e0>
 8003102:	e000      	b.n	8003106 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003104:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0308 	and.w	r3, r3, #8
 800310e:	2b00      	cmp	r3, #0
 8003110:	d041      	beq.n	8003196 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d01c      	beq.n	8003154 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800311a:	4b19      	ldr	r3, [pc, #100]	; (8003180 <HAL_RCC_OscConfig+0x27c>)
 800311c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003120:	4a17      	ldr	r2, [pc, #92]	; (8003180 <HAL_RCC_OscConfig+0x27c>)
 8003122:	f043 0301 	orr.w	r3, r3, #1
 8003126:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800312a:	f7fe fcf9 	bl	8001b20 <HAL_GetTick>
 800312e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003130:	e008      	b.n	8003144 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003132:	f7fe fcf5 	bl	8001b20 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	2b02      	cmp	r3, #2
 800313e:	d901      	bls.n	8003144 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e1ef      	b.n	8003524 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003144:	4b0e      	ldr	r3, [pc, #56]	; (8003180 <HAL_RCC_OscConfig+0x27c>)
 8003146:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d0ef      	beq.n	8003132 <HAL_RCC_OscConfig+0x22e>
 8003152:	e020      	b.n	8003196 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003154:	4b0a      	ldr	r3, [pc, #40]	; (8003180 <HAL_RCC_OscConfig+0x27c>)
 8003156:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800315a:	4a09      	ldr	r2, [pc, #36]	; (8003180 <HAL_RCC_OscConfig+0x27c>)
 800315c:	f023 0301 	bic.w	r3, r3, #1
 8003160:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003164:	f7fe fcdc 	bl	8001b20 <HAL_GetTick>
 8003168:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800316a:	e00d      	b.n	8003188 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800316c:	f7fe fcd8 	bl	8001b20 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d906      	bls.n	8003188 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e1d2      	b.n	8003524 <HAL_RCC_OscConfig+0x620>
 800317e:	bf00      	nop
 8003180:	40021000 	.word	0x40021000
 8003184:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003188:	4b8c      	ldr	r3, [pc, #560]	; (80033bc <HAL_RCC_OscConfig+0x4b8>)
 800318a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d1ea      	bne.n	800316c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0304 	and.w	r3, r3, #4
 800319e:	2b00      	cmp	r3, #0
 80031a0:	f000 80a6 	beq.w	80032f0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031a4:	2300      	movs	r3, #0
 80031a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80031a8:	4b84      	ldr	r3, [pc, #528]	; (80033bc <HAL_RCC_OscConfig+0x4b8>)
 80031aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d101      	bne.n	80031b8 <HAL_RCC_OscConfig+0x2b4>
 80031b4:	2301      	movs	r3, #1
 80031b6:	e000      	b.n	80031ba <HAL_RCC_OscConfig+0x2b6>
 80031b8:	2300      	movs	r3, #0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00d      	beq.n	80031da <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031be:	4b7f      	ldr	r3, [pc, #508]	; (80033bc <HAL_RCC_OscConfig+0x4b8>)
 80031c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c2:	4a7e      	ldr	r2, [pc, #504]	; (80033bc <HAL_RCC_OscConfig+0x4b8>)
 80031c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031c8:	6593      	str	r3, [r2, #88]	; 0x58
 80031ca:	4b7c      	ldr	r3, [pc, #496]	; (80033bc <HAL_RCC_OscConfig+0x4b8>)
 80031cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031d2:	60fb      	str	r3, [r7, #12]
 80031d4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80031d6:	2301      	movs	r3, #1
 80031d8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031da:	4b79      	ldr	r3, [pc, #484]	; (80033c0 <HAL_RCC_OscConfig+0x4bc>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d118      	bne.n	8003218 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031e6:	4b76      	ldr	r3, [pc, #472]	; (80033c0 <HAL_RCC_OscConfig+0x4bc>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a75      	ldr	r2, [pc, #468]	; (80033c0 <HAL_RCC_OscConfig+0x4bc>)
 80031ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031f2:	f7fe fc95 	bl	8001b20 <HAL_GetTick>
 80031f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80031f8:	e008      	b.n	800320c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031fa:	f7fe fc91 	bl	8001b20 <HAL_GetTick>
 80031fe:	4602      	mov	r2, r0
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	2b02      	cmp	r3, #2
 8003206:	d901      	bls.n	800320c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e18b      	b.n	8003524 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800320c:	4b6c      	ldr	r3, [pc, #432]	; (80033c0 <HAL_RCC_OscConfig+0x4bc>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003214:	2b00      	cmp	r3, #0
 8003216:	d0f0      	beq.n	80031fa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	689b      	ldr	r3, [r3, #8]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d108      	bne.n	8003232 <HAL_RCC_OscConfig+0x32e>
 8003220:	4b66      	ldr	r3, [pc, #408]	; (80033bc <HAL_RCC_OscConfig+0x4b8>)
 8003222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003226:	4a65      	ldr	r2, [pc, #404]	; (80033bc <HAL_RCC_OscConfig+0x4b8>)
 8003228:	f043 0301 	orr.w	r3, r3, #1
 800322c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003230:	e024      	b.n	800327c <HAL_RCC_OscConfig+0x378>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	2b05      	cmp	r3, #5
 8003238:	d110      	bne.n	800325c <HAL_RCC_OscConfig+0x358>
 800323a:	4b60      	ldr	r3, [pc, #384]	; (80033bc <HAL_RCC_OscConfig+0x4b8>)
 800323c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003240:	4a5e      	ldr	r2, [pc, #376]	; (80033bc <HAL_RCC_OscConfig+0x4b8>)
 8003242:	f043 0304 	orr.w	r3, r3, #4
 8003246:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800324a:	4b5c      	ldr	r3, [pc, #368]	; (80033bc <HAL_RCC_OscConfig+0x4b8>)
 800324c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003250:	4a5a      	ldr	r2, [pc, #360]	; (80033bc <HAL_RCC_OscConfig+0x4b8>)
 8003252:	f043 0301 	orr.w	r3, r3, #1
 8003256:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800325a:	e00f      	b.n	800327c <HAL_RCC_OscConfig+0x378>
 800325c:	4b57      	ldr	r3, [pc, #348]	; (80033bc <HAL_RCC_OscConfig+0x4b8>)
 800325e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003262:	4a56      	ldr	r2, [pc, #344]	; (80033bc <HAL_RCC_OscConfig+0x4b8>)
 8003264:	f023 0301 	bic.w	r3, r3, #1
 8003268:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800326c:	4b53      	ldr	r3, [pc, #332]	; (80033bc <HAL_RCC_OscConfig+0x4b8>)
 800326e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003272:	4a52      	ldr	r2, [pc, #328]	; (80033bc <HAL_RCC_OscConfig+0x4b8>)
 8003274:	f023 0304 	bic.w	r3, r3, #4
 8003278:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d016      	beq.n	80032b2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003284:	f7fe fc4c 	bl	8001b20 <HAL_GetTick>
 8003288:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800328a:	e00a      	b.n	80032a2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800328c:	f7fe fc48 	bl	8001b20 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	f241 3288 	movw	r2, #5000	; 0x1388
 800329a:	4293      	cmp	r3, r2
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e140      	b.n	8003524 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032a2:	4b46      	ldr	r3, [pc, #280]	; (80033bc <HAL_RCC_OscConfig+0x4b8>)
 80032a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a8:	f003 0302 	and.w	r3, r3, #2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d0ed      	beq.n	800328c <HAL_RCC_OscConfig+0x388>
 80032b0:	e015      	b.n	80032de <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b2:	f7fe fc35 	bl	8001b20 <HAL_GetTick>
 80032b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032b8:	e00a      	b.n	80032d0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032ba:	f7fe fc31 	bl	8001b20 <HAL_GetTick>
 80032be:	4602      	mov	r2, r0
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	1ad3      	subs	r3, r2, r3
 80032c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d901      	bls.n	80032d0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e129      	b.n	8003524 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80032d0:	4b3a      	ldr	r3, [pc, #232]	; (80033bc <HAL_RCC_OscConfig+0x4b8>)
 80032d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1ed      	bne.n	80032ba <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80032de:	7ffb      	ldrb	r3, [r7, #31]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d105      	bne.n	80032f0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032e4:	4b35      	ldr	r3, [pc, #212]	; (80033bc <HAL_RCC_OscConfig+0x4b8>)
 80032e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032e8:	4a34      	ldr	r2, [pc, #208]	; (80033bc <HAL_RCC_OscConfig+0x4b8>)
 80032ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032ee:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 0320 	and.w	r3, r3, #32
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d03c      	beq.n	8003376 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d01c      	beq.n	800333e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003304:	4b2d      	ldr	r3, [pc, #180]	; (80033bc <HAL_RCC_OscConfig+0x4b8>)
 8003306:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800330a:	4a2c      	ldr	r2, [pc, #176]	; (80033bc <HAL_RCC_OscConfig+0x4b8>)
 800330c:	f043 0301 	orr.w	r3, r3, #1
 8003310:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003314:	f7fe fc04 	bl	8001b20 <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800331a:	e008      	b.n	800332e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800331c:	f7fe fc00 	bl	8001b20 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b02      	cmp	r3, #2
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e0fa      	b.n	8003524 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800332e:	4b23      	ldr	r3, [pc, #140]	; (80033bc <HAL_RCC_OscConfig+0x4b8>)
 8003330:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003334:	f003 0302 	and.w	r3, r3, #2
 8003338:	2b00      	cmp	r3, #0
 800333a:	d0ef      	beq.n	800331c <HAL_RCC_OscConfig+0x418>
 800333c:	e01b      	b.n	8003376 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800333e:	4b1f      	ldr	r3, [pc, #124]	; (80033bc <HAL_RCC_OscConfig+0x4b8>)
 8003340:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003344:	4a1d      	ldr	r2, [pc, #116]	; (80033bc <HAL_RCC_OscConfig+0x4b8>)
 8003346:	f023 0301 	bic.w	r3, r3, #1
 800334a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800334e:	f7fe fbe7 	bl	8001b20 <HAL_GetTick>
 8003352:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003354:	e008      	b.n	8003368 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003356:	f7fe fbe3 	bl	8001b20 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	2b02      	cmp	r3, #2
 8003362:	d901      	bls.n	8003368 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e0dd      	b.n	8003524 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003368:	4b14      	ldr	r3, [pc, #80]	; (80033bc <HAL_RCC_OscConfig+0x4b8>)
 800336a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800336e:	f003 0302 	and.w	r3, r3, #2
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1ef      	bne.n	8003356 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	69db      	ldr	r3, [r3, #28]
 800337a:	2b00      	cmp	r3, #0
 800337c:	f000 80d1 	beq.w	8003522 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003380:	4b0e      	ldr	r3, [pc, #56]	; (80033bc <HAL_RCC_OscConfig+0x4b8>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f003 030c 	and.w	r3, r3, #12
 8003388:	2b0c      	cmp	r3, #12
 800338a:	f000 808b 	beq.w	80034a4 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	69db      	ldr	r3, [r3, #28]
 8003392:	2b02      	cmp	r3, #2
 8003394:	d15e      	bne.n	8003454 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003396:	4b09      	ldr	r3, [pc, #36]	; (80033bc <HAL_RCC_OscConfig+0x4b8>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a08      	ldr	r2, [pc, #32]	; (80033bc <HAL_RCC_OscConfig+0x4b8>)
 800339c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80033a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a2:	f7fe fbbd 	bl	8001b20 <HAL_GetTick>
 80033a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033a8:	e00c      	b.n	80033c4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033aa:	f7fe fbb9 	bl	8001b20 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	d905      	bls.n	80033c4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80033b8:	2303      	movs	r3, #3
 80033ba:	e0b3      	b.n	8003524 <HAL_RCC_OscConfig+0x620>
 80033bc:	40021000 	.word	0x40021000
 80033c0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80033c4:	4b59      	ldr	r3, [pc, #356]	; (800352c <HAL_RCC_OscConfig+0x628>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d1ec      	bne.n	80033aa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033d0:	4b56      	ldr	r3, [pc, #344]	; (800352c <HAL_RCC_OscConfig+0x628>)
 80033d2:	68da      	ldr	r2, [r3, #12]
 80033d4:	4b56      	ldr	r3, [pc, #344]	; (8003530 <HAL_RCC_OscConfig+0x62c>)
 80033d6:	4013      	ands	r3, r2
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	6a11      	ldr	r1, [r2, #32]
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033e0:	3a01      	subs	r2, #1
 80033e2:	0112      	lsls	r2, r2, #4
 80033e4:	4311      	orrs	r1, r2
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80033ea:	0212      	lsls	r2, r2, #8
 80033ec:	4311      	orrs	r1, r2
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80033f2:	0852      	lsrs	r2, r2, #1
 80033f4:	3a01      	subs	r2, #1
 80033f6:	0552      	lsls	r2, r2, #21
 80033f8:	4311      	orrs	r1, r2
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80033fe:	0852      	lsrs	r2, r2, #1
 8003400:	3a01      	subs	r2, #1
 8003402:	0652      	lsls	r2, r2, #25
 8003404:	4311      	orrs	r1, r2
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800340a:	06d2      	lsls	r2, r2, #27
 800340c:	430a      	orrs	r2, r1
 800340e:	4947      	ldr	r1, [pc, #284]	; (800352c <HAL_RCC_OscConfig+0x628>)
 8003410:	4313      	orrs	r3, r2
 8003412:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003414:	4b45      	ldr	r3, [pc, #276]	; (800352c <HAL_RCC_OscConfig+0x628>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	4a44      	ldr	r2, [pc, #272]	; (800352c <HAL_RCC_OscConfig+0x628>)
 800341a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800341e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003420:	4b42      	ldr	r3, [pc, #264]	; (800352c <HAL_RCC_OscConfig+0x628>)
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	4a41      	ldr	r2, [pc, #260]	; (800352c <HAL_RCC_OscConfig+0x628>)
 8003426:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800342a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800342c:	f7fe fb78 	bl	8001b20 <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003434:	f7fe fb74 	bl	8001b20 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b02      	cmp	r3, #2
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e06e      	b.n	8003524 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003446:	4b39      	ldr	r3, [pc, #228]	; (800352c <HAL_RCC_OscConfig+0x628>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d0f0      	beq.n	8003434 <HAL_RCC_OscConfig+0x530>
 8003452:	e066      	b.n	8003522 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003454:	4b35      	ldr	r3, [pc, #212]	; (800352c <HAL_RCC_OscConfig+0x628>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	4a34      	ldr	r2, [pc, #208]	; (800352c <HAL_RCC_OscConfig+0x628>)
 800345a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800345e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003460:	4b32      	ldr	r3, [pc, #200]	; (800352c <HAL_RCC_OscConfig+0x628>)
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	4a31      	ldr	r2, [pc, #196]	; (800352c <HAL_RCC_OscConfig+0x628>)
 8003466:	f023 0303 	bic.w	r3, r3, #3
 800346a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800346c:	4b2f      	ldr	r3, [pc, #188]	; (800352c <HAL_RCC_OscConfig+0x628>)
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	4a2e      	ldr	r2, [pc, #184]	; (800352c <HAL_RCC_OscConfig+0x628>)
 8003472:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003476:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800347a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800347c:	f7fe fb50 	bl	8001b20 <HAL_GetTick>
 8003480:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003482:	e008      	b.n	8003496 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003484:	f7fe fb4c 	bl	8001b20 <HAL_GetTick>
 8003488:	4602      	mov	r2, r0
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d901      	bls.n	8003496 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e046      	b.n	8003524 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003496:	4b25      	ldr	r3, [pc, #148]	; (800352c <HAL_RCC_OscConfig+0x628>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d1f0      	bne.n	8003484 <HAL_RCC_OscConfig+0x580>
 80034a2:	e03e      	b.n	8003522 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	69db      	ldr	r3, [r3, #28]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d101      	bne.n	80034b0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e039      	b.n	8003524 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80034b0:	4b1e      	ldr	r3, [pc, #120]	; (800352c <HAL_RCC_OscConfig+0x628>)
 80034b2:	68db      	ldr	r3, [r3, #12]
 80034b4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	f003 0203 	and.w	r2, r3, #3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a1b      	ldr	r3, [r3, #32]
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d12c      	bne.n	800351e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034c4:	697b      	ldr	r3, [r7, #20]
 80034c6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ce:	3b01      	subs	r3, #1
 80034d0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d123      	bne.n	800351e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d11b      	bne.n	800351e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d113      	bne.n	800351e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003500:	085b      	lsrs	r3, r3, #1
 8003502:	3b01      	subs	r3, #1
 8003504:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003506:	429a      	cmp	r2, r3
 8003508:	d109      	bne.n	800351e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003514:	085b      	lsrs	r3, r3, #1
 8003516:	3b01      	subs	r3, #1
 8003518:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800351a:	429a      	cmp	r2, r3
 800351c:	d001      	beq.n	8003522 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e000      	b.n	8003524 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003522:	2300      	movs	r3, #0
}
 8003524:	4618      	mov	r0, r3
 8003526:	3720      	adds	r7, #32
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	40021000 	.word	0x40021000
 8003530:	019f800c 	.word	0x019f800c

08003534 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b086      	sub	sp, #24
 8003538:	af00      	add	r7, sp, #0
 800353a:	6078      	str	r0, [r7, #4]
 800353c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800353e:	2300      	movs	r3, #0
 8003540:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d101      	bne.n	800354c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e11e      	b.n	800378a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800354c:	4b91      	ldr	r3, [pc, #580]	; (8003794 <HAL_RCC_ClockConfig+0x260>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 030f 	and.w	r3, r3, #15
 8003554:	683a      	ldr	r2, [r7, #0]
 8003556:	429a      	cmp	r2, r3
 8003558:	d910      	bls.n	800357c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800355a:	4b8e      	ldr	r3, [pc, #568]	; (8003794 <HAL_RCC_ClockConfig+0x260>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f023 020f 	bic.w	r2, r3, #15
 8003562:	498c      	ldr	r1, [pc, #560]	; (8003794 <HAL_RCC_ClockConfig+0x260>)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	4313      	orrs	r3, r2
 8003568:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800356a:	4b8a      	ldr	r3, [pc, #552]	; (8003794 <HAL_RCC_ClockConfig+0x260>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 030f 	and.w	r3, r3, #15
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	429a      	cmp	r2, r3
 8003576:	d001      	beq.n	800357c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e106      	b.n	800378a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0301 	and.w	r3, r3, #1
 8003584:	2b00      	cmp	r3, #0
 8003586:	d073      	beq.n	8003670 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	2b03      	cmp	r3, #3
 800358e:	d129      	bne.n	80035e4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003590:	4b81      	ldr	r3, [pc, #516]	; (8003798 <HAL_RCC_ClockConfig+0x264>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d101      	bne.n	80035a0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e0f4      	b.n	800378a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80035a0:	f000 f99e 	bl	80038e0 <RCC_GetSysClockFreqFromPLLSource>
 80035a4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	4a7c      	ldr	r2, [pc, #496]	; (800379c <HAL_RCC_ClockConfig+0x268>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d93f      	bls.n	800362e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80035ae:	4b7a      	ldr	r3, [pc, #488]	; (8003798 <HAL_RCC_ClockConfig+0x264>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d009      	beq.n	80035ce <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d033      	beq.n	800362e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d12f      	bne.n	800362e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80035ce:	4b72      	ldr	r3, [pc, #456]	; (8003798 <HAL_RCC_ClockConfig+0x264>)
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035d6:	4a70      	ldr	r2, [pc, #448]	; (8003798 <HAL_RCC_ClockConfig+0x264>)
 80035d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035dc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80035de:	2380      	movs	r3, #128	; 0x80
 80035e0:	617b      	str	r3, [r7, #20]
 80035e2:	e024      	b.n	800362e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	2b02      	cmp	r3, #2
 80035ea:	d107      	bne.n	80035fc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035ec:	4b6a      	ldr	r3, [pc, #424]	; (8003798 <HAL_RCC_ClockConfig+0x264>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d109      	bne.n	800360c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e0c6      	b.n	800378a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80035fc:	4b66      	ldr	r3, [pc, #408]	; (8003798 <HAL_RCC_ClockConfig+0x264>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003604:	2b00      	cmp	r3, #0
 8003606:	d101      	bne.n	800360c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e0be      	b.n	800378a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800360c:	f000 f8ce 	bl	80037ac <HAL_RCC_GetSysClockFreq>
 8003610:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	4a61      	ldr	r2, [pc, #388]	; (800379c <HAL_RCC_ClockConfig+0x268>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d909      	bls.n	800362e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800361a:	4b5f      	ldr	r3, [pc, #380]	; (8003798 <HAL_RCC_ClockConfig+0x264>)
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003622:	4a5d      	ldr	r2, [pc, #372]	; (8003798 <HAL_RCC_ClockConfig+0x264>)
 8003624:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003628:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800362a:	2380      	movs	r3, #128	; 0x80
 800362c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800362e:	4b5a      	ldr	r3, [pc, #360]	; (8003798 <HAL_RCC_ClockConfig+0x264>)
 8003630:	689b      	ldr	r3, [r3, #8]
 8003632:	f023 0203 	bic.w	r2, r3, #3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	4957      	ldr	r1, [pc, #348]	; (8003798 <HAL_RCC_ClockConfig+0x264>)
 800363c:	4313      	orrs	r3, r2
 800363e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003640:	f7fe fa6e 	bl	8001b20 <HAL_GetTick>
 8003644:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003646:	e00a      	b.n	800365e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003648:	f7fe fa6a 	bl	8001b20 <HAL_GetTick>
 800364c:	4602      	mov	r2, r0
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	1ad3      	subs	r3, r2, r3
 8003652:	f241 3288 	movw	r2, #5000	; 0x1388
 8003656:	4293      	cmp	r3, r2
 8003658:	d901      	bls.n	800365e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e095      	b.n	800378a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800365e:	4b4e      	ldr	r3, [pc, #312]	; (8003798 <HAL_RCC_ClockConfig+0x264>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f003 020c 	and.w	r2, r3, #12
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	429a      	cmp	r2, r3
 800366e:	d1eb      	bne.n	8003648 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b00      	cmp	r3, #0
 800367a:	d023      	beq.n	80036c4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0304 	and.w	r3, r3, #4
 8003684:	2b00      	cmp	r3, #0
 8003686:	d005      	beq.n	8003694 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003688:	4b43      	ldr	r3, [pc, #268]	; (8003798 <HAL_RCC_ClockConfig+0x264>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	4a42      	ldr	r2, [pc, #264]	; (8003798 <HAL_RCC_ClockConfig+0x264>)
 800368e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003692:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0308 	and.w	r3, r3, #8
 800369c:	2b00      	cmp	r3, #0
 800369e:	d007      	beq.n	80036b0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80036a0:	4b3d      	ldr	r3, [pc, #244]	; (8003798 <HAL_RCC_ClockConfig+0x264>)
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80036a8:	4a3b      	ldr	r2, [pc, #236]	; (8003798 <HAL_RCC_ClockConfig+0x264>)
 80036aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80036ae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036b0:	4b39      	ldr	r3, [pc, #228]	; (8003798 <HAL_RCC_ClockConfig+0x264>)
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	4936      	ldr	r1, [pc, #216]	; (8003798 <HAL_RCC_ClockConfig+0x264>)
 80036be:	4313      	orrs	r3, r2
 80036c0:	608b      	str	r3, [r1, #8]
 80036c2:	e008      	b.n	80036d6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	2b80      	cmp	r3, #128	; 0x80
 80036c8:	d105      	bne.n	80036d6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80036ca:	4b33      	ldr	r3, [pc, #204]	; (8003798 <HAL_RCC_ClockConfig+0x264>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	4a32      	ldr	r2, [pc, #200]	; (8003798 <HAL_RCC_ClockConfig+0x264>)
 80036d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036d4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036d6:	4b2f      	ldr	r3, [pc, #188]	; (8003794 <HAL_RCC_ClockConfig+0x260>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 030f 	and.w	r3, r3, #15
 80036de:	683a      	ldr	r2, [r7, #0]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d21d      	bcs.n	8003720 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036e4:	4b2b      	ldr	r3, [pc, #172]	; (8003794 <HAL_RCC_ClockConfig+0x260>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f023 020f 	bic.w	r2, r3, #15
 80036ec:	4929      	ldr	r1, [pc, #164]	; (8003794 <HAL_RCC_ClockConfig+0x260>)
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80036f4:	f7fe fa14 	bl	8001b20 <HAL_GetTick>
 80036f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036fa:	e00a      	b.n	8003712 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036fc:	f7fe fa10 	bl	8001b20 <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	f241 3288 	movw	r2, #5000	; 0x1388
 800370a:	4293      	cmp	r3, r2
 800370c:	d901      	bls.n	8003712 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e03b      	b.n	800378a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003712:	4b20      	ldr	r3, [pc, #128]	; (8003794 <HAL_RCC_ClockConfig+0x260>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f003 030f 	and.w	r3, r3, #15
 800371a:	683a      	ldr	r2, [r7, #0]
 800371c:	429a      	cmp	r2, r3
 800371e:	d1ed      	bne.n	80036fc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f003 0304 	and.w	r3, r3, #4
 8003728:	2b00      	cmp	r3, #0
 800372a:	d008      	beq.n	800373e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800372c:	4b1a      	ldr	r3, [pc, #104]	; (8003798 <HAL_RCC_ClockConfig+0x264>)
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	4917      	ldr	r1, [pc, #92]	; (8003798 <HAL_RCC_ClockConfig+0x264>)
 800373a:	4313      	orrs	r3, r2
 800373c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0308 	and.w	r3, r3, #8
 8003746:	2b00      	cmp	r3, #0
 8003748:	d009      	beq.n	800375e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800374a:	4b13      	ldr	r3, [pc, #76]	; (8003798 <HAL_RCC_ClockConfig+0x264>)
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	00db      	lsls	r3, r3, #3
 8003758:	490f      	ldr	r1, [pc, #60]	; (8003798 <HAL_RCC_ClockConfig+0x264>)
 800375a:	4313      	orrs	r3, r2
 800375c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800375e:	f000 f825 	bl	80037ac <HAL_RCC_GetSysClockFreq>
 8003762:	4602      	mov	r2, r0
 8003764:	4b0c      	ldr	r3, [pc, #48]	; (8003798 <HAL_RCC_ClockConfig+0x264>)
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	091b      	lsrs	r3, r3, #4
 800376a:	f003 030f 	and.w	r3, r3, #15
 800376e:	490c      	ldr	r1, [pc, #48]	; (80037a0 <HAL_RCC_ClockConfig+0x26c>)
 8003770:	5ccb      	ldrb	r3, [r1, r3]
 8003772:	f003 031f 	and.w	r3, r3, #31
 8003776:	fa22 f303 	lsr.w	r3, r2, r3
 800377a:	4a0a      	ldr	r2, [pc, #40]	; (80037a4 <HAL_RCC_ClockConfig+0x270>)
 800377c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800377e:	4b0a      	ldr	r3, [pc, #40]	; (80037a8 <HAL_RCC_ClockConfig+0x274>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4618      	mov	r0, r3
 8003784:	f7fe f980 	bl	8001a88 <HAL_InitTick>
 8003788:	4603      	mov	r3, r0
}
 800378a:	4618      	mov	r0, r3
 800378c:	3718      	adds	r7, #24
 800378e:	46bd      	mov	sp, r7
 8003790:	bd80      	pop	{r7, pc}
 8003792:	bf00      	nop
 8003794:	40022000 	.word	0x40022000
 8003798:	40021000 	.word	0x40021000
 800379c:	04c4b400 	.word	0x04c4b400
 80037a0:	08007b44 	.word	0x08007b44
 80037a4:	20000000 	.word	0x20000000
 80037a8:	20000004 	.word	0x20000004

080037ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037ac:	b480      	push	{r7}
 80037ae:	b087      	sub	sp, #28
 80037b0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80037b2:	4b2c      	ldr	r3, [pc, #176]	; (8003864 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f003 030c 	and.w	r3, r3, #12
 80037ba:	2b04      	cmp	r3, #4
 80037bc:	d102      	bne.n	80037c4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80037be:	4b2a      	ldr	r3, [pc, #168]	; (8003868 <HAL_RCC_GetSysClockFreq+0xbc>)
 80037c0:	613b      	str	r3, [r7, #16]
 80037c2:	e047      	b.n	8003854 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80037c4:	4b27      	ldr	r3, [pc, #156]	; (8003864 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f003 030c 	and.w	r3, r3, #12
 80037cc:	2b08      	cmp	r3, #8
 80037ce:	d102      	bne.n	80037d6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80037d0:	4b26      	ldr	r3, [pc, #152]	; (800386c <HAL_RCC_GetSysClockFreq+0xc0>)
 80037d2:	613b      	str	r3, [r7, #16]
 80037d4:	e03e      	b.n	8003854 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80037d6:	4b23      	ldr	r3, [pc, #140]	; (8003864 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037d8:	689b      	ldr	r3, [r3, #8]
 80037da:	f003 030c 	and.w	r3, r3, #12
 80037de:	2b0c      	cmp	r3, #12
 80037e0:	d136      	bne.n	8003850 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80037e2:	4b20      	ldr	r3, [pc, #128]	; (8003864 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037e4:	68db      	ldr	r3, [r3, #12]
 80037e6:	f003 0303 	and.w	r3, r3, #3
 80037ea:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037ec:	4b1d      	ldr	r3, [pc, #116]	; (8003864 <HAL_RCC_GetSysClockFreq+0xb8>)
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	091b      	lsrs	r3, r3, #4
 80037f2:	f003 030f 	and.w	r3, r3, #15
 80037f6:	3301      	adds	r3, #1
 80037f8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2b03      	cmp	r3, #3
 80037fe:	d10c      	bne.n	800381a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003800:	4a1a      	ldr	r2, [pc, #104]	; (800386c <HAL_RCC_GetSysClockFreq+0xc0>)
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	fbb2 f3f3 	udiv	r3, r2, r3
 8003808:	4a16      	ldr	r2, [pc, #88]	; (8003864 <HAL_RCC_GetSysClockFreq+0xb8>)
 800380a:	68d2      	ldr	r2, [r2, #12]
 800380c:	0a12      	lsrs	r2, r2, #8
 800380e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003812:	fb02 f303 	mul.w	r3, r2, r3
 8003816:	617b      	str	r3, [r7, #20]
      break;
 8003818:	e00c      	b.n	8003834 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800381a:	4a13      	ldr	r2, [pc, #76]	; (8003868 <HAL_RCC_GetSysClockFreq+0xbc>)
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003822:	4a10      	ldr	r2, [pc, #64]	; (8003864 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003824:	68d2      	ldr	r2, [r2, #12]
 8003826:	0a12      	lsrs	r2, r2, #8
 8003828:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800382c:	fb02 f303 	mul.w	r3, r2, r3
 8003830:	617b      	str	r3, [r7, #20]
      break;
 8003832:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003834:	4b0b      	ldr	r3, [pc, #44]	; (8003864 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003836:	68db      	ldr	r3, [r3, #12]
 8003838:	0e5b      	lsrs	r3, r3, #25
 800383a:	f003 0303 	and.w	r3, r3, #3
 800383e:	3301      	adds	r3, #1
 8003840:	005b      	lsls	r3, r3, #1
 8003842:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003844:	697a      	ldr	r2, [r7, #20]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	fbb2 f3f3 	udiv	r3, r2, r3
 800384c:	613b      	str	r3, [r7, #16]
 800384e:	e001      	b.n	8003854 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003850:	2300      	movs	r3, #0
 8003852:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003854:	693b      	ldr	r3, [r7, #16]
}
 8003856:	4618      	mov	r0, r3
 8003858:	371c      	adds	r7, #28
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	40021000 	.word	0x40021000
 8003868:	00f42400 	.word	0x00f42400
 800386c:	016e3600 	.word	0x016e3600

08003870 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003870:	b480      	push	{r7}
 8003872:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003874:	4b03      	ldr	r3, [pc, #12]	; (8003884 <HAL_RCC_GetHCLKFreq+0x14>)
 8003876:	681b      	ldr	r3, [r3, #0]
}
 8003878:	4618      	mov	r0, r3
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	20000000 	.word	0x20000000

08003888 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800388c:	f7ff fff0 	bl	8003870 <HAL_RCC_GetHCLKFreq>
 8003890:	4602      	mov	r2, r0
 8003892:	4b06      	ldr	r3, [pc, #24]	; (80038ac <HAL_RCC_GetPCLK1Freq+0x24>)
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	0a1b      	lsrs	r3, r3, #8
 8003898:	f003 0307 	and.w	r3, r3, #7
 800389c:	4904      	ldr	r1, [pc, #16]	; (80038b0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800389e:	5ccb      	ldrb	r3, [r1, r3]
 80038a0:	f003 031f 	and.w	r3, r3, #31
 80038a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	40021000 	.word	0x40021000
 80038b0:	08007b54 	.word	0x08007b54

080038b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80038b8:	f7ff ffda 	bl	8003870 <HAL_RCC_GetHCLKFreq>
 80038bc:	4602      	mov	r2, r0
 80038be:	4b06      	ldr	r3, [pc, #24]	; (80038d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	0adb      	lsrs	r3, r3, #11
 80038c4:	f003 0307 	and.w	r3, r3, #7
 80038c8:	4904      	ldr	r1, [pc, #16]	; (80038dc <HAL_RCC_GetPCLK2Freq+0x28>)
 80038ca:	5ccb      	ldrb	r3, [r1, r3]
 80038cc:	f003 031f 	and.w	r3, r3, #31
 80038d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	40021000 	.word	0x40021000
 80038dc:	08007b54 	.word	0x08007b54

080038e0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b087      	sub	sp, #28
 80038e4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80038e6:	4b1e      	ldr	r3, [pc, #120]	; (8003960 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80038e8:	68db      	ldr	r3, [r3, #12]
 80038ea:	f003 0303 	and.w	r3, r3, #3
 80038ee:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80038f0:	4b1b      	ldr	r3, [pc, #108]	; (8003960 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80038f2:	68db      	ldr	r3, [r3, #12]
 80038f4:	091b      	lsrs	r3, r3, #4
 80038f6:	f003 030f 	and.w	r3, r3, #15
 80038fa:	3301      	adds	r3, #1
 80038fc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	2b03      	cmp	r3, #3
 8003902:	d10c      	bne.n	800391e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003904:	4a17      	ldr	r2, [pc, #92]	; (8003964 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	fbb2 f3f3 	udiv	r3, r2, r3
 800390c:	4a14      	ldr	r2, [pc, #80]	; (8003960 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800390e:	68d2      	ldr	r2, [r2, #12]
 8003910:	0a12      	lsrs	r2, r2, #8
 8003912:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003916:	fb02 f303 	mul.w	r3, r2, r3
 800391a:	617b      	str	r3, [r7, #20]
    break;
 800391c:	e00c      	b.n	8003938 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800391e:	4a12      	ldr	r2, [pc, #72]	; (8003968 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	fbb2 f3f3 	udiv	r3, r2, r3
 8003926:	4a0e      	ldr	r2, [pc, #56]	; (8003960 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003928:	68d2      	ldr	r2, [r2, #12]
 800392a:	0a12      	lsrs	r2, r2, #8
 800392c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003930:	fb02 f303 	mul.w	r3, r2, r3
 8003934:	617b      	str	r3, [r7, #20]
    break;
 8003936:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003938:	4b09      	ldr	r3, [pc, #36]	; (8003960 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	0e5b      	lsrs	r3, r3, #25
 800393e:	f003 0303 	and.w	r3, r3, #3
 8003942:	3301      	adds	r3, #1
 8003944:	005b      	lsls	r3, r3, #1
 8003946:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003948:	697a      	ldr	r2, [r7, #20]
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003950:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003952:	687b      	ldr	r3, [r7, #4]
}
 8003954:	4618      	mov	r0, r3
 8003956:	371c      	adds	r7, #28
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr
 8003960:	40021000 	.word	0x40021000
 8003964:	016e3600 	.word	0x016e3600
 8003968:	00f42400 	.word	0x00f42400

0800396c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b086      	sub	sp, #24
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003974:	2300      	movs	r3, #0
 8003976:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003978:	2300      	movs	r3, #0
 800397a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003984:	2b00      	cmp	r3, #0
 8003986:	f000 8098 	beq.w	8003aba <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800398a:	2300      	movs	r3, #0
 800398c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800398e:	4b43      	ldr	r3, [pc, #268]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003990:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10d      	bne.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800399a:	4b40      	ldr	r3, [pc, #256]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800399c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800399e:	4a3f      	ldr	r2, [pc, #252]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039a4:	6593      	str	r3, [r2, #88]	; 0x58
 80039a6:	4b3d      	ldr	r3, [pc, #244]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80039ae:	60bb      	str	r3, [r7, #8]
 80039b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80039b2:	2301      	movs	r3, #1
 80039b4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039b6:	4b3a      	ldr	r3, [pc, #232]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a39      	ldr	r2, [pc, #228]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80039bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039c0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039c2:	f7fe f8ad 	bl	8001b20 <HAL_GetTick>
 80039c6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039c8:	e009      	b.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039ca:	f7fe f8a9 	bl	8001b20 <HAL_GetTick>
 80039ce:	4602      	mov	r2, r0
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	1ad3      	subs	r3, r2, r3
 80039d4:	2b02      	cmp	r3, #2
 80039d6:	d902      	bls.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80039d8:	2303      	movs	r3, #3
 80039da:	74fb      	strb	r3, [r7, #19]
        break;
 80039dc:	e005      	b.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039de:	4b30      	ldr	r3, [pc, #192]	; (8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d0ef      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80039ea:	7cfb      	ldrb	r3, [r7, #19]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d159      	bne.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80039f0:	4b2a      	ldr	r3, [pc, #168]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80039f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039fa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d01e      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d019      	beq.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003a0c:	4b23      	ldr	r3, [pc, #140]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a16:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a18:	4b20      	ldr	r3, [pc, #128]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a1e:	4a1f      	ldr	r2, [pc, #124]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a28:	4b1c      	ldr	r3, [pc, #112]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a2e:	4a1b      	ldr	r2, [pc, #108]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003a38:	4a18      	ldr	r2, [pc, #96]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d016      	beq.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a4a:	f7fe f869 	bl	8001b20 <HAL_GetTick>
 8003a4e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a50:	e00b      	b.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a52:	f7fe f865 	bl	8001b20 <HAL_GetTick>
 8003a56:	4602      	mov	r2, r0
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	1ad3      	subs	r3, r2, r3
 8003a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d902      	bls.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003a64:	2303      	movs	r3, #3
 8003a66:	74fb      	strb	r3, [r7, #19]
            break;
 8003a68:	e006      	b.n	8003a78 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a6a:	4b0c      	ldr	r3, [pc, #48]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a70:	f003 0302 	and.w	r3, r3, #2
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d0ec      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003a78:	7cfb      	ldrb	r3, [r7, #19]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d10b      	bne.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a7e:	4b07      	ldr	r3, [pc, #28]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8c:	4903      	ldr	r1, [pc, #12]	; (8003a9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003a94:	e008      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a96:	7cfb      	ldrb	r3, [r7, #19]
 8003a98:	74bb      	strb	r3, [r7, #18]
 8003a9a:	e005      	b.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003a9c:	40021000 	.word	0x40021000
 8003aa0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aa4:	7cfb      	ldrb	r3, [r7, #19]
 8003aa6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003aa8:	7c7b      	ldrb	r3, [r7, #17]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d105      	bne.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aae:	4ba6      	ldr	r3, [pc, #664]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ab2:	4aa5      	ldr	r2, [pc, #660]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ab4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ab8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0301 	and.w	r3, r3, #1
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d00a      	beq.n	8003adc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ac6:	4ba0      	ldr	r3, [pc, #640]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003acc:	f023 0203 	bic.w	r2, r3, #3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	499c      	ldr	r1, [pc, #624]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0302 	and.w	r3, r3, #2
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d00a      	beq.n	8003afe <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ae8:	4b97      	ldr	r3, [pc, #604]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aee:	f023 020c 	bic.w	r2, r3, #12
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	4994      	ldr	r1, [pc, #592]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003af8:	4313      	orrs	r3, r2
 8003afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 0304 	and.w	r3, r3, #4
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00a      	beq.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003b0a:	4b8f      	ldr	r3, [pc, #572]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b10:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	498b      	ldr	r1, [pc, #556]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b1a:	4313      	orrs	r3, r2
 8003b1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0308 	and.w	r3, r3, #8
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00a      	beq.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003b2c:	4b86      	ldr	r3, [pc, #536]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b32:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	4983      	ldr	r1, [pc, #524]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0320 	and.w	r3, r3, #32
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00a      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b4e:	4b7e      	ldr	r3, [pc, #504]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b54:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	695b      	ldr	r3, [r3, #20]
 8003b5c:	497a      	ldr	r1, [pc, #488]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00a      	beq.n	8003b86 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b70:	4b75      	ldr	r3, [pc, #468]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b76:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	4972      	ldr	r1, [pc, #456]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00a      	beq.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b92:	4b6d      	ldr	r3, [pc, #436]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b98:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	69db      	ldr	r3, [r3, #28]
 8003ba0:	4969      	ldr	r1, [pc, #420]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d00a      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003bb4:	4b64      	ldr	r3, [pc, #400]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
 8003bc2:	4961      	ldr	r1, [pc, #388]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d00a      	beq.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003bd6:	4b5c      	ldr	r3, [pc, #368]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bdc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be4:	4958      	ldr	r1, [pc, #352]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003be6:	4313      	orrs	r3, r2
 8003be8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d015      	beq.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003bf8:	4b53      	ldr	r3, [pc, #332]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bfe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c06:	4950      	ldr	r1, [pc, #320]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c16:	d105      	bne.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c18:	4b4b      	ldr	r3, [pc, #300]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c1a:	68db      	ldr	r3, [r3, #12]
 8003c1c:	4a4a      	ldr	r2, [pc, #296]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c22:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d015      	beq.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003c30:	4b45      	ldr	r3, [pc, #276]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c36:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3e:	4942      	ldr	r1, [pc, #264]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c40:	4313      	orrs	r3, r2
 8003c42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c4e:	d105      	bne.n	8003c5c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c50:	4b3d      	ldr	r3, [pc, #244]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	4a3c      	ldr	r2, [pc, #240]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c5a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d015      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003c68:	4b37      	ldr	r3, [pc, #220]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c6e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c76:	4934      	ldr	r1, [pc, #208]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c82:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c86:	d105      	bne.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c88:	4b2f      	ldr	r3, [pc, #188]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	4a2e      	ldr	r2, [pc, #184]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003c92:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d015      	beq.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ca0:	4b29      	ldr	r3, [pc, #164]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cae:	4926      	ldr	r1, [pc, #152]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cbe:	d105      	bne.n	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cc0:	4b21      	ldr	r3, [pc, #132]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	4a20      	ldr	r2, [pc, #128]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003cca:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d015      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003cd8:	4b1b      	ldr	r3, [pc, #108]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cde:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce6:	4918      	ldr	r1, [pc, #96]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cf6:	d105      	bne.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cf8:	4b13      	ldr	r3, [pc, #76]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	4a12      	ldr	r2, [pc, #72]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003cfe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d02:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d015      	beq.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003d10:	4b0d      	ldr	r3, [pc, #52]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d16:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d1e:	490a      	ldr	r1, [pc, #40]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d2e:	d105      	bne.n	8003d3c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003d30:	4b05      	ldr	r3, [pc, #20]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	4a04      	ldr	r2, [pc, #16]	; (8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003d36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d3a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003d3c:	7cbb      	ldrb	r3, [r7, #18]
}
 8003d3e:	4618      	mov	r0, r3
 8003d40:	3718      	adds	r7, #24
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	40021000 	.word	0x40021000

08003d4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d101      	bne.n	8003d5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e042      	b.n	8003de4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d106      	bne.n	8003d76 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f7fd fdef 	bl	8001954 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2224      	movs	r2, #36	; 0x24
 8003d7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f022 0201 	bic.w	r2, r2, #1
 8003d8c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 f8c2 	bl	8003f18 <UART_SetConfig>
 8003d94:	4603      	mov	r3, r0
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d101      	bne.n	8003d9e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e022      	b.n	8003de4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d002      	beq.n	8003dac <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 fb82 	bl	80044b0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	685a      	ldr	r2, [r3, #4]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003dba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	689a      	ldr	r2, [r3, #8]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003dca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f042 0201 	orr.w	r2, r2, #1
 8003dda:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f000 fc09 	bl	80045f4 <UART_CheckIdleState>
 8003de2:	4603      	mov	r3, r0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3708      	adds	r7, #8
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b08a      	sub	sp, #40	; 0x28
 8003df0:	af02      	add	r7, sp, #8
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	603b      	str	r3, [r7, #0]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e02:	2b20      	cmp	r3, #32
 8003e04:	f040 8083 	bne.w	8003f0e <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d002      	beq.n	8003e14 <HAL_UART_Transmit+0x28>
 8003e0e:	88fb      	ldrh	r3, [r7, #6]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d101      	bne.n	8003e18 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	e07b      	b.n	8003f10 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d101      	bne.n	8003e26 <HAL_UART_Transmit+0x3a>
 8003e22:	2302      	movs	r3, #2
 8003e24:	e074      	b.n	8003f10 <HAL_UART_Transmit+0x124>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2221      	movs	r2, #33	; 0x21
 8003e3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e3e:	f7fd fe6f 	bl	8001b20 <HAL_GetTick>
 8003e42:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	88fa      	ldrh	r2, [r7, #6]
 8003e48:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	88fa      	ldrh	r2, [r7, #6]
 8003e50:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e5c:	d108      	bne.n	8003e70 <HAL_UART_Transmit+0x84>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	691b      	ldr	r3, [r3, #16]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d104      	bne.n	8003e70 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003e66:	2300      	movs	r3, #0
 8003e68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	61bb      	str	r3, [r7, #24]
 8003e6e:	e003      	b.n	8003e78 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e74:	2300      	movs	r3, #0
 8003e76:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003e80:	e02c      	b.n	8003edc <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	9300      	str	r3, [sp, #0]
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	2180      	movs	r1, #128	; 0x80
 8003e8c:	68f8      	ldr	r0, [r7, #12]
 8003e8e:	f000 fbfc 	bl	800468a <UART_WaitOnFlagUntilTimeout>
 8003e92:	4603      	mov	r3, r0
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d001      	beq.n	8003e9c <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e039      	b.n	8003f10 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003e9c:	69fb      	ldr	r3, [r7, #28]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d10b      	bne.n	8003eba <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ea2:	69bb      	ldr	r3, [r7, #24]
 8003ea4:	881b      	ldrh	r3, [r3, #0]
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003eb0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003eb2:	69bb      	ldr	r3, [r7, #24]
 8003eb4:	3302      	adds	r3, #2
 8003eb6:	61bb      	str	r3, [r7, #24]
 8003eb8:	e007      	b.n	8003eca <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	781a      	ldrb	r2, [r3, #0]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003ec4:	69fb      	ldr	r3, [r7, #28]
 8003ec6:	3301      	adds	r3, #1
 8003ec8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	3b01      	subs	r3, #1
 8003ed4:	b29a      	uxth	r2, r3
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1cc      	bne.n	8003e82 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	9300      	str	r3, [sp, #0]
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	2140      	movs	r1, #64	; 0x40
 8003ef2:	68f8      	ldr	r0, [r7, #12]
 8003ef4:	f000 fbc9 	bl	800468a <UART_WaitOnFlagUntilTimeout>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d001      	beq.n	8003f02 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8003efe:	2303      	movs	r3, #3
 8003f00:	e006      	b.n	8003f10 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2220      	movs	r2, #32
 8003f06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	e000      	b.n	8003f10 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003f0e:	2302      	movs	r3, #2
  }
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3720      	adds	r7, #32
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f1c:	b08c      	sub	sp, #48	; 0x30
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f22:	2300      	movs	r3, #0
 8003f24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	689a      	ldr	r2, [r3, #8]
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	691b      	ldr	r3, [r3, #16]
 8003f30:	431a      	orrs	r2, r3
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	431a      	orrs	r2, r3
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	69db      	ldr	r3, [r3, #28]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	4bab      	ldr	r3, [pc, #684]	; (80041f4 <UART_SetConfig+0x2dc>)
 8003f48:	4013      	ands	r3, r2
 8003f4a:	697a      	ldr	r2, [r7, #20]
 8003f4c:	6812      	ldr	r2, [r2, #0]
 8003f4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f50:	430b      	orrs	r3, r1
 8003f52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	68da      	ldr	r2, [r3, #12]
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	430a      	orrs	r2, r1
 8003f68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4aa0      	ldr	r2, [pc, #640]	; (80041f8 <UART_SetConfig+0x2e0>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d004      	beq.n	8003f84 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	6a1b      	ldr	r3, [r3, #32]
 8003f7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f80:	4313      	orrs	r3, r2
 8003f82:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003f8e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003f92:	697a      	ldr	r2, [r7, #20]
 8003f94:	6812      	ldr	r2, [r2, #0]
 8003f96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f98:	430b      	orrs	r3, r1
 8003f9a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003f9c:	697b      	ldr	r3, [r7, #20]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa2:	f023 010f 	bic.w	r1, r3, #15
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a91      	ldr	r2, [pc, #580]	; (80041fc <UART_SetConfig+0x2e4>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d125      	bne.n	8004008 <UART_SetConfig+0xf0>
 8003fbc:	4b90      	ldr	r3, [pc, #576]	; (8004200 <UART_SetConfig+0x2e8>)
 8003fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc2:	f003 0303 	and.w	r3, r3, #3
 8003fc6:	2b03      	cmp	r3, #3
 8003fc8:	d81a      	bhi.n	8004000 <UART_SetConfig+0xe8>
 8003fca:	a201      	add	r2, pc, #4	; (adr r2, 8003fd0 <UART_SetConfig+0xb8>)
 8003fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fd0:	08003fe1 	.word	0x08003fe1
 8003fd4:	08003ff1 	.word	0x08003ff1
 8003fd8:	08003fe9 	.word	0x08003fe9
 8003fdc:	08003ff9 	.word	0x08003ff9
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fe6:	e0d6      	b.n	8004196 <UART_SetConfig+0x27e>
 8003fe8:	2302      	movs	r3, #2
 8003fea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fee:	e0d2      	b.n	8004196 <UART_SetConfig+0x27e>
 8003ff0:	2304      	movs	r3, #4
 8003ff2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ff6:	e0ce      	b.n	8004196 <UART_SetConfig+0x27e>
 8003ff8:	2308      	movs	r3, #8
 8003ffa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ffe:	e0ca      	b.n	8004196 <UART_SetConfig+0x27e>
 8004000:	2310      	movs	r3, #16
 8004002:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004006:	e0c6      	b.n	8004196 <UART_SetConfig+0x27e>
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a7d      	ldr	r2, [pc, #500]	; (8004204 <UART_SetConfig+0x2ec>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d138      	bne.n	8004084 <UART_SetConfig+0x16c>
 8004012:	4b7b      	ldr	r3, [pc, #492]	; (8004200 <UART_SetConfig+0x2e8>)
 8004014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004018:	f003 030c 	and.w	r3, r3, #12
 800401c:	2b0c      	cmp	r3, #12
 800401e:	d82d      	bhi.n	800407c <UART_SetConfig+0x164>
 8004020:	a201      	add	r2, pc, #4	; (adr r2, 8004028 <UART_SetConfig+0x110>)
 8004022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004026:	bf00      	nop
 8004028:	0800405d 	.word	0x0800405d
 800402c:	0800407d 	.word	0x0800407d
 8004030:	0800407d 	.word	0x0800407d
 8004034:	0800407d 	.word	0x0800407d
 8004038:	0800406d 	.word	0x0800406d
 800403c:	0800407d 	.word	0x0800407d
 8004040:	0800407d 	.word	0x0800407d
 8004044:	0800407d 	.word	0x0800407d
 8004048:	08004065 	.word	0x08004065
 800404c:	0800407d 	.word	0x0800407d
 8004050:	0800407d 	.word	0x0800407d
 8004054:	0800407d 	.word	0x0800407d
 8004058:	08004075 	.word	0x08004075
 800405c:	2300      	movs	r3, #0
 800405e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004062:	e098      	b.n	8004196 <UART_SetConfig+0x27e>
 8004064:	2302      	movs	r3, #2
 8004066:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800406a:	e094      	b.n	8004196 <UART_SetConfig+0x27e>
 800406c:	2304      	movs	r3, #4
 800406e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004072:	e090      	b.n	8004196 <UART_SetConfig+0x27e>
 8004074:	2308      	movs	r3, #8
 8004076:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800407a:	e08c      	b.n	8004196 <UART_SetConfig+0x27e>
 800407c:	2310      	movs	r3, #16
 800407e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004082:	e088      	b.n	8004196 <UART_SetConfig+0x27e>
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a5f      	ldr	r2, [pc, #380]	; (8004208 <UART_SetConfig+0x2f0>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d125      	bne.n	80040da <UART_SetConfig+0x1c2>
 800408e:	4b5c      	ldr	r3, [pc, #368]	; (8004200 <UART_SetConfig+0x2e8>)
 8004090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004094:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004098:	2b30      	cmp	r3, #48	; 0x30
 800409a:	d016      	beq.n	80040ca <UART_SetConfig+0x1b2>
 800409c:	2b30      	cmp	r3, #48	; 0x30
 800409e:	d818      	bhi.n	80040d2 <UART_SetConfig+0x1ba>
 80040a0:	2b20      	cmp	r3, #32
 80040a2:	d00a      	beq.n	80040ba <UART_SetConfig+0x1a2>
 80040a4:	2b20      	cmp	r3, #32
 80040a6:	d814      	bhi.n	80040d2 <UART_SetConfig+0x1ba>
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d002      	beq.n	80040b2 <UART_SetConfig+0x19a>
 80040ac:	2b10      	cmp	r3, #16
 80040ae:	d008      	beq.n	80040c2 <UART_SetConfig+0x1aa>
 80040b0:	e00f      	b.n	80040d2 <UART_SetConfig+0x1ba>
 80040b2:	2300      	movs	r3, #0
 80040b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040b8:	e06d      	b.n	8004196 <UART_SetConfig+0x27e>
 80040ba:	2302      	movs	r3, #2
 80040bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040c0:	e069      	b.n	8004196 <UART_SetConfig+0x27e>
 80040c2:	2304      	movs	r3, #4
 80040c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040c8:	e065      	b.n	8004196 <UART_SetConfig+0x27e>
 80040ca:	2308      	movs	r3, #8
 80040cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040d0:	e061      	b.n	8004196 <UART_SetConfig+0x27e>
 80040d2:	2310      	movs	r3, #16
 80040d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80040d8:	e05d      	b.n	8004196 <UART_SetConfig+0x27e>
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a4b      	ldr	r2, [pc, #300]	; (800420c <UART_SetConfig+0x2f4>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d125      	bne.n	8004130 <UART_SetConfig+0x218>
 80040e4:	4b46      	ldr	r3, [pc, #280]	; (8004200 <UART_SetConfig+0x2e8>)
 80040e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80040ee:	2bc0      	cmp	r3, #192	; 0xc0
 80040f0:	d016      	beq.n	8004120 <UART_SetConfig+0x208>
 80040f2:	2bc0      	cmp	r3, #192	; 0xc0
 80040f4:	d818      	bhi.n	8004128 <UART_SetConfig+0x210>
 80040f6:	2b80      	cmp	r3, #128	; 0x80
 80040f8:	d00a      	beq.n	8004110 <UART_SetConfig+0x1f8>
 80040fa:	2b80      	cmp	r3, #128	; 0x80
 80040fc:	d814      	bhi.n	8004128 <UART_SetConfig+0x210>
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d002      	beq.n	8004108 <UART_SetConfig+0x1f0>
 8004102:	2b40      	cmp	r3, #64	; 0x40
 8004104:	d008      	beq.n	8004118 <UART_SetConfig+0x200>
 8004106:	e00f      	b.n	8004128 <UART_SetConfig+0x210>
 8004108:	2300      	movs	r3, #0
 800410a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800410e:	e042      	b.n	8004196 <UART_SetConfig+0x27e>
 8004110:	2302      	movs	r3, #2
 8004112:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004116:	e03e      	b.n	8004196 <UART_SetConfig+0x27e>
 8004118:	2304      	movs	r3, #4
 800411a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800411e:	e03a      	b.n	8004196 <UART_SetConfig+0x27e>
 8004120:	2308      	movs	r3, #8
 8004122:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004126:	e036      	b.n	8004196 <UART_SetConfig+0x27e>
 8004128:	2310      	movs	r3, #16
 800412a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800412e:	e032      	b.n	8004196 <UART_SetConfig+0x27e>
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a30      	ldr	r2, [pc, #192]	; (80041f8 <UART_SetConfig+0x2e0>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d12a      	bne.n	8004190 <UART_SetConfig+0x278>
 800413a:	4b31      	ldr	r3, [pc, #196]	; (8004200 <UART_SetConfig+0x2e8>)
 800413c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004140:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004144:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004148:	d01a      	beq.n	8004180 <UART_SetConfig+0x268>
 800414a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800414e:	d81b      	bhi.n	8004188 <UART_SetConfig+0x270>
 8004150:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004154:	d00c      	beq.n	8004170 <UART_SetConfig+0x258>
 8004156:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800415a:	d815      	bhi.n	8004188 <UART_SetConfig+0x270>
 800415c:	2b00      	cmp	r3, #0
 800415e:	d003      	beq.n	8004168 <UART_SetConfig+0x250>
 8004160:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004164:	d008      	beq.n	8004178 <UART_SetConfig+0x260>
 8004166:	e00f      	b.n	8004188 <UART_SetConfig+0x270>
 8004168:	2300      	movs	r3, #0
 800416a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800416e:	e012      	b.n	8004196 <UART_SetConfig+0x27e>
 8004170:	2302      	movs	r3, #2
 8004172:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004176:	e00e      	b.n	8004196 <UART_SetConfig+0x27e>
 8004178:	2304      	movs	r3, #4
 800417a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800417e:	e00a      	b.n	8004196 <UART_SetConfig+0x27e>
 8004180:	2308      	movs	r3, #8
 8004182:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004186:	e006      	b.n	8004196 <UART_SetConfig+0x27e>
 8004188:	2310      	movs	r3, #16
 800418a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800418e:	e002      	b.n	8004196 <UART_SetConfig+0x27e>
 8004190:	2310      	movs	r3, #16
 8004192:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a17      	ldr	r2, [pc, #92]	; (80041f8 <UART_SetConfig+0x2e0>)
 800419c:	4293      	cmp	r3, r2
 800419e:	f040 80a8 	bne.w	80042f2 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80041a2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80041a6:	2b08      	cmp	r3, #8
 80041a8:	d834      	bhi.n	8004214 <UART_SetConfig+0x2fc>
 80041aa:	a201      	add	r2, pc, #4	; (adr r2, 80041b0 <UART_SetConfig+0x298>)
 80041ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b0:	080041d5 	.word	0x080041d5
 80041b4:	08004215 	.word	0x08004215
 80041b8:	080041dd 	.word	0x080041dd
 80041bc:	08004215 	.word	0x08004215
 80041c0:	080041e3 	.word	0x080041e3
 80041c4:	08004215 	.word	0x08004215
 80041c8:	08004215 	.word	0x08004215
 80041cc:	08004215 	.word	0x08004215
 80041d0:	080041eb 	.word	0x080041eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041d4:	f7ff fb58 	bl	8003888 <HAL_RCC_GetPCLK1Freq>
 80041d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80041da:	e021      	b.n	8004220 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041dc:	4b0c      	ldr	r3, [pc, #48]	; (8004210 <UART_SetConfig+0x2f8>)
 80041de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80041e0:	e01e      	b.n	8004220 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041e2:	f7ff fae3 	bl	80037ac <HAL_RCC_GetSysClockFreq>
 80041e6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80041e8:	e01a      	b.n	8004220 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80041ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80041f0:	e016      	b.n	8004220 <UART_SetConfig+0x308>
 80041f2:	bf00      	nop
 80041f4:	cfff69f3 	.word	0xcfff69f3
 80041f8:	40008000 	.word	0x40008000
 80041fc:	40013800 	.word	0x40013800
 8004200:	40021000 	.word	0x40021000
 8004204:	40004400 	.word	0x40004400
 8004208:	40004800 	.word	0x40004800
 800420c:	40004c00 	.word	0x40004c00
 8004210:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004214:	2300      	movs	r3, #0
 8004216:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800421e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004222:	2b00      	cmp	r3, #0
 8004224:	f000 812a 	beq.w	800447c <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422c:	4a9e      	ldr	r2, [pc, #632]	; (80044a8 <UART_SetConfig+0x590>)
 800422e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004232:	461a      	mov	r2, r3
 8004234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004236:	fbb3 f3f2 	udiv	r3, r3, r2
 800423a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	685a      	ldr	r2, [r3, #4]
 8004240:	4613      	mov	r3, r2
 8004242:	005b      	lsls	r3, r3, #1
 8004244:	4413      	add	r3, r2
 8004246:	69ba      	ldr	r2, [r7, #24]
 8004248:	429a      	cmp	r2, r3
 800424a:	d305      	bcc.n	8004258 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004252:	69ba      	ldr	r2, [r7, #24]
 8004254:	429a      	cmp	r2, r3
 8004256:	d903      	bls.n	8004260 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800425e:	e10d      	b.n	800447c <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004262:	2200      	movs	r2, #0
 8004264:	60bb      	str	r3, [r7, #8]
 8004266:	60fa      	str	r2, [r7, #12]
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426c:	4a8e      	ldr	r2, [pc, #568]	; (80044a8 <UART_SetConfig+0x590>)
 800426e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004272:	b29b      	uxth	r3, r3
 8004274:	2200      	movs	r2, #0
 8004276:	603b      	str	r3, [r7, #0]
 8004278:	607a      	str	r2, [r7, #4]
 800427a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800427e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004282:	f7fc fcb9 	bl	8000bf8 <__aeabi_uldivmod>
 8004286:	4602      	mov	r2, r0
 8004288:	460b      	mov	r3, r1
 800428a:	4610      	mov	r0, r2
 800428c:	4619      	mov	r1, r3
 800428e:	f04f 0200 	mov.w	r2, #0
 8004292:	f04f 0300 	mov.w	r3, #0
 8004296:	020b      	lsls	r3, r1, #8
 8004298:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800429c:	0202      	lsls	r2, r0, #8
 800429e:	6979      	ldr	r1, [r7, #20]
 80042a0:	6849      	ldr	r1, [r1, #4]
 80042a2:	0849      	lsrs	r1, r1, #1
 80042a4:	2000      	movs	r0, #0
 80042a6:	460c      	mov	r4, r1
 80042a8:	4605      	mov	r5, r0
 80042aa:	eb12 0804 	adds.w	r8, r2, r4
 80042ae:	eb43 0905 	adc.w	r9, r3, r5
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	469a      	mov	sl, r3
 80042ba:	4693      	mov	fp, r2
 80042bc:	4652      	mov	r2, sl
 80042be:	465b      	mov	r3, fp
 80042c0:	4640      	mov	r0, r8
 80042c2:	4649      	mov	r1, r9
 80042c4:	f7fc fc98 	bl	8000bf8 <__aeabi_uldivmod>
 80042c8:	4602      	mov	r2, r0
 80042ca:	460b      	mov	r3, r1
 80042cc:	4613      	mov	r3, r2
 80042ce:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80042d0:	6a3b      	ldr	r3, [r7, #32]
 80042d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042d6:	d308      	bcc.n	80042ea <UART_SetConfig+0x3d2>
 80042d8:	6a3b      	ldr	r3, [r7, #32]
 80042da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042de:	d204      	bcs.n	80042ea <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	6a3a      	ldr	r2, [r7, #32]
 80042e6:	60da      	str	r2, [r3, #12]
 80042e8:	e0c8      	b.n	800447c <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80042f0:	e0c4      	b.n	800447c <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	69db      	ldr	r3, [r3, #28]
 80042f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042fa:	d167      	bne.n	80043cc <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 80042fc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004300:	2b08      	cmp	r3, #8
 8004302:	d828      	bhi.n	8004356 <UART_SetConfig+0x43e>
 8004304:	a201      	add	r2, pc, #4	; (adr r2, 800430c <UART_SetConfig+0x3f4>)
 8004306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800430a:	bf00      	nop
 800430c:	08004331 	.word	0x08004331
 8004310:	08004339 	.word	0x08004339
 8004314:	08004341 	.word	0x08004341
 8004318:	08004357 	.word	0x08004357
 800431c:	08004347 	.word	0x08004347
 8004320:	08004357 	.word	0x08004357
 8004324:	08004357 	.word	0x08004357
 8004328:	08004357 	.word	0x08004357
 800432c:	0800434f 	.word	0x0800434f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004330:	f7ff faaa 	bl	8003888 <HAL_RCC_GetPCLK1Freq>
 8004334:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004336:	e014      	b.n	8004362 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004338:	f7ff fabc 	bl	80038b4 <HAL_RCC_GetPCLK2Freq>
 800433c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800433e:	e010      	b.n	8004362 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004340:	4b5a      	ldr	r3, [pc, #360]	; (80044ac <UART_SetConfig+0x594>)
 8004342:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004344:	e00d      	b.n	8004362 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004346:	f7ff fa31 	bl	80037ac <HAL_RCC_GetSysClockFreq>
 800434a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800434c:	e009      	b.n	8004362 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800434e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004352:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004354:	e005      	b.n	8004362 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8004356:	2300      	movs	r3, #0
 8004358:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004360:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004364:	2b00      	cmp	r3, #0
 8004366:	f000 8089 	beq.w	800447c <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436e:	4a4e      	ldr	r2, [pc, #312]	; (80044a8 <UART_SetConfig+0x590>)
 8004370:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004374:	461a      	mov	r2, r3
 8004376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004378:	fbb3 f3f2 	udiv	r3, r3, r2
 800437c:	005a      	lsls	r2, r3, #1
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	085b      	lsrs	r3, r3, #1
 8004384:	441a      	add	r2, r3
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	fbb2 f3f3 	udiv	r3, r2, r3
 800438e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004390:	6a3b      	ldr	r3, [r7, #32]
 8004392:	2b0f      	cmp	r3, #15
 8004394:	d916      	bls.n	80043c4 <UART_SetConfig+0x4ac>
 8004396:	6a3b      	ldr	r3, [r7, #32]
 8004398:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800439c:	d212      	bcs.n	80043c4 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800439e:	6a3b      	ldr	r3, [r7, #32]
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	f023 030f 	bic.w	r3, r3, #15
 80043a6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80043a8:	6a3b      	ldr	r3, [r7, #32]
 80043aa:	085b      	lsrs	r3, r3, #1
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	f003 0307 	and.w	r3, r3, #7
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	8bfb      	ldrh	r3, [r7, #30]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	8bfa      	ldrh	r2, [r7, #30]
 80043c0:	60da      	str	r2, [r3, #12]
 80043c2:	e05b      	b.n	800447c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80043c4:	2301      	movs	r3, #1
 80043c6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80043ca:	e057      	b.n	800447c <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80043cc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80043d0:	2b08      	cmp	r3, #8
 80043d2:	d828      	bhi.n	8004426 <UART_SetConfig+0x50e>
 80043d4:	a201      	add	r2, pc, #4	; (adr r2, 80043dc <UART_SetConfig+0x4c4>)
 80043d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043da:	bf00      	nop
 80043dc:	08004401 	.word	0x08004401
 80043e0:	08004409 	.word	0x08004409
 80043e4:	08004411 	.word	0x08004411
 80043e8:	08004427 	.word	0x08004427
 80043ec:	08004417 	.word	0x08004417
 80043f0:	08004427 	.word	0x08004427
 80043f4:	08004427 	.word	0x08004427
 80043f8:	08004427 	.word	0x08004427
 80043fc:	0800441f 	.word	0x0800441f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004400:	f7ff fa42 	bl	8003888 <HAL_RCC_GetPCLK1Freq>
 8004404:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004406:	e014      	b.n	8004432 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004408:	f7ff fa54 	bl	80038b4 <HAL_RCC_GetPCLK2Freq>
 800440c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800440e:	e010      	b.n	8004432 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004410:	4b26      	ldr	r3, [pc, #152]	; (80044ac <UART_SetConfig+0x594>)
 8004412:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004414:	e00d      	b.n	8004432 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004416:	f7ff f9c9 	bl	80037ac <HAL_RCC_GetSysClockFreq>
 800441a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800441c:	e009      	b.n	8004432 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800441e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004422:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004424:	e005      	b.n	8004432 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8004426:	2300      	movs	r3, #0
 8004428:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004430:	bf00      	nop
    }

    if (pclk != 0U)
 8004432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004434:	2b00      	cmp	r3, #0
 8004436:	d021      	beq.n	800447c <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443c:	4a1a      	ldr	r2, [pc, #104]	; (80044a8 <UART_SetConfig+0x590>)
 800443e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004442:	461a      	mov	r2, r3
 8004444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004446:	fbb3 f2f2 	udiv	r2, r3, r2
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	085b      	lsrs	r3, r3, #1
 8004450:	441a      	add	r2, r3
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	fbb2 f3f3 	udiv	r3, r2, r3
 800445a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800445c:	6a3b      	ldr	r3, [r7, #32]
 800445e:	2b0f      	cmp	r3, #15
 8004460:	d909      	bls.n	8004476 <UART_SetConfig+0x55e>
 8004462:	6a3b      	ldr	r3, [r7, #32]
 8004464:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004468:	d205      	bcs.n	8004476 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800446a:	6a3b      	ldr	r3, [r7, #32]
 800446c:	b29a      	uxth	r2, r3
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	60da      	str	r2, [r3, #12]
 8004474:	e002      	b.n	800447c <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	2201      	movs	r2, #1
 8004480:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	2201      	movs	r2, #1
 8004488:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	2200      	movs	r2, #0
 8004490:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	2200      	movs	r2, #0
 8004496:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004498:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800449c:	4618      	mov	r0, r3
 800449e:	3730      	adds	r7, #48	; 0x30
 80044a0:	46bd      	mov	sp, r7
 80044a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044a6:	bf00      	nop
 80044a8:	08007b5c 	.word	0x08007b5c
 80044ac:	00f42400 	.word	0x00f42400

080044b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044bc:	f003 0301 	and.w	r3, r3, #1
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d00a      	beq.n	80044da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	430a      	orrs	r2, r1
 80044d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044de:	f003 0302 	and.w	r3, r3, #2
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00a      	beq.n	80044fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	430a      	orrs	r2, r1
 80044fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004500:	f003 0304 	and.w	r3, r3, #4
 8004504:	2b00      	cmp	r3, #0
 8004506:	d00a      	beq.n	800451e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	430a      	orrs	r2, r1
 800451c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004522:	f003 0308 	and.w	r3, r3, #8
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00a      	beq.n	8004540 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	430a      	orrs	r2, r1
 800453e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004544:	f003 0310 	and.w	r3, r3, #16
 8004548:	2b00      	cmp	r3, #0
 800454a:	d00a      	beq.n	8004562 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	430a      	orrs	r2, r1
 8004560:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004566:	f003 0320 	and.w	r3, r3, #32
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00a      	beq.n	8004584 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	430a      	orrs	r2, r1
 8004582:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800458c:	2b00      	cmp	r3, #0
 800458e:	d01a      	beq.n	80045c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	430a      	orrs	r2, r1
 80045a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045ae:	d10a      	bne.n	80045c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	430a      	orrs	r2, r1
 80045c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d00a      	beq.n	80045e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	430a      	orrs	r2, r1
 80045e6:	605a      	str	r2, [r3, #4]
  }
}
 80045e8:	bf00      	nop
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b086      	sub	sp, #24
 80045f8:	af02      	add	r7, sp, #8
 80045fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004604:	f7fd fa8c 	bl	8001b20 <HAL_GetTick>
 8004608:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0308 	and.w	r3, r3, #8
 8004614:	2b08      	cmp	r3, #8
 8004616:	d10e      	bne.n	8004636 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004618:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800461c:	9300      	str	r3, [sp, #0]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 f82f 	bl	800468a <UART_WaitOnFlagUntilTimeout>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d001      	beq.n	8004636 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004632:	2303      	movs	r3, #3
 8004634:	e025      	b.n	8004682 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0304 	and.w	r3, r3, #4
 8004640:	2b04      	cmp	r3, #4
 8004642:	d10e      	bne.n	8004662 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004644:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004648:	9300      	str	r3, [sp, #0]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 f819 	bl	800468a <UART_WaitOnFlagUntilTimeout>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d001      	beq.n	8004662 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e00f      	b.n	8004682 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2220      	movs	r2, #32
 8004666:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2220      	movs	r2, #32
 800466e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004680:	2300      	movs	r3, #0
}
 8004682:	4618      	mov	r0, r3
 8004684:	3710      	adds	r7, #16
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}

0800468a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800468a:	b580      	push	{r7, lr}
 800468c:	b09c      	sub	sp, #112	; 0x70
 800468e:	af00      	add	r7, sp, #0
 8004690:	60f8      	str	r0, [r7, #12]
 8004692:	60b9      	str	r1, [r7, #8]
 8004694:	603b      	str	r3, [r7, #0]
 8004696:	4613      	mov	r3, r2
 8004698:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800469a:	e0a9      	b.n	80047f0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800469c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800469e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a2:	f000 80a5 	beq.w	80047f0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046a6:	f7fd fa3b 	bl	8001b20 <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d302      	bcc.n	80046bc <UART_WaitOnFlagUntilTimeout+0x32>
 80046b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d140      	bne.n	800473e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046c4:	e853 3f00 	ldrex	r3, [r3]
 80046c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80046ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80046d0:	667b      	str	r3, [r7, #100]	; 0x64
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	461a      	mov	r2, r3
 80046d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046dc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80046e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80046e2:	e841 2300 	strex	r3, r2, [r1]
 80046e6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80046e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d1e6      	bne.n	80046bc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	3308      	adds	r3, #8
 80046f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046f8:	e853 3f00 	ldrex	r3, [r3]
 80046fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80046fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004700:	f023 0301 	bic.w	r3, r3, #1
 8004704:	663b      	str	r3, [r7, #96]	; 0x60
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	3308      	adds	r3, #8
 800470c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800470e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004710:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004712:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004714:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004716:	e841 2300 	strex	r3, r2, [r1]
 800471a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800471c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800471e:	2b00      	cmp	r3, #0
 8004720:	d1e5      	bne.n	80046ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2220      	movs	r2, #32
 8004726:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2220      	movs	r2, #32
 800472e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800473a:	2303      	movs	r3, #3
 800473c:	e069      	b.n	8004812 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0304 	and.w	r3, r3, #4
 8004748:	2b00      	cmp	r3, #0
 800474a:	d051      	beq.n	80047f0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	69db      	ldr	r3, [r3, #28]
 8004752:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004756:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800475a:	d149      	bne.n	80047f0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004764:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800476c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800476e:	e853 3f00 	ldrex	r3, [r3]
 8004772:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004776:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800477a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	461a      	mov	r2, r3
 8004782:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004784:	637b      	str	r3, [r7, #52]	; 0x34
 8004786:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004788:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800478a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800478c:	e841 2300 	strex	r3, r2, [r1]
 8004790:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004794:	2b00      	cmp	r3, #0
 8004796:	d1e6      	bne.n	8004766 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	3308      	adds	r3, #8
 800479e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	e853 3f00 	ldrex	r3, [r3]
 80047a6:	613b      	str	r3, [r7, #16]
   return(result);
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	f023 0301 	bic.w	r3, r3, #1
 80047ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	3308      	adds	r3, #8
 80047b6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80047b8:	623a      	str	r2, [r7, #32]
 80047ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047bc:	69f9      	ldr	r1, [r7, #28]
 80047be:	6a3a      	ldr	r2, [r7, #32]
 80047c0:	e841 2300 	strex	r3, r2, [r1]
 80047c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d1e5      	bne.n	8004798 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2220      	movs	r2, #32
 80047d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2220      	movs	r2, #32
 80047d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2220      	movs	r2, #32
 80047e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e010      	b.n	8004812 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	69da      	ldr	r2, [r3, #28]
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	4013      	ands	r3, r2
 80047fa:	68ba      	ldr	r2, [r7, #8]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	bf0c      	ite	eq
 8004800:	2301      	moveq	r3, #1
 8004802:	2300      	movne	r3, #0
 8004804:	b2db      	uxtb	r3, r3
 8004806:	461a      	mov	r2, r3
 8004808:	79fb      	ldrb	r3, [r7, #7]
 800480a:	429a      	cmp	r2, r3
 800480c:	f43f af46 	beq.w	800469c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	3770      	adds	r7, #112	; 0x70
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}

0800481a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800481a:	b480      	push	{r7}
 800481c:	b085      	sub	sp, #20
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004828:	2b01      	cmp	r3, #1
 800482a:	d101      	bne.n	8004830 <HAL_UARTEx_DisableFifoMode+0x16>
 800482c:	2302      	movs	r3, #2
 800482e:	e027      	b.n	8004880 <HAL_UARTEx_DisableFifoMode+0x66>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2224      	movs	r2, #36	; 0x24
 800483c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f022 0201 	bic.w	r2, r2, #1
 8004856:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800485e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2200      	movs	r2, #0
 8004864:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68fa      	ldr	r2, [r7, #12]
 800486c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2220      	movs	r2, #32
 8004872:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2200      	movs	r2, #0
 800487a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800487e:	2300      	movs	r3, #0
}
 8004880:	4618      	mov	r0, r3
 8004882:	3714      	adds	r7, #20
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b084      	sub	sp, #16
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800489c:	2b01      	cmp	r3, #1
 800489e:	d101      	bne.n	80048a4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80048a0:	2302      	movs	r3, #2
 80048a2:	e02d      	b.n	8004900 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2224      	movs	r2, #36	; 0x24
 80048b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f022 0201 	bic.w	r2, r2, #1
 80048ca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	683a      	ldr	r2, [r7, #0]
 80048dc:	430a      	orrs	r2, r1
 80048de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f000 f84f 	bl	8004984 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68fa      	ldr	r2, [r7, #12]
 80048ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2220      	movs	r2, #32
 80048f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80048fe:	2300      	movs	r3, #0
}
 8004900:	4618      	mov	r0, r3
 8004902:	3710      	adds	r7, #16
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b084      	sub	sp, #16
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004918:	2b01      	cmp	r3, #1
 800491a:	d101      	bne.n	8004920 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800491c:	2302      	movs	r3, #2
 800491e:	e02d      	b.n	800497c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2201      	movs	r2, #1
 8004924:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2224      	movs	r2, #36	; 0x24
 800492c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f022 0201 	bic.w	r2, r2, #1
 8004946:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	683a      	ldr	r2, [r7, #0]
 8004958:	430a      	orrs	r2, r1
 800495a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f000 f811 	bl	8004984 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68fa      	ldr	r2, [r7, #12]
 8004968:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2220      	movs	r2, #32
 800496e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	3710      	adds	r7, #16
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}

08004984 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004984:	b480      	push	{r7}
 8004986:	b085      	sub	sp, #20
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004990:	2b00      	cmp	r3, #0
 8004992:	d108      	bne.n	80049a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80049a4:	e031      	b.n	8004a0a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80049a6:	2308      	movs	r3, #8
 80049a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80049aa:	2308      	movs	r3, #8
 80049ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	0e5b      	lsrs	r3, r3, #25
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	f003 0307 	and.w	r3, r3, #7
 80049bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	0f5b      	lsrs	r3, r3, #29
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	f003 0307 	and.w	r3, r3, #7
 80049cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80049ce:	7bbb      	ldrb	r3, [r7, #14]
 80049d0:	7b3a      	ldrb	r2, [r7, #12]
 80049d2:	4911      	ldr	r1, [pc, #68]	; (8004a18 <UARTEx_SetNbDataToProcess+0x94>)
 80049d4:	5c8a      	ldrb	r2, [r1, r2]
 80049d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80049da:	7b3a      	ldrb	r2, [r7, #12]
 80049dc:	490f      	ldr	r1, [pc, #60]	; (8004a1c <UARTEx_SetNbDataToProcess+0x98>)
 80049de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80049e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80049e4:	b29a      	uxth	r2, r3
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80049ec:	7bfb      	ldrb	r3, [r7, #15]
 80049ee:	7b7a      	ldrb	r2, [r7, #13]
 80049f0:	4909      	ldr	r1, [pc, #36]	; (8004a18 <UARTEx_SetNbDataToProcess+0x94>)
 80049f2:	5c8a      	ldrb	r2, [r1, r2]
 80049f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80049f8:	7b7a      	ldrb	r2, [r7, #13]
 80049fa:	4908      	ldr	r1, [pc, #32]	; (8004a1c <UARTEx_SetNbDataToProcess+0x98>)
 80049fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80049fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8004a02:	b29a      	uxth	r2, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004a0a:	bf00      	nop
 8004a0c:	3714      	adds	r7, #20
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr
 8004a16:	bf00      	nop
 8004a18:	08007b74 	.word	0x08007b74
 8004a1c:	08007b7c 	.word	0x08007b7c

08004a20 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
 8004a28:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	689a      	ldr	r2, [r3, #8]
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	683a      	ldr	r2, [r7, #0]
 8004a44:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	683a      	ldr	r2, [r7, #0]
 8004a4a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	1c5a      	adds	r2, r3, #1
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	601a      	str	r2, [r3, #0]
}
 8004a5c:	bf00      	nop
 8004a5e:	3714      	adds	r7, #20
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004a68:	b480      	push	{r7}
 8004a6a:	b085      	sub	sp, #20
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	6892      	ldr	r2, [r2, #8]
 8004a7e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	6852      	ldr	r2, [r2, #4]
 8004a88:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	687a      	ldr	r2, [r7, #4]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d103      	bne.n	8004a9c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	689a      	ldr	r2, [r3, #8]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	1e5a      	subs	r2, r3, #1
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3714      	adds	r7, #20
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b086      	sub	sp, #24
 8004ac0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ac6:	4b4e      	ldr	r3, [pc, #312]	; (8004c00 <xTaskIncrementTick+0x144>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	f040 808e 	bne.w	8004bec <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004ad0:	4b4c      	ldr	r3, [pc, #304]	; (8004c04 <xTaskIncrementTick+0x148>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	3301      	adds	r3, #1
 8004ad6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004ad8:	4a4a      	ldr	r2, [pc, #296]	; (8004c04 <xTaskIncrementTick+0x148>)
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d120      	bne.n	8004b26 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004ae4:	4b48      	ldr	r3, [pc, #288]	; (8004c08 <xTaskIncrementTick+0x14c>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00a      	beq.n	8004b04 <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af2:	f383 8811 	msr	BASEPRI, r3
 8004af6:	f3bf 8f6f 	isb	sy
 8004afa:	f3bf 8f4f 	dsb	sy
 8004afe:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004b00:	bf00      	nop
 8004b02:	e7fe      	b.n	8004b02 <xTaskIncrementTick+0x46>
 8004b04:	4b40      	ldr	r3, [pc, #256]	; (8004c08 <xTaskIncrementTick+0x14c>)
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	60fb      	str	r3, [r7, #12]
 8004b0a:	4b40      	ldr	r3, [pc, #256]	; (8004c0c <xTaskIncrementTick+0x150>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a3e      	ldr	r2, [pc, #248]	; (8004c08 <xTaskIncrementTick+0x14c>)
 8004b10:	6013      	str	r3, [r2, #0]
 8004b12:	4a3e      	ldr	r2, [pc, #248]	; (8004c0c <xTaskIncrementTick+0x150>)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	6013      	str	r3, [r2, #0]
 8004b18:	4b3d      	ldr	r3, [pc, #244]	; (8004c10 <xTaskIncrementTick+0x154>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	4a3c      	ldr	r2, [pc, #240]	; (8004c10 <xTaskIncrementTick+0x154>)
 8004b20:	6013      	str	r3, [r2, #0]
 8004b22:	f000 f8df 	bl	8004ce4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004b26:	4b3b      	ldr	r3, [pc, #236]	; (8004c14 <xTaskIncrementTick+0x158>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	693a      	ldr	r2, [r7, #16]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d348      	bcc.n	8004bc2 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b30:	4b35      	ldr	r3, [pc, #212]	; (8004c08 <xTaskIncrementTick+0x14c>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d104      	bne.n	8004b44 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b3a:	4b36      	ldr	r3, [pc, #216]	; (8004c14 <xTaskIncrementTick+0x158>)
 8004b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8004b40:	601a      	str	r2, [r3, #0]
					break;
 8004b42:	e03e      	b.n	8004bc2 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b44:	4b30      	ldr	r3, [pc, #192]	; (8004c08 <xTaskIncrementTick+0x14c>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004b54:	693a      	ldr	r2, [r7, #16]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d203      	bcs.n	8004b64 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004b5c:	4a2d      	ldr	r2, [pc, #180]	; (8004c14 <xTaskIncrementTick+0x158>)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004b62:	e02e      	b.n	8004bc2 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	3304      	adds	r3, #4
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f7ff ff7d 	bl	8004a68 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d004      	beq.n	8004b80 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	3318      	adds	r3, #24
 8004b7a:	4618      	mov	r0, r3
 8004b7c:	f7ff ff74 	bl	8004a68 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b84:	2201      	movs	r2, #1
 8004b86:	409a      	lsls	r2, r3
 8004b88:	4b23      	ldr	r3, [pc, #140]	; (8004c18 <xTaskIncrementTick+0x15c>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4313      	orrs	r3, r2
 8004b8e:	4a22      	ldr	r2, [pc, #136]	; (8004c18 <xTaskIncrementTick+0x15c>)
 8004b90:	6013      	str	r3, [r2, #0]
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b96:	4613      	mov	r3, r2
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	4413      	add	r3, r2
 8004b9c:	009b      	lsls	r3, r3, #2
 8004b9e:	4a1f      	ldr	r2, [pc, #124]	; (8004c1c <xTaskIncrementTick+0x160>)
 8004ba0:	441a      	add	r2, r3
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	3304      	adds	r3, #4
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	4610      	mov	r0, r2
 8004baa:	f7ff ff39 	bl	8004a20 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bb2:	4b1b      	ldr	r3, [pc, #108]	; (8004c20 <xTaskIncrementTick+0x164>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d3b9      	bcc.n	8004b30 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004bc0:	e7b6      	b.n	8004b30 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004bc2:	4b17      	ldr	r3, [pc, #92]	; (8004c20 <xTaskIncrementTick+0x164>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bc8:	4914      	ldr	r1, [pc, #80]	; (8004c1c <xTaskIncrementTick+0x160>)
 8004bca:	4613      	mov	r3, r2
 8004bcc:	009b      	lsls	r3, r3, #2
 8004bce:	4413      	add	r3, r2
 8004bd0:	009b      	lsls	r3, r3, #2
 8004bd2:	440b      	add	r3, r1
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d901      	bls.n	8004bde <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004bde:	4b11      	ldr	r3, [pc, #68]	; (8004c24 <xTaskIncrementTick+0x168>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d007      	beq.n	8004bf6 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8004be6:	2301      	movs	r3, #1
 8004be8:	617b      	str	r3, [r7, #20]
 8004bea:	e004      	b.n	8004bf6 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004bec:	4b0e      	ldr	r3, [pc, #56]	; (8004c28 <xTaskIncrementTick+0x16c>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	3301      	adds	r3, #1
 8004bf2:	4a0d      	ldr	r2, [pc, #52]	; (8004c28 <xTaskIncrementTick+0x16c>)
 8004bf4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004bf6:	697b      	ldr	r3, [r7, #20]
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3718      	adds	r7, #24
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	200003e4 	.word	0x200003e4
 8004c04:	200003c8 	.word	0x200003c8
 8004c08:	200003c0 	.word	0x200003c0
 8004c0c:	200003c4 	.word	0x200003c4
 8004c10:	200003dc 	.word	0x200003dc
 8004c14:	200003e0 	.word	0x200003e0
 8004c18:	200003cc 	.word	0x200003cc
 8004c1c:	20000334 	.word	0x20000334
 8004c20:	20000330 	.word	0x20000330
 8004c24:	200003d8 	.word	0x200003d8
 8004c28:	200003d4 	.word	0x200003d4

08004c2c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b087      	sub	sp, #28
 8004c30:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004c32:	4b27      	ldr	r3, [pc, #156]	; (8004cd0 <vTaskSwitchContext+0xa4>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d003      	beq.n	8004c42 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004c3a:	4b26      	ldr	r3, [pc, #152]	; (8004cd4 <vTaskSwitchContext+0xa8>)
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004c40:	e03f      	b.n	8004cc2 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8004c42:	4b24      	ldr	r3, [pc, #144]	; (8004cd4 <vTaskSwitchContext+0xa8>)
 8004c44:	2200      	movs	r2, #0
 8004c46:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c48:	4b23      	ldr	r3, [pc, #140]	; (8004cd8 <vTaskSwitchContext+0xac>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	fab3 f383 	clz	r3, r3
 8004c54:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004c56:	7afb      	ldrb	r3, [r7, #11]
 8004c58:	f1c3 031f 	rsb	r3, r3, #31
 8004c5c:	617b      	str	r3, [r7, #20]
 8004c5e:	491f      	ldr	r1, [pc, #124]	; (8004cdc <vTaskSwitchContext+0xb0>)
 8004c60:	697a      	ldr	r2, [r7, #20]
 8004c62:	4613      	mov	r3, r2
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	4413      	add	r3, r2
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	440b      	add	r3, r1
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d10a      	bne.n	8004c88 <vTaskSwitchContext+0x5c>
	__asm volatile
 8004c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c76:	f383 8811 	msr	BASEPRI, r3
 8004c7a:	f3bf 8f6f 	isb	sy
 8004c7e:	f3bf 8f4f 	dsb	sy
 8004c82:	607b      	str	r3, [r7, #4]
}
 8004c84:	bf00      	nop
 8004c86:	e7fe      	b.n	8004c86 <vTaskSwitchContext+0x5a>
 8004c88:	697a      	ldr	r2, [r7, #20]
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	4413      	add	r3, r2
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	4a12      	ldr	r2, [pc, #72]	; (8004cdc <vTaskSwitchContext+0xb0>)
 8004c94:	4413      	add	r3, r2
 8004c96:	613b      	str	r3, [r7, #16]
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	685a      	ldr	r2, [r3, #4]
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	605a      	str	r2, [r3, #4]
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	685a      	ldr	r2, [r3, #4]
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	3308      	adds	r3, #8
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d104      	bne.n	8004cb8 <vTaskSwitchContext+0x8c>
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	685a      	ldr	r2, [r3, #4]
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	605a      	str	r2, [r3, #4]
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	4a08      	ldr	r2, [pc, #32]	; (8004ce0 <vTaskSwitchContext+0xb4>)
 8004cc0:	6013      	str	r3, [r2, #0]
}
 8004cc2:	bf00      	nop
 8004cc4:	371c      	adds	r7, #28
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr
 8004cce:	bf00      	nop
 8004cd0:	200003e4 	.word	0x200003e4
 8004cd4:	200003d8 	.word	0x200003d8
 8004cd8:	200003cc 	.word	0x200003cc
 8004cdc:	20000334 	.word	0x20000334
 8004ce0:	20000330 	.word	0x20000330

08004ce4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004cea:	4b0c      	ldr	r3, [pc, #48]	; (8004d1c <prvResetNextTaskUnblockTime+0x38>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d104      	bne.n	8004cfe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004cf4:	4b0a      	ldr	r3, [pc, #40]	; (8004d20 <prvResetNextTaskUnblockTime+0x3c>)
 8004cf6:	f04f 32ff 	mov.w	r2, #4294967295
 8004cfa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004cfc:	e008      	b.n	8004d10 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cfe:	4b07      	ldr	r3, [pc, #28]	; (8004d1c <prvResetNextTaskUnblockTime+0x38>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	4a04      	ldr	r2, [pc, #16]	; (8004d20 <prvResetNextTaskUnblockTime+0x3c>)
 8004d0e:	6013      	str	r3, [r2, #0]
}
 8004d10:	bf00      	nop
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr
 8004d1c:	200003c0 	.word	0x200003c0
 8004d20:	200003e0 	.word	0x200003e0

08004d24 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004d2a:	4b0b      	ldr	r3, [pc, #44]	; (8004d58 <xTaskGetSchedulerState+0x34>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d102      	bne.n	8004d38 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004d32:	2301      	movs	r3, #1
 8004d34:	607b      	str	r3, [r7, #4]
 8004d36:	e008      	b.n	8004d4a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d38:	4b08      	ldr	r3, [pc, #32]	; (8004d5c <xTaskGetSchedulerState+0x38>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d102      	bne.n	8004d46 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004d40:	2302      	movs	r3, #2
 8004d42:	607b      	str	r3, [r7, #4]
 8004d44:	e001      	b.n	8004d4a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004d46:	2300      	movs	r3, #0
 8004d48:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004d4a:	687b      	ldr	r3, [r7, #4]
	}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	370c      	adds	r7, #12
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr
 8004d58:	200003d0 	.word	0x200003d0
 8004d5c:	200003e4 	.word	0x200003e4

08004d60 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004d60:	4b07      	ldr	r3, [pc, #28]	; (8004d80 <pxCurrentTCBConst2>)
 8004d62:	6819      	ldr	r1, [r3, #0]
 8004d64:	6808      	ldr	r0, [r1, #0]
 8004d66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d6a:	f380 8809 	msr	PSP, r0
 8004d6e:	f3bf 8f6f 	isb	sy
 8004d72:	f04f 0000 	mov.w	r0, #0
 8004d76:	f380 8811 	msr	BASEPRI, r0
 8004d7a:	4770      	bx	lr
 8004d7c:	f3af 8000 	nop.w

08004d80 <pxCurrentTCBConst2>:
 8004d80:	20000330 	.word	0x20000330
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004d84:	bf00      	nop
 8004d86:	bf00      	nop
	...

08004d90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004d90:	f3ef 8009 	mrs	r0, PSP
 8004d94:	f3bf 8f6f 	isb	sy
 8004d98:	4b15      	ldr	r3, [pc, #84]	; (8004df0 <pxCurrentTCBConst>)
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	f01e 0f10 	tst.w	lr, #16
 8004da0:	bf08      	it	eq
 8004da2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004da6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004daa:	6010      	str	r0, [r2, #0]
 8004dac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004db0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004db4:	f380 8811 	msr	BASEPRI, r0
 8004db8:	f3bf 8f4f 	dsb	sy
 8004dbc:	f3bf 8f6f 	isb	sy
 8004dc0:	f7ff ff34 	bl	8004c2c <vTaskSwitchContext>
 8004dc4:	f04f 0000 	mov.w	r0, #0
 8004dc8:	f380 8811 	msr	BASEPRI, r0
 8004dcc:	bc09      	pop	{r0, r3}
 8004dce:	6819      	ldr	r1, [r3, #0]
 8004dd0:	6808      	ldr	r0, [r1, #0]
 8004dd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dd6:	f01e 0f10 	tst.w	lr, #16
 8004dda:	bf08      	it	eq
 8004ddc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004de0:	f380 8809 	msr	PSP, r0
 8004de4:	f3bf 8f6f 	isb	sy
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	f3af 8000 	nop.w

08004df0 <pxCurrentTCBConst>:
 8004df0:	20000330 	.word	0x20000330
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004df4:	bf00      	nop
 8004df6:	bf00      	nop

08004df8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	af00      	add	r7, sp, #0
	__asm volatile
 8004dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e02:	f383 8811 	msr	BASEPRI, r3
 8004e06:	f3bf 8f6f 	isb	sy
 8004e0a:	f3bf 8f4f 	dsb	sy
 8004e0e:	607b      	str	r3, [r7, #4]
}
 8004e10:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004e12:	f7ff fe53 	bl	8004abc <xTaskIncrementTick>
 8004e16:	4603      	mov	r3, r0
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d003      	beq.n	8004e24 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004e1c:	4b06      	ldr	r3, [pc, #24]	; (8004e38 <xPortSysTickHandler+0x40>)
 8004e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e22:	601a      	str	r2, [r3, #0]
 8004e24:	2300      	movs	r3, #0
 8004e26:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004e2e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004e30:	bf00      	nop
 8004e32:	3708      	adds	r7, #8
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	e000ed04 	.word	0xe000ed04

08004e3c <__errno>:
 8004e3c:	4b01      	ldr	r3, [pc, #4]	; (8004e44 <__errno+0x8>)
 8004e3e:	6818      	ldr	r0, [r3, #0]
 8004e40:	4770      	bx	lr
 8004e42:	bf00      	nop
 8004e44:	2000000c 	.word	0x2000000c

08004e48 <__libc_init_array>:
 8004e48:	b570      	push	{r4, r5, r6, lr}
 8004e4a:	4d0d      	ldr	r5, [pc, #52]	; (8004e80 <__libc_init_array+0x38>)
 8004e4c:	4c0d      	ldr	r4, [pc, #52]	; (8004e84 <__libc_init_array+0x3c>)
 8004e4e:	1b64      	subs	r4, r4, r5
 8004e50:	10a4      	asrs	r4, r4, #2
 8004e52:	2600      	movs	r6, #0
 8004e54:	42a6      	cmp	r6, r4
 8004e56:	d109      	bne.n	8004e6c <__libc_init_array+0x24>
 8004e58:	4d0b      	ldr	r5, [pc, #44]	; (8004e88 <__libc_init_array+0x40>)
 8004e5a:	4c0c      	ldr	r4, [pc, #48]	; (8004e8c <__libc_init_array+0x44>)
 8004e5c:	f002 fdc4 	bl	80079e8 <_init>
 8004e60:	1b64      	subs	r4, r4, r5
 8004e62:	10a4      	asrs	r4, r4, #2
 8004e64:	2600      	movs	r6, #0
 8004e66:	42a6      	cmp	r6, r4
 8004e68:	d105      	bne.n	8004e76 <__libc_init_array+0x2e>
 8004e6a:	bd70      	pop	{r4, r5, r6, pc}
 8004e6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e70:	4798      	blx	r3
 8004e72:	3601      	adds	r6, #1
 8004e74:	e7ee      	b.n	8004e54 <__libc_init_array+0xc>
 8004e76:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e7a:	4798      	blx	r3
 8004e7c:	3601      	adds	r6, #1
 8004e7e:	e7f2      	b.n	8004e66 <__libc_init_array+0x1e>
 8004e80:	08007f64 	.word	0x08007f64
 8004e84:	08007f64 	.word	0x08007f64
 8004e88:	08007f64 	.word	0x08007f64
 8004e8c:	08007f68 	.word	0x08007f68

08004e90 <memcpy>:
 8004e90:	440a      	add	r2, r1
 8004e92:	4291      	cmp	r1, r2
 8004e94:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e98:	d100      	bne.n	8004e9c <memcpy+0xc>
 8004e9a:	4770      	bx	lr
 8004e9c:	b510      	push	{r4, lr}
 8004e9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ea2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ea6:	4291      	cmp	r1, r2
 8004ea8:	d1f9      	bne.n	8004e9e <memcpy+0xe>
 8004eaa:	bd10      	pop	{r4, pc}

08004eac <memset>:
 8004eac:	4402      	add	r2, r0
 8004eae:	4603      	mov	r3, r0
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d100      	bne.n	8004eb6 <memset+0xa>
 8004eb4:	4770      	bx	lr
 8004eb6:	f803 1b01 	strb.w	r1, [r3], #1
 8004eba:	e7f9      	b.n	8004eb0 <memset+0x4>

08004ebc <__cvt>:
 8004ebc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ec0:	ec55 4b10 	vmov	r4, r5, d0
 8004ec4:	2d00      	cmp	r5, #0
 8004ec6:	460e      	mov	r6, r1
 8004ec8:	4619      	mov	r1, r3
 8004eca:	462b      	mov	r3, r5
 8004ecc:	bfbb      	ittet	lt
 8004ece:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004ed2:	461d      	movlt	r5, r3
 8004ed4:	2300      	movge	r3, #0
 8004ed6:	232d      	movlt	r3, #45	; 0x2d
 8004ed8:	700b      	strb	r3, [r1, #0]
 8004eda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004edc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004ee0:	4691      	mov	r9, r2
 8004ee2:	f023 0820 	bic.w	r8, r3, #32
 8004ee6:	bfbc      	itt	lt
 8004ee8:	4622      	movlt	r2, r4
 8004eea:	4614      	movlt	r4, r2
 8004eec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004ef0:	d005      	beq.n	8004efe <__cvt+0x42>
 8004ef2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004ef6:	d100      	bne.n	8004efa <__cvt+0x3e>
 8004ef8:	3601      	adds	r6, #1
 8004efa:	2102      	movs	r1, #2
 8004efc:	e000      	b.n	8004f00 <__cvt+0x44>
 8004efe:	2103      	movs	r1, #3
 8004f00:	ab03      	add	r3, sp, #12
 8004f02:	9301      	str	r3, [sp, #4]
 8004f04:	ab02      	add	r3, sp, #8
 8004f06:	9300      	str	r3, [sp, #0]
 8004f08:	ec45 4b10 	vmov	d0, r4, r5
 8004f0c:	4653      	mov	r3, sl
 8004f0e:	4632      	mov	r2, r6
 8004f10:	f000 fe1a 	bl	8005b48 <_dtoa_r>
 8004f14:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004f18:	4607      	mov	r7, r0
 8004f1a:	d102      	bne.n	8004f22 <__cvt+0x66>
 8004f1c:	f019 0f01 	tst.w	r9, #1
 8004f20:	d022      	beq.n	8004f68 <__cvt+0xac>
 8004f22:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004f26:	eb07 0906 	add.w	r9, r7, r6
 8004f2a:	d110      	bne.n	8004f4e <__cvt+0x92>
 8004f2c:	783b      	ldrb	r3, [r7, #0]
 8004f2e:	2b30      	cmp	r3, #48	; 0x30
 8004f30:	d10a      	bne.n	8004f48 <__cvt+0x8c>
 8004f32:	2200      	movs	r2, #0
 8004f34:	2300      	movs	r3, #0
 8004f36:	4620      	mov	r0, r4
 8004f38:	4629      	mov	r1, r5
 8004f3a:	f7fb fded 	bl	8000b18 <__aeabi_dcmpeq>
 8004f3e:	b918      	cbnz	r0, 8004f48 <__cvt+0x8c>
 8004f40:	f1c6 0601 	rsb	r6, r6, #1
 8004f44:	f8ca 6000 	str.w	r6, [sl]
 8004f48:	f8da 3000 	ldr.w	r3, [sl]
 8004f4c:	4499      	add	r9, r3
 8004f4e:	2200      	movs	r2, #0
 8004f50:	2300      	movs	r3, #0
 8004f52:	4620      	mov	r0, r4
 8004f54:	4629      	mov	r1, r5
 8004f56:	f7fb fddf 	bl	8000b18 <__aeabi_dcmpeq>
 8004f5a:	b108      	cbz	r0, 8004f60 <__cvt+0xa4>
 8004f5c:	f8cd 900c 	str.w	r9, [sp, #12]
 8004f60:	2230      	movs	r2, #48	; 0x30
 8004f62:	9b03      	ldr	r3, [sp, #12]
 8004f64:	454b      	cmp	r3, r9
 8004f66:	d307      	bcc.n	8004f78 <__cvt+0xbc>
 8004f68:	9b03      	ldr	r3, [sp, #12]
 8004f6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f6c:	1bdb      	subs	r3, r3, r7
 8004f6e:	4638      	mov	r0, r7
 8004f70:	6013      	str	r3, [r2, #0]
 8004f72:	b004      	add	sp, #16
 8004f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f78:	1c59      	adds	r1, r3, #1
 8004f7a:	9103      	str	r1, [sp, #12]
 8004f7c:	701a      	strb	r2, [r3, #0]
 8004f7e:	e7f0      	b.n	8004f62 <__cvt+0xa6>

08004f80 <__exponent>:
 8004f80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f82:	4603      	mov	r3, r0
 8004f84:	2900      	cmp	r1, #0
 8004f86:	bfb8      	it	lt
 8004f88:	4249      	neglt	r1, r1
 8004f8a:	f803 2b02 	strb.w	r2, [r3], #2
 8004f8e:	bfb4      	ite	lt
 8004f90:	222d      	movlt	r2, #45	; 0x2d
 8004f92:	222b      	movge	r2, #43	; 0x2b
 8004f94:	2909      	cmp	r1, #9
 8004f96:	7042      	strb	r2, [r0, #1]
 8004f98:	dd2a      	ble.n	8004ff0 <__exponent+0x70>
 8004f9a:	f10d 0407 	add.w	r4, sp, #7
 8004f9e:	46a4      	mov	ip, r4
 8004fa0:	270a      	movs	r7, #10
 8004fa2:	46a6      	mov	lr, r4
 8004fa4:	460a      	mov	r2, r1
 8004fa6:	fb91 f6f7 	sdiv	r6, r1, r7
 8004faa:	fb07 1516 	mls	r5, r7, r6, r1
 8004fae:	3530      	adds	r5, #48	; 0x30
 8004fb0:	2a63      	cmp	r2, #99	; 0x63
 8004fb2:	f104 34ff 	add.w	r4, r4, #4294967295
 8004fb6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004fba:	4631      	mov	r1, r6
 8004fbc:	dcf1      	bgt.n	8004fa2 <__exponent+0x22>
 8004fbe:	3130      	adds	r1, #48	; 0x30
 8004fc0:	f1ae 0502 	sub.w	r5, lr, #2
 8004fc4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004fc8:	1c44      	adds	r4, r0, #1
 8004fca:	4629      	mov	r1, r5
 8004fcc:	4561      	cmp	r1, ip
 8004fce:	d30a      	bcc.n	8004fe6 <__exponent+0x66>
 8004fd0:	f10d 0209 	add.w	r2, sp, #9
 8004fd4:	eba2 020e 	sub.w	r2, r2, lr
 8004fd8:	4565      	cmp	r5, ip
 8004fda:	bf88      	it	hi
 8004fdc:	2200      	movhi	r2, #0
 8004fde:	4413      	add	r3, r2
 8004fe0:	1a18      	subs	r0, r3, r0
 8004fe2:	b003      	add	sp, #12
 8004fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fe6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004fea:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004fee:	e7ed      	b.n	8004fcc <__exponent+0x4c>
 8004ff0:	2330      	movs	r3, #48	; 0x30
 8004ff2:	3130      	adds	r1, #48	; 0x30
 8004ff4:	7083      	strb	r3, [r0, #2]
 8004ff6:	70c1      	strb	r1, [r0, #3]
 8004ff8:	1d03      	adds	r3, r0, #4
 8004ffa:	e7f1      	b.n	8004fe0 <__exponent+0x60>

08004ffc <_printf_float>:
 8004ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005000:	ed2d 8b02 	vpush	{d8}
 8005004:	b08d      	sub	sp, #52	; 0x34
 8005006:	460c      	mov	r4, r1
 8005008:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800500c:	4616      	mov	r6, r2
 800500e:	461f      	mov	r7, r3
 8005010:	4605      	mov	r5, r0
 8005012:	f001 fd3f 	bl	8006a94 <_localeconv_r>
 8005016:	f8d0 a000 	ldr.w	sl, [r0]
 800501a:	4650      	mov	r0, sl
 800501c:	f7fb f900 	bl	8000220 <strlen>
 8005020:	2300      	movs	r3, #0
 8005022:	930a      	str	r3, [sp, #40]	; 0x28
 8005024:	6823      	ldr	r3, [r4, #0]
 8005026:	9305      	str	r3, [sp, #20]
 8005028:	f8d8 3000 	ldr.w	r3, [r8]
 800502c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005030:	3307      	adds	r3, #7
 8005032:	f023 0307 	bic.w	r3, r3, #7
 8005036:	f103 0208 	add.w	r2, r3, #8
 800503a:	f8c8 2000 	str.w	r2, [r8]
 800503e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005042:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005046:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800504a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800504e:	9307      	str	r3, [sp, #28]
 8005050:	f8cd 8018 	str.w	r8, [sp, #24]
 8005054:	ee08 0a10 	vmov	s16, r0
 8005058:	4b9f      	ldr	r3, [pc, #636]	; (80052d8 <_printf_float+0x2dc>)
 800505a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800505e:	f04f 32ff 	mov.w	r2, #4294967295
 8005062:	f7fb fd8b 	bl	8000b7c <__aeabi_dcmpun>
 8005066:	bb88      	cbnz	r0, 80050cc <_printf_float+0xd0>
 8005068:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800506c:	4b9a      	ldr	r3, [pc, #616]	; (80052d8 <_printf_float+0x2dc>)
 800506e:	f04f 32ff 	mov.w	r2, #4294967295
 8005072:	f7fb fd65 	bl	8000b40 <__aeabi_dcmple>
 8005076:	bb48      	cbnz	r0, 80050cc <_printf_float+0xd0>
 8005078:	2200      	movs	r2, #0
 800507a:	2300      	movs	r3, #0
 800507c:	4640      	mov	r0, r8
 800507e:	4649      	mov	r1, r9
 8005080:	f7fb fd54 	bl	8000b2c <__aeabi_dcmplt>
 8005084:	b110      	cbz	r0, 800508c <_printf_float+0x90>
 8005086:	232d      	movs	r3, #45	; 0x2d
 8005088:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800508c:	4b93      	ldr	r3, [pc, #588]	; (80052dc <_printf_float+0x2e0>)
 800508e:	4894      	ldr	r0, [pc, #592]	; (80052e0 <_printf_float+0x2e4>)
 8005090:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005094:	bf94      	ite	ls
 8005096:	4698      	movls	r8, r3
 8005098:	4680      	movhi	r8, r0
 800509a:	2303      	movs	r3, #3
 800509c:	6123      	str	r3, [r4, #16]
 800509e:	9b05      	ldr	r3, [sp, #20]
 80050a0:	f023 0204 	bic.w	r2, r3, #4
 80050a4:	6022      	str	r2, [r4, #0]
 80050a6:	f04f 0900 	mov.w	r9, #0
 80050aa:	9700      	str	r7, [sp, #0]
 80050ac:	4633      	mov	r3, r6
 80050ae:	aa0b      	add	r2, sp, #44	; 0x2c
 80050b0:	4621      	mov	r1, r4
 80050b2:	4628      	mov	r0, r5
 80050b4:	f000 f9d8 	bl	8005468 <_printf_common>
 80050b8:	3001      	adds	r0, #1
 80050ba:	f040 8090 	bne.w	80051de <_printf_float+0x1e2>
 80050be:	f04f 30ff 	mov.w	r0, #4294967295
 80050c2:	b00d      	add	sp, #52	; 0x34
 80050c4:	ecbd 8b02 	vpop	{d8}
 80050c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050cc:	4642      	mov	r2, r8
 80050ce:	464b      	mov	r3, r9
 80050d0:	4640      	mov	r0, r8
 80050d2:	4649      	mov	r1, r9
 80050d4:	f7fb fd52 	bl	8000b7c <__aeabi_dcmpun>
 80050d8:	b140      	cbz	r0, 80050ec <_printf_float+0xf0>
 80050da:	464b      	mov	r3, r9
 80050dc:	2b00      	cmp	r3, #0
 80050de:	bfbc      	itt	lt
 80050e0:	232d      	movlt	r3, #45	; 0x2d
 80050e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80050e6:	487f      	ldr	r0, [pc, #508]	; (80052e4 <_printf_float+0x2e8>)
 80050e8:	4b7f      	ldr	r3, [pc, #508]	; (80052e8 <_printf_float+0x2ec>)
 80050ea:	e7d1      	b.n	8005090 <_printf_float+0x94>
 80050ec:	6863      	ldr	r3, [r4, #4]
 80050ee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80050f2:	9206      	str	r2, [sp, #24]
 80050f4:	1c5a      	adds	r2, r3, #1
 80050f6:	d13f      	bne.n	8005178 <_printf_float+0x17c>
 80050f8:	2306      	movs	r3, #6
 80050fa:	6063      	str	r3, [r4, #4]
 80050fc:	9b05      	ldr	r3, [sp, #20]
 80050fe:	6861      	ldr	r1, [r4, #4]
 8005100:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005104:	2300      	movs	r3, #0
 8005106:	9303      	str	r3, [sp, #12]
 8005108:	ab0a      	add	r3, sp, #40	; 0x28
 800510a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800510e:	ab09      	add	r3, sp, #36	; 0x24
 8005110:	ec49 8b10 	vmov	d0, r8, r9
 8005114:	9300      	str	r3, [sp, #0]
 8005116:	6022      	str	r2, [r4, #0]
 8005118:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800511c:	4628      	mov	r0, r5
 800511e:	f7ff fecd 	bl	8004ebc <__cvt>
 8005122:	9b06      	ldr	r3, [sp, #24]
 8005124:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005126:	2b47      	cmp	r3, #71	; 0x47
 8005128:	4680      	mov	r8, r0
 800512a:	d108      	bne.n	800513e <_printf_float+0x142>
 800512c:	1cc8      	adds	r0, r1, #3
 800512e:	db02      	blt.n	8005136 <_printf_float+0x13a>
 8005130:	6863      	ldr	r3, [r4, #4]
 8005132:	4299      	cmp	r1, r3
 8005134:	dd41      	ble.n	80051ba <_printf_float+0x1be>
 8005136:	f1ab 0b02 	sub.w	fp, fp, #2
 800513a:	fa5f fb8b 	uxtb.w	fp, fp
 800513e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005142:	d820      	bhi.n	8005186 <_printf_float+0x18a>
 8005144:	3901      	subs	r1, #1
 8005146:	465a      	mov	r2, fp
 8005148:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800514c:	9109      	str	r1, [sp, #36]	; 0x24
 800514e:	f7ff ff17 	bl	8004f80 <__exponent>
 8005152:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005154:	1813      	adds	r3, r2, r0
 8005156:	2a01      	cmp	r2, #1
 8005158:	4681      	mov	r9, r0
 800515a:	6123      	str	r3, [r4, #16]
 800515c:	dc02      	bgt.n	8005164 <_printf_float+0x168>
 800515e:	6822      	ldr	r2, [r4, #0]
 8005160:	07d2      	lsls	r2, r2, #31
 8005162:	d501      	bpl.n	8005168 <_printf_float+0x16c>
 8005164:	3301      	adds	r3, #1
 8005166:	6123      	str	r3, [r4, #16]
 8005168:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800516c:	2b00      	cmp	r3, #0
 800516e:	d09c      	beq.n	80050aa <_printf_float+0xae>
 8005170:	232d      	movs	r3, #45	; 0x2d
 8005172:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005176:	e798      	b.n	80050aa <_printf_float+0xae>
 8005178:	9a06      	ldr	r2, [sp, #24]
 800517a:	2a47      	cmp	r2, #71	; 0x47
 800517c:	d1be      	bne.n	80050fc <_printf_float+0x100>
 800517e:	2b00      	cmp	r3, #0
 8005180:	d1bc      	bne.n	80050fc <_printf_float+0x100>
 8005182:	2301      	movs	r3, #1
 8005184:	e7b9      	b.n	80050fa <_printf_float+0xfe>
 8005186:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800518a:	d118      	bne.n	80051be <_printf_float+0x1c2>
 800518c:	2900      	cmp	r1, #0
 800518e:	6863      	ldr	r3, [r4, #4]
 8005190:	dd0b      	ble.n	80051aa <_printf_float+0x1ae>
 8005192:	6121      	str	r1, [r4, #16]
 8005194:	b913      	cbnz	r3, 800519c <_printf_float+0x1a0>
 8005196:	6822      	ldr	r2, [r4, #0]
 8005198:	07d0      	lsls	r0, r2, #31
 800519a:	d502      	bpl.n	80051a2 <_printf_float+0x1a6>
 800519c:	3301      	adds	r3, #1
 800519e:	440b      	add	r3, r1
 80051a0:	6123      	str	r3, [r4, #16]
 80051a2:	65a1      	str	r1, [r4, #88]	; 0x58
 80051a4:	f04f 0900 	mov.w	r9, #0
 80051a8:	e7de      	b.n	8005168 <_printf_float+0x16c>
 80051aa:	b913      	cbnz	r3, 80051b2 <_printf_float+0x1b6>
 80051ac:	6822      	ldr	r2, [r4, #0]
 80051ae:	07d2      	lsls	r2, r2, #31
 80051b0:	d501      	bpl.n	80051b6 <_printf_float+0x1ba>
 80051b2:	3302      	adds	r3, #2
 80051b4:	e7f4      	b.n	80051a0 <_printf_float+0x1a4>
 80051b6:	2301      	movs	r3, #1
 80051b8:	e7f2      	b.n	80051a0 <_printf_float+0x1a4>
 80051ba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80051be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051c0:	4299      	cmp	r1, r3
 80051c2:	db05      	blt.n	80051d0 <_printf_float+0x1d4>
 80051c4:	6823      	ldr	r3, [r4, #0]
 80051c6:	6121      	str	r1, [r4, #16]
 80051c8:	07d8      	lsls	r0, r3, #31
 80051ca:	d5ea      	bpl.n	80051a2 <_printf_float+0x1a6>
 80051cc:	1c4b      	adds	r3, r1, #1
 80051ce:	e7e7      	b.n	80051a0 <_printf_float+0x1a4>
 80051d0:	2900      	cmp	r1, #0
 80051d2:	bfd4      	ite	le
 80051d4:	f1c1 0202 	rsble	r2, r1, #2
 80051d8:	2201      	movgt	r2, #1
 80051da:	4413      	add	r3, r2
 80051dc:	e7e0      	b.n	80051a0 <_printf_float+0x1a4>
 80051de:	6823      	ldr	r3, [r4, #0]
 80051e0:	055a      	lsls	r2, r3, #21
 80051e2:	d407      	bmi.n	80051f4 <_printf_float+0x1f8>
 80051e4:	6923      	ldr	r3, [r4, #16]
 80051e6:	4642      	mov	r2, r8
 80051e8:	4631      	mov	r1, r6
 80051ea:	4628      	mov	r0, r5
 80051ec:	47b8      	blx	r7
 80051ee:	3001      	adds	r0, #1
 80051f0:	d12c      	bne.n	800524c <_printf_float+0x250>
 80051f2:	e764      	b.n	80050be <_printf_float+0xc2>
 80051f4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80051f8:	f240 80e0 	bls.w	80053bc <_printf_float+0x3c0>
 80051fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005200:	2200      	movs	r2, #0
 8005202:	2300      	movs	r3, #0
 8005204:	f7fb fc88 	bl	8000b18 <__aeabi_dcmpeq>
 8005208:	2800      	cmp	r0, #0
 800520a:	d034      	beq.n	8005276 <_printf_float+0x27a>
 800520c:	4a37      	ldr	r2, [pc, #220]	; (80052ec <_printf_float+0x2f0>)
 800520e:	2301      	movs	r3, #1
 8005210:	4631      	mov	r1, r6
 8005212:	4628      	mov	r0, r5
 8005214:	47b8      	blx	r7
 8005216:	3001      	adds	r0, #1
 8005218:	f43f af51 	beq.w	80050be <_printf_float+0xc2>
 800521c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005220:	429a      	cmp	r2, r3
 8005222:	db02      	blt.n	800522a <_printf_float+0x22e>
 8005224:	6823      	ldr	r3, [r4, #0]
 8005226:	07d8      	lsls	r0, r3, #31
 8005228:	d510      	bpl.n	800524c <_printf_float+0x250>
 800522a:	ee18 3a10 	vmov	r3, s16
 800522e:	4652      	mov	r2, sl
 8005230:	4631      	mov	r1, r6
 8005232:	4628      	mov	r0, r5
 8005234:	47b8      	blx	r7
 8005236:	3001      	adds	r0, #1
 8005238:	f43f af41 	beq.w	80050be <_printf_float+0xc2>
 800523c:	f04f 0800 	mov.w	r8, #0
 8005240:	f104 091a 	add.w	r9, r4, #26
 8005244:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005246:	3b01      	subs	r3, #1
 8005248:	4543      	cmp	r3, r8
 800524a:	dc09      	bgt.n	8005260 <_printf_float+0x264>
 800524c:	6823      	ldr	r3, [r4, #0]
 800524e:	079b      	lsls	r3, r3, #30
 8005250:	f100 8105 	bmi.w	800545e <_printf_float+0x462>
 8005254:	68e0      	ldr	r0, [r4, #12]
 8005256:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005258:	4298      	cmp	r0, r3
 800525a:	bfb8      	it	lt
 800525c:	4618      	movlt	r0, r3
 800525e:	e730      	b.n	80050c2 <_printf_float+0xc6>
 8005260:	2301      	movs	r3, #1
 8005262:	464a      	mov	r2, r9
 8005264:	4631      	mov	r1, r6
 8005266:	4628      	mov	r0, r5
 8005268:	47b8      	blx	r7
 800526a:	3001      	adds	r0, #1
 800526c:	f43f af27 	beq.w	80050be <_printf_float+0xc2>
 8005270:	f108 0801 	add.w	r8, r8, #1
 8005274:	e7e6      	b.n	8005244 <_printf_float+0x248>
 8005276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005278:	2b00      	cmp	r3, #0
 800527a:	dc39      	bgt.n	80052f0 <_printf_float+0x2f4>
 800527c:	4a1b      	ldr	r2, [pc, #108]	; (80052ec <_printf_float+0x2f0>)
 800527e:	2301      	movs	r3, #1
 8005280:	4631      	mov	r1, r6
 8005282:	4628      	mov	r0, r5
 8005284:	47b8      	blx	r7
 8005286:	3001      	adds	r0, #1
 8005288:	f43f af19 	beq.w	80050be <_printf_float+0xc2>
 800528c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005290:	4313      	orrs	r3, r2
 8005292:	d102      	bne.n	800529a <_printf_float+0x29e>
 8005294:	6823      	ldr	r3, [r4, #0]
 8005296:	07d9      	lsls	r1, r3, #31
 8005298:	d5d8      	bpl.n	800524c <_printf_float+0x250>
 800529a:	ee18 3a10 	vmov	r3, s16
 800529e:	4652      	mov	r2, sl
 80052a0:	4631      	mov	r1, r6
 80052a2:	4628      	mov	r0, r5
 80052a4:	47b8      	blx	r7
 80052a6:	3001      	adds	r0, #1
 80052a8:	f43f af09 	beq.w	80050be <_printf_float+0xc2>
 80052ac:	f04f 0900 	mov.w	r9, #0
 80052b0:	f104 0a1a 	add.w	sl, r4, #26
 80052b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052b6:	425b      	negs	r3, r3
 80052b8:	454b      	cmp	r3, r9
 80052ba:	dc01      	bgt.n	80052c0 <_printf_float+0x2c4>
 80052bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052be:	e792      	b.n	80051e6 <_printf_float+0x1ea>
 80052c0:	2301      	movs	r3, #1
 80052c2:	4652      	mov	r2, sl
 80052c4:	4631      	mov	r1, r6
 80052c6:	4628      	mov	r0, r5
 80052c8:	47b8      	blx	r7
 80052ca:	3001      	adds	r0, #1
 80052cc:	f43f aef7 	beq.w	80050be <_printf_float+0xc2>
 80052d0:	f109 0901 	add.w	r9, r9, #1
 80052d4:	e7ee      	b.n	80052b4 <_printf_float+0x2b8>
 80052d6:	bf00      	nop
 80052d8:	7fefffff 	.word	0x7fefffff
 80052dc:	08007b88 	.word	0x08007b88
 80052e0:	08007b8c 	.word	0x08007b8c
 80052e4:	08007b94 	.word	0x08007b94
 80052e8:	08007b90 	.word	0x08007b90
 80052ec:	08007b98 	.word	0x08007b98
 80052f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80052f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80052f4:	429a      	cmp	r2, r3
 80052f6:	bfa8      	it	ge
 80052f8:	461a      	movge	r2, r3
 80052fa:	2a00      	cmp	r2, #0
 80052fc:	4691      	mov	r9, r2
 80052fe:	dc37      	bgt.n	8005370 <_printf_float+0x374>
 8005300:	f04f 0b00 	mov.w	fp, #0
 8005304:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005308:	f104 021a 	add.w	r2, r4, #26
 800530c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800530e:	9305      	str	r3, [sp, #20]
 8005310:	eba3 0309 	sub.w	r3, r3, r9
 8005314:	455b      	cmp	r3, fp
 8005316:	dc33      	bgt.n	8005380 <_printf_float+0x384>
 8005318:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800531c:	429a      	cmp	r2, r3
 800531e:	db3b      	blt.n	8005398 <_printf_float+0x39c>
 8005320:	6823      	ldr	r3, [r4, #0]
 8005322:	07da      	lsls	r2, r3, #31
 8005324:	d438      	bmi.n	8005398 <_printf_float+0x39c>
 8005326:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005328:	9a05      	ldr	r2, [sp, #20]
 800532a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800532c:	1a9a      	subs	r2, r3, r2
 800532e:	eba3 0901 	sub.w	r9, r3, r1
 8005332:	4591      	cmp	r9, r2
 8005334:	bfa8      	it	ge
 8005336:	4691      	movge	r9, r2
 8005338:	f1b9 0f00 	cmp.w	r9, #0
 800533c:	dc35      	bgt.n	80053aa <_printf_float+0x3ae>
 800533e:	f04f 0800 	mov.w	r8, #0
 8005342:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005346:	f104 0a1a 	add.w	sl, r4, #26
 800534a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800534e:	1a9b      	subs	r3, r3, r2
 8005350:	eba3 0309 	sub.w	r3, r3, r9
 8005354:	4543      	cmp	r3, r8
 8005356:	f77f af79 	ble.w	800524c <_printf_float+0x250>
 800535a:	2301      	movs	r3, #1
 800535c:	4652      	mov	r2, sl
 800535e:	4631      	mov	r1, r6
 8005360:	4628      	mov	r0, r5
 8005362:	47b8      	blx	r7
 8005364:	3001      	adds	r0, #1
 8005366:	f43f aeaa 	beq.w	80050be <_printf_float+0xc2>
 800536a:	f108 0801 	add.w	r8, r8, #1
 800536e:	e7ec      	b.n	800534a <_printf_float+0x34e>
 8005370:	4613      	mov	r3, r2
 8005372:	4631      	mov	r1, r6
 8005374:	4642      	mov	r2, r8
 8005376:	4628      	mov	r0, r5
 8005378:	47b8      	blx	r7
 800537a:	3001      	adds	r0, #1
 800537c:	d1c0      	bne.n	8005300 <_printf_float+0x304>
 800537e:	e69e      	b.n	80050be <_printf_float+0xc2>
 8005380:	2301      	movs	r3, #1
 8005382:	4631      	mov	r1, r6
 8005384:	4628      	mov	r0, r5
 8005386:	9205      	str	r2, [sp, #20]
 8005388:	47b8      	blx	r7
 800538a:	3001      	adds	r0, #1
 800538c:	f43f ae97 	beq.w	80050be <_printf_float+0xc2>
 8005390:	9a05      	ldr	r2, [sp, #20]
 8005392:	f10b 0b01 	add.w	fp, fp, #1
 8005396:	e7b9      	b.n	800530c <_printf_float+0x310>
 8005398:	ee18 3a10 	vmov	r3, s16
 800539c:	4652      	mov	r2, sl
 800539e:	4631      	mov	r1, r6
 80053a0:	4628      	mov	r0, r5
 80053a2:	47b8      	blx	r7
 80053a4:	3001      	adds	r0, #1
 80053a6:	d1be      	bne.n	8005326 <_printf_float+0x32a>
 80053a8:	e689      	b.n	80050be <_printf_float+0xc2>
 80053aa:	9a05      	ldr	r2, [sp, #20]
 80053ac:	464b      	mov	r3, r9
 80053ae:	4442      	add	r2, r8
 80053b0:	4631      	mov	r1, r6
 80053b2:	4628      	mov	r0, r5
 80053b4:	47b8      	blx	r7
 80053b6:	3001      	adds	r0, #1
 80053b8:	d1c1      	bne.n	800533e <_printf_float+0x342>
 80053ba:	e680      	b.n	80050be <_printf_float+0xc2>
 80053bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80053be:	2a01      	cmp	r2, #1
 80053c0:	dc01      	bgt.n	80053c6 <_printf_float+0x3ca>
 80053c2:	07db      	lsls	r3, r3, #31
 80053c4:	d538      	bpl.n	8005438 <_printf_float+0x43c>
 80053c6:	2301      	movs	r3, #1
 80053c8:	4642      	mov	r2, r8
 80053ca:	4631      	mov	r1, r6
 80053cc:	4628      	mov	r0, r5
 80053ce:	47b8      	blx	r7
 80053d0:	3001      	adds	r0, #1
 80053d2:	f43f ae74 	beq.w	80050be <_printf_float+0xc2>
 80053d6:	ee18 3a10 	vmov	r3, s16
 80053da:	4652      	mov	r2, sl
 80053dc:	4631      	mov	r1, r6
 80053de:	4628      	mov	r0, r5
 80053e0:	47b8      	blx	r7
 80053e2:	3001      	adds	r0, #1
 80053e4:	f43f ae6b 	beq.w	80050be <_printf_float+0xc2>
 80053e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80053ec:	2200      	movs	r2, #0
 80053ee:	2300      	movs	r3, #0
 80053f0:	f7fb fb92 	bl	8000b18 <__aeabi_dcmpeq>
 80053f4:	b9d8      	cbnz	r0, 800542e <_printf_float+0x432>
 80053f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053f8:	f108 0201 	add.w	r2, r8, #1
 80053fc:	3b01      	subs	r3, #1
 80053fe:	4631      	mov	r1, r6
 8005400:	4628      	mov	r0, r5
 8005402:	47b8      	blx	r7
 8005404:	3001      	adds	r0, #1
 8005406:	d10e      	bne.n	8005426 <_printf_float+0x42a>
 8005408:	e659      	b.n	80050be <_printf_float+0xc2>
 800540a:	2301      	movs	r3, #1
 800540c:	4652      	mov	r2, sl
 800540e:	4631      	mov	r1, r6
 8005410:	4628      	mov	r0, r5
 8005412:	47b8      	blx	r7
 8005414:	3001      	adds	r0, #1
 8005416:	f43f ae52 	beq.w	80050be <_printf_float+0xc2>
 800541a:	f108 0801 	add.w	r8, r8, #1
 800541e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005420:	3b01      	subs	r3, #1
 8005422:	4543      	cmp	r3, r8
 8005424:	dcf1      	bgt.n	800540a <_printf_float+0x40e>
 8005426:	464b      	mov	r3, r9
 8005428:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800542c:	e6dc      	b.n	80051e8 <_printf_float+0x1ec>
 800542e:	f04f 0800 	mov.w	r8, #0
 8005432:	f104 0a1a 	add.w	sl, r4, #26
 8005436:	e7f2      	b.n	800541e <_printf_float+0x422>
 8005438:	2301      	movs	r3, #1
 800543a:	4642      	mov	r2, r8
 800543c:	e7df      	b.n	80053fe <_printf_float+0x402>
 800543e:	2301      	movs	r3, #1
 8005440:	464a      	mov	r2, r9
 8005442:	4631      	mov	r1, r6
 8005444:	4628      	mov	r0, r5
 8005446:	47b8      	blx	r7
 8005448:	3001      	adds	r0, #1
 800544a:	f43f ae38 	beq.w	80050be <_printf_float+0xc2>
 800544e:	f108 0801 	add.w	r8, r8, #1
 8005452:	68e3      	ldr	r3, [r4, #12]
 8005454:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005456:	1a5b      	subs	r3, r3, r1
 8005458:	4543      	cmp	r3, r8
 800545a:	dcf0      	bgt.n	800543e <_printf_float+0x442>
 800545c:	e6fa      	b.n	8005254 <_printf_float+0x258>
 800545e:	f04f 0800 	mov.w	r8, #0
 8005462:	f104 0919 	add.w	r9, r4, #25
 8005466:	e7f4      	b.n	8005452 <_printf_float+0x456>

08005468 <_printf_common>:
 8005468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800546c:	4616      	mov	r6, r2
 800546e:	4699      	mov	r9, r3
 8005470:	688a      	ldr	r2, [r1, #8]
 8005472:	690b      	ldr	r3, [r1, #16]
 8005474:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005478:	4293      	cmp	r3, r2
 800547a:	bfb8      	it	lt
 800547c:	4613      	movlt	r3, r2
 800547e:	6033      	str	r3, [r6, #0]
 8005480:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005484:	4607      	mov	r7, r0
 8005486:	460c      	mov	r4, r1
 8005488:	b10a      	cbz	r2, 800548e <_printf_common+0x26>
 800548a:	3301      	adds	r3, #1
 800548c:	6033      	str	r3, [r6, #0]
 800548e:	6823      	ldr	r3, [r4, #0]
 8005490:	0699      	lsls	r1, r3, #26
 8005492:	bf42      	ittt	mi
 8005494:	6833      	ldrmi	r3, [r6, #0]
 8005496:	3302      	addmi	r3, #2
 8005498:	6033      	strmi	r3, [r6, #0]
 800549a:	6825      	ldr	r5, [r4, #0]
 800549c:	f015 0506 	ands.w	r5, r5, #6
 80054a0:	d106      	bne.n	80054b0 <_printf_common+0x48>
 80054a2:	f104 0a19 	add.w	sl, r4, #25
 80054a6:	68e3      	ldr	r3, [r4, #12]
 80054a8:	6832      	ldr	r2, [r6, #0]
 80054aa:	1a9b      	subs	r3, r3, r2
 80054ac:	42ab      	cmp	r3, r5
 80054ae:	dc26      	bgt.n	80054fe <_printf_common+0x96>
 80054b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80054b4:	1e13      	subs	r3, r2, #0
 80054b6:	6822      	ldr	r2, [r4, #0]
 80054b8:	bf18      	it	ne
 80054ba:	2301      	movne	r3, #1
 80054bc:	0692      	lsls	r2, r2, #26
 80054be:	d42b      	bmi.n	8005518 <_printf_common+0xb0>
 80054c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80054c4:	4649      	mov	r1, r9
 80054c6:	4638      	mov	r0, r7
 80054c8:	47c0      	blx	r8
 80054ca:	3001      	adds	r0, #1
 80054cc:	d01e      	beq.n	800550c <_printf_common+0xa4>
 80054ce:	6823      	ldr	r3, [r4, #0]
 80054d0:	68e5      	ldr	r5, [r4, #12]
 80054d2:	6832      	ldr	r2, [r6, #0]
 80054d4:	f003 0306 	and.w	r3, r3, #6
 80054d8:	2b04      	cmp	r3, #4
 80054da:	bf08      	it	eq
 80054dc:	1aad      	subeq	r5, r5, r2
 80054de:	68a3      	ldr	r3, [r4, #8]
 80054e0:	6922      	ldr	r2, [r4, #16]
 80054e2:	bf0c      	ite	eq
 80054e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054e8:	2500      	movne	r5, #0
 80054ea:	4293      	cmp	r3, r2
 80054ec:	bfc4      	itt	gt
 80054ee:	1a9b      	subgt	r3, r3, r2
 80054f0:	18ed      	addgt	r5, r5, r3
 80054f2:	2600      	movs	r6, #0
 80054f4:	341a      	adds	r4, #26
 80054f6:	42b5      	cmp	r5, r6
 80054f8:	d11a      	bne.n	8005530 <_printf_common+0xc8>
 80054fa:	2000      	movs	r0, #0
 80054fc:	e008      	b.n	8005510 <_printf_common+0xa8>
 80054fe:	2301      	movs	r3, #1
 8005500:	4652      	mov	r2, sl
 8005502:	4649      	mov	r1, r9
 8005504:	4638      	mov	r0, r7
 8005506:	47c0      	blx	r8
 8005508:	3001      	adds	r0, #1
 800550a:	d103      	bne.n	8005514 <_printf_common+0xac>
 800550c:	f04f 30ff 	mov.w	r0, #4294967295
 8005510:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005514:	3501      	adds	r5, #1
 8005516:	e7c6      	b.n	80054a6 <_printf_common+0x3e>
 8005518:	18e1      	adds	r1, r4, r3
 800551a:	1c5a      	adds	r2, r3, #1
 800551c:	2030      	movs	r0, #48	; 0x30
 800551e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005522:	4422      	add	r2, r4
 8005524:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005528:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800552c:	3302      	adds	r3, #2
 800552e:	e7c7      	b.n	80054c0 <_printf_common+0x58>
 8005530:	2301      	movs	r3, #1
 8005532:	4622      	mov	r2, r4
 8005534:	4649      	mov	r1, r9
 8005536:	4638      	mov	r0, r7
 8005538:	47c0      	blx	r8
 800553a:	3001      	adds	r0, #1
 800553c:	d0e6      	beq.n	800550c <_printf_common+0xa4>
 800553e:	3601      	adds	r6, #1
 8005540:	e7d9      	b.n	80054f6 <_printf_common+0x8e>
	...

08005544 <_printf_i>:
 8005544:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005548:	7e0f      	ldrb	r7, [r1, #24]
 800554a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800554c:	2f78      	cmp	r7, #120	; 0x78
 800554e:	4691      	mov	r9, r2
 8005550:	4680      	mov	r8, r0
 8005552:	460c      	mov	r4, r1
 8005554:	469a      	mov	sl, r3
 8005556:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800555a:	d807      	bhi.n	800556c <_printf_i+0x28>
 800555c:	2f62      	cmp	r7, #98	; 0x62
 800555e:	d80a      	bhi.n	8005576 <_printf_i+0x32>
 8005560:	2f00      	cmp	r7, #0
 8005562:	f000 80d8 	beq.w	8005716 <_printf_i+0x1d2>
 8005566:	2f58      	cmp	r7, #88	; 0x58
 8005568:	f000 80a3 	beq.w	80056b2 <_printf_i+0x16e>
 800556c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005570:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005574:	e03a      	b.n	80055ec <_printf_i+0xa8>
 8005576:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800557a:	2b15      	cmp	r3, #21
 800557c:	d8f6      	bhi.n	800556c <_printf_i+0x28>
 800557e:	a101      	add	r1, pc, #4	; (adr r1, 8005584 <_printf_i+0x40>)
 8005580:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005584:	080055dd 	.word	0x080055dd
 8005588:	080055f1 	.word	0x080055f1
 800558c:	0800556d 	.word	0x0800556d
 8005590:	0800556d 	.word	0x0800556d
 8005594:	0800556d 	.word	0x0800556d
 8005598:	0800556d 	.word	0x0800556d
 800559c:	080055f1 	.word	0x080055f1
 80055a0:	0800556d 	.word	0x0800556d
 80055a4:	0800556d 	.word	0x0800556d
 80055a8:	0800556d 	.word	0x0800556d
 80055ac:	0800556d 	.word	0x0800556d
 80055b0:	080056fd 	.word	0x080056fd
 80055b4:	08005621 	.word	0x08005621
 80055b8:	080056df 	.word	0x080056df
 80055bc:	0800556d 	.word	0x0800556d
 80055c0:	0800556d 	.word	0x0800556d
 80055c4:	0800571f 	.word	0x0800571f
 80055c8:	0800556d 	.word	0x0800556d
 80055cc:	08005621 	.word	0x08005621
 80055d0:	0800556d 	.word	0x0800556d
 80055d4:	0800556d 	.word	0x0800556d
 80055d8:	080056e7 	.word	0x080056e7
 80055dc:	682b      	ldr	r3, [r5, #0]
 80055de:	1d1a      	adds	r2, r3, #4
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	602a      	str	r2, [r5, #0]
 80055e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80055ec:	2301      	movs	r3, #1
 80055ee:	e0a3      	b.n	8005738 <_printf_i+0x1f4>
 80055f0:	6820      	ldr	r0, [r4, #0]
 80055f2:	6829      	ldr	r1, [r5, #0]
 80055f4:	0606      	lsls	r6, r0, #24
 80055f6:	f101 0304 	add.w	r3, r1, #4
 80055fa:	d50a      	bpl.n	8005612 <_printf_i+0xce>
 80055fc:	680e      	ldr	r6, [r1, #0]
 80055fe:	602b      	str	r3, [r5, #0]
 8005600:	2e00      	cmp	r6, #0
 8005602:	da03      	bge.n	800560c <_printf_i+0xc8>
 8005604:	232d      	movs	r3, #45	; 0x2d
 8005606:	4276      	negs	r6, r6
 8005608:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800560c:	485e      	ldr	r0, [pc, #376]	; (8005788 <_printf_i+0x244>)
 800560e:	230a      	movs	r3, #10
 8005610:	e019      	b.n	8005646 <_printf_i+0x102>
 8005612:	680e      	ldr	r6, [r1, #0]
 8005614:	602b      	str	r3, [r5, #0]
 8005616:	f010 0f40 	tst.w	r0, #64	; 0x40
 800561a:	bf18      	it	ne
 800561c:	b236      	sxthne	r6, r6
 800561e:	e7ef      	b.n	8005600 <_printf_i+0xbc>
 8005620:	682b      	ldr	r3, [r5, #0]
 8005622:	6820      	ldr	r0, [r4, #0]
 8005624:	1d19      	adds	r1, r3, #4
 8005626:	6029      	str	r1, [r5, #0]
 8005628:	0601      	lsls	r1, r0, #24
 800562a:	d501      	bpl.n	8005630 <_printf_i+0xec>
 800562c:	681e      	ldr	r6, [r3, #0]
 800562e:	e002      	b.n	8005636 <_printf_i+0xf2>
 8005630:	0646      	lsls	r6, r0, #25
 8005632:	d5fb      	bpl.n	800562c <_printf_i+0xe8>
 8005634:	881e      	ldrh	r6, [r3, #0]
 8005636:	4854      	ldr	r0, [pc, #336]	; (8005788 <_printf_i+0x244>)
 8005638:	2f6f      	cmp	r7, #111	; 0x6f
 800563a:	bf0c      	ite	eq
 800563c:	2308      	moveq	r3, #8
 800563e:	230a      	movne	r3, #10
 8005640:	2100      	movs	r1, #0
 8005642:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005646:	6865      	ldr	r5, [r4, #4]
 8005648:	60a5      	str	r5, [r4, #8]
 800564a:	2d00      	cmp	r5, #0
 800564c:	bfa2      	ittt	ge
 800564e:	6821      	ldrge	r1, [r4, #0]
 8005650:	f021 0104 	bicge.w	r1, r1, #4
 8005654:	6021      	strge	r1, [r4, #0]
 8005656:	b90e      	cbnz	r6, 800565c <_printf_i+0x118>
 8005658:	2d00      	cmp	r5, #0
 800565a:	d04d      	beq.n	80056f8 <_printf_i+0x1b4>
 800565c:	4615      	mov	r5, r2
 800565e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005662:	fb03 6711 	mls	r7, r3, r1, r6
 8005666:	5dc7      	ldrb	r7, [r0, r7]
 8005668:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800566c:	4637      	mov	r7, r6
 800566e:	42bb      	cmp	r3, r7
 8005670:	460e      	mov	r6, r1
 8005672:	d9f4      	bls.n	800565e <_printf_i+0x11a>
 8005674:	2b08      	cmp	r3, #8
 8005676:	d10b      	bne.n	8005690 <_printf_i+0x14c>
 8005678:	6823      	ldr	r3, [r4, #0]
 800567a:	07de      	lsls	r6, r3, #31
 800567c:	d508      	bpl.n	8005690 <_printf_i+0x14c>
 800567e:	6923      	ldr	r3, [r4, #16]
 8005680:	6861      	ldr	r1, [r4, #4]
 8005682:	4299      	cmp	r1, r3
 8005684:	bfde      	ittt	le
 8005686:	2330      	movle	r3, #48	; 0x30
 8005688:	f805 3c01 	strble.w	r3, [r5, #-1]
 800568c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005690:	1b52      	subs	r2, r2, r5
 8005692:	6122      	str	r2, [r4, #16]
 8005694:	f8cd a000 	str.w	sl, [sp]
 8005698:	464b      	mov	r3, r9
 800569a:	aa03      	add	r2, sp, #12
 800569c:	4621      	mov	r1, r4
 800569e:	4640      	mov	r0, r8
 80056a0:	f7ff fee2 	bl	8005468 <_printf_common>
 80056a4:	3001      	adds	r0, #1
 80056a6:	d14c      	bne.n	8005742 <_printf_i+0x1fe>
 80056a8:	f04f 30ff 	mov.w	r0, #4294967295
 80056ac:	b004      	add	sp, #16
 80056ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056b2:	4835      	ldr	r0, [pc, #212]	; (8005788 <_printf_i+0x244>)
 80056b4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80056b8:	6829      	ldr	r1, [r5, #0]
 80056ba:	6823      	ldr	r3, [r4, #0]
 80056bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80056c0:	6029      	str	r1, [r5, #0]
 80056c2:	061d      	lsls	r5, r3, #24
 80056c4:	d514      	bpl.n	80056f0 <_printf_i+0x1ac>
 80056c6:	07df      	lsls	r7, r3, #31
 80056c8:	bf44      	itt	mi
 80056ca:	f043 0320 	orrmi.w	r3, r3, #32
 80056ce:	6023      	strmi	r3, [r4, #0]
 80056d0:	b91e      	cbnz	r6, 80056da <_printf_i+0x196>
 80056d2:	6823      	ldr	r3, [r4, #0]
 80056d4:	f023 0320 	bic.w	r3, r3, #32
 80056d8:	6023      	str	r3, [r4, #0]
 80056da:	2310      	movs	r3, #16
 80056dc:	e7b0      	b.n	8005640 <_printf_i+0xfc>
 80056de:	6823      	ldr	r3, [r4, #0]
 80056e0:	f043 0320 	orr.w	r3, r3, #32
 80056e4:	6023      	str	r3, [r4, #0]
 80056e6:	2378      	movs	r3, #120	; 0x78
 80056e8:	4828      	ldr	r0, [pc, #160]	; (800578c <_printf_i+0x248>)
 80056ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80056ee:	e7e3      	b.n	80056b8 <_printf_i+0x174>
 80056f0:	0659      	lsls	r1, r3, #25
 80056f2:	bf48      	it	mi
 80056f4:	b2b6      	uxthmi	r6, r6
 80056f6:	e7e6      	b.n	80056c6 <_printf_i+0x182>
 80056f8:	4615      	mov	r5, r2
 80056fa:	e7bb      	b.n	8005674 <_printf_i+0x130>
 80056fc:	682b      	ldr	r3, [r5, #0]
 80056fe:	6826      	ldr	r6, [r4, #0]
 8005700:	6961      	ldr	r1, [r4, #20]
 8005702:	1d18      	adds	r0, r3, #4
 8005704:	6028      	str	r0, [r5, #0]
 8005706:	0635      	lsls	r5, r6, #24
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	d501      	bpl.n	8005710 <_printf_i+0x1cc>
 800570c:	6019      	str	r1, [r3, #0]
 800570e:	e002      	b.n	8005716 <_printf_i+0x1d2>
 8005710:	0670      	lsls	r0, r6, #25
 8005712:	d5fb      	bpl.n	800570c <_printf_i+0x1c8>
 8005714:	8019      	strh	r1, [r3, #0]
 8005716:	2300      	movs	r3, #0
 8005718:	6123      	str	r3, [r4, #16]
 800571a:	4615      	mov	r5, r2
 800571c:	e7ba      	b.n	8005694 <_printf_i+0x150>
 800571e:	682b      	ldr	r3, [r5, #0]
 8005720:	1d1a      	adds	r2, r3, #4
 8005722:	602a      	str	r2, [r5, #0]
 8005724:	681d      	ldr	r5, [r3, #0]
 8005726:	6862      	ldr	r2, [r4, #4]
 8005728:	2100      	movs	r1, #0
 800572a:	4628      	mov	r0, r5
 800572c:	f7fa fd80 	bl	8000230 <memchr>
 8005730:	b108      	cbz	r0, 8005736 <_printf_i+0x1f2>
 8005732:	1b40      	subs	r0, r0, r5
 8005734:	6060      	str	r0, [r4, #4]
 8005736:	6863      	ldr	r3, [r4, #4]
 8005738:	6123      	str	r3, [r4, #16]
 800573a:	2300      	movs	r3, #0
 800573c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005740:	e7a8      	b.n	8005694 <_printf_i+0x150>
 8005742:	6923      	ldr	r3, [r4, #16]
 8005744:	462a      	mov	r2, r5
 8005746:	4649      	mov	r1, r9
 8005748:	4640      	mov	r0, r8
 800574a:	47d0      	blx	sl
 800574c:	3001      	adds	r0, #1
 800574e:	d0ab      	beq.n	80056a8 <_printf_i+0x164>
 8005750:	6823      	ldr	r3, [r4, #0]
 8005752:	079b      	lsls	r3, r3, #30
 8005754:	d413      	bmi.n	800577e <_printf_i+0x23a>
 8005756:	68e0      	ldr	r0, [r4, #12]
 8005758:	9b03      	ldr	r3, [sp, #12]
 800575a:	4298      	cmp	r0, r3
 800575c:	bfb8      	it	lt
 800575e:	4618      	movlt	r0, r3
 8005760:	e7a4      	b.n	80056ac <_printf_i+0x168>
 8005762:	2301      	movs	r3, #1
 8005764:	4632      	mov	r2, r6
 8005766:	4649      	mov	r1, r9
 8005768:	4640      	mov	r0, r8
 800576a:	47d0      	blx	sl
 800576c:	3001      	adds	r0, #1
 800576e:	d09b      	beq.n	80056a8 <_printf_i+0x164>
 8005770:	3501      	adds	r5, #1
 8005772:	68e3      	ldr	r3, [r4, #12]
 8005774:	9903      	ldr	r1, [sp, #12]
 8005776:	1a5b      	subs	r3, r3, r1
 8005778:	42ab      	cmp	r3, r5
 800577a:	dcf2      	bgt.n	8005762 <_printf_i+0x21e>
 800577c:	e7eb      	b.n	8005756 <_printf_i+0x212>
 800577e:	2500      	movs	r5, #0
 8005780:	f104 0619 	add.w	r6, r4, #25
 8005784:	e7f5      	b.n	8005772 <_printf_i+0x22e>
 8005786:	bf00      	nop
 8005788:	08007b9a 	.word	0x08007b9a
 800578c:	08007bab 	.word	0x08007bab

08005790 <iprintf>:
 8005790:	b40f      	push	{r0, r1, r2, r3}
 8005792:	4b0a      	ldr	r3, [pc, #40]	; (80057bc <iprintf+0x2c>)
 8005794:	b513      	push	{r0, r1, r4, lr}
 8005796:	681c      	ldr	r4, [r3, #0]
 8005798:	b124      	cbz	r4, 80057a4 <iprintf+0x14>
 800579a:	69a3      	ldr	r3, [r4, #24]
 800579c:	b913      	cbnz	r3, 80057a4 <iprintf+0x14>
 800579e:	4620      	mov	r0, r4
 80057a0:	f001 f8da 	bl	8006958 <__sinit>
 80057a4:	ab05      	add	r3, sp, #20
 80057a6:	9a04      	ldr	r2, [sp, #16]
 80057a8:	68a1      	ldr	r1, [r4, #8]
 80057aa:	9301      	str	r3, [sp, #4]
 80057ac:	4620      	mov	r0, r4
 80057ae:	f001 fe89 	bl	80074c4 <_vfiprintf_r>
 80057b2:	b002      	add	sp, #8
 80057b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057b8:	b004      	add	sp, #16
 80057ba:	4770      	bx	lr
 80057bc:	2000000c 	.word	0x2000000c

080057c0 <_puts_r>:
 80057c0:	b570      	push	{r4, r5, r6, lr}
 80057c2:	460e      	mov	r6, r1
 80057c4:	4605      	mov	r5, r0
 80057c6:	b118      	cbz	r0, 80057d0 <_puts_r+0x10>
 80057c8:	6983      	ldr	r3, [r0, #24]
 80057ca:	b90b      	cbnz	r3, 80057d0 <_puts_r+0x10>
 80057cc:	f001 f8c4 	bl	8006958 <__sinit>
 80057d0:	69ab      	ldr	r3, [r5, #24]
 80057d2:	68ac      	ldr	r4, [r5, #8]
 80057d4:	b913      	cbnz	r3, 80057dc <_puts_r+0x1c>
 80057d6:	4628      	mov	r0, r5
 80057d8:	f001 f8be 	bl	8006958 <__sinit>
 80057dc:	4b2c      	ldr	r3, [pc, #176]	; (8005890 <_puts_r+0xd0>)
 80057de:	429c      	cmp	r4, r3
 80057e0:	d120      	bne.n	8005824 <_puts_r+0x64>
 80057e2:	686c      	ldr	r4, [r5, #4]
 80057e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80057e6:	07db      	lsls	r3, r3, #31
 80057e8:	d405      	bmi.n	80057f6 <_puts_r+0x36>
 80057ea:	89a3      	ldrh	r3, [r4, #12]
 80057ec:	0598      	lsls	r0, r3, #22
 80057ee:	d402      	bmi.n	80057f6 <_puts_r+0x36>
 80057f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80057f2:	f001 f954 	bl	8006a9e <__retarget_lock_acquire_recursive>
 80057f6:	89a3      	ldrh	r3, [r4, #12]
 80057f8:	0719      	lsls	r1, r3, #28
 80057fa:	d51d      	bpl.n	8005838 <_puts_r+0x78>
 80057fc:	6923      	ldr	r3, [r4, #16]
 80057fe:	b1db      	cbz	r3, 8005838 <_puts_r+0x78>
 8005800:	3e01      	subs	r6, #1
 8005802:	68a3      	ldr	r3, [r4, #8]
 8005804:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005808:	3b01      	subs	r3, #1
 800580a:	60a3      	str	r3, [r4, #8]
 800580c:	bb39      	cbnz	r1, 800585e <_puts_r+0x9e>
 800580e:	2b00      	cmp	r3, #0
 8005810:	da38      	bge.n	8005884 <_puts_r+0xc4>
 8005812:	4622      	mov	r2, r4
 8005814:	210a      	movs	r1, #10
 8005816:	4628      	mov	r0, r5
 8005818:	f000 f848 	bl	80058ac <__swbuf_r>
 800581c:	3001      	adds	r0, #1
 800581e:	d011      	beq.n	8005844 <_puts_r+0x84>
 8005820:	250a      	movs	r5, #10
 8005822:	e011      	b.n	8005848 <_puts_r+0x88>
 8005824:	4b1b      	ldr	r3, [pc, #108]	; (8005894 <_puts_r+0xd4>)
 8005826:	429c      	cmp	r4, r3
 8005828:	d101      	bne.n	800582e <_puts_r+0x6e>
 800582a:	68ac      	ldr	r4, [r5, #8]
 800582c:	e7da      	b.n	80057e4 <_puts_r+0x24>
 800582e:	4b1a      	ldr	r3, [pc, #104]	; (8005898 <_puts_r+0xd8>)
 8005830:	429c      	cmp	r4, r3
 8005832:	bf08      	it	eq
 8005834:	68ec      	ldreq	r4, [r5, #12]
 8005836:	e7d5      	b.n	80057e4 <_puts_r+0x24>
 8005838:	4621      	mov	r1, r4
 800583a:	4628      	mov	r0, r5
 800583c:	f000 f888 	bl	8005950 <__swsetup_r>
 8005840:	2800      	cmp	r0, #0
 8005842:	d0dd      	beq.n	8005800 <_puts_r+0x40>
 8005844:	f04f 35ff 	mov.w	r5, #4294967295
 8005848:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800584a:	07da      	lsls	r2, r3, #31
 800584c:	d405      	bmi.n	800585a <_puts_r+0x9a>
 800584e:	89a3      	ldrh	r3, [r4, #12]
 8005850:	059b      	lsls	r3, r3, #22
 8005852:	d402      	bmi.n	800585a <_puts_r+0x9a>
 8005854:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005856:	f001 f923 	bl	8006aa0 <__retarget_lock_release_recursive>
 800585a:	4628      	mov	r0, r5
 800585c:	bd70      	pop	{r4, r5, r6, pc}
 800585e:	2b00      	cmp	r3, #0
 8005860:	da04      	bge.n	800586c <_puts_r+0xac>
 8005862:	69a2      	ldr	r2, [r4, #24]
 8005864:	429a      	cmp	r2, r3
 8005866:	dc06      	bgt.n	8005876 <_puts_r+0xb6>
 8005868:	290a      	cmp	r1, #10
 800586a:	d004      	beq.n	8005876 <_puts_r+0xb6>
 800586c:	6823      	ldr	r3, [r4, #0]
 800586e:	1c5a      	adds	r2, r3, #1
 8005870:	6022      	str	r2, [r4, #0]
 8005872:	7019      	strb	r1, [r3, #0]
 8005874:	e7c5      	b.n	8005802 <_puts_r+0x42>
 8005876:	4622      	mov	r2, r4
 8005878:	4628      	mov	r0, r5
 800587a:	f000 f817 	bl	80058ac <__swbuf_r>
 800587e:	3001      	adds	r0, #1
 8005880:	d1bf      	bne.n	8005802 <_puts_r+0x42>
 8005882:	e7df      	b.n	8005844 <_puts_r+0x84>
 8005884:	6823      	ldr	r3, [r4, #0]
 8005886:	250a      	movs	r5, #10
 8005888:	1c5a      	adds	r2, r3, #1
 800588a:	6022      	str	r2, [r4, #0]
 800588c:	701d      	strb	r5, [r3, #0]
 800588e:	e7db      	b.n	8005848 <_puts_r+0x88>
 8005890:	08007c6c 	.word	0x08007c6c
 8005894:	08007c8c 	.word	0x08007c8c
 8005898:	08007c4c 	.word	0x08007c4c

0800589c <puts>:
 800589c:	4b02      	ldr	r3, [pc, #8]	; (80058a8 <puts+0xc>)
 800589e:	4601      	mov	r1, r0
 80058a0:	6818      	ldr	r0, [r3, #0]
 80058a2:	f7ff bf8d 	b.w	80057c0 <_puts_r>
 80058a6:	bf00      	nop
 80058a8:	2000000c 	.word	0x2000000c

080058ac <__swbuf_r>:
 80058ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058ae:	460e      	mov	r6, r1
 80058b0:	4614      	mov	r4, r2
 80058b2:	4605      	mov	r5, r0
 80058b4:	b118      	cbz	r0, 80058be <__swbuf_r+0x12>
 80058b6:	6983      	ldr	r3, [r0, #24]
 80058b8:	b90b      	cbnz	r3, 80058be <__swbuf_r+0x12>
 80058ba:	f001 f84d 	bl	8006958 <__sinit>
 80058be:	4b21      	ldr	r3, [pc, #132]	; (8005944 <__swbuf_r+0x98>)
 80058c0:	429c      	cmp	r4, r3
 80058c2:	d12b      	bne.n	800591c <__swbuf_r+0x70>
 80058c4:	686c      	ldr	r4, [r5, #4]
 80058c6:	69a3      	ldr	r3, [r4, #24]
 80058c8:	60a3      	str	r3, [r4, #8]
 80058ca:	89a3      	ldrh	r3, [r4, #12]
 80058cc:	071a      	lsls	r2, r3, #28
 80058ce:	d52f      	bpl.n	8005930 <__swbuf_r+0x84>
 80058d0:	6923      	ldr	r3, [r4, #16]
 80058d2:	b36b      	cbz	r3, 8005930 <__swbuf_r+0x84>
 80058d4:	6923      	ldr	r3, [r4, #16]
 80058d6:	6820      	ldr	r0, [r4, #0]
 80058d8:	1ac0      	subs	r0, r0, r3
 80058da:	6963      	ldr	r3, [r4, #20]
 80058dc:	b2f6      	uxtb	r6, r6
 80058de:	4283      	cmp	r3, r0
 80058e0:	4637      	mov	r7, r6
 80058e2:	dc04      	bgt.n	80058ee <__swbuf_r+0x42>
 80058e4:	4621      	mov	r1, r4
 80058e6:	4628      	mov	r0, r5
 80058e8:	f000 ffa2 	bl	8006830 <_fflush_r>
 80058ec:	bb30      	cbnz	r0, 800593c <__swbuf_r+0x90>
 80058ee:	68a3      	ldr	r3, [r4, #8]
 80058f0:	3b01      	subs	r3, #1
 80058f2:	60a3      	str	r3, [r4, #8]
 80058f4:	6823      	ldr	r3, [r4, #0]
 80058f6:	1c5a      	adds	r2, r3, #1
 80058f8:	6022      	str	r2, [r4, #0]
 80058fa:	701e      	strb	r6, [r3, #0]
 80058fc:	6963      	ldr	r3, [r4, #20]
 80058fe:	3001      	adds	r0, #1
 8005900:	4283      	cmp	r3, r0
 8005902:	d004      	beq.n	800590e <__swbuf_r+0x62>
 8005904:	89a3      	ldrh	r3, [r4, #12]
 8005906:	07db      	lsls	r3, r3, #31
 8005908:	d506      	bpl.n	8005918 <__swbuf_r+0x6c>
 800590a:	2e0a      	cmp	r6, #10
 800590c:	d104      	bne.n	8005918 <__swbuf_r+0x6c>
 800590e:	4621      	mov	r1, r4
 8005910:	4628      	mov	r0, r5
 8005912:	f000 ff8d 	bl	8006830 <_fflush_r>
 8005916:	b988      	cbnz	r0, 800593c <__swbuf_r+0x90>
 8005918:	4638      	mov	r0, r7
 800591a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800591c:	4b0a      	ldr	r3, [pc, #40]	; (8005948 <__swbuf_r+0x9c>)
 800591e:	429c      	cmp	r4, r3
 8005920:	d101      	bne.n	8005926 <__swbuf_r+0x7a>
 8005922:	68ac      	ldr	r4, [r5, #8]
 8005924:	e7cf      	b.n	80058c6 <__swbuf_r+0x1a>
 8005926:	4b09      	ldr	r3, [pc, #36]	; (800594c <__swbuf_r+0xa0>)
 8005928:	429c      	cmp	r4, r3
 800592a:	bf08      	it	eq
 800592c:	68ec      	ldreq	r4, [r5, #12]
 800592e:	e7ca      	b.n	80058c6 <__swbuf_r+0x1a>
 8005930:	4621      	mov	r1, r4
 8005932:	4628      	mov	r0, r5
 8005934:	f000 f80c 	bl	8005950 <__swsetup_r>
 8005938:	2800      	cmp	r0, #0
 800593a:	d0cb      	beq.n	80058d4 <__swbuf_r+0x28>
 800593c:	f04f 37ff 	mov.w	r7, #4294967295
 8005940:	e7ea      	b.n	8005918 <__swbuf_r+0x6c>
 8005942:	bf00      	nop
 8005944:	08007c6c 	.word	0x08007c6c
 8005948:	08007c8c 	.word	0x08007c8c
 800594c:	08007c4c 	.word	0x08007c4c

08005950 <__swsetup_r>:
 8005950:	4b32      	ldr	r3, [pc, #200]	; (8005a1c <__swsetup_r+0xcc>)
 8005952:	b570      	push	{r4, r5, r6, lr}
 8005954:	681d      	ldr	r5, [r3, #0]
 8005956:	4606      	mov	r6, r0
 8005958:	460c      	mov	r4, r1
 800595a:	b125      	cbz	r5, 8005966 <__swsetup_r+0x16>
 800595c:	69ab      	ldr	r3, [r5, #24]
 800595e:	b913      	cbnz	r3, 8005966 <__swsetup_r+0x16>
 8005960:	4628      	mov	r0, r5
 8005962:	f000 fff9 	bl	8006958 <__sinit>
 8005966:	4b2e      	ldr	r3, [pc, #184]	; (8005a20 <__swsetup_r+0xd0>)
 8005968:	429c      	cmp	r4, r3
 800596a:	d10f      	bne.n	800598c <__swsetup_r+0x3c>
 800596c:	686c      	ldr	r4, [r5, #4]
 800596e:	89a3      	ldrh	r3, [r4, #12]
 8005970:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005974:	0719      	lsls	r1, r3, #28
 8005976:	d42c      	bmi.n	80059d2 <__swsetup_r+0x82>
 8005978:	06dd      	lsls	r5, r3, #27
 800597a:	d411      	bmi.n	80059a0 <__swsetup_r+0x50>
 800597c:	2309      	movs	r3, #9
 800597e:	6033      	str	r3, [r6, #0]
 8005980:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005984:	81a3      	strh	r3, [r4, #12]
 8005986:	f04f 30ff 	mov.w	r0, #4294967295
 800598a:	e03e      	b.n	8005a0a <__swsetup_r+0xba>
 800598c:	4b25      	ldr	r3, [pc, #148]	; (8005a24 <__swsetup_r+0xd4>)
 800598e:	429c      	cmp	r4, r3
 8005990:	d101      	bne.n	8005996 <__swsetup_r+0x46>
 8005992:	68ac      	ldr	r4, [r5, #8]
 8005994:	e7eb      	b.n	800596e <__swsetup_r+0x1e>
 8005996:	4b24      	ldr	r3, [pc, #144]	; (8005a28 <__swsetup_r+0xd8>)
 8005998:	429c      	cmp	r4, r3
 800599a:	bf08      	it	eq
 800599c:	68ec      	ldreq	r4, [r5, #12]
 800599e:	e7e6      	b.n	800596e <__swsetup_r+0x1e>
 80059a0:	0758      	lsls	r0, r3, #29
 80059a2:	d512      	bpl.n	80059ca <__swsetup_r+0x7a>
 80059a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80059a6:	b141      	cbz	r1, 80059ba <__swsetup_r+0x6a>
 80059a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80059ac:	4299      	cmp	r1, r3
 80059ae:	d002      	beq.n	80059b6 <__swsetup_r+0x66>
 80059b0:	4630      	mov	r0, r6
 80059b2:	f001 fc7d 	bl	80072b0 <_free_r>
 80059b6:	2300      	movs	r3, #0
 80059b8:	6363      	str	r3, [r4, #52]	; 0x34
 80059ba:	89a3      	ldrh	r3, [r4, #12]
 80059bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80059c0:	81a3      	strh	r3, [r4, #12]
 80059c2:	2300      	movs	r3, #0
 80059c4:	6063      	str	r3, [r4, #4]
 80059c6:	6923      	ldr	r3, [r4, #16]
 80059c8:	6023      	str	r3, [r4, #0]
 80059ca:	89a3      	ldrh	r3, [r4, #12]
 80059cc:	f043 0308 	orr.w	r3, r3, #8
 80059d0:	81a3      	strh	r3, [r4, #12]
 80059d2:	6923      	ldr	r3, [r4, #16]
 80059d4:	b94b      	cbnz	r3, 80059ea <__swsetup_r+0x9a>
 80059d6:	89a3      	ldrh	r3, [r4, #12]
 80059d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80059dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80059e0:	d003      	beq.n	80059ea <__swsetup_r+0x9a>
 80059e2:	4621      	mov	r1, r4
 80059e4:	4630      	mov	r0, r6
 80059e6:	f001 f881 	bl	8006aec <__smakebuf_r>
 80059ea:	89a0      	ldrh	r0, [r4, #12]
 80059ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80059f0:	f010 0301 	ands.w	r3, r0, #1
 80059f4:	d00a      	beq.n	8005a0c <__swsetup_r+0xbc>
 80059f6:	2300      	movs	r3, #0
 80059f8:	60a3      	str	r3, [r4, #8]
 80059fa:	6963      	ldr	r3, [r4, #20]
 80059fc:	425b      	negs	r3, r3
 80059fe:	61a3      	str	r3, [r4, #24]
 8005a00:	6923      	ldr	r3, [r4, #16]
 8005a02:	b943      	cbnz	r3, 8005a16 <__swsetup_r+0xc6>
 8005a04:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005a08:	d1ba      	bne.n	8005980 <__swsetup_r+0x30>
 8005a0a:	bd70      	pop	{r4, r5, r6, pc}
 8005a0c:	0781      	lsls	r1, r0, #30
 8005a0e:	bf58      	it	pl
 8005a10:	6963      	ldrpl	r3, [r4, #20]
 8005a12:	60a3      	str	r3, [r4, #8]
 8005a14:	e7f4      	b.n	8005a00 <__swsetup_r+0xb0>
 8005a16:	2000      	movs	r0, #0
 8005a18:	e7f7      	b.n	8005a0a <__swsetup_r+0xba>
 8005a1a:	bf00      	nop
 8005a1c:	2000000c 	.word	0x2000000c
 8005a20:	08007c6c 	.word	0x08007c6c
 8005a24:	08007c8c 	.word	0x08007c8c
 8005a28:	08007c4c 	.word	0x08007c4c

08005a2c <quorem>:
 8005a2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a30:	6903      	ldr	r3, [r0, #16]
 8005a32:	690c      	ldr	r4, [r1, #16]
 8005a34:	42a3      	cmp	r3, r4
 8005a36:	4607      	mov	r7, r0
 8005a38:	f2c0 8081 	blt.w	8005b3e <quorem+0x112>
 8005a3c:	3c01      	subs	r4, #1
 8005a3e:	f101 0814 	add.w	r8, r1, #20
 8005a42:	f100 0514 	add.w	r5, r0, #20
 8005a46:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005a4a:	9301      	str	r3, [sp, #4]
 8005a4c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005a50:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005a54:	3301      	adds	r3, #1
 8005a56:	429a      	cmp	r2, r3
 8005a58:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005a5c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005a60:	fbb2 f6f3 	udiv	r6, r2, r3
 8005a64:	d331      	bcc.n	8005aca <quorem+0x9e>
 8005a66:	f04f 0e00 	mov.w	lr, #0
 8005a6a:	4640      	mov	r0, r8
 8005a6c:	46ac      	mov	ip, r5
 8005a6e:	46f2      	mov	sl, lr
 8005a70:	f850 2b04 	ldr.w	r2, [r0], #4
 8005a74:	b293      	uxth	r3, r2
 8005a76:	fb06 e303 	mla	r3, r6, r3, lr
 8005a7a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	ebaa 0303 	sub.w	r3, sl, r3
 8005a84:	f8dc a000 	ldr.w	sl, [ip]
 8005a88:	0c12      	lsrs	r2, r2, #16
 8005a8a:	fa13 f38a 	uxtah	r3, r3, sl
 8005a8e:	fb06 e202 	mla	r2, r6, r2, lr
 8005a92:	9300      	str	r3, [sp, #0]
 8005a94:	9b00      	ldr	r3, [sp, #0]
 8005a96:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005a9a:	b292      	uxth	r2, r2
 8005a9c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005aa0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005aa4:	f8bd 3000 	ldrh.w	r3, [sp]
 8005aa8:	4581      	cmp	r9, r0
 8005aaa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005aae:	f84c 3b04 	str.w	r3, [ip], #4
 8005ab2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005ab6:	d2db      	bcs.n	8005a70 <quorem+0x44>
 8005ab8:	f855 300b 	ldr.w	r3, [r5, fp]
 8005abc:	b92b      	cbnz	r3, 8005aca <quorem+0x9e>
 8005abe:	9b01      	ldr	r3, [sp, #4]
 8005ac0:	3b04      	subs	r3, #4
 8005ac2:	429d      	cmp	r5, r3
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	d32e      	bcc.n	8005b26 <quorem+0xfa>
 8005ac8:	613c      	str	r4, [r7, #16]
 8005aca:	4638      	mov	r0, r7
 8005acc:	f001 fad8 	bl	8007080 <__mcmp>
 8005ad0:	2800      	cmp	r0, #0
 8005ad2:	db24      	blt.n	8005b1e <quorem+0xf2>
 8005ad4:	3601      	adds	r6, #1
 8005ad6:	4628      	mov	r0, r5
 8005ad8:	f04f 0c00 	mov.w	ip, #0
 8005adc:	f858 2b04 	ldr.w	r2, [r8], #4
 8005ae0:	f8d0 e000 	ldr.w	lr, [r0]
 8005ae4:	b293      	uxth	r3, r2
 8005ae6:	ebac 0303 	sub.w	r3, ip, r3
 8005aea:	0c12      	lsrs	r2, r2, #16
 8005aec:	fa13 f38e 	uxtah	r3, r3, lr
 8005af0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005af4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005af8:	b29b      	uxth	r3, r3
 8005afa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005afe:	45c1      	cmp	r9, r8
 8005b00:	f840 3b04 	str.w	r3, [r0], #4
 8005b04:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005b08:	d2e8      	bcs.n	8005adc <quorem+0xb0>
 8005b0a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005b0e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005b12:	b922      	cbnz	r2, 8005b1e <quorem+0xf2>
 8005b14:	3b04      	subs	r3, #4
 8005b16:	429d      	cmp	r5, r3
 8005b18:	461a      	mov	r2, r3
 8005b1a:	d30a      	bcc.n	8005b32 <quorem+0x106>
 8005b1c:	613c      	str	r4, [r7, #16]
 8005b1e:	4630      	mov	r0, r6
 8005b20:	b003      	add	sp, #12
 8005b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b26:	6812      	ldr	r2, [r2, #0]
 8005b28:	3b04      	subs	r3, #4
 8005b2a:	2a00      	cmp	r2, #0
 8005b2c:	d1cc      	bne.n	8005ac8 <quorem+0x9c>
 8005b2e:	3c01      	subs	r4, #1
 8005b30:	e7c7      	b.n	8005ac2 <quorem+0x96>
 8005b32:	6812      	ldr	r2, [r2, #0]
 8005b34:	3b04      	subs	r3, #4
 8005b36:	2a00      	cmp	r2, #0
 8005b38:	d1f0      	bne.n	8005b1c <quorem+0xf0>
 8005b3a:	3c01      	subs	r4, #1
 8005b3c:	e7eb      	b.n	8005b16 <quorem+0xea>
 8005b3e:	2000      	movs	r0, #0
 8005b40:	e7ee      	b.n	8005b20 <quorem+0xf4>
 8005b42:	0000      	movs	r0, r0
 8005b44:	0000      	movs	r0, r0
	...

08005b48 <_dtoa_r>:
 8005b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b4c:	ed2d 8b04 	vpush	{d8-d9}
 8005b50:	ec57 6b10 	vmov	r6, r7, d0
 8005b54:	b093      	sub	sp, #76	; 0x4c
 8005b56:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005b58:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005b5c:	9106      	str	r1, [sp, #24]
 8005b5e:	ee10 aa10 	vmov	sl, s0
 8005b62:	4604      	mov	r4, r0
 8005b64:	9209      	str	r2, [sp, #36]	; 0x24
 8005b66:	930c      	str	r3, [sp, #48]	; 0x30
 8005b68:	46bb      	mov	fp, r7
 8005b6a:	b975      	cbnz	r5, 8005b8a <_dtoa_r+0x42>
 8005b6c:	2010      	movs	r0, #16
 8005b6e:	f000 fffd 	bl	8006b6c <malloc>
 8005b72:	4602      	mov	r2, r0
 8005b74:	6260      	str	r0, [r4, #36]	; 0x24
 8005b76:	b920      	cbnz	r0, 8005b82 <_dtoa_r+0x3a>
 8005b78:	4ba7      	ldr	r3, [pc, #668]	; (8005e18 <_dtoa_r+0x2d0>)
 8005b7a:	21ea      	movs	r1, #234	; 0xea
 8005b7c:	48a7      	ldr	r0, [pc, #668]	; (8005e1c <_dtoa_r+0x2d4>)
 8005b7e:	f001 fe37 	bl	80077f0 <__assert_func>
 8005b82:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005b86:	6005      	str	r5, [r0, #0]
 8005b88:	60c5      	str	r5, [r0, #12]
 8005b8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b8c:	6819      	ldr	r1, [r3, #0]
 8005b8e:	b151      	cbz	r1, 8005ba6 <_dtoa_r+0x5e>
 8005b90:	685a      	ldr	r2, [r3, #4]
 8005b92:	604a      	str	r2, [r1, #4]
 8005b94:	2301      	movs	r3, #1
 8005b96:	4093      	lsls	r3, r2
 8005b98:	608b      	str	r3, [r1, #8]
 8005b9a:	4620      	mov	r0, r4
 8005b9c:	f001 f82e 	bl	8006bfc <_Bfree>
 8005ba0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	601a      	str	r2, [r3, #0]
 8005ba6:	1e3b      	subs	r3, r7, #0
 8005ba8:	bfaa      	itet	ge
 8005baa:	2300      	movge	r3, #0
 8005bac:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005bb0:	f8c8 3000 	strge.w	r3, [r8]
 8005bb4:	4b9a      	ldr	r3, [pc, #616]	; (8005e20 <_dtoa_r+0x2d8>)
 8005bb6:	bfbc      	itt	lt
 8005bb8:	2201      	movlt	r2, #1
 8005bba:	f8c8 2000 	strlt.w	r2, [r8]
 8005bbe:	ea33 030b 	bics.w	r3, r3, fp
 8005bc2:	d11b      	bne.n	8005bfc <_dtoa_r+0xb4>
 8005bc4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005bc6:	f242 730f 	movw	r3, #9999	; 0x270f
 8005bca:	6013      	str	r3, [r2, #0]
 8005bcc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005bd0:	4333      	orrs	r3, r6
 8005bd2:	f000 8592 	beq.w	80066fa <_dtoa_r+0xbb2>
 8005bd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005bd8:	b963      	cbnz	r3, 8005bf4 <_dtoa_r+0xac>
 8005bda:	4b92      	ldr	r3, [pc, #584]	; (8005e24 <_dtoa_r+0x2dc>)
 8005bdc:	e022      	b.n	8005c24 <_dtoa_r+0xdc>
 8005bde:	4b92      	ldr	r3, [pc, #584]	; (8005e28 <_dtoa_r+0x2e0>)
 8005be0:	9301      	str	r3, [sp, #4]
 8005be2:	3308      	adds	r3, #8
 8005be4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005be6:	6013      	str	r3, [r2, #0]
 8005be8:	9801      	ldr	r0, [sp, #4]
 8005bea:	b013      	add	sp, #76	; 0x4c
 8005bec:	ecbd 8b04 	vpop	{d8-d9}
 8005bf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bf4:	4b8b      	ldr	r3, [pc, #556]	; (8005e24 <_dtoa_r+0x2dc>)
 8005bf6:	9301      	str	r3, [sp, #4]
 8005bf8:	3303      	adds	r3, #3
 8005bfa:	e7f3      	b.n	8005be4 <_dtoa_r+0x9c>
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	2300      	movs	r3, #0
 8005c00:	4650      	mov	r0, sl
 8005c02:	4659      	mov	r1, fp
 8005c04:	f7fa ff88 	bl	8000b18 <__aeabi_dcmpeq>
 8005c08:	ec4b ab19 	vmov	d9, sl, fp
 8005c0c:	4680      	mov	r8, r0
 8005c0e:	b158      	cbz	r0, 8005c28 <_dtoa_r+0xe0>
 8005c10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005c12:	2301      	movs	r3, #1
 8005c14:	6013      	str	r3, [r2, #0]
 8005c16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	f000 856b 	beq.w	80066f4 <_dtoa_r+0xbac>
 8005c1e:	4883      	ldr	r0, [pc, #524]	; (8005e2c <_dtoa_r+0x2e4>)
 8005c20:	6018      	str	r0, [r3, #0]
 8005c22:	1e43      	subs	r3, r0, #1
 8005c24:	9301      	str	r3, [sp, #4]
 8005c26:	e7df      	b.n	8005be8 <_dtoa_r+0xa0>
 8005c28:	ec4b ab10 	vmov	d0, sl, fp
 8005c2c:	aa10      	add	r2, sp, #64	; 0x40
 8005c2e:	a911      	add	r1, sp, #68	; 0x44
 8005c30:	4620      	mov	r0, r4
 8005c32:	f001 facb 	bl	80071cc <__d2b>
 8005c36:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005c3a:	ee08 0a10 	vmov	s16, r0
 8005c3e:	2d00      	cmp	r5, #0
 8005c40:	f000 8084 	beq.w	8005d4c <_dtoa_r+0x204>
 8005c44:	ee19 3a90 	vmov	r3, s19
 8005c48:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005c4c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005c50:	4656      	mov	r6, sl
 8005c52:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005c56:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005c5a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005c5e:	4b74      	ldr	r3, [pc, #464]	; (8005e30 <_dtoa_r+0x2e8>)
 8005c60:	2200      	movs	r2, #0
 8005c62:	4630      	mov	r0, r6
 8005c64:	4639      	mov	r1, r7
 8005c66:	f7fa fb37 	bl	80002d8 <__aeabi_dsub>
 8005c6a:	a365      	add	r3, pc, #404	; (adr r3, 8005e00 <_dtoa_r+0x2b8>)
 8005c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c70:	f7fa fcea 	bl	8000648 <__aeabi_dmul>
 8005c74:	a364      	add	r3, pc, #400	; (adr r3, 8005e08 <_dtoa_r+0x2c0>)
 8005c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c7a:	f7fa fb2f 	bl	80002dc <__adddf3>
 8005c7e:	4606      	mov	r6, r0
 8005c80:	4628      	mov	r0, r5
 8005c82:	460f      	mov	r7, r1
 8005c84:	f7fa fc76 	bl	8000574 <__aeabi_i2d>
 8005c88:	a361      	add	r3, pc, #388	; (adr r3, 8005e10 <_dtoa_r+0x2c8>)
 8005c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c8e:	f7fa fcdb 	bl	8000648 <__aeabi_dmul>
 8005c92:	4602      	mov	r2, r0
 8005c94:	460b      	mov	r3, r1
 8005c96:	4630      	mov	r0, r6
 8005c98:	4639      	mov	r1, r7
 8005c9a:	f7fa fb1f 	bl	80002dc <__adddf3>
 8005c9e:	4606      	mov	r6, r0
 8005ca0:	460f      	mov	r7, r1
 8005ca2:	f7fa ff81 	bl	8000ba8 <__aeabi_d2iz>
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	9000      	str	r0, [sp, #0]
 8005caa:	2300      	movs	r3, #0
 8005cac:	4630      	mov	r0, r6
 8005cae:	4639      	mov	r1, r7
 8005cb0:	f7fa ff3c 	bl	8000b2c <__aeabi_dcmplt>
 8005cb4:	b150      	cbz	r0, 8005ccc <_dtoa_r+0x184>
 8005cb6:	9800      	ldr	r0, [sp, #0]
 8005cb8:	f7fa fc5c 	bl	8000574 <__aeabi_i2d>
 8005cbc:	4632      	mov	r2, r6
 8005cbe:	463b      	mov	r3, r7
 8005cc0:	f7fa ff2a 	bl	8000b18 <__aeabi_dcmpeq>
 8005cc4:	b910      	cbnz	r0, 8005ccc <_dtoa_r+0x184>
 8005cc6:	9b00      	ldr	r3, [sp, #0]
 8005cc8:	3b01      	subs	r3, #1
 8005cca:	9300      	str	r3, [sp, #0]
 8005ccc:	9b00      	ldr	r3, [sp, #0]
 8005cce:	2b16      	cmp	r3, #22
 8005cd0:	d85a      	bhi.n	8005d88 <_dtoa_r+0x240>
 8005cd2:	9a00      	ldr	r2, [sp, #0]
 8005cd4:	4b57      	ldr	r3, [pc, #348]	; (8005e34 <_dtoa_r+0x2ec>)
 8005cd6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cde:	ec51 0b19 	vmov	r0, r1, d9
 8005ce2:	f7fa ff23 	bl	8000b2c <__aeabi_dcmplt>
 8005ce6:	2800      	cmp	r0, #0
 8005ce8:	d050      	beq.n	8005d8c <_dtoa_r+0x244>
 8005cea:	9b00      	ldr	r3, [sp, #0]
 8005cec:	3b01      	subs	r3, #1
 8005cee:	9300      	str	r3, [sp, #0]
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	930b      	str	r3, [sp, #44]	; 0x2c
 8005cf4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005cf6:	1b5d      	subs	r5, r3, r5
 8005cf8:	1e6b      	subs	r3, r5, #1
 8005cfa:	9305      	str	r3, [sp, #20]
 8005cfc:	bf45      	ittet	mi
 8005cfe:	f1c5 0301 	rsbmi	r3, r5, #1
 8005d02:	9304      	strmi	r3, [sp, #16]
 8005d04:	2300      	movpl	r3, #0
 8005d06:	2300      	movmi	r3, #0
 8005d08:	bf4c      	ite	mi
 8005d0a:	9305      	strmi	r3, [sp, #20]
 8005d0c:	9304      	strpl	r3, [sp, #16]
 8005d0e:	9b00      	ldr	r3, [sp, #0]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	db3d      	blt.n	8005d90 <_dtoa_r+0x248>
 8005d14:	9b05      	ldr	r3, [sp, #20]
 8005d16:	9a00      	ldr	r2, [sp, #0]
 8005d18:	920a      	str	r2, [sp, #40]	; 0x28
 8005d1a:	4413      	add	r3, r2
 8005d1c:	9305      	str	r3, [sp, #20]
 8005d1e:	2300      	movs	r3, #0
 8005d20:	9307      	str	r3, [sp, #28]
 8005d22:	9b06      	ldr	r3, [sp, #24]
 8005d24:	2b09      	cmp	r3, #9
 8005d26:	f200 8089 	bhi.w	8005e3c <_dtoa_r+0x2f4>
 8005d2a:	2b05      	cmp	r3, #5
 8005d2c:	bfc4      	itt	gt
 8005d2e:	3b04      	subgt	r3, #4
 8005d30:	9306      	strgt	r3, [sp, #24]
 8005d32:	9b06      	ldr	r3, [sp, #24]
 8005d34:	f1a3 0302 	sub.w	r3, r3, #2
 8005d38:	bfcc      	ite	gt
 8005d3a:	2500      	movgt	r5, #0
 8005d3c:	2501      	movle	r5, #1
 8005d3e:	2b03      	cmp	r3, #3
 8005d40:	f200 8087 	bhi.w	8005e52 <_dtoa_r+0x30a>
 8005d44:	e8df f003 	tbb	[pc, r3]
 8005d48:	59383a2d 	.word	0x59383a2d
 8005d4c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005d50:	441d      	add	r5, r3
 8005d52:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005d56:	2b20      	cmp	r3, #32
 8005d58:	bfc1      	itttt	gt
 8005d5a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005d5e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005d62:	fa0b f303 	lslgt.w	r3, fp, r3
 8005d66:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005d6a:	bfda      	itte	le
 8005d6c:	f1c3 0320 	rsble	r3, r3, #32
 8005d70:	fa06 f003 	lslle.w	r0, r6, r3
 8005d74:	4318      	orrgt	r0, r3
 8005d76:	f7fa fbed 	bl	8000554 <__aeabi_ui2d>
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	4606      	mov	r6, r0
 8005d7e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005d82:	3d01      	subs	r5, #1
 8005d84:	930e      	str	r3, [sp, #56]	; 0x38
 8005d86:	e76a      	b.n	8005c5e <_dtoa_r+0x116>
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e7b2      	b.n	8005cf2 <_dtoa_r+0x1aa>
 8005d8c:	900b      	str	r0, [sp, #44]	; 0x2c
 8005d8e:	e7b1      	b.n	8005cf4 <_dtoa_r+0x1ac>
 8005d90:	9b04      	ldr	r3, [sp, #16]
 8005d92:	9a00      	ldr	r2, [sp, #0]
 8005d94:	1a9b      	subs	r3, r3, r2
 8005d96:	9304      	str	r3, [sp, #16]
 8005d98:	4253      	negs	r3, r2
 8005d9a:	9307      	str	r3, [sp, #28]
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	930a      	str	r3, [sp, #40]	; 0x28
 8005da0:	e7bf      	b.n	8005d22 <_dtoa_r+0x1da>
 8005da2:	2300      	movs	r3, #0
 8005da4:	9308      	str	r3, [sp, #32]
 8005da6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	dc55      	bgt.n	8005e58 <_dtoa_r+0x310>
 8005dac:	2301      	movs	r3, #1
 8005dae:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005db2:	461a      	mov	r2, r3
 8005db4:	9209      	str	r2, [sp, #36]	; 0x24
 8005db6:	e00c      	b.n	8005dd2 <_dtoa_r+0x28a>
 8005db8:	2301      	movs	r3, #1
 8005dba:	e7f3      	b.n	8005da4 <_dtoa_r+0x25c>
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005dc0:	9308      	str	r3, [sp, #32]
 8005dc2:	9b00      	ldr	r3, [sp, #0]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	9302      	str	r3, [sp, #8]
 8005dc8:	3301      	adds	r3, #1
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	9303      	str	r3, [sp, #12]
 8005dce:	bfb8      	it	lt
 8005dd0:	2301      	movlt	r3, #1
 8005dd2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	6042      	str	r2, [r0, #4]
 8005dd8:	2204      	movs	r2, #4
 8005dda:	f102 0614 	add.w	r6, r2, #20
 8005dde:	429e      	cmp	r6, r3
 8005de0:	6841      	ldr	r1, [r0, #4]
 8005de2:	d93d      	bls.n	8005e60 <_dtoa_r+0x318>
 8005de4:	4620      	mov	r0, r4
 8005de6:	f000 fec9 	bl	8006b7c <_Balloc>
 8005dea:	9001      	str	r0, [sp, #4]
 8005dec:	2800      	cmp	r0, #0
 8005dee:	d13b      	bne.n	8005e68 <_dtoa_r+0x320>
 8005df0:	4b11      	ldr	r3, [pc, #68]	; (8005e38 <_dtoa_r+0x2f0>)
 8005df2:	4602      	mov	r2, r0
 8005df4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005df8:	e6c0      	b.n	8005b7c <_dtoa_r+0x34>
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e7df      	b.n	8005dbe <_dtoa_r+0x276>
 8005dfe:	bf00      	nop
 8005e00:	636f4361 	.word	0x636f4361
 8005e04:	3fd287a7 	.word	0x3fd287a7
 8005e08:	8b60c8b3 	.word	0x8b60c8b3
 8005e0c:	3fc68a28 	.word	0x3fc68a28
 8005e10:	509f79fb 	.word	0x509f79fb
 8005e14:	3fd34413 	.word	0x3fd34413
 8005e18:	08007bc9 	.word	0x08007bc9
 8005e1c:	08007be0 	.word	0x08007be0
 8005e20:	7ff00000 	.word	0x7ff00000
 8005e24:	08007bc5 	.word	0x08007bc5
 8005e28:	08007bbc 	.word	0x08007bbc
 8005e2c:	08007b99 	.word	0x08007b99
 8005e30:	3ff80000 	.word	0x3ff80000
 8005e34:	08007d30 	.word	0x08007d30
 8005e38:	08007c3b 	.word	0x08007c3b
 8005e3c:	2501      	movs	r5, #1
 8005e3e:	2300      	movs	r3, #0
 8005e40:	9306      	str	r3, [sp, #24]
 8005e42:	9508      	str	r5, [sp, #32]
 8005e44:	f04f 33ff 	mov.w	r3, #4294967295
 8005e48:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	2312      	movs	r3, #18
 8005e50:	e7b0      	b.n	8005db4 <_dtoa_r+0x26c>
 8005e52:	2301      	movs	r3, #1
 8005e54:	9308      	str	r3, [sp, #32]
 8005e56:	e7f5      	b.n	8005e44 <_dtoa_r+0x2fc>
 8005e58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e5a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005e5e:	e7b8      	b.n	8005dd2 <_dtoa_r+0x28a>
 8005e60:	3101      	adds	r1, #1
 8005e62:	6041      	str	r1, [r0, #4]
 8005e64:	0052      	lsls	r2, r2, #1
 8005e66:	e7b8      	b.n	8005dda <_dtoa_r+0x292>
 8005e68:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005e6a:	9a01      	ldr	r2, [sp, #4]
 8005e6c:	601a      	str	r2, [r3, #0]
 8005e6e:	9b03      	ldr	r3, [sp, #12]
 8005e70:	2b0e      	cmp	r3, #14
 8005e72:	f200 809d 	bhi.w	8005fb0 <_dtoa_r+0x468>
 8005e76:	2d00      	cmp	r5, #0
 8005e78:	f000 809a 	beq.w	8005fb0 <_dtoa_r+0x468>
 8005e7c:	9b00      	ldr	r3, [sp, #0]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	dd32      	ble.n	8005ee8 <_dtoa_r+0x3a0>
 8005e82:	4ab7      	ldr	r2, [pc, #732]	; (8006160 <_dtoa_r+0x618>)
 8005e84:	f003 030f 	and.w	r3, r3, #15
 8005e88:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005e8c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005e90:	9b00      	ldr	r3, [sp, #0]
 8005e92:	05d8      	lsls	r0, r3, #23
 8005e94:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005e98:	d516      	bpl.n	8005ec8 <_dtoa_r+0x380>
 8005e9a:	4bb2      	ldr	r3, [pc, #712]	; (8006164 <_dtoa_r+0x61c>)
 8005e9c:	ec51 0b19 	vmov	r0, r1, d9
 8005ea0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005ea4:	f7fa fcfa 	bl	800089c <__aeabi_ddiv>
 8005ea8:	f007 070f 	and.w	r7, r7, #15
 8005eac:	4682      	mov	sl, r0
 8005eae:	468b      	mov	fp, r1
 8005eb0:	2503      	movs	r5, #3
 8005eb2:	4eac      	ldr	r6, [pc, #688]	; (8006164 <_dtoa_r+0x61c>)
 8005eb4:	b957      	cbnz	r7, 8005ecc <_dtoa_r+0x384>
 8005eb6:	4642      	mov	r2, r8
 8005eb8:	464b      	mov	r3, r9
 8005eba:	4650      	mov	r0, sl
 8005ebc:	4659      	mov	r1, fp
 8005ebe:	f7fa fced 	bl	800089c <__aeabi_ddiv>
 8005ec2:	4682      	mov	sl, r0
 8005ec4:	468b      	mov	fp, r1
 8005ec6:	e028      	b.n	8005f1a <_dtoa_r+0x3d2>
 8005ec8:	2502      	movs	r5, #2
 8005eca:	e7f2      	b.n	8005eb2 <_dtoa_r+0x36a>
 8005ecc:	07f9      	lsls	r1, r7, #31
 8005ece:	d508      	bpl.n	8005ee2 <_dtoa_r+0x39a>
 8005ed0:	4640      	mov	r0, r8
 8005ed2:	4649      	mov	r1, r9
 8005ed4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005ed8:	f7fa fbb6 	bl	8000648 <__aeabi_dmul>
 8005edc:	3501      	adds	r5, #1
 8005ede:	4680      	mov	r8, r0
 8005ee0:	4689      	mov	r9, r1
 8005ee2:	107f      	asrs	r7, r7, #1
 8005ee4:	3608      	adds	r6, #8
 8005ee6:	e7e5      	b.n	8005eb4 <_dtoa_r+0x36c>
 8005ee8:	f000 809b 	beq.w	8006022 <_dtoa_r+0x4da>
 8005eec:	9b00      	ldr	r3, [sp, #0]
 8005eee:	4f9d      	ldr	r7, [pc, #628]	; (8006164 <_dtoa_r+0x61c>)
 8005ef0:	425e      	negs	r6, r3
 8005ef2:	4b9b      	ldr	r3, [pc, #620]	; (8006160 <_dtoa_r+0x618>)
 8005ef4:	f006 020f 	and.w	r2, r6, #15
 8005ef8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f00:	ec51 0b19 	vmov	r0, r1, d9
 8005f04:	f7fa fba0 	bl	8000648 <__aeabi_dmul>
 8005f08:	1136      	asrs	r6, r6, #4
 8005f0a:	4682      	mov	sl, r0
 8005f0c:	468b      	mov	fp, r1
 8005f0e:	2300      	movs	r3, #0
 8005f10:	2502      	movs	r5, #2
 8005f12:	2e00      	cmp	r6, #0
 8005f14:	d17a      	bne.n	800600c <_dtoa_r+0x4c4>
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d1d3      	bne.n	8005ec2 <_dtoa_r+0x37a>
 8005f1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	f000 8082 	beq.w	8006026 <_dtoa_r+0x4de>
 8005f22:	4b91      	ldr	r3, [pc, #580]	; (8006168 <_dtoa_r+0x620>)
 8005f24:	2200      	movs	r2, #0
 8005f26:	4650      	mov	r0, sl
 8005f28:	4659      	mov	r1, fp
 8005f2a:	f7fa fdff 	bl	8000b2c <__aeabi_dcmplt>
 8005f2e:	2800      	cmp	r0, #0
 8005f30:	d079      	beq.n	8006026 <_dtoa_r+0x4de>
 8005f32:	9b03      	ldr	r3, [sp, #12]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d076      	beq.n	8006026 <_dtoa_r+0x4de>
 8005f38:	9b02      	ldr	r3, [sp, #8]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	dd36      	ble.n	8005fac <_dtoa_r+0x464>
 8005f3e:	9b00      	ldr	r3, [sp, #0]
 8005f40:	4650      	mov	r0, sl
 8005f42:	4659      	mov	r1, fp
 8005f44:	1e5f      	subs	r7, r3, #1
 8005f46:	2200      	movs	r2, #0
 8005f48:	4b88      	ldr	r3, [pc, #544]	; (800616c <_dtoa_r+0x624>)
 8005f4a:	f7fa fb7d 	bl	8000648 <__aeabi_dmul>
 8005f4e:	9e02      	ldr	r6, [sp, #8]
 8005f50:	4682      	mov	sl, r0
 8005f52:	468b      	mov	fp, r1
 8005f54:	3501      	adds	r5, #1
 8005f56:	4628      	mov	r0, r5
 8005f58:	f7fa fb0c 	bl	8000574 <__aeabi_i2d>
 8005f5c:	4652      	mov	r2, sl
 8005f5e:	465b      	mov	r3, fp
 8005f60:	f7fa fb72 	bl	8000648 <__aeabi_dmul>
 8005f64:	4b82      	ldr	r3, [pc, #520]	; (8006170 <_dtoa_r+0x628>)
 8005f66:	2200      	movs	r2, #0
 8005f68:	f7fa f9b8 	bl	80002dc <__adddf3>
 8005f6c:	46d0      	mov	r8, sl
 8005f6e:	46d9      	mov	r9, fp
 8005f70:	4682      	mov	sl, r0
 8005f72:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005f76:	2e00      	cmp	r6, #0
 8005f78:	d158      	bne.n	800602c <_dtoa_r+0x4e4>
 8005f7a:	4b7e      	ldr	r3, [pc, #504]	; (8006174 <_dtoa_r+0x62c>)
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	4640      	mov	r0, r8
 8005f80:	4649      	mov	r1, r9
 8005f82:	f7fa f9a9 	bl	80002d8 <__aeabi_dsub>
 8005f86:	4652      	mov	r2, sl
 8005f88:	465b      	mov	r3, fp
 8005f8a:	4680      	mov	r8, r0
 8005f8c:	4689      	mov	r9, r1
 8005f8e:	f7fa fdeb 	bl	8000b68 <__aeabi_dcmpgt>
 8005f92:	2800      	cmp	r0, #0
 8005f94:	f040 8295 	bne.w	80064c2 <_dtoa_r+0x97a>
 8005f98:	4652      	mov	r2, sl
 8005f9a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005f9e:	4640      	mov	r0, r8
 8005fa0:	4649      	mov	r1, r9
 8005fa2:	f7fa fdc3 	bl	8000b2c <__aeabi_dcmplt>
 8005fa6:	2800      	cmp	r0, #0
 8005fa8:	f040 8289 	bne.w	80064be <_dtoa_r+0x976>
 8005fac:	ec5b ab19 	vmov	sl, fp, d9
 8005fb0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	f2c0 8148 	blt.w	8006248 <_dtoa_r+0x700>
 8005fb8:	9a00      	ldr	r2, [sp, #0]
 8005fba:	2a0e      	cmp	r2, #14
 8005fbc:	f300 8144 	bgt.w	8006248 <_dtoa_r+0x700>
 8005fc0:	4b67      	ldr	r3, [pc, #412]	; (8006160 <_dtoa_r+0x618>)
 8005fc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005fc6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005fca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	f280 80d5 	bge.w	800617c <_dtoa_r+0x634>
 8005fd2:	9b03      	ldr	r3, [sp, #12]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	f300 80d1 	bgt.w	800617c <_dtoa_r+0x634>
 8005fda:	f040 826f 	bne.w	80064bc <_dtoa_r+0x974>
 8005fde:	4b65      	ldr	r3, [pc, #404]	; (8006174 <_dtoa_r+0x62c>)
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	4640      	mov	r0, r8
 8005fe4:	4649      	mov	r1, r9
 8005fe6:	f7fa fb2f 	bl	8000648 <__aeabi_dmul>
 8005fea:	4652      	mov	r2, sl
 8005fec:	465b      	mov	r3, fp
 8005fee:	f7fa fdb1 	bl	8000b54 <__aeabi_dcmpge>
 8005ff2:	9e03      	ldr	r6, [sp, #12]
 8005ff4:	4637      	mov	r7, r6
 8005ff6:	2800      	cmp	r0, #0
 8005ff8:	f040 8245 	bne.w	8006486 <_dtoa_r+0x93e>
 8005ffc:	9d01      	ldr	r5, [sp, #4]
 8005ffe:	2331      	movs	r3, #49	; 0x31
 8006000:	f805 3b01 	strb.w	r3, [r5], #1
 8006004:	9b00      	ldr	r3, [sp, #0]
 8006006:	3301      	adds	r3, #1
 8006008:	9300      	str	r3, [sp, #0]
 800600a:	e240      	b.n	800648e <_dtoa_r+0x946>
 800600c:	07f2      	lsls	r2, r6, #31
 800600e:	d505      	bpl.n	800601c <_dtoa_r+0x4d4>
 8006010:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006014:	f7fa fb18 	bl	8000648 <__aeabi_dmul>
 8006018:	3501      	adds	r5, #1
 800601a:	2301      	movs	r3, #1
 800601c:	1076      	asrs	r6, r6, #1
 800601e:	3708      	adds	r7, #8
 8006020:	e777      	b.n	8005f12 <_dtoa_r+0x3ca>
 8006022:	2502      	movs	r5, #2
 8006024:	e779      	b.n	8005f1a <_dtoa_r+0x3d2>
 8006026:	9f00      	ldr	r7, [sp, #0]
 8006028:	9e03      	ldr	r6, [sp, #12]
 800602a:	e794      	b.n	8005f56 <_dtoa_r+0x40e>
 800602c:	9901      	ldr	r1, [sp, #4]
 800602e:	4b4c      	ldr	r3, [pc, #304]	; (8006160 <_dtoa_r+0x618>)
 8006030:	4431      	add	r1, r6
 8006032:	910d      	str	r1, [sp, #52]	; 0x34
 8006034:	9908      	ldr	r1, [sp, #32]
 8006036:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800603a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800603e:	2900      	cmp	r1, #0
 8006040:	d043      	beq.n	80060ca <_dtoa_r+0x582>
 8006042:	494d      	ldr	r1, [pc, #308]	; (8006178 <_dtoa_r+0x630>)
 8006044:	2000      	movs	r0, #0
 8006046:	f7fa fc29 	bl	800089c <__aeabi_ddiv>
 800604a:	4652      	mov	r2, sl
 800604c:	465b      	mov	r3, fp
 800604e:	f7fa f943 	bl	80002d8 <__aeabi_dsub>
 8006052:	9d01      	ldr	r5, [sp, #4]
 8006054:	4682      	mov	sl, r0
 8006056:	468b      	mov	fp, r1
 8006058:	4649      	mov	r1, r9
 800605a:	4640      	mov	r0, r8
 800605c:	f7fa fda4 	bl	8000ba8 <__aeabi_d2iz>
 8006060:	4606      	mov	r6, r0
 8006062:	f7fa fa87 	bl	8000574 <__aeabi_i2d>
 8006066:	4602      	mov	r2, r0
 8006068:	460b      	mov	r3, r1
 800606a:	4640      	mov	r0, r8
 800606c:	4649      	mov	r1, r9
 800606e:	f7fa f933 	bl	80002d8 <__aeabi_dsub>
 8006072:	3630      	adds	r6, #48	; 0x30
 8006074:	f805 6b01 	strb.w	r6, [r5], #1
 8006078:	4652      	mov	r2, sl
 800607a:	465b      	mov	r3, fp
 800607c:	4680      	mov	r8, r0
 800607e:	4689      	mov	r9, r1
 8006080:	f7fa fd54 	bl	8000b2c <__aeabi_dcmplt>
 8006084:	2800      	cmp	r0, #0
 8006086:	d163      	bne.n	8006150 <_dtoa_r+0x608>
 8006088:	4642      	mov	r2, r8
 800608a:	464b      	mov	r3, r9
 800608c:	4936      	ldr	r1, [pc, #216]	; (8006168 <_dtoa_r+0x620>)
 800608e:	2000      	movs	r0, #0
 8006090:	f7fa f922 	bl	80002d8 <__aeabi_dsub>
 8006094:	4652      	mov	r2, sl
 8006096:	465b      	mov	r3, fp
 8006098:	f7fa fd48 	bl	8000b2c <__aeabi_dcmplt>
 800609c:	2800      	cmp	r0, #0
 800609e:	f040 80b5 	bne.w	800620c <_dtoa_r+0x6c4>
 80060a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060a4:	429d      	cmp	r5, r3
 80060a6:	d081      	beq.n	8005fac <_dtoa_r+0x464>
 80060a8:	4b30      	ldr	r3, [pc, #192]	; (800616c <_dtoa_r+0x624>)
 80060aa:	2200      	movs	r2, #0
 80060ac:	4650      	mov	r0, sl
 80060ae:	4659      	mov	r1, fp
 80060b0:	f7fa faca 	bl	8000648 <__aeabi_dmul>
 80060b4:	4b2d      	ldr	r3, [pc, #180]	; (800616c <_dtoa_r+0x624>)
 80060b6:	4682      	mov	sl, r0
 80060b8:	468b      	mov	fp, r1
 80060ba:	4640      	mov	r0, r8
 80060bc:	4649      	mov	r1, r9
 80060be:	2200      	movs	r2, #0
 80060c0:	f7fa fac2 	bl	8000648 <__aeabi_dmul>
 80060c4:	4680      	mov	r8, r0
 80060c6:	4689      	mov	r9, r1
 80060c8:	e7c6      	b.n	8006058 <_dtoa_r+0x510>
 80060ca:	4650      	mov	r0, sl
 80060cc:	4659      	mov	r1, fp
 80060ce:	f7fa fabb 	bl	8000648 <__aeabi_dmul>
 80060d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060d4:	9d01      	ldr	r5, [sp, #4]
 80060d6:	930f      	str	r3, [sp, #60]	; 0x3c
 80060d8:	4682      	mov	sl, r0
 80060da:	468b      	mov	fp, r1
 80060dc:	4649      	mov	r1, r9
 80060de:	4640      	mov	r0, r8
 80060e0:	f7fa fd62 	bl	8000ba8 <__aeabi_d2iz>
 80060e4:	4606      	mov	r6, r0
 80060e6:	f7fa fa45 	bl	8000574 <__aeabi_i2d>
 80060ea:	3630      	adds	r6, #48	; 0x30
 80060ec:	4602      	mov	r2, r0
 80060ee:	460b      	mov	r3, r1
 80060f0:	4640      	mov	r0, r8
 80060f2:	4649      	mov	r1, r9
 80060f4:	f7fa f8f0 	bl	80002d8 <__aeabi_dsub>
 80060f8:	f805 6b01 	strb.w	r6, [r5], #1
 80060fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80060fe:	429d      	cmp	r5, r3
 8006100:	4680      	mov	r8, r0
 8006102:	4689      	mov	r9, r1
 8006104:	f04f 0200 	mov.w	r2, #0
 8006108:	d124      	bne.n	8006154 <_dtoa_r+0x60c>
 800610a:	4b1b      	ldr	r3, [pc, #108]	; (8006178 <_dtoa_r+0x630>)
 800610c:	4650      	mov	r0, sl
 800610e:	4659      	mov	r1, fp
 8006110:	f7fa f8e4 	bl	80002dc <__adddf3>
 8006114:	4602      	mov	r2, r0
 8006116:	460b      	mov	r3, r1
 8006118:	4640      	mov	r0, r8
 800611a:	4649      	mov	r1, r9
 800611c:	f7fa fd24 	bl	8000b68 <__aeabi_dcmpgt>
 8006120:	2800      	cmp	r0, #0
 8006122:	d173      	bne.n	800620c <_dtoa_r+0x6c4>
 8006124:	4652      	mov	r2, sl
 8006126:	465b      	mov	r3, fp
 8006128:	4913      	ldr	r1, [pc, #76]	; (8006178 <_dtoa_r+0x630>)
 800612a:	2000      	movs	r0, #0
 800612c:	f7fa f8d4 	bl	80002d8 <__aeabi_dsub>
 8006130:	4602      	mov	r2, r0
 8006132:	460b      	mov	r3, r1
 8006134:	4640      	mov	r0, r8
 8006136:	4649      	mov	r1, r9
 8006138:	f7fa fcf8 	bl	8000b2c <__aeabi_dcmplt>
 800613c:	2800      	cmp	r0, #0
 800613e:	f43f af35 	beq.w	8005fac <_dtoa_r+0x464>
 8006142:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006144:	1e6b      	subs	r3, r5, #1
 8006146:	930f      	str	r3, [sp, #60]	; 0x3c
 8006148:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800614c:	2b30      	cmp	r3, #48	; 0x30
 800614e:	d0f8      	beq.n	8006142 <_dtoa_r+0x5fa>
 8006150:	9700      	str	r7, [sp, #0]
 8006152:	e049      	b.n	80061e8 <_dtoa_r+0x6a0>
 8006154:	4b05      	ldr	r3, [pc, #20]	; (800616c <_dtoa_r+0x624>)
 8006156:	f7fa fa77 	bl	8000648 <__aeabi_dmul>
 800615a:	4680      	mov	r8, r0
 800615c:	4689      	mov	r9, r1
 800615e:	e7bd      	b.n	80060dc <_dtoa_r+0x594>
 8006160:	08007d30 	.word	0x08007d30
 8006164:	08007d08 	.word	0x08007d08
 8006168:	3ff00000 	.word	0x3ff00000
 800616c:	40240000 	.word	0x40240000
 8006170:	401c0000 	.word	0x401c0000
 8006174:	40140000 	.word	0x40140000
 8006178:	3fe00000 	.word	0x3fe00000
 800617c:	9d01      	ldr	r5, [sp, #4]
 800617e:	4656      	mov	r6, sl
 8006180:	465f      	mov	r7, fp
 8006182:	4642      	mov	r2, r8
 8006184:	464b      	mov	r3, r9
 8006186:	4630      	mov	r0, r6
 8006188:	4639      	mov	r1, r7
 800618a:	f7fa fb87 	bl	800089c <__aeabi_ddiv>
 800618e:	f7fa fd0b 	bl	8000ba8 <__aeabi_d2iz>
 8006192:	4682      	mov	sl, r0
 8006194:	f7fa f9ee 	bl	8000574 <__aeabi_i2d>
 8006198:	4642      	mov	r2, r8
 800619a:	464b      	mov	r3, r9
 800619c:	f7fa fa54 	bl	8000648 <__aeabi_dmul>
 80061a0:	4602      	mov	r2, r0
 80061a2:	460b      	mov	r3, r1
 80061a4:	4630      	mov	r0, r6
 80061a6:	4639      	mov	r1, r7
 80061a8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80061ac:	f7fa f894 	bl	80002d8 <__aeabi_dsub>
 80061b0:	f805 6b01 	strb.w	r6, [r5], #1
 80061b4:	9e01      	ldr	r6, [sp, #4]
 80061b6:	9f03      	ldr	r7, [sp, #12]
 80061b8:	1bae      	subs	r6, r5, r6
 80061ba:	42b7      	cmp	r7, r6
 80061bc:	4602      	mov	r2, r0
 80061be:	460b      	mov	r3, r1
 80061c0:	d135      	bne.n	800622e <_dtoa_r+0x6e6>
 80061c2:	f7fa f88b 	bl	80002dc <__adddf3>
 80061c6:	4642      	mov	r2, r8
 80061c8:	464b      	mov	r3, r9
 80061ca:	4606      	mov	r6, r0
 80061cc:	460f      	mov	r7, r1
 80061ce:	f7fa fccb 	bl	8000b68 <__aeabi_dcmpgt>
 80061d2:	b9d0      	cbnz	r0, 800620a <_dtoa_r+0x6c2>
 80061d4:	4642      	mov	r2, r8
 80061d6:	464b      	mov	r3, r9
 80061d8:	4630      	mov	r0, r6
 80061da:	4639      	mov	r1, r7
 80061dc:	f7fa fc9c 	bl	8000b18 <__aeabi_dcmpeq>
 80061e0:	b110      	cbz	r0, 80061e8 <_dtoa_r+0x6a0>
 80061e2:	f01a 0f01 	tst.w	sl, #1
 80061e6:	d110      	bne.n	800620a <_dtoa_r+0x6c2>
 80061e8:	4620      	mov	r0, r4
 80061ea:	ee18 1a10 	vmov	r1, s16
 80061ee:	f000 fd05 	bl	8006bfc <_Bfree>
 80061f2:	2300      	movs	r3, #0
 80061f4:	9800      	ldr	r0, [sp, #0]
 80061f6:	702b      	strb	r3, [r5, #0]
 80061f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80061fa:	3001      	adds	r0, #1
 80061fc:	6018      	str	r0, [r3, #0]
 80061fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006200:	2b00      	cmp	r3, #0
 8006202:	f43f acf1 	beq.w	8005be8 <_dtoa_r+0xa0>
 8006206:	601d      	str	r5, [r3, #0]
 8006208:	e4ee      	b.n	8005be8 <_dtoa_r+0xa0>
 800620a:	9f00      	ldr	r7, [sp, #0]
 800620c:	462b      	mov	r3, r5
 800620e:	461d      	mov	r5, r3
 8006210:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006214:	2a39      	cmp	r2, #57	; 0x39
 8006216:	d106      	bne.n	8006226 <_dtoa_r+0x6de>
 8006218:	9a01      	ldr	r2, [sp, #4]
 800621a:	429a      	cmp	r2, r3
 800621c:	d1f7      	bne.n	800620e <_dtoa_r+0x6c6>
 800621e:	9901      	ldr	r1, [sp, #4]
 8006220:	2230      	movs	r2, #48	; 0x30
 8006222:	3701      	adds	r7, #1
 8006224:	700a      	strb	r2, [r1, #0]
 8006226:	781a      	ldrb	r2, [r3, #0]
 8006228:	3201      	adds	r2, #1
 800622a:	701a      	strb	r2, [r3, #0]
 800622c:	e790      	b.n	8006150 <_dtoa_r+0x608>
 800622e:	4ba6      	ldr	r3, [pc, #664]	; (80064c8 <_dtoa_r+0x980>)
 8006230:	2200      	movs	r2, #0
 8006232:	f7fa fa09 	bl	8000648 <__aeabi_dmul>
 8006236:	2200      	movs	r2, #0
 8006238:	2300      	movs	r3, #0
 800623a:	4606      	mov	r6, r0
 800623c:	460f      	mov	r7, r1
 800623e:	f7fa fc6b 	bl	8000b18 <__aeabi_dcmpeq>
 8006242:	2800      	cmp	r0, #0
 8006244:	d09d      	beq.n	8006182 <_dtoa_r+0x63a>
 8006246:	e7cf      	b.n	80061e8 <_dtoa_r+0x6a0>
 8006248:	9a08      	ldr	r2, [sp, #32]
 800624a:	2a00      	cmp	r2, #0
 800624c:	f000 80d7 	beq.w	80063fe <_dtoa_r+0x8b6>
 8006250:	9a06      	ldr	r2, [sp, #24]
 8006252:	2a01      	cmp	r2, #1
 8006254:	f300 80ba 	bgt.w	80063cc <_dtoa_r+0x884>
 8006258:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800625a:	2a00      	cmp	r2, #0
 800625c:	f000 80b2 	beq.w	80063c4 <_dtoa_r+0x87c>
 8006260:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006264:	9e07      	ldr	r6, [sp, #28]
 8006266:	9d04      	ldr	r5, [sp, #16]
 8006268:	9a04      	ldr	r2, [sp, #16]
 800626a:	441a      	add	r2, r3
 800626c:	9204      	str	r2, [sp, #16]
 800626e:	9a05      	ldr	r2, [sp, #20]
 8006270:	2101      	movs	r1, #1
 8006272:	441a      	add	r2, r3
 8006274:	4620      	mov	r0, r4
 8006276:	9205      	str	r2, [sp, #20]
 8006278:	f000 fd78 	bl	8006d6c <__i2b>
 800627c:	4607      	mov	r7, r0
 800627e:	2d00      	cmp	r5, #0
 8006280:	dd0c      	ble.n	800629c <_dtoa_r+0x754>
 8006282:	9b05      	ldr	r3, [sp, #20]
 8006284:	2b00      	cmp	r3, #0
 8006286:	dd09      	ble.n	800629c <_dtoa_r+0x754>
 8006288:	42ab      	cmp	r3, r5
 800628a:	9a04      	ldr	r2, [sp, #16]
 800628c:	bfa8      	it	ge
 800628e:	462b      	movge	r3, r5
 8006290:	1ad2      	subs	r2, r2, r3
 8006292:	9204      	str	r2, [sp, #16]
 8006294:	9a05      	ldr	r2, [sp, #20]
 8006296:	1aed      	subs	r5, r5, r3
 8006298:	1ad3      	subs	r3, r2, r3
 800629a:	9305      	str	r3, [sp, #20]
 800629c:	9b07      	ldr	r3, [sp, #28]
 800629e:	b31b      	cbz	r3, 80062e8 <_dtoa_r+0x7a0>
 80062a0:	9b08      	ldr	r3, [sp, #32]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	f000 80af 	beq.w	8006406 <_dtoa_r+0x8be>
 80062a8:	2e00      	cmp	r6, #0
 80062aa:	dd13      	ble.n	80062d4 <_dtoa_r+0x78c>
 80062ac:	4639      	mov	r1, r7
 80062ae:	4632      	mov	r2, r6
 80062b0:	4620      	mov	r0, r4
 80062b2:	f000 fe1b 	bl	8006eec <__pow5mult>
 80062b6:	ee18 2a10 	vmov	r2, s16
 80062ba:	4601      	mov	r1, r0
 80062bc:	4607      	mov	r7, r0
 80062be:	4620      	mov	r0, r4
 80062c0:	f000 fd6a 	bl	8006d98 <__multiply>
 80062c4:	ee18 1a10 	vmov	r1, s16
 80062c8:	4680      	mov	r8, r0
 80062ca:	4620      	mov	r0, r4
 80062cc:	f000 fc96 	bl	8006bfc <_Bfree>
 80062d0:	ee08 8a10 	vmov	s16, r8
 80062d4:	9b07      	ldr	r3, [sp, #28]
 80062d6:	1b9a      	subs	r2, r3, r6
 80062d8:	d006      	beq.n	80062e8 <_dtoa_r+0x7a0>
 80062da:	ee18 1a10 	vmov	r1, s16
 80062de:	4620      	mov	r0, r4
 80062e0:	f000 fe04 	bl	8006eec <__pow5mult>
 80062e4:	ee08 0a10 	vmov	s16, r0
 80062e8:	2101      	movs	r1, #1
 80062ea:	4620      	mov	r0, r4
 80062ec:	f000 fd3e 	bl	8006d6c <__i2b>
 80062f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	4606      	mov	r6, r0
 80062f6:	f340 8088 	ble.w	800640a <_dtoa_r+0x8c2>
 80062fa:	461a      	mov	r2, r3
 80062fc:	4601      	mov	r1, r0
 80062fe:	4620      	mov	r0, r4
 8006300:	f000 fdf4 	bl	8006eec <__pow5mult>
 8006304:	9b06      	ldr	r3, [sp, #24]
 8006306:	2b01      	cmp	r3, #1
 8006308:	4606      	mov	r6, r0
 800630a:	f340 8081 	ble.w	8006410 <_dtoa_r+0x8c8>
 800630e:	f04f 0800 	mov.w	r8, #0
 8006312:	6933      	ldr	r3, [r6, #16]
 8006314:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006318:	6918      	ldr	r0, [r3, #16]
 800631a:	f000 fcd7 	bl	8006ccc <__hi0bits>
 800631e:	f1c0 0020 	rsb	r0, r0, #32
 8006322:	9b05      	ldr	r3, [sp, #20]
 8006324:	4418      	add	r0, r3
 8006326:	f010 001f 	ands.w	r0, r0, #31
 800632a:	f000 8092 	beq.w	8006452 <_dtoa_r+0x90a>
 800632e:	f1c0 0320 	rsb	r3, r0, #32
 8006332:	2b04      	cmp	r3, #4
 8006334:	f340 808a 	ble.w	800644c <_dtoa_r+0x904>
 8006338:	f1c0 001c 	rsb	r0, r0, #28
 800633c:	9b04      	ldr	r3, [sp, #16]
 800633e:	4403      	add	r3, r0
 8006340:	9304      	str	r3, [sp, #16]
 8006342:	9b05      	ldr	r3, [sp, #20]
 8006344:	4403      	add	r3, r0
 8006346:	4405      	add	r5, r0
 8006348:	9305      	str	r3, [sp, #20]
 800634a:	9b04      	ldr	r3, [sp, #16]
 800634c:	2b00      	cmp	r3, #0
 800634e:	dd07      	ble.n	8006360 <_dtoa_r+0x818>
 8006350:	ee18 1a10 	vmov	r1, s16
 8006354:	461a      	mov	r2, r3
 8006356:	4620      	mov	r0, r4
 8006358:	f000 fe22 	bl	8006fa0 <__lshift>
 800635c:	ee08 0a10 	vmov	s16, r0
 8006360:	9b05      	ldr	r3, [sp, #20]
 8006362:	2b00      	cmp	r3, #0
 8006364:	dd05      	ble.n	8006372 <_dtoa_r+0x82a>
 8006366:	4631      	mov	r1, r6
 8006368:	461a      	mov	r2, r3
 800636a:	4620      	mov	r0, r4
 800636c:	f000 fe18 	bl	8006fa0 <__lshift>
 8006370:	4606      	mov	r6, r0
 8006372:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006374:	2b00      	cmp	r3, #0
 8006376:	d06e      	beq.n	8006456 <_dtoa_r+0x90e>
 8006378:	ee18 0a10 	vmov	r0, s16
 800637c:	4631      	mov	r1, r6
 800637e:	f000 fe7f 	bl	8007080 <__mcmp>
 8006382:	2800      	cmp	r0, #0
 8006384:	da67      	bge.n	8006456 <_dtoa_r+0x90e>
 8006386:	9b00      	ldr	r3, [sp, #0]
 8006388:	3b01      	subs	r3, #1
 800638a:	ee18 1a10 	vmov	r1, s16
 800638e:	9300      	str	r3, [sp, #0]
 8006390:	220a      	movs	r2, #10
 8006392:	2300      	movs	r3, #0
 8006394:	4620      	mov	r0, r4
 8006396:	f000 fc53 	bl	8006c40 <__multadd>
 800639a:	9b08      	ldr	r3, [sp, #32]
 800639c:	ee08 0a10 	vmov	s16, r0
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	f000 81b1 	beq.w	8006708 <_dtoa_r+0xbc0>
 80063a6:	2300      	movs	r3, #0
 80063a8:	4639      	mov	r1, r7
 80063aa:	220a      	movs	r2, #10
 80063ac:	4620      	mov	r0, r4
 80063ae:	f000 fc47 	bl	8006c40 <__multadd>
 80063b2:	9b02      	ldr	r3, [sp, #8]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	4607      	mov	r7, r0
 80063b8:	f300 808e 	bgt.w	80064d8 <_dtoa_r+0x990>
 80063bc:	9b06      	ldr	r3, [sp, #24]
 80063be:	2b02      	cmp	r3, #2
 80063c0:	dc51      	bgt.n	8006466 <_dtoa_r+0x91e>
 80063c2:	e089      	b.n	80064d8 <_dtoa_r+0x990>
 80063c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80063c6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80063ca:	e74b      	b.n	8006264 <_dtoa_r+0x71c>
 80063cc:	9b03      	ldr	r3, [sp, #12]
 80063ce:	1e5e      	subs	r6, r3, #1
 80063d0:	9b07      	ldr	r3, [sp, #28]
 80063d2:	42b3      	cmp	r3, r6
 80063d4:	bfbf      	itttt	lt
 80063d6:	9b07      	ldrlt	r3, [sp, #28]
 80063d8:	9607      	strlt	r6, [sp, #28]
 80063da:	1af2      	sublt	r2, r6, r3
 80063dc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80063de:	bfb6      	itet	lt
 80063e0:	189b      	addlt	r3, r3, r2
 80063e2:	1b9e      	subge	r6, r3, r6
 80063e4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80063e6:	9b03      	ldr	r3, [sp, #12]
 80063e8:	bfb8      	it	lt
 80063ea:	2600      	movlt	r6, #0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	bfb7      	itett	lt
 80063f0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80063f4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80063f8:	1a9d      	sublt	r5, r3, r2
 80063fa:	2300      	movlt	r3, #0
 80063fc:	e734      	b.n	8006268 <_dtoa_r+0x720>
 80063fe:	9e07      	ldr	r6, [sp, #28]
 8006400:	9d04      	ldr	r5, [sp, #16]
 8006402:	9f08      	ldr	r7, [sp, #32]
 8006404:	e73b      	b.n	800627e <_dtoa_r+0x736>
 8006406:	9a07      	ldr	r2, [sp, #28]
 8006408:	e767      	b.n	80062da <_dtoa_r+0x792>
 800640a:	9b06      	ldr	r3, [sp, #24]
 800640c:	2b01      	cmp	r3, #1
 800640e:	dc18      	bgt.n	8006442 <_dtoa_r+0x8fa>
 8006410:	f1ba 0f00 	cmp.w	sl, #0
 8006414:	d115      	bne.n	8006442 <_dtoa_r+0x8fa>
 8006416:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800641a:	b993      	cbnz	r3, 8006442 <_dtoa_r+0x8fa>
 800641c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006420:	0d1b      	lsrs	r3, r3, #20
 8006422:	051b      	lsls	r3, r3, #20
 8006424:	b183      	cbz	r3, 8006448 <_dtoa_r+0x900>
 8006426:	9b04      	ldr	r3, [sp, #16]
 8006428:	3301      	adds	r3, #1
 800642a:	9304      	str	r3, [sp, #16]
 800642c:	9b05      	ldr	r3, [sp, #20]
 800642e:	3301      	adds	r3, #1
 8006430:	9305      	str	r3, [sp, #20]
 8006432:	f04f 0801 	mov.w	r8, #1
 8006436:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006438:	2b00      	cmp	r3, #0
 800643a:	f47f af6a 	bne.w	8006312 <_dtoa_r+0x7ca>
 800643e:	2001      	movs	r0, #1
 8006440:	e76f      	b.n	8006322 <_dtoa_r+0x7da>
 8006442:	f04f 0800 	mov.w	r8, #0
 8006446:	e7f6      	b.n	8006436 <_dtoa_r+0x8ee>
 8006448:	4698      	mov	r8, r3
 800644a:	e7f4      	b.n	8006436 <_dtoa_r+0x8ee>
 800644c:	f43f af7d 	beq.w	800634a <_dtoa_r+0x802>
 8006450:	4618      	mov	r0, r3
 8006452:	301c      	adds	r0, #28
 8006454:	e772      	b.n	800633c <_dtoa_r+0x7f4>
 8006456:	9b03      	ldr	r3, [sp, #12]
 8006458:	2b00      	cmp	r3, #0
 800645a:	dc37      	bgt.n	80064cc <_dtoa_r+0x984>
 800645c:	9b06      	ldr	r3, [sp, #24]
 800645e:	2b02      	cmp	r3, #2
 8006460:	dd34      	ble.n	80064cc <_dtoa_r+0x984>
 8006462:	9b03      	ldr	r3, [sp, #12]
 8006464:	9302      	str	r3, [sp, #8]
 8006466:	9b02      	ldr	r3, [sp, #8]
 8006468:	b96b      	cbnz	r3, 8006486 <_dtoa_r+0x93e>
 800646a:	4631      	mov	r1, r6
 800646c:	2205      	movs	r2, #5
 800646e:	4620      	mov	r0, r4
 8006470:	f000 fbe6 	bl	8006c40 <__multadd>
 8006474:	4601      	mov	r1, r0
 8006476:	4606      	mov	r6, r0
 8006478:	ee18 0a10 	vmov	r0, s16
 800647c:	f000 fe00 	bl	8007080 <__mcmp>
 8006480:	2800      	cmp	r0, #0
 8006482:	f73f adbb 	bgt.w	8005ffc <_dtoa_r+0x4b4>
 8006486:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006488:	9d01      	ldr	r5, [sp, #4]
 800648a:	43db      	mvns	r3, r3
 800648c:	9300      	str	r3, [sp, #0]
 800648e:	f04f 0800 	mov.w	r8, #0
 8006492:	4631      	mov	r1, r6
 8006494:	4620      	mov	r0, r4
 8006496:	f000 fbb1 	bl	8006bfc <_Bfree>
 800649a:	2f00      	cmp	r7, #0
 800649c:	f43f aea4 	beq.w	80061e8 <_dtoa_r+0x6a0>
 80064a0:	f1b8 0f00 	cmp.w	r8, #0
 80064a4:	d005      	beq.n	80064b2 <_dtoa_r+0x96a>
 80064a6:	45b8      	cmp	r8, r7
 80064a8:	d003      	beq.n	80064b2 <_dtoa_r+0x96a>
 80064aa:	4641      	mov	r1, r8
 80064ac:	4620      	mov	r0, r4
 80064ae:	f000 fba5 	bl	8006bfc <_Bfree>
 80064b2:	4639      	mov	r1, r7
 80064b4:	4620      	mov	r0, r4
 80064b6:	f000 fba1 	bl	8006bfc <_Bfree>
 80064ba:	e695      	b.n	80061e8 <_dtoa_r+0x6a0>
 80064bc:	2600      	movs	r6, #0
 80064be:	4637      	mov	r7, r6
 80064c0:	e7e1      	b.n	8006486 <_dtoa_r+0x93e>
 80064c2:	9700      	str	r7, [sp, #0]
 80064c4:	4637      	mov	r7, r6
 80064c6:	e599      	b.n	8005ffc <_dtoa_r+0x4b4>
 80064c8:	40240000 	.word	0x40240000
 80064cc:	9b08      	ldr	r3, [sp, #32]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	f000 80ca 	beq.w	8006668 <_dtoa_r+0xb20>
 80064d4:	9b03      	ldr	r3, [sp, #12]
 80064d6:	9302      	str	r3, [sp, #8]
 80064d8:	2d00      	cmp	r5, #0
 80064da:	dd05      	ble.n	80064e8 <_dtoa_r+0x9a0>
 80064dc:	4639      	mov	r1, r7
 80064de:	462a      	mov	r2, r5
 80064e0:	4620      	mov	r0, r4
 80064e2:	f000 fd5d 	bl	8006fa0 <__lshift>
 80064e6:	4607      	mov	r7, r0
 80064e8:	f1b8 0f00 	cmp.w	r8, #0
 80064ec:	d05b      	beq.n	80065a6 <_dtoa_r+0xa5e>
 80064ee:	6879      	ldr	r1, [r7, #4]
 80064f0:	4620      	mov	r0, r4
 80064f2:	f000 fb43 	bl	8006b7c <_Balloc>
 80064f6:	4605      	mov	r5, r0
 80064f8:	b928      	cbnz	r0, 8006506 <_dtoa_r+0x9be>
 80064fa:	4b87      	ldr	r3, [pc, #540]	; (8006718 <_dtoa_r+0xbd0>)
 80064fc:	4602      	mov	r2, r0
 80064fe:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006502:	f7ff bb3b 	b.w	8005b7c <_dtoa_r+0x34>
 8006506:	693a      	ldr	r2, [r7, #16]
 8006508:	3202      	adds	r2, #2
 800650a:	0092      	lsls	r2, r2, #2
 800650c:	f107 010c 	add.w	r1, r7, #12
 8006510:	300c      	adds	r0, #12
 8006512:	f7fe fcbd 	bl	8004e90 <memcpy>
 8006516:	2201      	movs	r2, #1
 8006518:	4629      	mov	r1, r5
 800651a:	4620      	mov	r0, r4
 800651c:	f000 fd40 	bl	8006fa0 <__lshift>
 8006520:	9b01      	ldr	r3, [sp, #4]
 8006522:	f103 0901 	add.w	r9, r3, #1
 8006526:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800652a:	4413      	add	r3, r2
 800652c:	9305      	str	r3, [sp, #20]
 800652e:	f00a 0301 	and.w	r3, sl, #1
 8006532:	46b8      	mov	r8, r7
 8006534:	9304      	str	r3, [sp, #16]
 8006536:	4607      	mov	r7, r0
 8006538:	4631      	mov	r1, r6
 800653a:	ee18 0a10 	vmov	r0, s16
 800653e:	f7ff fa75 	bl	8005a2c <quorem>
 8006542:	4641      	mov	r1, r8
 8006544:	9002      	str	r0, [sp, #8]
 8006546:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800654a:	ee18 0a10 	vmov	r0, s16
 800654e:	f000 fd97 	bl	8007080 <__mcmp>
 8006552:	463a      	mov	r2, r7
 8006554:	9003      	str	r0, [sp, #12]
 8006556:	4631      	mov	r1, r6
 8006558:	4620      	mov	r0, r4
 800655a:	f000 fdad 	bl	80070b8 <__mdiff>
 800655e:	68c2      	ldr	r2, [r0, #12]
 8006560:	f109 3bff 	add.w	fp, r9, #4294967295
 8006564:	4605      	mov	r5, r0
 8006566:	bb02      	cbnz	r2, 80065aa <_dtoa_r+0xa62>
 8006568:	4601      	mov	r1, r0
 800656a:	ee18 0a10 	vmov	r0, s16
 800656e:	f000 fd87 	bl	8007080 <__mcmp>
 8006572:	4602      	mov	r2, r0
 8006574:	4629      	mov	r1, r5
 8006576:	4620      	mov	r0, r4
 8006578:	9207      	str	r2, [sp, #28]
 800657a:	f000 fb3f 	bl	8006bfc <_Bfree>
 800657e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006582:	ea43 0102 	orr.w	r1, r3, r2
 8006586:	9b04      	ldr	r3, [sp, #16]
 8006588:	430b      	orrs	r3, r1
 800658a:	464d      	mov	r5, r9
 800658c:	d10f      	bne.n	80065ae <_dtoa_r+0xa66>
 800658e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006592:	d02a      	beq.n	80065ea <_dtoa_r+0xaa2>
 8006594:	9b03      	ldr	r3, [sp, #12]
 8006596:	2b00      	cmp	r3, #0
 8006598:	dd02      	ble.n	80065a0 <_dtoa_r+0xa58>
 800659a:	9b02      	ldr	r3, [sp, #8]
 800659c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80065a0:	f88b a000 	strb.w	sl, [fp]
 80065a4:	e775      	b.n	8006492 <_dtoa_r+0x94a>
 80065a6:	4638      	mov	r0, r7
 80065a8:	e7ba      	b.n	8006520 <_dtoa_r+0x9d8>
 80065aa:	2201      	movs	r2, #1
 80065ac:	e7e2      	b.n	8006574 <_dtoa_r+0xa2c>
 80065ae:	9b03      	ldr	r3, [sp, #12]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	db04      	blt.n	80065be <_dtoa_r+0xa76>
 80065b4:	9906      	ldr	r1, [sp, #24]
 80065b6:	430b      	orrs	r3, r1
 80065b8:	9904      	ldr	r1, [sp, #16]
 80065ba:	430b      	orrs	r3, r1
 80065bc:	d122      	bne.n	8006604 <_dtoa_r+0xabc>
 80065be:	2a00      	cmp	r2, #0
 80065c0:	ddee      	ble.n	80065a0 <_dtoa_r+0xa58>
 80065c2:	ee18 1a10 	vmov	r1, s16
 80065c6:	2201      	movs	r2, #1
 80065c8:	4620      	mov	r0, r4
 80065ca:	f000 fce9 	bl	8006fa0 <__lshift>
 80065ce:	4631      	mov	r1, r6
 80065d0:	ee08 0a10 	vmov	s16, r0
 80065d4:	f000 fd54 	bl	8007080 <__mcmp>
 80065d8:	2800      	cmp	r0, #0
 80065da:	dc03      	bgt.n	80065e4 <_dtoa_r+0xa9c>
 80065dc:	d1e0      	bne.n	80065a0 <_dtoa_r+0xa58>
 80065de:	f01a 0f01 	tst.w	sl, #1
 80065e2:	d0dd      	beq.n	80065a0 <_dtoa_r+0xa58>
 80065e4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80065e8:	d1d7      	bne.n	800659a <_dtoa_r+0xa52>
 80065ea:	2339      	movs	r3, #57	; 0x39
 80065ec:	f88b 3000 	strb.w	r3, [fp]
 80065f0:	462b      	mov	r3, r5
 80065f2:	461d      	mov	r5, r3
 80065f4:	3b01      	subs	r3, #1
 80065f6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80065fa:	2a39      	cmp	r2, #57	; 0x39
 80065fc:	d071      	beq.n	80066e2 <_dtoa_r+0xb9a>
 80065fe:	3201      	adds	r2, #1
 8006600:	701a      	strb	r2, [r3, #0]
 8006602:	e746      	b.n	8006492 <_dtoa_r+0x94a>
 8006604:	2a00      	cmp	r2, #0
 8006606:	dd07      	ble.n	8006618 <_dtoa_r+0xad0>
 8006608:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800660c:	d0ed      	beq.n	80065ea <_dtoa_r+0xaa2>
 800660e:	f10a 0301 	add.w	r3, sl, #1
 8006612:	f88b 3000 	strb.w	r3, [fp]
 8006616:	e73c      	b.n	8006492 <_dtoa_r+0x94a>
 8006618:	9b05      	ldr	r3, [sp, #20]
 800661a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800661e:	4599      	cmp	r9, r3
 8006620:	d047      	beq.n	80066b2 <_dtoa_r+0xb6a>
 8006622:	ee18 1a10 	vmov	r1, s16
 8006626:	2300      	movs	r3, #0
 8006628:	220a      	movs	r2, #10
 800662a:	4620      	mov	r0, r4
 800662c:	f000 fb08 	bl	8006c40 <__multadd>
 8006630:	45b8      	cmp	r8, r7
 8006632:	ee08 0a10 	vmov	s16, r0
 8006636:	f04f 0300 	mov.w	r3, #0
 800663a:	f04f 020a 	mov.w	r2, #10
 800663e:	4641      	mov	r1, r8
 8006640:	4620      	mov	r0, r4
 8006642:	d106      	bne.n	8006652 <_dtoa_r+0xb0a>
 8006644:	f000 fafc 	bl	8006c40 <__multadd>
 8006648:	4680      	mov	r8, r0
 800664a:	4607      	mov	r7, r0
 800664c:	f109 0901 	add.w	r9, r9, #1
 8006650:	e772      	b.n	8006538 <_dtoa_r+0x9f0>
 8006652:	f000 faf5 	bl	8006c40 <__multadd>
 8006656:	4639      	mov	r1, r7
 8006658:	4680      	mov	r8, r0
 800665a:	2300      	movs	r3, #0
 800665c:	220a      	movs	r2, #10
 800665e:	4620      	mov	r0, r4
 8006660:	f000 faee 	bl	8006c40 <__multadd>
 8006664:	4607      	mov	r7, r0
 8006666:	e7f1      	b.n	800664c <_dtoa_r+0xb04>
 8006668:	9b03      	ldr	r3, [sp, #12]
 800666a:	9302      	str	r3, [sp, #8]
 800666c:	9d01      	ldr	r5, [sp, #4]
 800666e:	ee18 0a10 	vmov	r0, s16
 8006672:	4631      	mov	r1, r6
 8006674:	f7ff f9da 	bl	8005a2c <quorem>
 8006678:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800667c:	9b01      	ldr	r3, [sp, #4]
 800667e:	f805 ab01 	strb.w	sl, [r5], #1
 8006682:	1aea      	subs	r2, r5, r3
 8006684:	9b02      	ldr	r3, [sp, #8]
 8006686:	4293      	cmp	r3, r2
 8006688:	dd09      	ble.n	800669e <_dtoa_r+0xb56>
 800668a:	ee18 1a10 	vmov	r1, s16
 800668e:	2300      	movs	r3, #0
 8006690:	220a      	movs	r2, #10
 8006692:	4620      	mov	r0, r4
 8006694:	f000 fad4 	bl	8006c40 <__multadd>
 8006698:	ee08 0a10 	vmov	s16, r0
 800669c:	e7e7      	b.n	800666e <_dtoa_r+0xb26>
 800669e:	9b02      	ldr	r3, [sp, #8]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	bfc8      	it	gt
 80066a4:	461d      	movgt	r5, r3
 80066a6:	9b01      	ldr	r3, [sp, #4]
 80066a8:	bfd8      	it	le
 80066aa:	2501      	movle	r5, #1
 80066ac:	441d      	add	r5, r3
 80066ae:	f04f 0800 	mov.w	r8, #0
 80066b2:	ee18 1a10 	vmov	r1, s16
 80066b6:	2201      	movs	r2, #1
 80066b8:	4620      	mov	r0, r4
 80066ba:	f000 fc71 	bl	8006fa0 <__lshift>
 80066be:	4631      	mov	r1, r6
 80066c0:	ee08 0a10 	vmov	s16, r0
 80066c4:	f000 fcdc 	bl	8007080 <__mcmp>
 80066c8:	2800      	cmp	r0, #0
 80066ca:	dc91      	bgt.n	80065f0 <_dtoa_r+0xaa8>
 80066cc:	d102      	bne.n	80066d4 <_dtoa_r+0xb8c>
 80066ce:	f01a 0f01 	tst.w	sl, #1
 80066d2:	d18d      	bne.n	80065f0 <_dtoa_r+0xaa8>
 80066d4:	462b      	mov	r3, r5
 80066d6:	461d      	mov	r5, r3
 80066d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80066dc:	2a30      	cmp	r2, #48	; 0x30
 80066de:	d0fa      	beq.n	80066d6 <_dtoa_r+0xb8e>
 80066e0:	e6d7      	b.n	8006492 <_dtoa_r+0x94a>
 80066e2:	9a01      	ldr	r2, [sp, #4]
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d184      	bne.n	80065f2 <_dtoa_r+0xaaa>
 80066e8:	9b00      	ldr	r3, [sp, #0]
 80066ea:	3301      	adds	r3, #1
 80066ec:	9300      	str	r3, [sp, #0]
 80066ee:	2331      	movs	r3, #49	; 0x31
 80066f0:	7013      	strb	r3, [r2, #0]
 80066f2:	e6ce      	b.n	8006492 <_dtoa_r+0x94a>
 80066f4:	4b09      	ldr	r3, [pc, #36]	; (800671c <_dtoa_r+0xbd4>)
 80066f6:	f7ff ba95 	b.w	8005c24 <_dtoa_r+0xdc>
 80066fa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	f47f aa6e 	bne.w	8005bde <_dtoa_r+0x96>
 8006702:	4b07      	ldr	r3, [pc, #28]	; (8006720 <_dtoa_r+0xbd8>)
 8006704:	f7ff ba8e 	b.w	8005c24 <_dtoa_r+0xdc>
 8006708:	9b02      	ldr	r3, [sp, #8]
 800670a:	2b00      	cmp	r3, #0
 800670c:	dcae      	bgt.n	800666c <_dtoa_r+0xb24>
 800670e:	9b06      	ldr	r3, [sp, #24]
 8006710:	2b02      	cmp	r3, #2
 8006712:	f73f aea8 	bgt.w	8006466 <_dtoa_r+0x91e>
 8006716:	e7a9      	b.n	800666c <_dtoa_r+0xb24>
 8006718:	08007c3b 	.word	0x08007c3b
 800671c:	08007b98 	.word	0x08007b98
 8006720:	08007bbc 	.word	0x08007bbc

08006724 <__sflush_r>:
 8006724:	898a      	ldrh	r2, [r1, #12]
 8006726:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800672a:	4605      	mov	r5, r0
 800672c:	0710      	lsls	r0, r2, #28
 800672e:	460c      	mov	r4, r1
 8006730:	d458      	bmi.n	80067e4 <__sflush_r+0xc0>
 8006732:	684b      	ldr	r3, [r1, #4]
 8006734:	2b00      	cmp	r3, #0
 8006736:	dc05      	bgt.n	8006744 <__sflush_r+0x20>
 8006738:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800673a:	2b00      	cmp	r3, #0
 800673c:	dc02      	bgt.n	8006744 <__sflush_r+0x20>
 800673e:	2000      	movs	r0, #0
 8006740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006744:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006746:	2e00      	cmp	r6, #0
 8006748:	d0f9      	beq.n	800673e <__sflush_r+0x1a>
 800674a:	2300      	movs	r3, #0
 800674c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006750:	682f      	ldr	r7, [r5, #0]
 8006752:	602b      	str	r3, [r5, #0]
 8006754:	d032      	beq.n	80067bc <__sflush_r+0x98>
 8006756:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006758:	89a3      	ldrh	r3, [r4, #12]
 800675a:	075a      	lsls	r2, r3, #29
 800675c:	d505      	bpl.n	800676a <__sflush_r+0x46>
 800675e:	6863      	ldr	r3, [r4, #4]
 8006760:	1ac0      	subs	r0, r0, r3
 8006762:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006764:	b10b      	cbz	r3, 800676a <__sflush_r+0x46>
 8006766:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006768:	1ac0      	subs	r0, r0, r3
 800676a:	2300      	movs	r3, #0
 800676c:	4602      	mov	r2, r0
 800676e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006770:	6a21      	ldr	r1, [r4, #32]
 8006772:	4628      	mov	r0, r5
 8006774:	47b0      	blx	r6
 8006776:	1c43      	adds	r3, r0, #1
 8006778:	89a3      	ldrh	r3, [r4, #12]
 800677a:	d106      	bne.n	800678a <__sflush_r+0x66>
 800677c:	6829      	ldr	r1, [r5, #0]
 800677e:	291d      	cmp	r1, #29
 8006780:	d82c      	bhi.n	80067dc <__sflush_r+0xb8>
 8006782:	4a2a      	ldr	r2, [pc, #168]	; (800682c <__sflush_r+0x108>)
 8006784:	40ca      	lsrs	r2, r1
 8006786:	07d6      	lsls	r6, r2, #31
 8006788:	d528      	bpl.n	80067dc <__sflush_r+0xb8>
 800678a:	2200      	movs	r2, #0
 800678c:	6062      	str	r2, [r4, #4]
 800678e:	04d9      	lsls	r1, r3, #19
 8006790:	6922      	ldr	r2, [r4, #16]
 8006792:	6022      	str	r2, [r4, #0]
 8006794:	d504      	bpl.n	80067a0 <__sflush_r+0x7c>
 8006796:	1c42      	adds	r2, r0, #1
 8006798:	d101      	bne.n	800679e <__sflush_r+0x7a>
 800679a:	682b      	ldr	r3, [r5, #0]
 800679c:	b903      	cbnz	r3, 80067a0 <__sflush_r+0x7c>
 800679e:	6560      	str	r0, [r4, #84]	; 0x54
 80067a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80067a2:	602f      	str	r7, [r5, #0]
 80067a4:	2900      	cmp	r1, #0
 80067a6:	d0ca      	beq.n	800673e <__sflush_r+0x1a>
 80067a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80067ac:	4299      	cmp	r1, r3
 80067ae:	d002      	beq.n	80067b6 <__sflush_r+0x92>
 80067b0:	4628      	mov	r0, r5
 80067b2:	f000 fd7d 	bl	80072b0 <_free_r>
 80067b6:	2000      	movs	r0, #0
 80067b8:	6360      	str	r0, [r4, #52]	; 0x34
 80067ba:	e7c1      	b.n	8006740 <__sflush_r+0x1c>
 80067bc:	6a21      	ldr	r1, [r4, #32]
 80067be:	2301      	movs	r3, #1
 80067c0:	4628      	mov	r0, r5
 80067c2:	47b0      	blx	r6
 80067c4:	1c41      	adds	r1, r0, #1
 80067c6:	d1c7      	bne.n	8006758 <__sflush_r+0x34>
 80067c8:	682b      	ldr	r3, [r5, #0]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d0c4      	beq.n	8006758 <__sflush_r+0x34>
 80067ce:	2b1d      	cmp	r3, #29
 80067d0:	d001      	beq.n	80067d6 <__sflush_r+0xb2>
 80067d2:	2b16      	cmp	r3, #22
 80067d4:	d101      	bne.n	80067da <__sflush_r+0xb6>
 80067d6:	602f      	str	r7, [r5, #0]
 80067d8:	e7b1      	b.n	800673e <__sflush_r+0x1a>
 80067da:	89a3      	ldrh	r3, [r4, #12]
 80067dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067e0:	81a3      	strh	r3, [r4, #12]
 80067e2:	e7ad      	b.n	8006740 <__sflush_r+0x1c>
 80067e4:	690f      	ldr	r7, [r1, #16]
 80067e6:	2f00      	cmp	r7, #0
 80067e8:	d0a9      	beq.n	800673e <__sflush_r+0x1a>
 80067ea:	0793      	lsls	r3, r2, #30
 80067ec:	680e      	ldr	r6, [r1, #0]
 80067ee:	bf08      	it	eq
 80067f0:	694b      	ldreq	r3, [r1, #20]
 80067f2:	600f      	str	r7, [r1, #0]
 80067f4:	bf18      	it	ne
 80067f6:	2300      	movne	r3, #0
 80067f8:	eba6 0807 	sub.w	r8, r6, r7
 80067fc:	608b      	str	r3, [r1, #8]
 80067fe:	f1b8 0f00 	cmp.w	r8, #0
 8006802:	dd9c      	ble.n	800673e <__sflush_r+0x1a>
 8006804:	6a21      	ldr	r1, [r4, #32]
 8006806:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006808:	4643      	mov	r3, r8
 800680a:	463a      	mov	r2, r7
 800680c:	4628      	mov	r0, r5
 800680e:	47b0      	blx	r6
 8006810:	2800      	cmp	r0, #0
 8006812:	dc06      	bgt.n	8006822 <__sflush_r+0xfe>
 8006814:	89a3      	ldrh	r3, [r4, #12]
 8006816:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800681a:	81a3      	strh	r3, [r4, #12]
 800681c:	f04f 30ff 	mov.w	r0, #4294967295
 8006820:	e78e      	b.n	8006740 <__sflush_r+0x1c>
 8006822:	4407      	add	r7, r0
 8006824:	eba8 0800 	sub.w	r8, r8, r0
 8006828:	e7e9      	b.n	80067fe <__sflush_r+0xda>
 800682a:	bf00      	nop
 800682c:	20400001 	.word	0x20400001

08006830 <_fflush_r>:
 8006830:	b538      	push	{r3, r4, r5, lr}
 8006832:	690b      	ldr	r3, [r1, #16]
 8006834:	4605      	mov	r5, r0
 8006836:	460c      	mov	r4, r1
 8006838:	b913      	cbnz	r3, 8006840 <_fflush_r+0x10>
 800683a:	2500      	movs	r5, #0
 800683c:	4628      	mov	r0, r5
 800683e:	bd38      	pop	{r3, r4, r5, pc}
 8006840:	b118      	cbz	r0, 800684a <_fflush_r+0x1a>
 8006842:	6983      	ldr	r3, [r0, #24]
 8006844:	b90b      	cbnz	r3, 800684a <_fflush_r+0x1a>
 8006846:	f000 f887 	bl	8006958 <__sinit>
 800684a:	4b14      	ldr	r3, [pc, #80]	; (800689c <_fflush_r+0x6c>)
 800684c:	429c      	cmp	r4, r3
 800684e:	d11b      	bne.n	8006888 <_fflush_r+0x58>
 8006850:	686c      	ldr	r4, [r5, #4]
 8006852:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d0ef      	beq.n	800683a <_fflush_r+0xa>
 800685a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800685c:	07d0      	lsls	r0, r2, #31
 800685e:	d404      	bmi.n	800686a <_fflush_r+0x3a>
 8006860:	0599      	lsls	r1, r3, #22
 8006862:	d402      	bmi.n	800686a <_fflush_r+0x3a>
 8006864:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006866:	f000 f91a 	bl	8006a9e <__retarget_lock_acquire_recursive>
 800686a:	4628      	mov	r0, r5
 800686c:	4621      	mov	r1, r4
 800686e:	f7ff ff59 	bl	8006724 <__sflush_r>
 8006872:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006874:	07da      	lsls	r2, r3, #31
 8006876:	4605      	mov	r5, r0
 8006878:	d4e0      	bmi.n	800683c <_fflush_r+0xc>
 800687a:	89a3      	ldrh	r3, [r4, #12]
 800687c:	059b      	lsls	r3, r3, #22
 800687e:	d4dd      	bmi.n	800683c <_fflush_r+0xc>
 8006880:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006882:	f000 f90d 	bl	8006aa0 <__retarget_lock_release_recursive>
 8006886:	e7d9      	b.n	800683c <_fflush_r+0xc>
 8006888:	4b05      	ldr	r3, [pc, #20]	; (80068a0 <_fflush_r+0x70>)
 800688a:	429c      	cmp	r4, r3
 800688c:	d101      	bne.n	8006892 <_fflush_r+0x62>
 800688e:	68ac      	ldr	r4, [r5, #8]
 8006890:	e7df      	b.n	8006852 <_fflush_r+0x22>
 8006892:	4b04      	ldr	r3, [pc, #16]	; (80068a4 <_fflush_r+0x74>)
 8006894:	429c      	cmp	r4, r3
 8006896:	bf08      	it	eq
 8006898:	68ec      	ldreq	r4, [r5, #12]
 800689a:	e7da      	b.n	8006852 <_fflush_r+0x22>
 800689c:	08007c6c 	.word	0x08007c6c
 80068a0:	08007c8c 	.word	0x08007c8c
 80068a4:	08007c4c 	.word	0x08007c4c

080068a8 <std>:
 80068a8:	2300      	movs	r3, #0
 80068aa:	b510      	push	{r4, lr}
 80068ac:	4604      	mov	r4, r0
 80068ae:	e9c0 3300 	strd	r3, r3, [r0]
 80068b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80068b6:	6083      	str	r3, [r0, #8]
 80068b8:	8181      	strh	r1, [r0, #12]
 80068ba:	6643      	str	r3, [r0, #100]	; 0x64
 80068bc:	81c2      	strh	r2, [r0, #14]
 80068be:	6183      	str	r3, [r0, #24]
 80068c0:	4619      	mov	r1, r3
 80068c2:	2208      	movs	r2, #8
 80068c4:	305c      	adds	r0, #92	; 0x5c
 80068c6:	f7fe faf1 	bl	8004eac <memset>
 80068ca:	4b05      	ldr	r3, [pc, #20]	; (80068e0 <std+0x38>)
 80068cc:	6263      	str	r3, [r4, #36]	; 0x24
 80068ce:	4b05      	ldr	r3, [pc, #20]	; (80068e4 <std+0x3c>)
 80068d0:	62a3      	str	r3, [r4, #40]	; 0x28
 80068d2:	4b05      	ldr	r3, [pc, #20]	; (80068e8 <std+0x40>)
 80068d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80068d6:	4b05      	ldr	r3, [pc, #20]	; (80068ec <std+0x44>)
 80068d8:	6224      	str	r4, [r4, #32]
 80068da:	6323      	str	r3, [r4, #48]	; 0x30
 80068dc:	bd10      	pop	{r4, pc}
 80068de:	bf00      	nop
 80068e0:	08007745 	.word	0x08007745
 80068e4:	08007767 	.word	0x08007767
 80068e8:	0800779f 	.word	0x0800779f
 80068ec:	080077c3 	.word	0x080077c3

080068f0 <_cleanup_r>:
 80068f0:	4901      	ldr	r1, [pc, #4]	; (80068f8 <_cleanup_r+0x8>)
 80068f2:	f000 b8af 	b.w	8006a54 <_fwalk_reent>
 80068f6:	bf00      	nop
 80068f8:	08006831 	.word	0x08006831

080068fc <__sfmoreglue>:
 80068fc:	b570      	push	{r4, r5, r6, lr}
 80068fe:	2268      	movs	r2, #104	; 0x68
 8006900:	1e4d      	subs	r5, r1, #1
 8006902:	4355      	muls	r5, r2
 8006904:	460e      	mov	r6, r1
 8006906:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800690a:	f000 fd3d 	bl	8007388 <_malloc_r>
 800690e:	4604      	mov	r4, r0
 8006910:	b140      	cbz	r0, 8006924 <__sfmoreglue+0x28>
 8006912:	2100      	movs	r1, #0
 8006914:	e9c0 1600 	strd	r1, r6, [r0]
 8006918:	300c      	adds	r0, #12
 800691a:	60a0      	str	r0, [r4, #8]
 800691c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006920:	f7fe fac4 	bl	8004eac <memset>
 8006924:	4620      	mov	r0, r4
 8006926:	bd70      	pop	{r4, r5, r6, pc}

08006928 <__sfp_lock_acquire>:
 8006928:	4801      	ldr	r0, [pc, #4]	; (8006930 <__sfp_lock_acquire+0x8>)
 800692a:	f000 b8b8 	b.w	8006a9e <__retarget_lock_acquire_recursive>
 800692e:	bf00      	nop
 8006930:	200003e9 	.word	0x200003e9

08006934 <__sfp_lock_release>:
 8006934:	4801      	ldr	r0, [pc, #4]	; (800693c <__sfp_lock_release+0x8>)
 8006936:	f000 b8b3 	b.w	8006aa0 <__retarget_lock_release_recursive>
 800693a:	bf00      	nop
 800693c:	200003e9 	.word	0x200003e9

08006940 <__sinit_lock_acquire>:
 8006940:	4801      	ldr	r0, [pc, #4]	; (8006948 <__sinit_lock_acquire+0x8>)
 8006942:	f000 b8ac 	b.w	8006a9e <__retarget_lock_acquire_recursive>
 8006946:	bf00      	nop
 8006948:	200003ea 	.word	0x200003ea

0800694c <__sinit_lock_release>:
 800694c:	4801      	ldr	r0, [pc, #4]	; (8006954 <__sinit_lock_release+0x8>)
 800694e:	f000 b8a7 	b.w	8006aa0 <__retarget_lock_release_recursive>
 8006952:	bf00      	nop
 8006954:	200003ea 	.word	0x200003ea

08006958 <__sinit>:
 8006958:	b510      	push	{r4, lr}
 800695a:	4604      	mov	r4, r0
 800695c:	f7ff fff0 	bl	8006940 <__sinit_lock_acquire>
 8006960:	69a3      	ldr	r3, [r4, #24]
 8006962:	b11b      	cbz	r3, 800696c <__sinit+0x14>
 8006964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006968:	f7ff bff0 	b.w	800694c <__sinit_lock_release>
 800696c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006970:	6523      	str	r3, [r4, #80]	; 0x50
 8006972:	4b13      	ldr	r3, [pc, #76]	; (80069c0 <__sinit+0x68>)
 8006974:	4a13      	ldr	r2, [pc, #76]	; (80069c4 <__sinit+0x6c>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	62a2      	str	r2, [r4, #40]	; 0x28
 800697a:	42a3      	cmp	r3, r4
 800697c:	bf04      	itt	eq
 800697e:	2301      	moveq	r3, #1
 8006980:	61a3      	streq	r3, [r4, #24]
 8006982:	4620      	mov	r0, r4
 8006984:	f000 f820 	bl	80069c8 <__sfp>
 8006988:	6060      	str	r0, [r4, #4]
 800698a:	4620      	mov	r0, r4
 800698c:	f000 f81c 	bl	80069c8 <__sfp>
 8006990:	60a0      	str	r0, [r4, #8]
 8006992:	4620      	mov	r0, r4
 8006994:	f000 f818 	bl	80069c8 <__sfp>
 8006998:	2200      	movs	r2, #0
 800699a:	60e0      	str	r0, [r4, #12]
 800699c:	2104      	movs	r1, #4
 800699e:	6860      	ldr	r0, [r4, #4]
 80069a0:	f7ff ff82 	bl	80068a8 <std>
 80069a4:	68a0      	ldr	r0, [r4, #8]
 80069a6:	2201      	movs	r2, #1
 80069a8:	2109      	movs	r1, #9
 80069aa:	f7ff ff7d 	bl	80068a8 <std>
 80069ae:	68e0      	ldr	r0, [r4, #12]
 80069b0:	2202      	movs	r2, #2
 80069b2:	2112      	movs	r1, #18
 80069b4:	f7ff ff78 	bl	80068a8 <std>
 80069b8:	2301      	movs	r3, #1
 80069ba:	61a3      	str	r3, [r4, #24]
 80069bc:	e7d2      	b.n	8006964 <__sinit+0xc>
 80069be:	bf00      	nop
 80069c0:	08007b84 	.word	0x08007b84
 80069c4:	080068f1 	.word	0x080068f1

080069c8 <__sfp>:
 80069c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ca:	4607      	mov	r7, r0
 80069cc:	f7ff ffac 	bl	8006928 <__sfp_lock_acquire>
 80069d0:	4b1e      	ldr	r3, [pc, #120]	; (8006a4c <__sfp+0x84>)
 80069d2:	681e      	ldr	r6, [r3, #0]
 80069d4:	69b3      	ldr	r3, [r6, #24]
 80069d6:	b913      	cbnz	r3, 80069de <__sfp+0x16>
 80069d8:	4630      	mov	r0, r6
 80069da:	f7ff ffbd 	bl	8006958 <__sinit>
 80069de:	3648      	adds	r6, #72	; 0x48
 80069e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80069e4:	3b01      	subs	r3, #1
 80069e6:	d503      	bpl.n	80069f0 <__sfp+0x28>
 80069e8:	6833      	ldr	r3, [r6, #0]
 80069ea:	b30b      	cbz	r3, 8006a30 <__sfp+0x68>
 80069ec:	6836      	ldr	r6, [r6, #0]
 80069ee:	e7f7      	b.n	80069e0 <__sfp+0x18>
 80069f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80069f4:	b9d5      	cbnz	r5, 8006a2c <__sfp+0x64>
 80069f6:	4b16      	ldr	r3, [pc, #88]	; (8006a50 <__sfp+0x88>)
 80069f8:	60e3      	str	r3, [r4, #12]
 80069fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80069fe:	6665      	str	r5, [r4, #100]	; 0x64
 8006a00:	f000 f84c 	bl	8006a9c <__retarget_lock_init_recursive>
 8006a04:	f7ff ff96 	bl	8006934 <__sfp_lock_release>
 8006a08:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006a0c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006a10:	6025      	str	r5, [r4, #0]
 8006a12:	61a5      	str	r5, [r4, #24]
 8006a14:	2208      	movs	r2, #8
 8006a16:	4629      	mov	r1, r5
 8006a18:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006a1c:	f7fe fa46 	bl	8004eac <memset>
 8006a20:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006a24:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006a28:	4620      	mov	r0, r4
 8006a2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a2c:	3468      	adds	r4, #104	; 0x68
 8006a2e:	e7d9      	b.n	80069e4 <__sfp+0x1c>
 8006a30:	2104      	movs	r1, #4
 8006a32:	4638      	mov	r0, r7
 8006a34:	f7ff ff62 	bl	80068fc <__sfmoreglue>
 8006a38:	4604      	mov	r4, r0
 8006a3a:	6030      	str	r0, [r6, #0]
 8006a3c:	2800      	cmp	r0, #0
 8006a3e:	d1d5      	bne.n	80069ec <__sfp+0x24>
 8006a40:	f7ff ff78 	bl	8006934 <__sfp_lock_release>
 8006a44:	230c      	movs	r3, #12
 8006a46:	603b      	str	r3, [r7, #0]
 8006a48:	e7ee      	b.n	8006a28 <__sfp+0x60>
 8006a4a:	bf00      	nop
 8006a4c:	08007b84 	.word	0x08007b84
 8006a50:	ffff0001 	.word	0xffff0001

08006a54 <_fwalk_reent>:
 8006a54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a58:	4606      	mov	r6, r0
 8006a5a:	4688      	mov	r8, r1
 8006a5c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006a60:	2700      	movs	r7, #0
 8006a62:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006a66:	f1b9 0901 	subs.w	r9, r9, #1
 8006a6a:	d505      	bpl.n	8006a78 <_fwalk_reent+0x24>
 8006a6c:	6824      	ldr	r4, [r4, #0]
 8006a6e:	2c00      	cmp	r4, #0
 8006a70:	d1f7      	bne.n	8006a62 <_fwalk_reent+0xe>
 8006a72:	4638      	mov	r0, r7
 8006a74:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a78:	89ab      	ldrh	r3, [r5, #12]
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d907      	bls.n	8006a8e <_fwalk_reent+0x3a>
 8006a7e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a82:	3301      	adds	r3, #1
 8006a84:	d003      	beq.n	8006a8e <_fwalk_reent+0x3a>
 8006a86:	4629      	mov	r1, r5
 8006a88:	4630      	mov	r0, r6
 8006a8a:	47c0      	blx	r8
 8006a8c:	4307      	orrs	r7, r0
 8006a8e:	3568      	adds	r5, #104	; 0x68
 8006a90:	e7e9      	b.n	8006a66 <_fwalk_reent+0x12>
	...

08006a94 <_localeconv_r>:
 8006a94:	4800      	ldr	r0, [pc, #0]	; (8006a98 <_localeconv_r+0x4>)
 8006a96:	4770      	bx	lr
 8006a98:	20000160 	.word	0x20000160

08006a9c <__retarget_lock_init_recursive>:
 8006a9c:	4770      	bx	lr

08006a9e <__retarget_lock_acquire_recursive>:
 8006a9e:	4770      	bx	lr

08006aa0 <__retarget_lock_release_recursive>:
 8006aa0:	4770      	bx	lr

08006aa2 <__swhatbuf_r>:
 8006aa2:	b570      	push	{r4, r5, r6, lr}
 8006aa4:	460e      	mov	r6, r1
 8006aa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006aaa:	2900      	cmp	r1, #0
 8006aac:	b096      	sub	sp, #88	; 0x58
 8006aae:	4614      	mov	r4, r2
 8006ab0:	461d      	mov	r5, r3
 8006ab2:	da08      	bge.n	8006ac6 <__swhatbuf_r+0x24>
 8006ab4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	602a      	str	r2, [r5, #0]
 8006abc:	061a      	lsls	r2, r3, #24
 8006abe:	d410      	bmi.n	8006ae2 <__swhatbuf_r+0x40>
 8006ac0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ac4:	e00e      	b.n	8006ae4 <__swhatbuf_r+0x42>
 8006ac6:	466a      	mov	r2, sp
 8006ac8:	f000 fed2 	bl	8007870 <_fstat_r>
 8006acc:	2800      	cmp	r0, #0
 8006ace:	dbf1      	blt.n	8006ab4 <__swhatbuf_r+0x12>
 8006ad0:	9a01      	ldr	r2, [sp, #4]
 8006ad2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006ad6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006ada:	425a      	negs	r2, r3
 8006adc:	415a      	adcs	r2, r3
 8006ade:	602a      	str	r2, [r5, #0]
 8006ae0:	e7ee      	b.n	8006ac0 <__swhatbuf_r+0x1e>
 8006ae2:	2340      	movs	r3, #64	; 0x40
 8006ae4:	2000      	movs	r0, #0
 8006ae6:	6023      	str	r3, [r4, #0]
 8006ae8:	b016      	add	sp, #88	; 0x58
 8006aea:	bd70      	pop	{r4, r5, r6, pc}

08006aec <__smakebuf_r>:
 8006aec:	898b      	ldrh	r3, [r1, #12]
 8006aee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006af0:	079d      	lsls	r5, r3, #30
 8006af2:	4606      	mov	r6, r0
 8006af4:	460c      	mov	r4, r1
 8006af6:	d507      	bpl.n	8006b08 <__smakebuf_r+0x1c>
 8006af8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006afc:	6023      	str	r3, [r4, #0]
 8006afe:	6123      	str	r3, [r4, #16]
 8006b00:	2301      	movs	r3, #1
 8006b02:	6163      	str	r3, [r4, #20]
 8006b04:	b002      	add	sp, #8
 8006b06:	bd70      	pop	{r4, r5, r6, pc}
 8006b08:	ab01      	add	r3, sp, #4
 8006b0a:	466a      	mov	r2, sp
 8006b0c:	f7ff ffc9 	bl	8006aa2 <__swhatbuf_r>
 8006b10:	9900      	ldr	r1, [sp, #0]
 8006b12:	4605      	mov	r5, r0
 8006b14:	4630      	mov	r0, r6
 8006b16:	f000 fc37 	bl	8007388 <_malloc_r>
 8006b1a:	b948      	cbnz	r0, 8006b30 <__smakebuf_r+0x44>
 8006b1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b20:	059a      	lsls	r2, r3, #22
 8006b22:	d4ef      	bmi.n	8006b04 <__smakebuf_r+0x18>
 8006b24:	f023 0303 	bic.w	r3, r3, #3
 8006b28:	f043 0302 	orr.w	r3, r3, #2
 8006b2c:	81a3      	strh	r3, [r4, #12]
 8006b2e:	e7e3      	b.n	8006af8 <__smakebuf_r+0xc>
 8006b30:	4b0d      	ldr	r3, [pc, #52]	; (8006b68 <__smakebuf_r+0x7c>)
 8006b32:	62b3      	str	r3, [r6, #40]	; 0x28
 8006b34:	89a3      	ldrh	r3, [r4, #12]
 8006b36:	6020      	str	r0, [r4, #0]
 8006b38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b3c:	81a3      	strh	r3, [r4, #12]
 8006b3e:	9b00      	ldr	r3, [sp, #0]
 8006b40:	6163      	str	r3, [r4, #20]
 8006b42:	9b01      	ldr	r3, [sp, #4]
 8006b44:	6120      	str	r0, [r4, #16]
 8006b46:	b15b      	cbz	r3, 8006b60 <__smakebuf_r+0x74>
 8006b48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b4c:	4630      	mov	r0, r6
 8006b4e:	f000 fea1 	bl	8007894 <_isatty_r>
 8006b52:	b128      	cbz	r0, 8006b60 <__smakebuf_r+0x74>
 8006b54:	89a3      	ldrh	r3, [r4, #12]
 8006b56:	f023 0303 	bic.w	r3, r3, #3
 8006b5a:	f043 0301 	orr.w	r3, r3, #1
 8006b5e:	81a3      	strh	r3, [r4, #12]
 8006b60:	89a0      	ldrh	r0, [r4, #12]
 8006b62:	4305      	orrs	r5, r0
 8006b64:	81a5      	strh	r5, [r4, #12]
 8006b66:	e7cd      	b.n	8006b04 <__smakebuf_r+0x18>
 8006b68:	080068f1 	.word	0x080068f1

08006b6c <malloc>:
 8006b6c:	4b02      	ldr	r3, [pc, #8]	; (8006b78 <malloc+0xc>)
 8006b6e:	4601      	mov	r1, r0
 8006b70:	6818      	ldr	r0, [r3, #0]
 8006b72:	f000 bc09 	b.w	8007388 <_malloc_r>
 8006b76:	bf00      	nop
 8006b78:	2000000c 	.word	0x2000000c

08006b7c <_Balloc>:
 8006b7c:	b570      	push	{r4, r5, r6, lr}
 8006b7e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006b80:	4604      	mov	r4, r0
 8006b82:	460d      	mov	r5, r1
 8006b84:	b976      	cbnz	r6, 8006ba4 <_Balloc+0x28>
 8006b86:	2010      	movs	r0, #16
 8006b88:	f7ff fff0 	bl	8006b6c <malloc>
 8006b8c:	4602      	mov	r2, r0
 8006b8e:	6260      	str	r0, [r4, #36]	; 0x24
 8006b90:	b920      	cbnz	r0, 8006b9c <_Balloc+0x20>
 8006b92:	4b18      	ldr	r3, [pc, #96]	; (8006bf4 <_Balloc+0x78>)
 8006b94:	4818      	ldr	r0, [pc, #96]	; (8006bf8 <_Balloc+0x7c>)
 8006b96:	2166      	movs	r1, #102	; 0x66
 8006b98:	f000 fe2a 	bl	80077f0 <__assert_func>
 8006b9c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ba0:	6006      	str	r6, [r0, #0]
 8006ba2:	60c6      	str	r6, [r0, #12]
 8006ba4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006ba6:	68f3      	ldr	r3, [r6, #12]
 8006ba8:	b183      	cbz	r3, 8006bcc <_Balloc+0x50>
 8006baa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bac:	68db      	ldr	r3, [r3, #12]
 8006bae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006bb2:	b9b8      	cbnz	r0, 8006be4 <_Balloc+0x68>
 8006bb4:	2101      	movs	r1, #1
 8006bb6:	fa01 f605 	lsl.w	r6, r1, r5
 8006bba:	1d72      	adds	r2, r6, #5
 8006bbc:	0092      	lsls	r2, r2, #2
 8006bbe:	4620      	mov	r0, r4
 8006bc0:	f000 fb60 	bl	8007284 <_calloc_r>
 8006bc4:	b160      	cbz	r0, 8006be0 <_Balloc+0x64>
 8006bc6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006bca:	e00e      	b.n	8006bea <_Balloc+0x6e>
 8006bcc:	2221      	movs	r2, #33	; 0x21
 8006bce:	2104      	movs	r1, #4
 8006bd0:	4620      	mov	r0, r4
 8006bd2:	f000 fb57 	bl	8007284 <_calloc_r>
 8006bd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006bd8:	60f0      	str	r0, [r6, #12]
 8006bda:	68db      	ldr	r3, [r3, #12]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d1e4      	bne.n	8006baa <_Balloc+0x2e>
 8006be0:	2000      	movs	r0, #0
 8006be2:	bd70      	pop	{r4, r5, r6, pc}
 8006be4:	6802      	ldr	r2, [r0, #0]
 8006be6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006bea:	2300      	movs	r3, #0
 8006bec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006bf0:	e7f7      	b.n	8006be2 <_Balloc+0x66>
 8006bf2:	bf00      	nop
 8006bf4:	08007bc9 	.word	0x08007bc9
 8006bf8:	08007cac 	.word	0x08007cac

08006bfc <_Bfree>:
 8006bfc:	b570      	push	{r4, r5, r6, lr}
 8006bfe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006c00:	4605      	mov	r5, r0
 8006c02:	460c      	mov	r4, r1
 8006c04:	b976      	cbnz	r6, 8006c24 <_Bfree+0x28>
 8006c06:	2010      	movs	r0, #16
 8006c08:	f7ff ffb0 	bl	8006b6c <malloc>
 8006c0c:	4602      	mov	r2, r0
 8006c0e:	6268      	str	r0, [r5, #36]	; 0x24
 8006c10:	b920      	cbnz	r0, 8006c1c <_Bfree+0x20>
 8006c12:	4b09      	ldr	r3, [pc, #36]	; (8006c38 <_Bfree+0x3c>)
 8006c14:	4809      	ldr	r0, [pc, #36]	; (8006c3c <_Bfree+0x40>)
 8006c16:	218a      	movs	r1, #138	; 0x8a
 8006c18:	f000 fdea 	bl	80077f0 <__assert_func>
 8006c1c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006c20:	6006      	str	r6, [r0, #0]
 8006c22:	60c6      	str	r6, [r0, #12]
 8006c24:	b13c      	cbz	r4, 8006c36 <_Bfree+0x3a>
 8006c26:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006c28:	6862      	ldr	r2, [r4, #4]
 8006c2a:	68db      	ldr	r3, [r3, #12]
 8006c2c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006c30:	6021      	str	r1, [r4, #0]
 8006c32:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006c36:	bd70      	pop	{r4, r5, r6, pc}
 8006c38:	08007bc9 	.word	0x08007bc9
 8006c3c:	08007cac 	.word	0x08007cac

08006c40 <__multadd>:
 8006c40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c44:	690d      	ldr	r5, [r1, #16]
 8006c46:	4607      	mov	r7, r0
 8006c48:	460c      	mov	r4, r1
 8006c4a:	461e      	mov	r6, r3
 8006c4c:	f101 0c14 	add.w	ip, r1, #20
 8006c50:	2000      	movs	r0, #0
 8006c52:	f8dc 3000 	ldr.w	r3, [ip]
 8006c56:	b299      	uxth	r1, r3
 8006c58:	fb02 6101 	mla	r1, r2, r1, r6
 8006c5c:	0c1e      	lsrs	r6, r3, #16
 8006c5e:	0c0b      	lsrs	r3, r1, #16
 8006c60:	fb02 3306 	mla	r3, r2, r6, r3
 8006c64:	b289      	uxth	r1, r1
 8006c66:	3001      	adds	r0, #1
 8006c68:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006c6c:	4285      	cmp	r5, r0
 8006c6e:	f84c 1b04 	str.w	r1, [ip], #4
 8006c72:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006c76:	dcec      	bgt.n	8006c52 <__multadd+0x12>
 8006c78:	b30e      	cbz	r6, 8006cbe <__multadd+0x7e>
 8006c7a:	68a3      	ldr	r3, [r4, #8]
 8006c7c:	42ab      	cmp	r3, r5
 8006c7e:	dc19      	bgt.n	8006cb4 <__multadd+0x74>
 8006c80:	6861      	ldr	r1, [r4, #4]
 8006c82:	4638      	mov	r0, r7
 8006c84:	3101      	adds	r1, #1
 8006c86:	f7ff ff79 	bl	8006b7c <_Balloc>
 8006c8a:	4680      	mov	r8, r0
 8006c8c:	b928      	cbnz	r0, 8006c9a <__multadd+0x5a>
 8006c8e:	4602      	mov	r2, r0
 8006c90:	4b0c      	ldr	r3, [pc, #48]	; (8006cc4 <__multadd+0x84>)
 8006c92:	480d      	ldr	r0, [pc, #52]	; (8006cc8 <__multadd+0x88>)
 8006c94:	21b5      	movs	r1, #181	; 0xb5
 8006c96:	f000 fdab 	bl	80077f0 <__assert_func>
 8006c9a:	6922      	ldr	r2, [r4, #16]
 8006c9c:	3202      	adds	r2, #2
 8006c9e:	f104 010c 	add.w	r1, r4, #12
 8006ca2:	0092      	lsls	r2, r2, #2
 8006ca4:	300c      	adds	r0, #12
 8006ca6:	f7fe f8f3 	bl	8004e90 <memcpy>
 8006caa:	4621      	mov	r1, r4
 8006cac:	4638      	mov	r0, r7
 8006cae:	f7ff ffa5 	bl	8006bfc <_Bfree>
 8006cb2:	4644      	mov	r4, r8
 8006cb4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006cb8:	3501      	adds	r5, #1
 8006cba:	615e      	str	r6, [r3, #20]
 8006cbc:	6125      	str	r5, [r4, #16]
 8006cbe:	4620      	mov	r0, r4
 8006cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cc4:	08007c3b 	.word	0x08007c3b
 8006cc8:	08007cac 	.word	0x08007cac

08006ccc <__hi0bits>:
 8006ccc:	0c03      	lsrs	r3, r0, #16
 8006cce:	041b      	lsls	r3, r3, #16
 8006cd0:	b9d3      	cbnz	r3, 8006d08 <__hi0bits+0x3c>
 8006cd2:	0400      	lsls	r0, r0, #16
 8006cd4:	2310      	movs	r3, #16
 8006cd6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006cda:	bf04      	itt	eq
 8006cdc:	0200      	lsleq	r0, r0, #8
 8006cde:	3308      	addeq	r3, #8
 8006ce0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006ce4:	bf04      	itt	eq
 8006ce6:	0100      	lsleq	r0, r0, #4
 8006ce8:	3304      	addeq	r3, #4
 8006cea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006cee:	bf04      	itt	eq
 8006cf0:	0080      	lsleq	r0, r0, #2
 8006cf2:	3302      	addeq	r3, #2
 8006cf4:	2800      	cmp	r0, #0
 8006cf6:	db05      	blt.n	8006d04 <__hi0bits+0x38>
 8006cf8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006cfc:	f103 0301 	add.w	r3, r3, #1
 8006d00:	bf08      	it	eq
 8006d02:	2320      	moveq	r3, #32
 8006d04:	4618      	mov	r0, r3
 8006d06:	4770      	bx	lr
 8006d08:	2300      	movs	r3, #0
 8006d0a:	e7e4      	b.n	8006cd6 <__hi0bits+0xa>

08006d0c <__lo0bits>:
 8006d0c:	6803      	ldr	r3, [r0, #0]
 8006d0e:	f013 0207 	ands.w	r2, r3, #7
 8006d12:	4601      	mov	r1, r0
 8006d14:	d00b      	beq.n	8006d2e <__lo0bits+0x22>
 8006d16:	07da      	lsls	r2, r3, #31
 8006d18:	d423      	bmi.n	8006d62 <__lo0bits+0x56>
 8006d1a:	0798      	lsls	r0, r3, #30
 8006d1c:	bf49      	itett	mi
 8006d1e:	085b      	lsrmi	r3, r3, #1
 8006d20:	089b      	lsrpl	r3, r3, #2
 8006d22:	2001      	movmi	r0, #1
 8006d24:	600b      	strmi	r3, [r1, #0]
 8006d26:	bf5c      	itt	pl
 8006d28:	600b      	strpl	r3, [r1, #0]
 8006d2a:	2002      	movpl	r0, #2
 8006d2c:	4770      	bx	lr
 8006d2e:	b298      	uxth	r0, r3
 8006d30:	b9a8      	cbnz	r0, 8006d5e <__lo0bits+0x52>
 8006d32:	0c1b      	lsrs	r3, r3, #16
 8006d34:	2010      	movs	r0, #16
 8006d36:	b2da      	uxtb	r2, r3
 8006d38:	b90a      	cbnz	r2, 8006d3e <__lo0bits+0x32>
 8006d3a:	3008      	adds	r0, #8
 8006d3c:	0a1b      	lsrs	r3, r3, #8
 8006d3e:	071a      	lsls	r2, r3, #28
 8006d40:	bf04      	itt	eq
 8006d42:	091b      	lsreq	r3, r3, #4
 8006d44:	3004      	addeq	r0, #4
 8006d46:	079a      	lsls	r2, r3, #30
 8006d48:	bf04      	itt	eq
 8006d4a:	089b      	lsreq	r3, r3, #2
 8006d4c:	3002      	addeq	r0, #2
 8006d4e:	07da      	lsls	r2, r3, #31
 8006d50:	d403      	bmi.n	8006d5a <__lo0bits+0x4e>
 8006d52:	085b      	lsrs	r3, r3, #1
 8006d54:	f100 0001 	add.w	r0, r0, #1
 8006d58:	d005      	beq.n	8006d66 <__lo0bits+0x5a>
 8006d5a:	600b      	str	r3, [r1, #0]
 8006d5c:	4770      	bx	lr
 8006d5e:	4610      	mov	r0, r2
 8006d60:	e7e9      	b.n	8006d36 <__lo0bits+0x2a>
 8006d62:	2000      	movs	r0, #0
 8006d64:	4770      	bx	lr
 8006d66:	2020      	movs	r0, #32
 8006d68:	4770      	bx	lr
	...

08006d6c <__i2b>:
 8006d6c:	b510      	push	{r4, lr}
 8006d6e:	460c      	mov	r4, r1
 8006d70:	2101      	movs	r1, #1
 8006d72:	f7ff ff03 	bl	8006b7c <_Balloc>
 8006d76:	4602      	mov	r2, r0
 8006d78:	b928      	cbnz	r0, 8006d86 <__i2b+0x1a>
 8006d7a:	4b05      	ldr	r3, [pc, #20]	; (8006d90 <__i2b+0x24>)
 8006d7c:	4805      	ldr	r0, [pc, #20]	; (8006d94 <__i2b+0x28>)
 8006d7e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006d82:	f000 fd35 	bl	80077f0 <__assert_func>
 8006d86:	2301      	movs	r3, #1
 8006d88:	6144      	str	r4, [r0, #20]
 8006d8a:	6103      	str	r3, [r0, #16]
 8006d8c:	bd10      	pop	{r4, pc}
 8006d8e:	bf00      	nop
 8006d90:	08007c3b 	.word	0x08007c3b
 8006d94:	08007cac 	.word	0x08007cac

08006d98 <__multiply>:
 8006d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d9c:	4691      	mov	r9, r2
 8006d9e:	690a      	ldr	r2, [r1, #16]
 8006da0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006da4:	429a      	cmp	r2, r3
 8006da6:	bfb8      	it	lt
 8006da8:	460b      	movlt	r3, r1
 8006daa:	460c      	mov	r4, r1
 8006dac:	bfbc      	itt	lt
 8006dae:	464c      	movlt	r4, r9
 8006db0:	4699      	movlt	r9, r3
 8006db2:	6927      	ldr	r7, [r4, #16]
 8006db4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006db8:	68a3      	ldr	r3, [r4, #8]
 8006dba:	6861      	ldr	r1, [r4, #4]
 8006dbc:	eb07 060a 	add.w	r6, r7, sl
 8006dc0:	42b3      	cmp	r3, r6
 8006dc2:	b085      	sub	sp, #20
 8006dc4:	bfb8      	it	lt
 8006dc6:	3101      	addlt	r1, #1
 8006dc8:	f7ff fed8 	bl	8006b7c <_Balloc>
 8006dcc:	b930      	cbnz	r0, 8006ddc <__multiply+0x44>
 8006dce:	4602      	mov	r2, r0
 8006dd0:	4b44      	ldr	r3, [pc, #272]	; (8006ee4 <__multiply+0x14c>)
 8006dd2:	4845      	ldr	r0, [pc, #276]	; (8006ee8 <__multiply+0x150>)
 8006dd4:	f240 115d 	movw	r1, #349	; 0x15d
 8006dd8:	f000 fd0a 	bl	80077f0 <__assert_func>
 8006ddc:	f100 0514 	add.w	r5, r0, #20
 8006de0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006de4:	462b      	mov	r3, r5
 8006de6:	2200      	movs	r2, #0
 8006de8:	4543      	cmp	r3, r8
 8006dea:	d321      	bcc.n	8006e30 <__multiply+0x98>
 8006dec:	f104 0314 	add.w	r3, r4, #20
 8006df0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006df4:	f109 0314 	add.w	r3, r9, #20
 8006df8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006dfc:	9202      	str	r2, [sp, #8]
 8006dfe:	1b3a      	subs	r2, r7, r4
 8006e00:	3a15      	subs	r2, #21
 8006e02:	f022 0203 	bic.w	r2, r2, #3
 8006e06:	3204      	adds	r2, #4
 8006e08:	f104 0115 	add.w	r1, r4, #21
 8006e0c:	428f      	cmp	r7, r1
 8006e0e:	bf38      	it	cc
 8006e10:	2204      	movcc	r2, #4
 8006e12:	9201      	str	r2, [sp, #4]
 8006e14:	9a02      	ldr	r2, [sp, #8]
 8006e16:	9303      	str	r3, [sp, #12]
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d80c      	bhi.n	8006e36 <__multiply+0x9e>
 8006e1c:	2e00      	cmp	r6, #0
 8006e1e:	dd03      	ble.n	8006e28 <__multiply+0x90>
 8006e20:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d05a      	beq.n	8006ede <__multiply+0x146>
 8006e28:	6106      	str	r6, [r0, #16]
 8006e2a:	b005      	add	sp, #20
 8006e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e30:	f843 2b04 	str.w	r2, [r3], #4
 8006e34:	e7d8      	b.n	8006de8 <__multiply+0x50>
 8006e36:	f8b3 a000 	ldrh.w	sl, [r3]
 8006e3a:	f1ba 0f00 	cmp.w	sl, #0
 8006e3e:	d024      	beq.n	8006e8a <__multiply+0xf2>
 8006e40:	f104 0e14 	add.w	lr, r4, #20
 8006e44:	46a9      	mov	r9, r5
 8006e46:	f04f 0c00 	mov.w	ip, #0
 8006e4a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006e4e:	f8d9 1000 	ldr.w	r1, [r9]
 8006e52:	fa1f fb82 	uxth.w	fp, r2
 8006e56:	b289      	uxth	r1, r1
 8006e58:	fb0a 110b 	mla	r1, sl, fp, r1
 8006e5c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006e60:	f8d9 2000 	ldr.w	r2, [r9]
 8006e64:	4461      	add	r1, ip
 8006e66:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006e6a:	fb0a c20b 	mla	r2, sl, fp, ip
 8006e6e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006e72:	b289      	uxth	r1, r1
 8006e74:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006e78:	4577      	cmp	r7, lr
 8006e7a:	f849 1b04 	str.w	r1, [r9], #4
 8006e7e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006e82:	d8e2      	bhi.n	8006e4a <__multiply+0xb2>
 8006e84:	9a01      	ldr	r2, [sp, #4]
 8006e86:	f845 c002 	str.w	ip, [r5, r2]
 8006e8a:	9a03      	ldr	r2, [sp, #12]
 8006e8c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006e90:	3304      	adds	r3, #4
 8006e92:	f1b9 0f00 	cmp.w	r9, #0
 8006e96:	d020      	beq.n	8006eda <__multiply+0x142>
 8006e98:	6829      	ldr	r1, [r5, #0]
 8006e9a:	f104 0c14 	add.w	ip, r4, #20
 8006e9e:	46ae      	mov	lr, r5
 8006ea0:	f04f 0a00 	mov.w	sl, #0
 8006ea4:	f8bc b000 	ldrh.w	fp, [ip]
 8006ea8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006eac:	fb09 220b 	mla	r2, r9, fp, r2
 8006eb0:	4492      	add	sl, r2
 8006eb2:	b289      	uxth	r1, r1
 8006eb4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006eb8:	f84e 1b04 	str.w	r1, [lr], #4
 8006ebc:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006ec0:	f8be 1000 	ldrh.w	r1, [lr]
 8006ec4:	0c12      	lsrs	r2, r2, #16
 8006ec6:	fb09 1102 	mla	r1, r9, r2, r1
 8006eca:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006ece:	4567      	cmp	r7, ip
 8006ed0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006ed4:	d8e6      	bhi.n	8006ea4 <__multiply+0x10c>
 8006ed6:	9a01      	ldr	r2, [sp, #4]
 8006ed8:	50a9      	str	r1, [r5, r2]
 8006eda:	3504      	adds	r5, #4
 8006edc:	e79a      	b.n	8006e14 <__multiply+0x7c>
 8006ede:	3e01      	subs	r6, #1
 8006ee0:	e79c      	b.n	8006e1c <__multiply+0x84>
 8006ee2:	bf00      	nop
 8006ee4:	08007c3b 	.word	0x08007c3b
 8006ee8:	08007cac 	.word	0x08007cac

08006eec <__pow5mult>:
 8006eec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ef0:	4615      	mov	r5, r2
 8006ef2:	f012 0203 	ands.w	r2, r2, #3
 8006ef6:	4606      	mov	r6, r0
 8006ef8:	460f      	mov	r7, r1
 8006efa:	d007      	beq.n	8006f0c <__pow5mult+0x20>
 8006efc:	4c25      	ldr	r4, [pc, #148]	; (8006f94 <__pow5mult+0xa8>)
 8006efe:	3a01      	subs	r2, #1
 8006f00:	2300      	movs	r3, #0
 8006f02:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006f06:	f7ff fe9b 	bl	8006c40 <__multadd>
 8006f0a:	4607      	mov	r7, r0
 8006f0c:	10ad      	asrs	r5, r5, #2
 8006f0e:	d03d      	beq.n	8006f8c <__pow5mult+0xa0>
 8006f10:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006f12:	b97c      	cbnz	r4, 8006f34 <__pow5mult+0x48>
 8006f14:	2010      	movs	r0, #16
 8006f16:	f7ff fe29 	bl	8006b6c <malloc>
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	6270      	str	r0, [r6, #36]	; 0x24
 8006f1e:	b928      	cbnz	r0, 8006f2c <__pow5mult+0x40>
 8006f20:	4b1d      	ldr	r3, [pc, #116]	; (8006f98 <__pow5mult+0xac>)
 8006f22:	481e      	ldr	r0, [pc, #120]	; (8006f9c <__pow5mult+0xb0>)
 8006f24:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006f28:	f000 fc62 	bl	80077f0 <__assert_func>
 8006f2c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006f30:	6004      	str	r4, [r0, #0]
 8006f32:	60c4      	str	r4, [r0, #12]
 8006f34:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006f38:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006f3c:	b94c      	cbnz	r4, 8006f52 <__pow5mult+0x66>
 8006f3e:	f240 2171 	movw	r1, #625	; 0x271
 8006f42:	4630      	mov	r0, r6
 8006f44:	f7ff ff12 	bl	8006d6c <__i2b>
 8006f48:	2300      	movs	r3, #0
 8006f4a:	f8c8 0008 	str.w	r0, [r8, #8]
 8006f4e:	4604      	mov	r4, r0
 8006f50:	6003      	str	r3, [r0, #0]
 8006f52:	f04f 0900 	mov.w	r9, #0
 8006f56:	07eb      	lsls	r3, r5, #31
 8006f58:	d50a      	bpl.n	8006f70 <__pow5mult+0x84>
 8006f5a:	4639      	mov	r1, r7
 8006f5c:	4622      	mov	r2, r4
 8006f5e:	4630      	mov	r0, r6
 8006f60:	f7ff ff1a 	bl	8006d98 <__multiply>
 8006f64:	4639      	mov	r1, r7
 8006f66:	4680      	mov	r8, r0
 8006f68:	4630      	mov	r0, r6
 8006f6a:	f7ff fe47 	bl	8006bfc <_Bfree>
 8006f6e:	4647      	mov	r7, r8
 8006f70:	106d      	asrs	r5, r5, #1
 8006f72:	d00b      	beq.n	8006f8c <__pow5mult+0xa0>
 8006f74:	6820      	ldr	r0, [r4, #0]
 8006f76:	b938      	cbnz	r0, 8006f88 <__pow5mult+0x9c>
 8006f78:	4622      	mov	r2, r4
 8006f7a:	4621      	mov	r1, r4
 8006f7c:	4630      	mov	r0, r6
 8006f7e:	f7ff ff0b 	bl	8006d98 <__multiply>
 8006f82:	6020      	str	r0, [r4, #0]
 8006f84:	f8c0 9000 	str.w	r9, [r0]
 8006f88:	4604      	mov	r4, r0
 8006f8a:	e7e4      	b.n	8006f56 <__pow5mult+0x6a>
 8006f8c:	4638      	mov	r0, r7
 8006f8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f92:	bf00      	nop
 8006f94:	08007df8 	.word	0x08007df8
 8006f98:	08007bc9 	.word	0x08007bc9
 8006f9c:	08007cac 	.word	0x08007cac

08006fa0 <__lshift>:
 8006fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fa4:	460c      	mov	r4, r1
 8006fa6:	6849      	ldr	r1, [r1, #4]
 8006fa8:	6923      	ldr	r3, [r4, #16]
 8006faa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006fae:	68a3      	ldr	r3, [r4, #8]
 8006fb0:	4607      	mov	r7, r0
 8006fb2:	4691      	mov	r9, r2
 8006fb4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006fb8:	f108 0601 	add.w	r6, r8, #1
 8006fbc:	42b3      	cmp	r3, r6
 8006fbe:	db0b      	blt.n	8006fd8 <__lshift+0x38>
 8006fc0:	4638      	mov	r0, r7
 8006fc2:	f7ff fddb 	bl	8006b7c <_Balloc>
 8006fc6:	4605      	mov	r5, r0
 8006fc8:	b948      	cbnz	r0, 8006fde <__lshift+0x3e>
 8006fca:	4602      	mov	r2, r0
 8006fcc:	4b2a      	ldr	r3, [pc, #168]	; (8007078 <__lshift+0xd8>)
 8006fce:	482b      	ldr	r0, [pc, #172]	; (800707c <__lshift+0xdc>)
 8006fd0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006fd4:	f000 fc0c 	bl	80077f0 <__assert_func>
 8006fd8:	3101      	adds	r1, #1
 8006fda:	005b      	lsls	r3, r3, #1
 8006fdc:	e7ee      	b.n	8006fbc <__lshift+0x1c>
 8006fde:	2300      	movs	r3, #0
 8006fe0:	f100 0114 	add.w	r1, r0, #20
 8006fe4:	f100 0210 	add.w	r2, r0, #16
 8006fe8:	4618      	mov	r0, r3
 8006fea:	4553      	cmp	r3, sl
 8006fec:	db37      	blt.n	800705e <__lshift+0xbe>
 8006fee:	6920      	ldr	r0, [r4, #16]
 8006ff0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006ff4:	f104 0314 	add.w	r3, r4, #20
 8006ff8:	f019 091f 	ands.w	r9, r9, #31
 8006ffc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007000:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007004:	d02f      	beq.n	8007066 <__lshift+0xc6>
 8007006:	f1c9 0e20 	rsb	lr, r9, #32
 800700a:	468a      	mov	sl, r1
 800700c:	f04f 0c00 	mov.w	ip, #0
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	fa02 f209 	lsl.w	r2, r2, r9
 8007016:	ea42 020c 	orr.w	r2, r2, ip
 800701a:	f84a 2b04 	str.w	r2, [sl], #4
 800701e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007022:	4298      	cmp	r0, r3
 8007024:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007028:	d8f2      	bhi.n	8007010 <__lshift+0x70>
 800702a:	1b03      	subs	r3, r0, r4
 800702c:	3b15      	subs	r3, #21
 800702e:	f023 0303 	bic.w	r3, r3, #3
 8007032:	3304      	adds	r3, #4
 8007034:	f104 0215 	add.w	r2, r4, #21
 8007038:	4290      	cmp	r0, r2
 800703a:	bf38      	it	cc
 800703c:	2304      	movcc	r3, #4
 800703e:	f841 c003 	str.w	ip, [r1, r3]
 8007042:	f1bc 0f00 	cmp.w	ip, #0
 8007046:	d001      	beq.n	800704c <__lshift+0xac>
 8007048:	f108 0602 	add.w	r6, r8, #2
 800704c:	3e01      	subs	r6, #1
 800704e:	4638      	mov	r0, r7
 8007050:	612e      	str	r6, [r5, #16]
 8007052:	4621      	mov	r1, r4
 8007054:	f7ff fdd2 	bl	8006bfc <_Bfree>
 8007058:	4628      	mov	r0, r5
 800705a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800705e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007062:	3301      	adds	r3, #1
 8007064:	e7c1      	b.n	8006fea <__lshift+0x4a>
 8007066:	3904      	subs	r1, #4
 8007068:	f853 2b04 	ldr.w	r2, [r3], #4
 800706c:	f841 2f04 	str.w	r2, [r1, #4]!
 8007070:	4298      	cmp	r0, r3
 8007072:	d8f9      	bhi.n	8007068 <__lshift+0xc8>
 8007074:	e7ea      	b.n	800704c <__lshift+0xac>
 8007076:	bf00      	nop
 8007078:	08007c3b 	.word	0x08007c3b
 800707c:	08007cac 	.word	0x08007cac

08007080 <__mcmp>:
 8007080:	b530      	push	{r4, r5, lr}
 8007082:	6902      	ldr	r2, [r0, #16]
 8007084:	690c      	ldr	r4, [r1, #16]
 8007086:	1b12      	subs	r2, r2, r4
 8007088:	d10e      	bne.n	80070a8 <__mcmp+0x28>
 800708a:	f100 0314 	add.w	r3, r0, #20
 800708e:	3114      	adds	r1, #20
 8007090:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007094:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007098:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800709c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80070a0:	42a5      	cmp	r5, r4
 80070a2:	d003      	beq.n	80070ac <__mcmp+0x2c>
 80070a4:	d305      	bcc.n	80070b2 <__mcmp+0x32>
 80070a6:	2201      	movs	r2, #1
 80070a8:	4610      	mov	r0, r2
 80070aa:	bd30      	pop	{r4, r5, pc}
 80070ac:	4283      	cmp	r3, r0
 80070ae:	d3f3      	bcc.n	8007098 <__mcmp+0x18>
 80070b0:	e7fa      	b.n	80070a8 <__mcmp+0x28>
 80070b2:	f04f 32ff 	mov.w	r2, #4294967295
 80070b6:	e7f7      	b.n	80070a8 <__mcmp+0x28>

080070b8 <__mdiff>:
 80070b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070bc:	460c      	mov	r4, r1
 80070be:	4606      	mov	r6, r0
 80070c0:	4611      	mov	r1, r2
 80070c2:	4620      	mov	r0, r4
 80070c4:	4690      	mov	r8, r2
 80070c6:	f7ff ffdb 	bl	8007080 <__mcmp>
 80070ca:	1e05      	subs	r5, r0, #0
 80070cc:	d110      	bne.n	80070f0 <__mdiff+0x38>
 80070ce:	4629      	mov	r1, r5
 80070d0:	4630      	mov	r0, r6
 80070d2:	f7ff fd53 	bl	8006b7c <_Balloc>
 80070d6:	b930      	cbnz	r0, 80070e6 <__mdiff+0x2e>
 80070d8:	4b3a      	ldr	r3, [pc, #232]	; (80071c4 <__mdiff+0x10c>)
 80070da:	4602      	mov	r2, r0
 80070dc:	f240 2132 	movw	r1, #562	; 0x232
 80070e0:	4839      	ldr	r0, [pc, #228]	; (80071c8 <__mdiff+0x110>)
 80070e2:	f000 fb85 	bl	80077f0 <__assert_func>
 80070e6:	2301      	movs	r3, #1
 80070e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80070ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070f0:	bfa4      	itt	ge
 80070f2:	4643      	movge	r3, r8
 80070f4:	46a0      	movge	r8, r4
 80070f6:	4630      	mov	r0, r6
 80070f8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80070fc:	bfa6      	itte	ge
 80070fe:	461c      	movge	r4, r3
 8007100:	2500      	movge	r5, #0
 8007102:	2501      	movlt	r5, #1
 8007104:	f7ff fd3a 	bl	8006b7c <_Balloc>
 8007108:	b920      	cbnz	r0, 8007114 <__mdiff+0x5c>
 800710a:	4b2e      	ldr	r3, [pc, #184]	; (80071c4 <__mdiff+0x10c>)
 800710c:	4602      	mov	r2, r0
 800710e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007112:	e7e5      	b.n	80070e0 <__mdiff+0x28>
 8007114:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007118:	6926      	ldr	r6, [r4, #16]
 800711a:	60c5      	str	r5, [r0, #12]
 800711c:	f104 0914 	add.w	r9, r4, #20
 8007120:	f108 0514 	add.w	r5, r8, #20
 8007124:	f100 0e14 	add.w	lr, r0, #20
 8007128:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800712c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007130:	f108 0210 	add.w	r2, r8, #16
 8007134:	46f2      	mov	sl, lr
 8007136:	2100      	movs	r1, #0
 8007138:	f859 3b04 	ldr.w	r3, [r9], #4
 800713c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007140:	fa1f f883 	uxth.w	r8, r3
 8007144:	fa11 f18b 	uxtah	r1, r1, fp
 8007148:	0c1b      	lsrs	r3, r3, #16
 800714a:	eba1 0808 	sub.w	r8, r1, r8
 800714e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007152:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007156:	fa1f f888 	uxth.w	r8, r8
 800715a:	1419      	asrs	r1, r3, #16
 800715c:	454e      	cmp	r6, r9
 800715e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007162:	f84a 3b04 	str.w	r3, [sl], #4
 8007166:	d8e7      	bhi.n	8007138 <__mdiff+0x80>
 8007168:	1b33      	subs	r3, r6, r4
 800716a:	3b15      	subs	r3, #21
 800716c:	f023 0303 	bic.w	r3, r3, #3
 8007170:	3304      	adds	r3, #4
 8007172:	3415      	adds	r4, #21
 8007174:	42a6      	cmp	r6, r4
 8007176:	bf38      	it	cc
 8007178:	2304      	movcc	r3, #4
 800717a:	441d      	add	r5, r3
 800717c:	4473      	add	r3, lr
 800717e:	469e      	mov	lr, r3
 8007180:	462e      	mov	r6, r5
 8007182:	4566      	cmp	r6, ip
 8007184:	d30e      	bcc.n	80071a4 <__mdiff+0xec>
 8007186:	f10c 0203 	add.w	r2, ip, #3
 800718a:	1b52      	subs	r2, r2, r5
 800718c:	f022 0203 	bic.w	r2, r2, #3
 8007190:	3d03      	subs	r5, #3
 8007192:	45ac      	cmp	ip, r5
 8007194:	bf38      	it	cc
 8007196:	2200      	movcc	r2, #0
 8007198:	441a      	add	r2, r3
 800719a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800719e:	b17b      	cbz	r3, 80071c0 <__mdiff+0x108>
 80071a0:	6107      	str	r7, [r0, #16]
 80071a2:	e7a3      	b.n	80070ec <__mdiff+0x34>
 80071a4:	f856 8b04 	ldr.w	r8, [r6], #4
 80071a8:	fa11 f288 	uxtah	r2, r1, r8
 80071ac:	1414      	asrs	r4, r2, #16
 80071ae:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80071b2:	b292      	uxth	r2, r2
 80071b4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80071b8:	f84e 2b04 	str.w	r2, [lr], #4
 80071bc:	1421      	asrs	r1, r4, #16
 80071be:	e7e0      	b.n	8007182 <__mdiff+0xca>
 80071c0:	3f01      	subs	r7, #1
 80071c2:	e7ea      	b.n	800719a <__mdiff+0xe2>
 80071c4:	08007c3b 	.word	0x08007c3b
 80071c8:	08007cac 	.word	0x08007cac

080071cc <__d2b>:
 80071cc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80071d0:	4689      	mov	r9, r1
 80071d2:	2101      	movs	r1, #1
 80071d4:	ec57 6b10 	vmov	r6, r7, d0
 80071d8:	4690      	mov	r8, r2
 80071da:	f7ff fccf 	bl	8006b7c <_Balloc>
 80071de:	4604      	mov	r4, r0
 80071e0:	b930      	cbnz	r0, 80071f0 <__d2b+0x24>
 80071e2:	4602      	mov	r2, r0
 80071e4:	4b25      	ldr	r3, [pc, #148]	; (800727c <__d2b+0xb0>)
 80071e6:	4826      	ldr	r0, [pc, #152]	; (8007280 <__d2b+0xb4>)
 80071e8:	f240 310a 	movw	r1, #778	; 0x30a
 80071ec:	f000 fb00 	bl	80077f0 <__assert_func>
 80071f0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80071f4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80071f8:	bb35      	cbnz	r5, 8007248 <__d2b+0x7c>
 80071fa:	2e00      	cmp	r6, #0
 80071fc:	9301      	str	r3, [sp, #4]
 80071fe:	d028      	beq.n	8007252 <__d2b+0x86>
 8007200:	4668      	mov	r0, sp
 8007202:	9600      	str	r6, [sp, #0]
 8007204:	f7ff fd82 	bl	8006d0c <__lo0bits>
 8007208:	9900      	ldr	r1, [sp, #0]
 800720a:	b300      	cbz	r0, 800724e <__d2b+0x82>
 800720c:	9a01      	ldr	r2, [sp, #4]
 800720e:	f1c0 0320 	rsb	r3, r0, #32
 8007212:	fa02 f303 	lsl.w	r3, r2, r3
 8007216:	430b      	orrs	r3, r1
 8007218:	40c2      	lsrs	r2, r0
 800721a:	6163      	str	r3, [r4, #20]
 800721c:	9201      	str	r2, [sp, #4]
 800721e:	9b01      	ldr	r3, [sp, #4]
 8007220:	61a3      	str	r3, [r4, #24]
 8007222:	2b00      	cmp	r3, #0
 8007224:	bf14      	ite	ne
 8007226:	2202      	movne	r2, #2
 8007228:	2201      	moveq	r2, #1
 800722a:	6122      	str	r2, [r4, #16]
 800722c:	b1d5      	cbz	r5, 8007264 <__d2b+0x98>
 800722e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007232:	4405      	add	r5, r0
 8007234:	f8c9 5000 	str.w	r5, [r9]
 8007238:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800723c:	f8c8 0000 	str.w	r0, [r8]
 8007240:	4620      	mov	r0, r4
 8007242:	b003      	add	sp, #12
 8007244:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007248:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800724c:	e7d5      	b.n	80071fa <__d2b+0x2e>
 800724e:	6161      	str	r1, [r4, #20]
 8007250:	e7e5      	b.n	800721e <__d2b+0x52>
 8007252:	a801      	add	r0, sp, #4
 8007254:	f7ff fd5a 	bl	8006d0c <__lo0bits>
 8007258:	9b01      	ldr	r3, [sp, #4]
 800725a:	6163      	str	r3, [r4, #20]
 800725c:	2201      	movs	r2, #1
 800725e:	6122      	str	r2, [r4, #16]
 8007260:	3020      	adds	r0, #32
 8007262:	e7e3      	b.n	800722c <__d2b+0x60>
 8007264:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007268:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800726c:	f8c9 0000 	str.w	r0, [r9]
 8007270:	6918      	ldr	r0, [r3, #16]
 8007272:	f7ff fd2b 	bl	8006ccc <__hi0bits>
 8007276:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800727a:	e7df      	b.n	800723c <__d2b+0x70>
 800727c:	08007c3b 	.word	0x08007c3b
 8007280:	08007cac 	.word	0x08007cac

08007284 <_calloc_r>:
 8007284:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007286:	fba1 2402 	umull	r2, r4, r1, r2
 800728a:	b94c      	cbnz	r4, 80072a0 <_calloc_r+0x1c>
 800728c:	4611      	mov	r1, r2
 800728e:	9201      	str	r2, [sp, #4]
 8007290:	f000 f87a 	bl	8007388 <_malloc_r>
 8007294:	9a01      	ldr	r2, [sp, #4]
 8007296:	4605      	mov	r5, r0
 8007298:	b930      	cbnz	r0, 80072a8 <_calloc_r+0x24>
 800729a:	4628      	mov	r0, r5
 800729c:	b003      	add	sp, #12
 800729e:	bd30      	pop	{r4, r5, pc}
 80072a0:	220c      	movs	r2, #12
 80072a2:	6002      	str	r2, [r0, #0]
 80072a4:	2500      	movs	r5, #0
 80072a6:	e7f8      	b.n	800729a <_calloc_r+0x16>
 80072a8:	4621      	mov	r1, r4
 80072aa:	f7fd fdff 	bl	8004eac <memset>
 80072ae:	e7f4      	b.n	800729a <_calloc_r+0x16>

080072b0 <_free_r>:
 80072b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80072b2:	2900      	cmp	r1, #0
 80072b4:	d044      	beq.n	8007340 <_free_r+0x90>
 80072b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072ba:	9001      	str	r0, [sp, #4]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	f1a1 0404 	sub.w	r4, r1, #4
 80072c2:	bfb8      	it	lt
 80072c4:	18e4      	addlt	r4, r4, r3
 80072c6:	f000 fb19 	bl	80078fc <__malloc_lock>
 80072ca:	4a1e      	ldr	r2, [pc, #120]	; (8007344 <_free_r+0x94>)
 80072cc:	9801      	ldr	r0, [sp, #4]
 80072ce:	6813      	ldr	r3, [r2, #0]
 80072d0:	b933      	cbnz	r3, 80072e0 <_free_r+0x30>
 80072d2:	6063      	str	r3, [r4, #4]
 80072d4:	6014      	str	r4, [r2, #0]
 80072d6:	b003      	add	sp, #12
 80072d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80072dc:	f000 bb14 	b.w	8007908 <__malloc_unlock>
 80072e0:	42a3      	cmp	r3, r4
 80072e2:	d908      	bls.n	80072f6 <_free_r+0x46>
 80072e4:	6825      	ldr	r5, [r4, #0]
 80072e6:	1961      	adds	r1, r4, r5
 80072e8:	428b      	cmp	r3, r1
 80072ea:	bf01      	itttt	eq
 80072ec:	6819      	ldreq	r1, [r3, #0]
 80072ee:	685b      	ldreq	r3, [r3, #4]
 80072f0:	1949      	addeq	r1, r1, r5
 80072f2:	6021      	streq	r1, [r4, #0]
 80072f4:	e7ed      	b.n	80072d2 <_free_r+0x22>
 80072f6:	461a      	mov	r2, r3
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	b10b      	cbz	r3, 8007300 <_free_r+0x50>
 80072fc:	42a3      	cmp	r3, r4
 80072fe:	d9fa      	bls.n	80072f6 <_free_r+0x46>
 8007300:	6811      	ldr	r1, [r2, #0]
 8007302:	1855      	adds	r5, r2, r1
 8007304:	42a5      	cmp	r5, r4
 8007306:	d10b      	bne.n	8007320 <_free_r+0x70>
 8007308:	6824      	ldr	r4, [r4, #0]
 800730a:	4421      	add	r1, r4
 800730c:	1854      	adds	r4, r2, r1
 800730e:	42a3      	cmp	r3, r4
 8007310:	6011      	str	r1, [r2, #0]
 8007312:	d1e0      	bne.n	80072d6 <_free_r+0x26>
 8007314:	681c      	ldr	r4, [r3, #0]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	6053      	str	r3, [r2, #4]
 800731a:	4421      	add	r1, r4
 800731c:	6011      	str	r1, [r2, #0]
 800731e:	e7da      	b.n	80072d6 <_free_r+0x26>
 8007320:	d902      	bls.n	8007328 <_free_r+0x78>
 8007322:	230c      	movs	r3, #12
 8007324:	6003      	str	r3, [r0, #0]
 8007326:	e7d6      	b.n	80072d6 <_free_r+0x26>
 8007328:	6825      	ldr	r5, [r4, #0]
 800732a:	1961      	adds	r1, r4, r5
 800732c:	428b      	cmp	r3, r1
 800732e:	bf04      	itt	eq
 8007330:	6819      	ldreq	r1, [r3, #0]
 8007332:	685b      	ldreq	r3, [r3, #4]
 8007334:	6063      	str	r3, [r4, #4]
 8007336:	bf04      	itt	eq
 8007338:	1949      	addeq	r1, r1, r5
 800733a:	6021      	streq	r1, [r4, #0]
 800733c:	6054      	str	r4, [r2, #4]
 800733e:	e7ca      	b.n	80072d6 <_free_r+0x26>
 8007340:	b003      	add	sp, #12
 8007342:	bd30      	pop	{r4, r5, pc}
 8007344:	200003ec 	.word	0x200003ec

08007348 <sbrk_aligned>:
 8007348:	b570      	push	{r4, r5, r6, lr}
 800734a:	4e0e      	ldr	r6, [pc, #56]	; (8007384 <sbrk_aligned+0x3c>)
 800734c:	460c      	mov	r4, r1
 800734e:	6831      	ldr	r1, [r6, #0]
 8007350:	4605      	mov	r5, r0
 8007352:	b911      	cbnz	r1, 800735a <sbrk_aligned+0x12>
 8007354:	f000 f9e6 	bl	8007724 <_sbrk_r>
 8007358:	6030      	str	r0, [r6, #0]
 800735a:	4621      	mov	r1, r4
 800735c:	4628      	mov	r0, r5
 800735e:	f000 f9e1 	bl	8007724 <_sbrk_r>
 8007362:	1c43      	adds	r3, r0, #1
 8007364:	d00a      	beq.n	800737c <sbrk_aligned+0x34>
 8007366:	1cc4      	adds	r4, r0, #3
 8007368:	f024 0403 	bic.w	r4, r4, #3
 800736c:	42a0      	cmp	r0, r4
 800736e:	d007      	beq.n	8007380 <sbrk_aligned+0x38>
 8007370:	1a21      	subs	r1, r4, r0
 8007372:	4628      	mov	r0, r5
 8007374:	f000 f9d6 	bl	8007724 <_sbrk_r>
 8007378:	3001      	adds	r0, #1
 800737a:	d101      	bne.n	8007380 <sbrk_aligned+0x38>
 800737c:	f04f 34ff 	mov.w	r4, #4294967295
 8007380:	4620      	mov	r0, r4
 8007382:	bd70      	pop	{r4, r5, r6, pc}
 8007384:	200003f0 	.word	0x200003f0

08007388 <_malloc_r>:
 8007388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800738c:	1ccd      	adds	r5, r1, #3
 800738e:	f025 0503 	bic.w	r5, r5, #3
 8007392:	3508      	adds	r5, #8
 8007394:	2d0c      	cmp	r5, #12
 8007396:	bf38      	it	cc
 8007398:	250c      	movcc	r5, #12
 800739a:	2d00      	cmp	r5, #0
 800739c:	4607      	mov	r7, r0
 800739e:	db01      	blt.n	80073a4 <_malloc_r+0x1c>
 80073a0:	42a9      	cmp	r1, r5
 80073a2:	d905      	bls.n	80073b0 <_malloc_r+0x28>
 80073a4:	230c      	movs	r3, #12
 80073a6:	603b      	str	r3, [r7, #0]
 80073a8:	2600      	movs	r6, #0
 80073aa:	4630      	mov	r0, r6
 80073ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073b0:	4e2e      	ldr	r6, [pc, #184]	; (800746c <_malloc_r+0xe4>)
 80073b2:	f000 faa3 	bl	80078fc <__malloc_lock>
 80073b6:	6833      	ldr	r3, [r6, #0]
 80073b8:	461c      	mov	r4, r3
 80073ba:	bb34      	cbnz	r4, 800740a <_malloc_r+0x82>
 80073bc:	4629      	mov	r1, r5
 80073be:	4638      	mov	r0, r7
 80073c0:	f7ff ffc2 	bl	8007348 <sbrk_aligned>
 80073c4:	1c43      	adds	r3, r0, #1
 80073c6:	4604      	mov	r4, r0
 80073c8:	d14d      	bne.n	8007466 <_malloc_r+0xde>
 80073ca:	6834      	ldr	r4, [r6, #0]
 80073cc:	4626      	mov	r6, r4
 80073ce:	2e00      	cmp	r6, #0
 80073d0:	d140      	bne.n	8007454 <_malloc_r+0xcc>
 80073d2:	6823      	ldr	r3, [r4, #0]
 80073d4:	4631      	mov	r1, r6
 80073d6:	4638      	mov	r0, r7
 80073d8:	eb04 0803 	add.w	r8, r4, r3
 80073dc:	f000 f9a2 	bl	8007724 <_sbrk_r>
 80073e0:	4580      	cmp	r8, r0
 80073e2:	d13a      	bne.n	800745a <_malloc_r+0xd2>
 80073e4:	6821      	ldr	r1, [r4, #0]
 80073e6:	3503      	adds	r5, #3
 80073e8:	1a6d      	subs	r5, r5, r1
 80073ea:	f025 0503 	bic.w	r5, r5, #3
 80073ee:	3508      	adds	r5, #8
 80073f0:	2d0c      	cmp	r5, #12
 80073f2:	bf38      	it	cc
 80073f4:	250c      	movcc	r5, #12
 80073f6:	4629      	mov	r1, r5
 80073f8:	4638      	mov	r0, r7
 80073fa:	f7ff ffa5 	bl	8007348 <sbrk_aligned>
 80073fe:	3001      	adds	r0, #1
 8007400:	d02b      	beq.n	800745a <_malloc_r+0xd2>
 8007402:	6823      	ldr	r3, [r4, #0]
 8007404:	442b      	add	r3, r5
 8007406:	6023      	str	r3, [r4, #0]
 8007408:	e00e      	b.n	8007428 <_malloc_r+0xa0>
 800740a:	6822      	ldr	r2, [r4, #0]
 800740c:	1b52      	subs	r2, r2, r5
 800740e:	d41e      	bmi.n	800744e <_malloc_r+0xc6>
 8007410:	2a0b      	cmp	r2, #11
 8007412:	d916      	bls.n	8007442 <_malloc_r+0xba>
 8007414:	1961      	adds	r1, r4, r5
 8007416:	42a3      	cmp	r3, r4
 8007418:	6025      	str	r5, [r4, #0]
 800741a:	bf18      	it	ne
 800741c:	6059      	strne	r1, [r3, #4]
 800741e:	6863      	ldr	r3, [r4, #4]
 8007420:	bf08      	it	eq
 8007422:	6031      	streq	r1, [r6, #0]
 8007424:	5162      	str	r2, [r4, r5]
 8007426:	604b      	str	r3, [r1, #4]
 8007428:	4638      	mov	r0, r7
 800742a:	f104 060b 	add.w	r6, r4, #11
 800742e:	f000 fa6b 	bl	8007908 <__malloc_unlock>
 8007432:	f026 0607 	bic.w	r6, r6, #7
 8007436:	1d23      	adds	r3, r4, #4
 8007438:	1af2      	subs	r2, r6, r3
 800743a:	d0b6      	beq.n	80073aa <_malloc_r+0x22>
 800743c:	1b9b      	subs	r3, r3, r6
 800743e:	50a3      	str	r3, [r4, r2]
 8007440:	e7b3      	b.n	80073aa <_malloc_r+0x22>
 8007442:	6862      	ldr	r2, [r4, #4]
 8007444:	42a3      	cmp	r3, r4
 8007446:	bf0c      	ite	eq
 8007448:	6032      	streq	r2, [r6, #0]
 800744a:	605a      	strne	r2, [r3, #4]
 800744c:	e7ec      	b.n	8007428 <_malloc_r+0xa0>
 800744e:	4623      	mov	r3, r4
 8007450:	6864      	ldr	r4, [r4, #4]
 8007452:	e7b2      	b.n	80073ba <_malloc_r+0x32>
 8007454:	4634      	mov	r4, r6
 8007456:	6876      	ldr	r6, [r6, #4]
 8007458:	e7b9      	b.n	80073ce <_malloc_r+0x46>
 800745a:	230c      	movs	r3, #12
 800745c:	603b      	str	r3, [r7, #0]
 800745e:	4638      	mov	r0, r7
 8007460:	f000 fa52 	bl	8007908 <__malloc_unlock>
 8007464:	e7a1      	b.n	80073aa <_malloc_r+0x22>
 8007466:	6025      	str	r5, [r4, #0]
 8007468:	e7de      	b.n	8007428 <_malloc_r+0xa0>
 800746a:	bf00      	nop
 800746c:	200003ec 	.word	0x200003ec

08007470 <__sfputc_r>:
 8007470:	6893      	ldr	r3, [r2, #8]
 8007472:	3b01      	subs	r3, #1
 8007474:	2b00      	cmp	r3, #0
 8007476:	b410      	push	{r4}
 8007478:	6093      	str	r3, [r2, #8]
 800747a:	da08      	bge.n	800748e <__sfputc_r+0x1e>
 800747c:	6994      	ldr	r4, [r2, #24]
 800747e:	42a3      	cmp	r3, r4
 8007480:	db01      	blt.n	8007486 <__sfputc_r+0x16>
 8007482:	290a      	cmp	r1, #10
 8007484:	d103      	bne.n	800748e <__sfputc_r+0x1e>
 8007486:	f85d 4b04 	ldr.w	r4, [sp], #4
 800748a:	f7fe ba0f 	b.w	80058ac <__swbuf_r>
 800748e:	6813      	ldr	r3, [r2, #0]
 8007490:	1c58      	adds	r0, r3, #1
 8007492:	6010      	str	r0, [r2, #0]
 8007494:	7019      	strb	r1, [r3, #0]
 8007496:	4608      	mov	r0, r1
 8007498:	f85d 4b04 	ldr.w	r4, [sp], #4
 800749c:	4770      	bx	lr

0800749e <__sfputs_r>:
 800749e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074a0:	4606      	mov	r6, r0
 80074a2:	460f      	mov	r7, r1
 80074a4:	4614      	mov	r4, r2
 80074a6:	18d5      	adds	r5, r2, r3
 80074a8:	42ac      	cmp	r4, r5
 80074aa:	d101      	bne.n	80074b0 <__sfputs_r+0x12>
 80074ac:	2000      	movs	r0, #0
 80074ae:	e007      	b.n	80074c0 <__sfputs_r+0x22>
 80074b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074b4:	463a      	mov	r2, r7
 80074b6:	4630      	mov	r0, r6
 80074b8:	f7ff ffda 	bl	8007470 <__sfputc_r>
 80074bc:	1c43      	adds	r3, r0, #1
 80074be:	d1f3      	bne.n	80074a8 <__sfputs_r+0xa>
 80074c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080074c4 <_vfiprintf_r>:
 80074c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074c8:	460d      	mov	r5, r1
 80074ca:	b09d      	sub	sp, #116	; 0x74
 80074cc:	4614      	mov	r4, r2
 80074ce:	4698      	mov	r8, r3
 80074d0:	4606      	mov	r6, r0
 80074d2:	b118      	cbz	r0, 80074dc <_vfiprintf_r+0x18>
 80074d4:	6983      	ldr	r3, [r0, #24]
 80074d6:	b90b      	cbnz	r3, 80074dc <_vfiprintf_r+0x18>
 80074d8:	f7ff fa3e 	bl	8006958 <__sinit>
 80074dc:	4b89      	ldr	r3, [pc, #548]	; (8007704 <_vfiprintf_r+0x240>)
 80074de:	429d      	cmp	r5, r3
 80074e0:	d11b      	bne.n	800751a <_vfiprintf_r+0x56>
 80074e2:	6875      	ldr	r5, [r6, #4]
 80074e4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80074e6:	07d9      	lsls	r1, r3, #31
 80074e8:	d405      	bmi.n	80074f6 <_vfiprintf_r+0x32>
 80074ea:	89ab      	ldrh	r3, [r5, #12]
 80074ec:	059a      	lsls	r2, r3, #22
 80074ee:	d402      	bmi.n	80074f6 <_vfiprintf_r+0x32>
 80074f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80074f2:	f7ff fad4 	bl	8006a9e <__retarget_lock_acquire_recursive>
 80074f6:	89ab      	ldrh	r3, [r5, #12]
 80074f8:	071b      	lsls	r3, r3, #28
 80074fa:	d501      	bpl.n	8007500 <_vfiprintf_r+0x3c>
 80074fc:	692b      	ldr	r3, [r5, #16]
 80074fe:	b9eb      	cbnz	r3, 800753c <_vfiprintf_r+0x78>
 8007500:	4629      	mov	r1, r5
 8007502:	4630      	mov	r0, r6
 8007504:	f7fe fa24 	bl	8005950 <__swsetup_r>
 8007508:	b1c0      	cbz	r0, 800753c <_vfiprintf_r+0x78>
 800750a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800750c:	07dc      	lsls	r4, r3, #31
 800750e:	d50e      	bpl.n	800752e <_vfiprintf_r+0x6a>
 8007510:	f04f 30ff 	mov.w	r0, #4294967295
 8007514:	b01d      	add	sp, #116	; 0x74
 8007516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800751a:	4b7b      	ldr	r3, [pc, #492]	; (8007708 <_vfiprintf_r+0x244>)
 800751c:	429d      	cmp	r5, r3
 800751e:	d101      	bne.n	8007524 <_vfiprintf_r+0x60>
 8007520:	68b5      	ldr	r5, [r6, #8]
 8007522:	e7df      	b.n	80074e4 <_vfiprintf_r+0x20>
 8007524:	4b79      	ldr	r3, [pc, #484]	; (800770c <_vfiprintf_r+0x248>)
 8007526:	429d      	cmp	r5, r3
 8007528:	bf08      	it	eq
 800752a:	68f5      	ldreq	r5, [r6, #12]
 800752c:	e7da      	b.n	80074e4 <_vfiprintf_r+0x20>
 800752e:	89ab      	ldrh	r3, [r5, #12]
 8007530:	0598      	lsls	r0, r3, #22
 8007532:	d4ed      	bmi.n	8007510 <_vfiprintf_r+0x4c>
 8007534:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007536:	f7ff fab3 	bl	8006aa0 <__retarget_lock_release_recursive>
 800753a:	e7e9      	b.n	8007510 <_vfiprintf_r+0x4c>
 800753c:	2300      	movs	r3, #0
 800753e:	9309      	str	r3, [sp, #36]	; 0x24
 8007540:	2320      	movs	r3, #32
 8007542:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007546:	f8cd 800c 	str.w	r8, [sp, #12]
 800754a:	2330      	movs	r3, #48	; 0x30
 800754c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007710 <_vfiprintf_r+0x24c>
 8007550:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007554:	f04f 0901 	mov.w	r9, #1
 8007558:	4623      	mov	r3, r4
 800755a:	469a      	mov	sl, r3
 800755c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007560:	b10a      	cbz	r2, 8007566 <_vfiprintf_r+0xa2>
 8007562:	2a25      	cmp	r2, #37	; 0x25
 8007564:	d1f9      	bne.n	800755a <_vfiprintf_r+0x96>
 8007566:	ebba 0b04 	subs.w	fp, sl, r4
 800756a:	d00b      	beq.n	8007584 <_vfiprintf_r+0xc0>
 800756c:	465b      	mov	r3, fp
 800756e:	4622      	mov	r2, r4
 8007570:	4629      	mov	r1, r5
 8007572:	4630      	mov	r0, r6
 8007574:	f7ff ff93 	bl	800749e <__sfputs_r>
 8007578:	3001      	adds	r0, #1
 800757a:	f000 80aa 	beq.w	80076d2 <_vfiprintf_r+0x20e>
 800757e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007580:	445a      	add	r2, fp
 8007582:	9209      	str	r2, [sp, #36]	; 0x24
 8007584:	f89a 3000 	ldrb.w	r3, [sl]
 8007588:	2b00      	cmp	r3, #0
 800758a:	f000 80a2 	beq.w	80076d2 <_vfiprintf_r+0x20e>
 800758e:	2300      	movs	r3, #0
 8007590:	f04f 32ff 	mov.w	r2, #4294967295
 8007594:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007598:	f10a 0a01 	add.w	sl, sl, #1
 800759c:	9304      	str	r3, [sp, #16]
 800759e:	9307      	str	r3, [sp, #28]
 80075a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80075a4:	931a      	str	r3, [sp, #104]	; 0x68
 80075a6:	4654      	mov	r4, sl
 80075a8:	2205      	movs	r2, #5
 80075aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075ae:	4858      	ldr	r0, [pc, #352]	; (8007710 <_vfiprintf_r+0x24c>)
 80075b0:	f7f8 fe3e 	bl	8000230 <memchr>
 80075b4:	9a04      	ldr	r2, [sp, #16]
 80075b6:	b9d8      	cbnz	r0, 80075f0 <_vfiprintf_r+0x12c>
 80075b8:	06d1      	lsls	r1, r2, #27
 80075ba:	bf44      	itt	mi
 80075bc:	2320      	movmi	r3, #32
 80075be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075c2:	0713      	lsls	r3, r2, #28
 80075c4:	bf44      	itt	mi
 80075c6:	232b      	movmi	r3, #43	; 0x2b
 80075c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80075cc:	f89a 3000 	ldrb.w	r3, [sl]
 80075d0:	2b2a      	cmp	r3, #42	; 0x2a
 80075d2:	d015      	beq.n	8007600 <_vfiprintf_r+0x13c>
 80075d4:	9a07      	ldr	r2, [sp, #28]
 80075d6:	4654      	mov	r4, sl
 80075d8:	2000      	movs	r0, #0
 80075da:	f04f 0c0a 	mov.w	ip, #10
 80075de:	4621      	mov	r1, r4
 80075e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075e4:	3b30      	subs	r3, #48	; 0x30
 80075e6:	2b09      	cmp	r3, #9
 80075e8:	d94e      	bls.n	8007688 <_vfiprintf_r+0x1c4>
 80075ea:	b1b0      	cbz	r0, 800761a <_vfiprintf_r+0x156>
 80075ec:	9207      	str	r2, [sp, #28]
 80075ee:	e014      	b.n	800761a <_vfiprintf_r+0x156>
 80075f0:	eba0 0308 	sub.w	r3, r0, r8
 80075f4:	fa09 f303 	lsl.w	r3, r9, r3
 80075f8:	4313      	orrs	r3, r2
 80075fa:	9304      	str	r3, [sp, #16]
 80075fc:	46a2      	mov	sl, r4
 80075fe:	e7d2      	b.n	80075a6 <_vfiprintf_r+0xe2>
 8007600:	9b03      	ldr	r3, [sp, #12]
 8007602:	1d19      	adds	r1, r3, #4
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	9103      	str	r1, [sp, #12]
 8007608:	2b00      	cmp	r3, #0
 800760a:	bfbb      	ittet	lt
 800760c:	425b      	neglt	r3, r3
 800760e:	f042 0202 	orrlt.w	r2, r2, #2
 8007612:	9307      	strge	r3, [sp, #28]
 8007614:	9307      	strlt	r3, [sp, #28]
 8007616:	bfb8      	it	lt
 8007618:	9204      	strlt	r2, [sp, #16]
 800761a:	7823      	ldrb	r3, [r4, #0]
 800761c:	2b2e      	cmp	r3, #46	; 0x2e
 800761e:	d10c      	bne.n	800763a <_vfiprintf_r+0x176>
 8007620:	7863      	ldrb	r3, [r4, #1]
 8007622:	2b2a      	cmp	r3, #42	; 0x2a
 8007624:	d135      	bne.n	8007692 <_vfiprintf_r+0x1ce>
 8007626:	9b03      	ldr	r3, [sp, #12]
 8007628:	1d1a      	adds	r2, r3, #4
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	9203      	str	r2, [sp, #12]
 800762e:	2b00      	cmp	r3, #0
 8007630:	bfb8      	it	lt
 8007632:	f04f 33ff 	movlt.w	r3, #4294967295
 8007636:	3402      	adds	r4, #2
 8007638:	9305      	str	r3, [sp, #20]
 800763a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007720 <_vfiprintf_r+0x25c>
 800763e:	7821      	ldrb	r1, [r4, #0]
 8007640:	2203      	movs	r2, #3
 8007642:	4650      	mov	r0, sl
 8007644:	f7f8 fdf4 	bl	8000230 <memchr>
 8007648:	b140      	cbz	r0, 800765c <_vfiprintf_r+0x198>
 800764a:	2340      	movs	r3, #64	; 0x40
 800764c:	eba0 000a 	sub.w	r0, r0, sl
 8007650:	fa03 f000 	lsl.w	r0, r3, r0
 8007654:	9b04      	ldr	r3, [sp, #16]
 8007656:	4303      	orrs	r3, r0
 8007658:	3401      	adds	r4, #1
 800765a:	9304      	str	r3, [sp, #16]
 800765c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007660:	482c      	ldr	r0, [pc, #176]	; (8007714 <_vfiprintf_r+0x250>)
 8007662:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007666:	2206      	movs	r2, #6
 8007668:	f7f8 fde2 	bl	8000230 <memchr>
 800766c:	2800      	cmp	r0, #0
 800766e:	d03f      	beq.n	80076f0 <_vfiprintf_r+0x22c>
 8007670:	4b29      	ldr	r3, [pc, #164]	; (8007718 <_vfiprintf_r+0x254>)
 8007672:	bb1b      	cbnz	r3, 80076bc <_vfiprintf_r+0x1f8>
 8007674:	9b03      	ldr	r3, [sp, #12]
 8007676:	3307      	adds	r3, #7
 8007678:	f023 0307 	bic.w	r3, r3, #7
 800767c:	3308      	adds	r3, #8
 800767e:	9303      	str	r3, [sp, #12]
 8007680:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007682:	443b      	add	r3, r7
 8007684:	9309      	str	r3, [sp, #36]	; 0x24
 8007686:	e767      	b.n	8007558 <_vfiprintf_r+0x94>
 8007688:	fb0c 3202 	mla	r2, ip, r2, r3
 800768c:	460c      	mov	r4, r1
 800768e:	2001      	movs	r0, #1
 8007690:	e7a5      	b.n	80075de <_vfiprintf_r+0x11a>
 8007692:	2300      	movs	r3, #0
 8007694:	3401      	adds	r4, #1
 8007696:	9305      	str	r3, [sp, #20]
 8007698:	4619      	mov	r1, r3
 800769a:	f04f 0c0a 	mov.w	ip, #10
 800769e:	4620      	mov	r0, r4
 80076a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80076a4:	3a30      	subs	r2, #48	; 0x30
 80076a6:	2a09      	cmp	r2, #9
 80076a8:	d903      	bls.n	80076b2 <_vfiprintf_r+0x1ee>
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d0c5      	beq.n	800763a <_vfiprintf_r+0x176>
 80076ae:	9105      	str	r1, [sp, #20]
 80076b0:	e7c3      	b.n	800763a <_vfiprintf_r+0x176>
 80076b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80076b6:	4604      	mov	r4, r0
 80076b8:	2301      	movs	r3, #1
 80076ba:	e7f0      	b.n	800769e <_vfiprintf_r+0x1da>
 80076bc:	ab03      	add	r3, sp, #12
 80076be:	9300      	str	r3, [sp, #0]
 80076c0:	462a      	mov	r2, r5
 80076c2:	4b16      	ldr	r3, [pc, #88]	; (800771c <_vfiprintf_r+0x258>)
 80076c4:	a904      	add	r1, sp, #16
 80076c6:	4630      	mov	r0, r6
 80076c8:	f7fd fc98 	bl	8004ffc <_printf_float>
 80076cc:	4607      	mov	r7, r0
 80076ce:	1c78      	adds	r0, r7, #1
 80076d0:	d1d6      	bne.n	8007680 <_vfiprintf_r+0x1bc>
 80076d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076d4:	07d9      	lsls	r1, r3, #31
 80076d6:	d405      	bmi.n	80076e4 <_vfiprintf_r+0x220>
 80076d8:	89ab      	ldrh	r3, [r5, #12]
 80076da:	059a      	lsls	r2, r3, #22
 80076dc:	d402      	bmi.n	80076e4 <_vfiprintf_r+0x220>
 80076de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076e0:	f7ff f9de 	bl	8006aa0 <__retarget_lock_release_recursive>
 80076e4:	89ab      	ldrh	r3, [r5, #12]
 80076e6:	065b      	lsls	r3, r3, #25
 80076e8:	f53f af12 	bmi.w	8007510 <_vfiprintf_r+0x4c>
 80076ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80076ee:	e711      	b.n	8007514 <_vfiprintf_r+0x50>
 80076f0:	ab03      	add	r3, sp, #12
 80076f2:	9300      	str	r3, [sp, #0]
 80076f4:	462a      	mov	r2, r5
 80076f6:	4b09      	ldr	r3, [pc, #36]	; (800771c <_vfiprintf_r+0x258>)
 80076f8:	a904      	add	r1, sp, #16
 80076fa:	4630      	mov	r0, r6
 80076fc:	f7fd ff22 	bl	8005544 <_printf_i>
 8007700:	e7e4      	b.n	80076cc <_vfiprintf_r+0x208>
 8007702:	bf00      	nop
 8007704:	08007c6c 	.word	0x08007c6c
 8007708:	08007c8c 	.word	0x08007c8c
 800770c:	08007c4c 	.word	0x08007c4c
 8007710:	08007e04 	.word	0x08007e04
 8007714:	08007e0e 	.word	0x08007e0e
 8007718:	08004ffd 	.word	0x08004ffd
 800771c:	0800749f 	.word	0x0800749f
 8007720:	08007e0a 	.word	0x08007e0a

08007724 <_sbrk_r>:
 8007724:	b538      	push	{r3, r4, r5, lr}
 8007726:	4d06      	ldr	r5, [pc, #24]	; (8007740 <_sbrk_r+0x1c>)
 8007728:	2300      	movs	r3, #0
 800772a:	4604      	mov	r4, r0
 800772c:	4608      	mov	r0, r1
 800772e:	602b      	str	r3, [r5, #0]
 8007730:	f7fa f87c 	bl	800182c <_sbrk>
 8007734:	1c43      	adds	r3, r0, #1
 8007736:	d102      	bne.n	800773e <_sbrk_r+0x1a>
 8007738:	682b      	ldr	r3, [r5, #0]
 800773a:	b103      	cbz	r3, 800773e <_sbrk_r+0x1a>
 800773c:	6023      	str	r3, [r4, #0]
 800773e:	bd38      	pop	{r3, r4, r5, pc}
 8007740:	200003f4 	.word	0x200003f4

08007744 <__sread>:
 8007744:	b510      	push	{r4, lr}
 8007746:	460c      	mov	r4, r1
 8007748:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800774c:	f000 f8e2 	bl	8007914 <_read_r>
 8007750:	2800      	cmp	r0, #0
 8007752:	bfab      	itete	ge
 8007754:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007756:	89a3      	ldrhlt	r3, [r4, #12]
 8007758:	181b      	addge	r3, r3, r0
 800775a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800775e:	bfac      	ite	ge
 8007760:	6563      	strge	r3, [r4, #84]	; 0x54
 8007762:	81a3      	strhlt	r3, [r4, #12]
 8007764:	bd10      	pop	{r4, pc}

08007766 <__swrite>:
 8007766:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800776a:	461f      	mov	r7, r3
 800776c:	898b      	ldrh	r3, [r1, #12]
 800776e:	05db      	lsls	r3, r3, #23
 8007770:	4605      	mov	r5, r0
 8007772:	460c      	mov	r4, r1
 8007774:	4616      	mov	r6, r2
 8007776:	d505      	bpl.n	8007784 <__swrite+0x1e>
 8007778:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800777c:	2302      	movs	r3, #2
 800777e:	2200      	movs	r2, #0
 8007780:	f000 f898 	bl	80078b4 <_lseek_r>
 8007784:	89a3      	ldrh	r3, [r4, #12]
 8007786:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800778a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800778e:	81a3      	strh	r3, [r4, #12]
 8007790:	4632      	mov	r2, r6
 8007792:	463b      	mov	r3, r7
 8007794:	4628      	mov	r0, r5
 8007796:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800779a:	f000 b817 	b.w	80077cc <_write_r>

0800779e <__sseek>:
 800779e:	b510      	push	{r4, lr}
 80077a0:	460c      	mov	r4, r1
 80077a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077a6:	f000 f885 	bl	80078b4 <_lseek_r>
 80077aa:	1c43      	adds	r3, r0, #1
 80077ac:	89a3      	ldrh	r3, [r4, #12]
 80077ae:	bf15      	itete	ne
 80077b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80077b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80077b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80077ba:	81a3      	strheq	r3, [r4, #12]
 80077bc:	bf18      	it	ne
 80077be:	81a3      	strhne	r3, [r4, #12]
 80077c0:	bd10      	pop	{r4, pc}

080077c2 <__sclose>:
 80077c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077c6:	f000 b831 	b.w	800782c <_close_r>
	...

080077cc <_write_r>:
 80077cc:	b538      	push	{r3, r4, r5, lr}
 80077ce:	4d07      	ldr	r5, [pc, #28]	; (80077ec <_write_r+0x20>)
 80077d0:	4604      	mov	r4, r0
 80077d2:	4608      	mov	r0, r1
 80077d4:	4611      	mov	r1, r2
 80077d6:	2200      	movs	r2, #0
 80077d8:	602a      	str	r2, [r5, #0]
 80077da:	461a      	mov	r2, r3
 80077dc:	f7f9 ffd6 	bl	800178c <_write>
 80077e0:	1c43      	adds	r3, r0, #1
 80077e2:	d102      	bne.n	80077ea <_write_r+0x1e>
 80077e4:	682b      	ldr	r3, [r5, #0]
 80077e6:	b103      	cbz	r3, 80077ea <_write_r+0x1e>
 80077e8:	6023      	str	r3, [r4, #0]
 80077ea:	bd38      	pop	{r3, r4, r5, pc}
 80077ec:	200003f4 	.word	0x200003f4

080077f0 <__assert_func>:
 80077f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80077f2:	4614      	mov	r4, r2
 80077f4:	461a      	mov	r2, r3
 80077f6:	4b09      	ldr	r3, [pc, #36]	; (800781c <__assert_func+0x2c>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4605      	mov	r5, r0
 80077fc:	68d8      	ldr	r0, [r3, #12]
 80077fe:	b14c      	cbz	r4, 8007814 <__assert_func+0x24>
 8007800:	4b07      	ldr	r3, [pc, #28]	; (8007820 <__assert_func+0x30>)
 8007802:	9100      	str	r1, [sp, #0]
 8007804:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007808:	4906      	ldr	r1, [pc, #24]	; (8007824 <__assert_func+0x34>)
 800780a:	462b      	mov	r3, r5
 800780c:	f000 f81e 	bl	800784c <fiprintf>
 8007810:	f000 f89f 	bl	8007952 <abort>
 8007814:	4b04      	ldr	r3, [pc, #16]	; (8007828 <__assert_func+0x38>)
 8007816:	461c      	mov	r4, r3
 8007818:	e7f3      	b.n	8007802 <__assert_func+0x12>
 800781a:	bf00      	nop
 800781c:	2000000c 	.word	0x2000000c
 8007820:	08007e15 	.word	0x08007e15
 8007824:	08007e22 	.word	0x08007e22
 8007828:	08007e50 	.word	0x08007e50

0800782c <_close_r>:
 800782c:	b538      	push	{r3, r4, r5, lr}
 800782e:	4d06      	ldr	r5, [pc, #24]	; (8007848 <_close_r+0x1c>)
 8007830:	2300      	movs	r3, #0
 8007832:	4604      	mov	r4, r0
 8007834:	4608      	mov	r0, r1
 8007836:	602b      	str	r3, [r5, #0]
 8007838:	f7f9 ffc4 	bl	80017c4 <_close>
 800783c:	1c43      	adds	r3, r0, #1
 800783e:	d102      	bne.n	8007846 <_close_r+0x1a>
 8007840:	682b      	ldr	r3, [r5, #0]
 8007842:	b103      	cbz	r3, 8007846 <_close_r+0x1a>
 8007844:	6023      	str	r3, [r4, #0]
 8007846:	bd38      	pop	{r3, r4, r5, pc}
 8007848:	200003f4 	.word	0x200003f4

0800784c <fiprintf>:
 800784c:	b40e      	push	{r1, r2, r3}
 800784e:	b503      	push	{r0, r1, lr}
 8007850:	4601      	mov	r1, r0
 8007852:	ab03      	add	r3, sp, #12
 8007854:	4805      	ldr	r0, [pc, #20]	; (800786c <fiprintf+0x20>)
 8007856:	f853 2b04 	ldr.w	r2, [r3], #4
 800785a:	6800      	ldr	r0, [r0, #0]
 800785c:	9301      	str	r3, [sp, #4]
 800785e:	f7ff fe31 	bl	80074c4 <_vfiprintf_r>
 8007862:	b002      	add	sp, #8
 8007864:	f85d eb04 	ldr.w	lr, [sp], #4
 8007868:	b003      	add	sp, #12
 800786a:	4770      	bx	lr
 800786c:	2000000c 	.word	0x2000000c

08007870 <_fstat_r>:
 8007870:	b538      	push	{r3, r4, r5, lr}
 8007872:	4d07      	ldr	r5, [pc, #28]	; (8007890 <_fstat_r+0x20>)
 8007874:	2300      	movs	r3, #0
 8007876:	4604      	mov	r4, r0
 8007878:	4608      	mov	r0, r1
 800787a:	4611      	mov	r1, r2
 800787c:	602b      	str	r3, [r5, #0]
 800787e:	f7f9 ffad 	bl	80017dc <_fstat>
 8007882:	1c43      	adds	r3, r0, #1
 8007884:	d102      	bne.n	800788c <_fstat_r+0x1c>
 8007886:	682b      	ldr	r3, [r5, #0]
 8007888:	b103      	cbz	r3, 800788c <_fstat_r+0x1c>
 800788a:	6023      	str	r3, [r4, #0]
 800788c:	bd38      	pop	{r3, r4, r5, pc}
 800788e:	bf00      	nop
 8007890:	200003f4 	.word	0x200003f4

08007894 <_isatty_r>:
 8007894:	b538      	push	{r3, r4, r5, lr}
 8007896:	4d06      	ldr	r5, [pc, #24]	; (80078b0 <_isatty_r+0x1c>)
 8007898:	2300      	movs	r3, #0
 800789a:	4604      	mov	r4, r0
 800789c:	4608      	mov	r0, r1
 800789e:	602b      	str	r3, [r5, #0]
 80078a0:	f7f9 ffac 	bl	80017fc <_isatty>
 80078a4:	1c43      	adds	r3, r0, #1
 80078a6:	d102      	bne.n	80078ae <_isatty_r+0x1a>
 80078a8:	682b      	ldr	r3, [r5, #0]
 80078aa:	b103      	cbz	r3, 80078ae <_isatty_r+0x1a>
 80078ac:	6023      	str	r3, [r4, #0]
 80078ae:	bd38      	pop	{r3, r4, r5, pc}
 80078b0:	200003f4 	.word	0x200003f4

080078b4 <_lseek_r>:
 80078b4:	b538      	push	{r3, r4, r5, lr}
 80078b6:	4d07      	ldr	r5, [pc, #28]	; (80078d4 <_lseek_r+0x20>)
 80078b8:	4604      	mov	r4, r0
 80078ba:	4608      	mov	r0, r1
 80078bc:	4611      	mov	r1, r2
 80078be:	2200      	movs	r2, #0
 80078c0:	602a      	str	r2, [r5, #0]
 80078c2:	461a      	mov	r2, r3
 80078c4:	f7f9 ffa5 	bl	8001812 <_lseek>
 80078c8:	1c43      	adds	r3, r0, #1
 80078ca:	d102      	bne.n	80078d2 <_lseek_r+0x1e>
 80078cc:	682b      	ldr	r3, [r5, #0]
 80078ce:	b103      	cbz	r3, 80078d2 <_lseek_r+0x1e>
 80078d0:	6023      	str	r3, [r4, #0]
 80078d2:	bd38      	pop	{r3, r4, r5, pc}
 80078d4:	200003f4 	.word	0x200003f4

080078d8 <__ascii_mbtowc>:
 80078d8:	b082      	sub	sp, #8
 80078da:	b901      	cbnz	r1, 80078de <__ascii_mbtowc+0x6>
 80078dc:	a901      	add	r1, sp, #4
 80078de:	b142      	cbz	r2, 80078f2 <__ascii_mbtowc+0x1a>
 80078e0:	b14b      	cbz	r3, 80078f6 <__ascii_mbtowc+0x1e>
 80078e2:	7813      	ldrb	r3, [r2, #0]
 80078e4:	600b      	str	r3, [r1, #0]
 80078e6:	7812      	ldrb	r2, [r2, #0]
 80078e8:	1e10      	subs	r0, r2, #0
 80078ea:	bf18      	it	ne
 80078ec:	2001      	movne	r0, #1
 80078ee:	b002      	add	sp, #8
 80078f0:	4770      	bx	lr
 80078f2:	4610      	mov	r0, r2
 80078f4:	e7fb      	b.n	80078ee <__ascii_mbtowc+0x16>
 80078f6:	f06f 0001 	mvn.w	r0, #1
 80078fa:	e7f8      	b.n	80078ee <__ascii_mbtowc+0x16>

080078fc <__malloc_lock>:
 80078fc:	4801      	ldr	r0, [pc, #4]	; (8007904 <__malloc_lock+0x8>)
 80078fe:	f7ff b8ce 	b.w	8006a9e <__retarget_lock_acquire_recursive>
 8007902:	bf00      	nop
 8007904:	200003e8 	.word	0x200003e8

08007908 <__malloc_unlock>:
 8007908:	4801      	ldr	r0, [pc, #4]	; (8007910 <__malloc_unlock+0x8>)
 800790a:	f7ff b8c9 	b.w	8006aa0 <__retarget_lock_release_recursive>
 800790e:	bf00      	nop
 8007910:	200003e8 	.word	0x200003e8

08007914 <_read_r>:
 8007914:	b538      	push	{r3, r4, r5, lr}
 8007916:	4d07      	ldr	r5, [pc, #28]	; (8007934 <_read_r+0x20>)
 8007918:	4604      	mov	r4, r0
 800791a:	4608      	mov	r0, r1
 800791c:	4611      	mov	r1, r2
 800791e:	2200      	movs	r2, #0
 8007920:	602a      	str	r2, [r5, #0]
 8007922:	461a      	mov	r2, r3
 8007924:	f7f9 ff15 	bl	8001752 <_read>
 8007928:	1c43      	adds	r3, r0, #1
 800792a:	d102      	bne.n	8007932 <_read_r+0x1e>
 800792c:	682b      	ldr	r3, [r5, #0]
 800792e:	b103      	cbz	r3, 8007932 <_read_r+0x1e>
 8007930:	6023      	str	r3, [r4, #0]
 8007932:	bd38      	pop	{r3, r4, r5, pc}
 8007934:	200003f4 	.word	0x200003f4

08007938 <__ascii_wctomb>:
 8007938:	b149      	cbz	r1, 800794e <__ascii_wctomb+0x16>
 800793a:	2aff      	cmp	r2, #255	; 0xff
 800793c:	bf85      	ittet	hi
 800793e:	238a      	movhi	r3, #138	; 0x8a
 8007940:	6003      	strhi	r3, [r0, #0]
 8007942:	700a      	strbls	r2, [r1, #0]
 8007944:	f04f 30ff 	movhi.w	r0, #4294967295
 8007948:	bf98      	it	ls
 800794a:	2001      	movls	r0, #1
 800794c:	4770      	bx	lr
 800794e:	4608      	mov	r0, r1
 8007950:	4770      	bx	lr

08007952 <abort>:
 8007952:	b508      	push	{r3, lr}
 8007954:	2006      	movs	r0, #6
 8007956:	f000 f82b 	bl	80079b0 <raise>
 800795a:	2001      	movs	r0, #1
 800795c:	f7f9 feef 	bl	800173e <_exit>

08007960 <_raise_r>:
 8007960:	291f      	cmp	r1, #31
 8007962:	b538      	push	{r3, r4, r5, lr}
 8007964:	4604      	mov	r4, r0
 8007966:	460d      	mov	r5, r1
 8007968:	d904      	bls.n	8007974 <_raise_r+0x14>
 800796a:	2316      	movs	r3, #22
 800796c:	6003      	str	r3, [r0, #0]
 800796e:	f04f 30ff 	mov.w	r0, #4294967295
 8007972:	bd38      	pop	{r3, r4, r5, pc}
 8007974:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007976:	b112      	cbz	r2, 800797e <_raise_r+0x1e>
 8007978:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800797c:	b94b      	cbnz	r3, 8007992 <_raise_r+0x32>
 800797e:	4620      	mov	r0, r4
 8007980:	f000 f830 	bl	80079e4 <_getpid_r>
 8007984:	462a      	mov	r2, r5
 8007986:	4601      	mov	r1, r0
 8007988:	4620      	mov	r0, r4
 800798a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800798e:	f000 b817 	b.w	80079c0 <_kill_r>
 8007992:	2b01      	cmp	r3, #1
 8007994:	d00a      	beq.n	80079ac <_raise_r+0x4c>
 8007996:	1c59      	adds	r1, r3, #1
 8007998:	d103      	bne.n	80079a2 <_raise_r+0x42>
 800799a:	2316      	movs	r3, #22
 800799c:	6003      	str	r3, [r0, #0]
 800799e:	2001      	movs	r0, #1
 80079a0:	e7e7      	b.n	8007972 <_raise_r+0x12>
 80079a2:	2400      	movs	r4, #0
 80079a4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80079a8:	4628      	mov	r0, r5
 80079aa:	4798      	blx	r3
 80079ac:	2000      	movs	r0, #0
 80079ae:	e7e0      	b.n	8007972 <_raise_r+0x12>

080079b0 <raise>:
 80079b0:	4b02      	ldr	r3, [pc, #8]	; (80079bc <raise+0xc>)
 80079b2:	4601      	mov	r1, r0
 80079b4:	6818      	ldr	r0, [r3, #0]
 80079b6:	f7ff bfd3 	b.w	8007960 <_raise_r>
 80079ba:	bf00      	nop
 80079bc:	2000000c 	.word	0x2000000c

080079c0 <_kill_r>:
 80079c0:	b538      	push	{r3, r4, r5, lr}
 80079c2:	4d07      	ldr	r5, [pc, #28]	; (80079e0 <_kill_r+0x20>)
 80079c4:	2300      	movs	r3, #0
 80079c6:	4604      	mov	r4, r0
 80079c8:	4608      	mov	r0, r1
 80079ca:	4611      	mov	r1, r2
 80079cc:	602b      	str	r3, [r5, #0]
 80079ce:	f7f9 fea6 	bl	800171e <_kill>
 80079d2:	1c43      	adds	r3, r0, #1
 80079d4:	d102      	bne.n	80079dc <_kill_r+0x1c>
 80079d6:	682b      	ldr	r3, [r5, #0]
 80079d8:	b103      	cbz	r3, 80079dc <_kill_r+0x1c>
 80079da:	6023      	str	r3, [r4, #0]
 80079dc:	bd38      	pop	{r3, r4, r5, pc}
 80079de:	bf00      	nop
 80079e0:	200003f4 	.word	0x200003f4

080079e4 <_getpid_r>:
 80079e4:	f7f9 be93 	b.w	800170e <_getpid>

080079e8 <_init>:
 80079e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ea:	bf00      	nop
 80079ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ee:	bc08      	pop	{r3}
 80079f0:	469e      	mov	lr, r3
 80079f2:	4770      	bx	lr

080079f4 <_fini>:
 80079f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079f6:	bf00      	nop
 80079f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079fa:	bc08      	pop	{r3}
 80079fc:	469e      	mov	lr, r3
 80079fe:	4770      	bx	lr
